
STM32CubeIDE_Dotmatrix_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002000  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022bc  080022bc  000122bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080022c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  080022d4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  080022d4  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e4d0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d8a  00000000  00000000  0002e50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000778  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000006c0  00000000  00000000  00030a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002dded  00000000  00000000  000310d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000082de  00000000  00000000  0005eebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a4fd  00000000  00000000  0006719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00191698  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b78  00000000  00000000  001916ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08002294 	.word	0x08002294

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08002294 	.word	0x08002294

080002ec <PowerOn_7_SEG_D1>:
#include "gpio.h"
#include "_7_seg.h"

void PowerOn_7_SEG_D1(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f6:	4802      	ldr	r0, [pc, #8]	; (8000300 <PowerOn_7_SEG_D1+0x14>)
 80002f8:	f000 fff8 	bl	80012ec <HAL_GPIO_WritePin>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	58021000 	.word	0x58021000

08000304 <PowerOff_7_SEG_D1>:
void PowerOff_7_SEG_D1(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <PowerOff_7_SEG_D1+0x14>)
 8000310:	f000 ffec 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	58021000 	.word	0x58021000

0800031c <PowerOn_7_SEG_D2>:
void PowerOn_7_SEG_D2(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, SET);
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000326:	4802      	ldr	r0, [pc, #8]	; (8000330 <PowerOn_7_SEG_D2+0x14>)
 8000328:	f000 ffe0 	bl	80012ec <HAL_GPIO_WritePin>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58021000 	.word	0x58021000

08000334 <PowerOff_7_SEG_D2>:
void PowerOff_7_SEG_D2(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033e:	4802      	ldr	r0, [pc, #8]	; (8000348 <PowerOff_7_SEG_D2+0x14>)
 8000340:	f000 ffd4 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	58021000 	.word	0x58021000

0800034c <PowerOn_7_SEG_D3>:
void PowerOn_7_SEG_D3(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, SET);
 8000350:	2201      	movs	r2, #1
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4802      	ldr	r0, [pc, #8]	; (8000360 <PowerOn_7_SEG_D3+0x14>)
 8000358:	f000 ffc8 	bl	80012ec <HAL_GPIO_WritePin>
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	58021000 	.word	0x58021000

08000364 <PowerOff_7_SEG_D3>:
void PowerOff_7_SEG_D3(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <PowerOff_7_SEG_D3+0x14>)
 8000370:	f000 ffbc 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58021000 	.word	0x58021000

0800037c <PowerOn_7_SEG_D4>:
void PowerOn_7_SEG_D4(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, SET);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000386:	4802      	ldr	r0, [pc, #8]	; (8000390 <PowerOn_7_SEG_D4+0x14>)
 8000388:	f000 ffb0 	bl	80012ec <HAL_GPIO_WritePin>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	58021000 	.word	0x58021000

08000394 <PowerOff_7_SEG_D4>:
void PowerOff_7_SEG_D4(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800039e:	4802      	ldr	r0, [pc, #8]	; (80003a8 <PowerOff_7_SEG_D4+0x14>)
 80003a0:	f000 ffa4 	bl	80012ec <HAL_GPIO_WritePin>
}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	58021000 	.word	0x58021000

080003ac <PowerOn_7_SEG_D5>:
void PowerOn_7_SEG_D5(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b6:	4802      	ldr	r0, [pc, #8]	; (80003c0 <PowerOn_7_SEG_D5+0x14>)
 80003b8:	f000 ff98 	bl	80012ec <HAL_GPIO_WritePin>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	58021000 	.word	0x58021000

080003c4 <PowerOff_7_SEG_D5>:
void PowerOff_7_SEG_D5(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ce:	4802      	ldr	r0, [pc, #8]	; (80003d8 <PowerOff_7_SEG_D5+0x14>)
 80003d0:	f000 ff8c 	bl	80012ec <HAL_GPIO_WritePin>
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	58021000 	.word	0x58021000

080003dc <PowerOn_7_SEG_D6>:
void PowerOn_7_SEG_D6(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4802      	ldr	r0, [pc, #8]	; (80003f0 <PowerOn_7_SEG_D6+0x14>)
 80003e8:	f000 ff80 	bl	80012ec <HAL_GPIO_WritePin>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	58021000 	.word	0x58021000

080003f4 <PowerOff_7_SEG_D6>:
void PowerOff_7_SEG_D6(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	4802      	ldr	r0, [pc, #8]	; (8000408 <PowerOff_7_SEG_D6+0x14>)
 8000400:	f000 ff74 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	58021000 	.word	0x58021000

0800040c <PowerOn_7_SEG_D7>:
void PowerOn_7_SEG_D7(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000416:	4802      	ldr	r0, [pc, #8]	; (8000420 <PowerOn_7_SEG_D7+0x14>)
 8000418:	f000 ff68 	bl	80012ec <HAL_GPIO_WritePin>
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	58021000 	.word	0x58021000

08000424 <PowerOff_7_SEG_D7>:
void PowerOff_7_SEG_D7(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800042e:	4802      	ldr	r0, [pc, #8]	; (8000438 <PowerOff_7_SEG_D7+0x14>)
 8000430:	f000 ff5c 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	58021000 	.word	0x58021000

0800043c <PowerOn_7_SEG_D8>:
void PowerOn_7_SEG_D8(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000446:	4802      	ldr	r0, [pc, #8]	; (8000450 <PowerOn_7_SEG_D8+0x14>)
 8000448:	f000 ff50 	bl	80012ec <HAL_GPIO_WritePin>
}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	58021000 	.word	0x58021000

08000454 <PowerOff_7_SEG_D8>:
void PowerOff_7_SEG_D8(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045e:	4802      	ldr	r0, [pc, #8]	; (8000468 <PowerOff_7_SEG_D8+0x14>)
 8000460:	f000 ff44 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	58021000 	.word	0x58021000

0800046c <PowerOn_7_SEG_A1>:
void PowerOn_7_SEG_A1(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2101      	movs	r1, #1
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <PowerOn_7_SEG_A1+0x14>)
 8000476:	f000 ff39 	bl	80012ec <HAL_GPIO_WritePin>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	58021000 	.word	0x58021000

08000484 <PowerOff_7_SEG_A1>:
void PowerOff_7_SEG_A1(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2101      	movs	r1, #1
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <PowerOff_7_SEG_A1+0x14>)
 800048e:	f000 ff2d 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	58021000 	.word	0x58021000

0800049c <PowerOn_7_SEG_A2>:
void PowerOn_7_SEG_A2(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2102      	movs	r1, #2
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <PowerOn_7_SEG_A2+0x14>)
 80004a6:	f000 ff21 	bl	80012ec <HAL_GPIO_WritePin>
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	58021000 	.word	0x58021000

080004b4 <PowerOff_7_SEG_A2>:
void PowerOff_7_SEG_A2(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2102      	movs	r1, #2
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <PowerOff_7_SEG_A2+0x14>)
 80004be:	f000 ff15 	bl	80012ec <HAL_GPIO_WritePin>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	58021000 	.word	0x58021000

080004cc <PowerOn_7_SEG_A3>:
void PowerOn_7_SEG_A3(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2104      	movs	r1, #4
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <PowerOn_7_SEG_A3+0x14>)
 80004d6:	f000 ff09 	bl	80012ec <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	58021000 	.word	0x58021000

080004e4 <PowerOff_7_SEG_A3>:
void PowerOff_7_SEG_A3(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <PowerOff_7_SEG_A3+0x14>)
 80004ee:	f000 fefd 	bl	80012ec <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	58021000 	.word	0x58021000

080004fc <PowerOn_7_SEG_A4>:
void PowerOn_7_SEG_A4(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <PowerOn_7_SEG_A4+0x14>)
 8000506:	f000 fef1 	bl	80012ec <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	58021000 	.word	0x58021000

08000514 <PowerOff_7_SEG_A4>:
void PowerOff_7_SEG_A4(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2108      	movs	r1, #8
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <PowerOff_7_SEG_A4+0x14>)
 800051e:	f000 fee5 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	58021000 	.word	0x58021000

0800052c <PowerOn_7_SEG_A5>:
void PowerOn_7_SEG_A5(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2110      	movs	r1, #16
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <PowerOn_7_SEG_A5+0x14>)
 8000536:	f000 fed9 	bl	80012ec <HAL_GPIO_WritePin>
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	58021000 	.word	0x58021000

08000544 <PowerOff_7_SEG_A5>:
void PowerOff_7_SEG_A5(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2110      	movs	r1, #16
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <PowerOff_7_SEG_A5+0x14>)
 800054e:	f000 fecd 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	58021000 	.word	0x58021000

0800055c <PowerOn_7_SEG_A6>:
void PowerOn_7_SEG_A6(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <PowerOn_7_SEG_A6+0x14>)
 8000566:	f000 fec1 	bl	80012ec <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	58021000 	.word	0x58021000

08000574 <PowerOff_7_SEG_A6>:
void PowerOff_7_SEG_A6(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2120      	movs	r1, #32
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <PowerOff_7_SEG_A6+0x14>)
 800057e:	f000 feb5 	bl	80012ec <HAL_GPIO_WritePin>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	58021000 	.word	0x58021000

0800058c <PowerOn_7_SEG_A7>:
void PowerOn_7_SEG_A7(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <PowerOn_7_SEG_A7+0x14>)
 8000596:	f000 fea9 	bl	80012ec <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	58021000 	.word	0x58021000

080005a4 <PowerOff_7_SEG_A7>:
void PowerOff_7_SEG_A7(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <PowerOff_7_SEG_A7+0x14>)
 80005ae:	f000 fe9d 	bl	80012ec <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	58021000 	.word	0x58021000

080005bc <PowerOn_7_SEG_A8>:
void PowerOn_7_SEG_A8(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <PowerOn_7_SEG_A8+0x14>)
 80005c6:	f000 fe91 	bl	80012ec <HAL_GPIO_WritePin>
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	58021000 	.word	0x58021000

080005d4 <PowerOff_7_SEG_A8>:
void PowerOff_7_SEG_A8(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2180      	movs	r1, #128	; 0x80
 80005dc:	4802      	ldr	r0, [pc, #8]	; (80005e8 <PowerOff_7_SEG_A8+0x14>)
 80005de:	f000 fe85 	bl	80012ec <HAL_GPIO_WritePin>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	58021000 	.word	0x58021000

080005ec <PowerOff_All>:
void PowerOff_All(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	PowerOff_7_SEG_A1();
 80005f0:	f7ff ff48 	bl	8000484 <PowerOff_7_SEG_A1>
	PowerOff_7_SEG_A2();
 80005f4:	f7ff ff5e 	bl	80004b4 <PowerOff_7_SEG_A2>
	PowerOff_7_SEG_A3();
 80005f8:	f7ff ff74 	bl	80004e4 <PowerOff_7_SEG_A3>
	PowerOff_7_SEG_A4();
 80005fc:	f7ff ff8a 	bl	8000514 <PowerOff_7_SEG_A4>
	PowerOff_7_SEG_A5();
 8000600:	f7ff ffa0 	bl	8000544 <PowerOff_7_SEG_A5>
	PowerOff_7_SEG_A6();
 8000604:	f7ff ffb6 	bl	8000574 <PowerOff_7_SEG_A6>
	PowerOff_7_SEG_A7();
 8000608:	f7ff ffcc 	bl	80005a4 <PowerOff_7_SEG_A7>
	PowerOff_7_SEG_A8();
 800060c:	f7ff ffe2 	bl	80005d4 <PowerOff_7_SEG_A8>
	PowerOff_7_SEG_D1();
 8000610:	f7ff fe78 	bl	8000304 <PowerOff_7_SEG_D1>
	PowerOff_7_SEG_D2();
 8000614:	f7ff fe8e 	bl	8000334 <PowerOff_7_SEG_D2>
	PowerOff_7_SEG_D3();
 8000618:	f7ff fea4 	bl	8000364 <PowerOff_7_SEG_D3>
	PowerOff_7_SEG_D4();
 800061c:	f7ff feba 	bl	8000394 <PowerOff_7_SEG_D4>
	PowerOff_7_SEG_D5();
 8000620:	f7ff fed0 	bl	80003c4 <PowerOff_7_SEG_D5>
	PowerOff_7_SEG_D6();
 8000624:	f7ff fee6 	bl	80003f4 <PowerOff_7_SEG_D6>
	PowerOff_7_SEG_D7();
 8000628:	f7ff fefc 	bl	8000424 <PowerOff_7_SEG_D7>
	PowerOff_7_SEG_D8();
 800062c:	f7ff ff12 	bl	8000454 <PowerOff_7_SEG_D8>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <Dot_left>:
void Dot_left(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
	for(int i=0; i<50; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e082      	b.n	8000746 <Dot_left+0x112>
	{
		PowerOn_7_SEG_D1();
 8000640:	f7ff fe54 	bl	80002ec <PowerOn_7_SEG_D1>
		  PowerOn_7_SEG_D5();
 8000644:	f7ff feb2 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 8000648:	f7ff ff40 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 800064c:	f7ff ff56 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D3();
 8000650:	f7ff fe7c 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 8000654:	f7ff feda 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 8000658:	f7ff fef0 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fb75 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 8000662:	f7ff ffc3 	bl	80005ec <PowerOff_All>


		  PowerOn_7_SEG_D6();
 8000666:	f7ff feb9 	bl	80003dc <PowerOn_7_SEG_D6>
		  PowerOn_7_SEG_D5();
 800066a:	f7ff fe9f 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 800066e:	f7ff ff2d 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A6();
 8000672:	f7ff ff73 	bl	800055c <PowerOn_7_SEG_A6>
		  PowerOn_7_SEG_D3();
 8000676:	f7ff fe69 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 800067a:	f7ff fec7 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 800067e:	f7ff fedd 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fb62 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 8000688:	f7ff ffb0 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A8();
 800068c:	f7ff ff96 	bl	80005bc <PowerOn_7_SEG_A8>
		  PowerOn_7_SEG_D5();
 8000690:	f7ff fe8c 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_D2();
 8000694:	f7ff fe42 	bl	800031c <PowerOn_7_SEG_D2>
		  PowerOn_7_SEG_A6();
 8000698:	f7ff ff60 	bl	800055c <PowerOn_7_SEG_A6>
		  PowerOn_7_SEG_D3();
 800069c:	f7ff fe56 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 80006a0:	f7ff feb4 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 80006a4:	f7ff feca 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fb4f 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80006ae:	f7ff ff9d 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_D4();
 80006b2:	f7ff fe63 	bl	800037c <PowerOn_7_SEG_D4>
		  HAL_Delay(0);
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 fb48 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80006bc:	f7ff ff96 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A1();
 80006c0:	f7ff fed4 	bl	800046c <PowerOn_7_SEG_A1>
		  HAL_Delay(0);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fb41 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80006ca:	f7ff ff8f 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A7();
 80006ce:	f7ff ff5d 	bl	800058c <PowerOn_7_SEG_A7>
		  PowerOn_7_SEG_D5();
 80006d2:	f7ff fe6b 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_D2();
 80006d6:	f7ff fe21 	bl	800031c <PowerOn_7_SEG_D2>
		  PowerOn_7_SEG_A6();
 80006da:	f7ff ff3f 	bl	800055c <PowerOn_7_SEG_A6>
		  PowerOn_7_SEG_D3();
 80006de:	f7ff fe35 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 80006e2:	f7ff fe93 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 80006e6:	f7ff fea9 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 fb2e 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80006f0:	f7ff ff7c 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A2();
 80006f4:	f7ff fed2 	bl	800049c <PowerOn_7_SEG_A2>
		  PowerOn_7_SEG_D5();
 80006f8:	f7ff fe58 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 80006fc:	f7ff fee6 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A6();
 8000700:	f7ff ff2c 	bl	800055c <PowerOn_7_SEG_A6>
		  PowerOn_7_SEG_D3();
 8000704:	f7ff fe22 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 8000708:	f7ff fe80 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 800070c:	f7ff fe96 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fb1b 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 8000716:	f7ff ff69 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A5();
 800071a:	f7ff ff07 	bl	800052c <PowerOn_7_SEG_A5>
		  PowerOn_7_SEG_D5();
 800071e:	f7ff fe45 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 8000722:	f7ff fed3 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 8000726:	f7ff fee9 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D3();
 800072a:	f7ff fe0f 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 800072e:	f7ff fe6d 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 8000732:	f7ff fe83 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fb08 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 800073c:	f7ff ff56 	bl	80005ec <PowerOff_All>
	for(int i=0; i<50; i++)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3301      	adds	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b31      	cmp	r3, #49	; 0x31
 800074a:	f77f af79 	ble.w	8000640 <Dot_left+0xc>
	}
	HAL_Delay(500);
 800074e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000752:	f000 fafb 	bl	8000d4c <HAL_Delay>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <Dot_right>:

void Dot_right(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
	for(int i=0; i<50; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	e082      	b.n	8000870 <Dot_right+0x112>
	{
		  PowerOn_7_SEG_D1();
 800076a:	f7ff fdbf 	bl	80002ec <PowerOn_7_SEG_D1>
		  PowerOn_7_SEG_D5();
 800076e:	f7ff fe1d 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 8000772:	f7ff feab 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 8000776:	f7ff fec1 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D3();
 800077a:	f7ff fde7 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 800077e:	f7ff fe45 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 8000782:	f7ff fe5b 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 8000786:	2000      	movs	r0, #0
 8000788:	f000 fae0 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 800078c:	f7ff ff2e 	bl	80005ec <PowerOff_All>


		  PowerOn_7_SEG_D6();
 8000790:	f7ff fe24 	bl	80003dc <PowerOn_7_SEG_D6>
		  PowerOn_7_SEG_D5();
 8000794:	f7ff fe0a 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 8000798:	f7ff fe98 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 800079c:	f7ff feae 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D2();
 80007a0:	f7ff fdbc 	bl	800031c <PowerOn_7_SEG_D2>
		  PowerOn_7_SEG_D7();
 80007a4:	f7ff fe32 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 80007a8:	f7ff fe48 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 facd 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80007b2:	f7ff ff1b 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A8();
 80007b6:	f7ff ff01 	bl	80005bc <PowerOn_7_SEG_A8>
		  PowerOn_7_SEG_D5();
 80007ba:	f7ff fdf7 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 80007be:	f7ff fe85 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 80007c2:	f7ff fe9b 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D2();
 80007c6:	f7ff fda9 	bl	800031c <PowerOn_7_SEG_D2>
		  PowerOn_7_SEG_A6();
 80007ca:	f7ff fec7 	bl	800055c <PowerOn_7_SEG_A6>
		  PowerOn_7_SEG_D8();
 80007ce:	f7ff fe35 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 faba 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80007d8:	f7ff ff08 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_D4();
 80007dc:	f7ff fdce 	bl	800037c <PowerOn_7_SEG_D4>
		  HAL_Delay(0);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fab3 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80007e6:	f7ff ff01 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A1();
 80007ea:	f7ff fe3f 	bl	800046c <PowerOn_7_SEG_A1>
		  HAL_Delay(0);
 80007ee:	2000      	movs	r0, #0
 80007f0:	f000 faac 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 80007f4:	f7ff fefa 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A7();
 80007f8:	f7ff fec8 	bl	800058c <PowerOn_7_SEG_A7>
		  PowerOn_7_SEG_D5();
 80007fc:	f7ff fdd6 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 8000800:	f7ff fe64 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 8000804:	f7ff fe7a 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D2();
 8000808:	f7ff fd88 	bl	800031c <PowerOn_7_SEG_D2>
		  PowerOn_7_SEG_A6();
 800080c:	f7ff fea6 	bl	800055c <PowerOn_7_SEG_A6>
		  PowerOn_7_SEG_D8();
 8000810:	f7ff fe14 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 8000814:	2000      	movs	r0, #0
 8000816:	f000 fa99 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 800081a:	f7ff fee7 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A2();
 800081e:	f7ff fe3d 	bl	800049c <PowerOn_7_SEG_A2>
		  PowerOn_7_SEG_D5();
 8000822:	f7ff fdc3 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 8000826:	f7ff fe51 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 800082a:	f7ff fe67 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D2();
 800082e:	f7ff fd75 	bl	800031c <PowerOn_7_SEG_D2>
		  PowerOn_7_SEG_D7();
 8000832:	f7ff fdeb 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 8000836:	f7ff fe01 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 800083a:	2000      	movs	r0, #0
 800083c:	f000 fa86 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 8000840:	f7ff fed4 	bl	80005ec <PowerOff_All>

		  PowerOn_7_SEG_A5();
 8000844:	f7ff fe72 	bl	800052c <PowerOn_7_SEG_A5>
		  PowerOn_7_SEG_D5();
 8000848:	f7ff fdb0 	bl	80003ac <PowerOn_7_SEG_D5>
		  PowerOn_7_SEG_A3();
 800084c:	f7ff fe3e 	bl	80004cc <PowerOn_7_SEG_A3>
		  PowerOn_7_SEG_A4();
 8000850:	f7ff fe54 	bl	80004fc <PowerOn_7_SEG_A4>
		  PowerOn_7_SEG_D3();
 8000854:	f7ff fd7a 	bl	800034c <PowerOn_7_SEG_D3>
		  PowerOn_7_SEG_D7();
 8000858:	f7ff fdd8 	bl	800040c <PowerOn_7_SEG_D7>
		  PowerOn_7_SEG_D8();
 800085c:	f7ff fdee 	bl	800043c <PowerOn_7_SEG_D8>
		  HAL_Delay(0);
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fa73 	bl	8000d4c <HAL_Delay>
		  PowerOff_All();
 8000866:	f7ff fec1 	bl	80005ec <PowerOff_All>
	for(int i=0; i<50; i++)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3301      	adds	r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b31      	cmp	r3, #49	; 0x31
 8000874:	f77f af79 	ble.w	800076a <Dot_right+0xc>
	}
	HAL_Delay(500);
 8000878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800087c:	f000 fa66 	bl	8000d4c <HAL_Delay>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a4:	4a2a      	ldr	r2, [pc, #168]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b4:	f003 0310 	and.w	r3, r3, #16
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008bc:	4b24      	ldr	r3, [pc, #144]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c2:	4a23      	ldr	r2, [pc, #140]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_GPIO_Init+0xc8>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008f8:	2200      	movs	r2, #0
 80008fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008fe:	4815      	ldr	r0, [pc, #84]	; (8000954 <MX_GPIO_Init+0xcc>)
 8000900:	f000 fcf4 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2101      	movs	r1, #1
 8000908:	4813      	ldr	r0, [pc, #76]	; (8000958 <MX_GPIO_Init+0xd0>)
 800090a:	f000 fcef 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4619      	mov	r1, r3
 8000926:	480b      	ldr	r0, [pc, #44]	; (8000954 <MX_GPIO_Init+0xcc>)
 8000928:	f000 fb18 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800092c:	2301      	movs	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0xd0>)
 8000944:	f000 fb0a 	bl	8000f5c <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	58024400 	.word	0x58024400
 8000954:	58021000 	.word	0x58021000
 8000958:	58020000 	.word	0x58020000

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 f962 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f818 	bl	8000998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f7ff ff8e 	bl	8000888 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1)
 800096c:	2101      	movs	r1, #1
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <main+0x38>)
 8000970:	f000 fca4 	bl	80012bc <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <main+0x22>
	  {
		  Dot_right();
 800097a:	f7ff fef0 	bl	800075e <Dot_right>
	  }
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==0)
 800097e:	2101      	movs	r1, #1
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <main+0x38>)
 8000982:	f000 fc9b 	bl	80012bc <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1ef      	bne.n	800096c <main+0x10>
	  {
		  Dot_left();
 800098c:	f7ff fe52 	bl	8000634 <Dot_left>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1)
 8000990:	e7ec      	b.n	800096c <main+0x10>
 8000992:	bf00      	nop
 8000994:	58020000 	.word	0x58020000

08000998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09c      	sub	sp, #112	; 0x70
 800099c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	224c      	movs	r2, #76	; 0x4c
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fc6c 	bl	8002284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2220      	movs	r2, #32
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fc66 	bl	8002284 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009b8:	2004      	movs	r0, #4
 80009ba:	f000 fcb1 	bl	8001320 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <SystemClock_Config+0xb4>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <SystemClock_Config+0xb4>)
 80009c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <SystemClock_Config+0xb4>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009da:	bf00      	nop
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemClock_Config+0xb4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e8:	d1f8      	bne.n	80009dc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ea:	2302      	movs	r3, #2
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009ee:	2301      	movs	r3, #1
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f2:	2340      	movs	r3, #64	; 0x40
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fce8 	bl	80013d4 <HAL_RCC_OscConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a0a:	f000 f821 	bl	8000a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0e:	233f      	movs	r3, #63	; 0x3f
 8000a10:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2102      	movs	r1, #2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 f8d2 	bl	8001bdc <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a3e:	f000 f807 	bl	8000a50 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3770      	adds	r7, #112	; 0x70
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	58024800 	.word	0x58024800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>
	...

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_MspInit+0x30>)
 8000a64:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a68:	4a08      	ldr	r2, [pc, #32]	; (8000a8c <HAL_MspInit+0x30>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_MspInit+0x30>)
 8000a74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	58024400 	.word	0x58024400

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f916 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <SystemInit+0xd0>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a31      	ldr	r2, [pc, #196]	; (8000bb4 <SystemInit+0xd0>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <SystemInit+0xd4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d807      	bhi.n	8000b14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <SystemInit+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f023 030f 	bic.w	r3, r3, #15
 8000b0c:	4a2a      	ldr	r2, [pc, #168]	; (8000bb8 <SystemInit+0xd4>)
 8000b0e:	f043 0303 	orr.w	r3, r3, #3
 8000b12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <SystemInit+0xd8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <SystemInit+0xd8>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <SystemInit+0xd8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <SystemInit+0xd8>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4924      	ldr	r1, [pc, #144]	; (8000bbc <SystemInit+0xd8>)
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <SystemInit+0xdc>)
 8000b2e:	4013      	ands	r3, r2
 8000b30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <SystemInit+0xd4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 030c 	and.w	r3, r3, #12
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d007      	beq.n	8000b4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <SystemInit+0xd4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f023 030f 	bic.w	r3, r3, #15
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <SystemInit+0xd4>)
 8000b48:	f043 0303 	orr.w	r3, r3, #3
 8000b4c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <SystemInit+0xd8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <SystemInit+0xd8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <SystemInit+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <SystemInit+0xd8>)
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <SystemInit+0xe0>)
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <SystemInit+0xd8>)
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <SystemInit+0xe4>)
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <SystemInit+0xd8>)
 8000b6e:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <SystemInit+0xe8>)
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SystemInit+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <SystemInit+0xd8>)
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <SystemInit+0xe8>)
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <SystemInit+0xd8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <SystemInit+0xd8>)
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <SystemInit+0xe8>)
 8000b88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <SystemInit+0xd8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <SystemInit+0xd8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <SystemInit+0xd8>)
 8000b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <SystemInit+0xd8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <SystemInit+0xec>)
 8000ba4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ba8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00
 8000bb8:	52002000 	.word	0x52002000
 8000bbc:	58024400 	.word	0x58024400
 8000bc0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bc4:	02020200 	.word	0x02020200
 8000bc8:	01ff0000 	.word	0x01ff0000
 8000bcc:	01010280 	.word	0x01010280
 8000bd0:	52004000 	.word	0x52004000

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd8:	f7ff ff84 	bl	8000ae4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bde:	490d      	ldr	r1, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	; (8000c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f001 fb1b 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fea9 	bl	800095c <main>
  bx  lr
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c14:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c18:	080022c4 	.word	0x080022c4
  ldr r2, =_sbss
 8000c1c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c20:	24000030 	.word	0x24000030

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f962 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000c34:	f001 f988 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_Init+0x68>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	0a1b      	lsrs	r3, r3, #8
 8000c40:	f003 030f 	and.w	r3, r3, #15
 8000c44:	4913      	ldr	r1, [pc, #76]	; (8000c94 <HAL_Init+0x6c>)
 8000c46:	5ccb      	ldrb	r3, [r1, r3]
 8000c48:	f003 031f 	and.w	r3, r3, #31
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_Init+0x68>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_Init+0x6c>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	f003 031f 	and.w	r3, r3, #31
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	fa22 f303 	lsr.w	r3, r2, r3
 8000c68:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <HAL_Init+0x70>)
 8000c6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <HAL_Init+0x74>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f814 	bl	8000ca0 <HAL_InitTick>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e002      	b.n	8000c88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c82:	f7ff feeb 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	58024400 	.word	0x58024400
 8000c94:	080022ac 	.word	0x080022ac
 8000c98:	24000004 	.word	0x24000004
 8000c9c:	24000000 	.word	0x24000000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_InitTick+0x60>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d101      	bne.n	8000cb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e021      	b.n	8000cf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_InitTick+0x64>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_InitTick+0x60>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f939 	bl	8000f42 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 f911 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_InitTick+0x68>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	2400000c 	.word	0x2400000c
 8000d04:	24000000 	.word	0x24000000
 8000d08:	24000008 	.word	0x24000008

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	2400000c 	.word	0x2400000c
 8000d30:	2400002c 	.word	0x2400002c

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2400002c 	.word	0x2400002c

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff ffee 	bl	8000d34 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffde 	bl	8000d34 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2400000c 	.word	0x2400000c

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc2:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	60d3      	str	r3, [r2, #12]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr
 8000dd4:	e000ed00 	.word	0xe000ed00
 8000dd8:	05fa0000 	.word	0x05fa0000

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff47 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff5e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff90 	bl	8000e4c <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5f 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffb2 	bl	8000eb4 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f6a:	4b89      	ldr	r3, [pc, #548]	; (8001190 <HAL_GPIO_Init+0x234>)
 8000f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f6e:	e194      	b.n	800129a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2101      	movs	r1, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8186 	beq.w	8001294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d005      	beq.n	8000fa0 <HAL_GPIO_Init+0x44>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d130      	bne.n	8001002 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68da      	ldr	r2, [r3, #12]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 0201 	and.w	r2, r3, #1
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
 800100a:	2b03      	cmp	r3, #3
 800100c:	d017      	beq.n	800103e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d123      	bne.n	8001092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	220f      	movs	r2, #15
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	69b9      	ldr	r1, [r7, #24]
 800108e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 0203 	and.w	r2, r3, #3
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80e0 	beq.w	8001294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x238>)
 80010d6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010da:	4a2e      	ldr	r2, [pc, #184]	; (8001194 <HAL_GPIO_Init+0x238>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_GPIO_Init+0x238>)
 80010e6:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_GPIO_Init+0x23c>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_GPIO_Init+0x240>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d052      	beq.n	80011c4 <HAL_GPIO_Init+0x268>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <HAL_GPIO_Init+0x244>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d031      	beq.n	800118a <HAL_GPIO_Init+0x22e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_GPIO_Init+0x248>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d02b      	beq.n	8001186 <HAL_GPIO_Init+0x22a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_GPIO_Init+0x24c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d025      	beq.n	8001182 <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <HAL_GPIO_Init+0x250>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d01f      	beq.n	800117e <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <HAL_GPIO_Init+0x254>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d019      	beq.n	800117a <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <HAL_GPIO_Init+0x258>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d013      	beq.n	8001176 <HAL_GPIO_Init+0x21a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_GPIO_Init+0x25c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d00d      	beq.n	8001172 <HAL_GPIO_Init+0x216>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x260>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d007      	beq.n	800116e <HAL_GPIO_Init+0x212>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_GPIO_Init+0x264>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_GPIO_Init+0x20e>
 8001166:	2309      	movs	r3, #9
 8001168:	e02d      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800116a:	230a      	movs	r3, #10
 800116c:	e02b      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800116e:	2308      	movs	r3, #8
 8001170:	e029      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001172:	2307      	movs	r3, #7
 8001174:	e027      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001176:	2306      	movs	r3, #6
 8001178:	e025      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800117a:	2305      	movs	r3, #5
 800117c:	e023      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800117e:	2304      	movs	r3, #4
 8001180:	e021      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001182:	2303      	movs	r3, #3
 8001184:	e01f      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 8001186:	2302      	movs	r3, #2
 8001188:	e01d      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800118a:	2301      	movs	r3, #1
 800118c:	e01b      	b.n	80011c6 <HAL_GPIO_Init+0x26a>
 800118e:	bf00      	nop
 8001190:	58000080 	.word	0x58000080
 8001194:	58024400 	.word	0x58024400
 8001198:	58000400 	.word	0x58000400
 800119c:	58020000 	.word	0x58020000
 80011a0:	58020400 	.word	0x58020400
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58020c00 	.word	0x58020c00
 80011ac:	58021000 	.word	0x58021000
 80011b0:	58021400 	.word	0x58021400
 80011b4:	58021800 	.word	0x58021800
 80011b8:	58021c00 	.word	0x58021c00
 80011bc:	58022000 	.word	0x58022000
 80011c0:	58022400 	.word	0x58022400
 80011c4:	2300      	movs	r3, #0
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	f002 0203 	and.w	r2, r2, #3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4093      	lsls	r3, r2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d6:	4938      	ldr	r1, [pc, #224]	; (80012b8 <HAL_GPIO_Init+0x35c>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800120a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa22 f303 	lsr.w	r3, r2, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f47f ae63 	bne.w	8000f70 <HAL_GPIO_Init+0x14>
  }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	; 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58000400 	.word	0x58000400

080012bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e001      	b.n	80012de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	2b06      	cmp	r3, #6
 8001332:	d00a      	beq.n	800134a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e040      	b.n	80013c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e03e      	b.n	80013c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001352:	491f      	ldr	r1, [pc, #124]	; (80013d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800135a:	f7ff fceb 	bl	8000d34 <HAL_GetTick>
 800135e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001360:	e009      	b.n	8001376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001362:	f7ff fce7 	bl	8000d34 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001370:	d901      	bls.n	8001376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e028      	b.n	80013c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001382:	d1ee      	bne.n	8001362 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b1e      	cmp	r3, #30
 8001388:	d008      	beq.n	800139c <HAL_PWREx_ConfigSupply+0x7c>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b2e      	cmp	r3, #46	; 0x2e
 800138e:	d005      	beq.n	800139c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b1d      	cmp	r3, #29
 8001394:	d002      	beq.n	800139c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b2d      	cmp	r3, #45	; 0x2d
 800139a:	d114      	bne.n	80013c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800139c:	f7ff fcca 	bl	8000d34 <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013a2:	e009      	b.n	80013b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013a4:	f7ff fcc6 	bl	8000d34 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b2:	d901      	bls.n	80013b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e007      	b.n	80013c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d1ee      	bne.n	80013a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58024800 	.word	0x58024800

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e3f3      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80b3 	beq.w	800155a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f4:	4b9e      	ldr	r3, [pc, #632]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013fe:	4b9c      	ldr	r3, [pc, #624]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	2b10      	cmp	r3, #16
 8001408:	d007      	beq.n	800141a <HAL_RCC_OscConfig+0x46>
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	2b18      	cmp	r3, #24
 800140e:	d112      	bne.n	8001436 <HAL_RCC_OscConfig+0x62>
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d10d      	bne.n	8001436 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	4b95      	ldr	r3, [pc, #596]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	f000 8098 	beq.w	8001558 <HAL_RCC_OscConfig+0x184>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 8093 	bne.w	8001558 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e3cb      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143e:	d106      	bne.n	800144e <HAL_RCC_OscConfig+0x7a>
 8001440:	4b8b      	ldr	r3, [pc, #556]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a8a      	ldr	r2, [pc, #552]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	e058      	b.n	8001500 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d112      	bne.n	800147c <HAL_RCC_OscConfig+0xa8>
 8001456:	4b86      	ldr	r3, [pc, #536]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a85      	ldr	r2, [pc, #532]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800145c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b83      	ldr	r3, [pc, #524]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a82      	ldr	r2, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001468:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b80      	ldr	r3, [pc, #512]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a7f      	ldr	r2, [pc, #508]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e041      	b.n	8001500 <HAL_RCC_OscConfig+0x12c>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d112      	bne.n	80014ac <HAL_RCC_OscConfig+0xd8>
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a79      	ldr	r2, [pc, #484]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b77      	ldr	r3, [pc, #476]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a76      	ldr	r2, [pc, #472]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001498:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b74      	ldr	r3, [pc, #464]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a73      	ldr	r2, [pc, #460]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e029      	b.n	8001500 <HAL_RCC_OscConfig+0x12c>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80014b4:	d112      	bne.n	80014dc <HAL_RCC_OscConfig+0x108>
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6d      	ldr	r2, [pc, #436]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b6b      	ldr	r3, [pc, #428]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6a      	ldr	r2, [pc, #424]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a67      	ldr	r2, [pc, #412]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e011      	b.n	8001500 <HAL_RCC_OscConfig+0x12c>
 80014dc:	4b64      	ldr	r3, [pc, #400]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b61      	ldr	r3, [pc, #388]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a60      	ldr	r2, [pc, #384]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a5d      	ldr	r2, [pc, #372]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80014fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d013      	beq.n	8001530 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc14 	bl	8000d34 <HAL_GetTick>
 800150c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc10 	bl	8000d34 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e355      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001522:	4b53      	ldr	r3, [pc, #332]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x13c>
 800152e:	e014      	b.n	800155a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff fc00 	bl	8000d34 <HAL_GetTick>
 8001534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff fbfc 	bl	8000d34 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e341      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x164>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 808c 	beq.w	8001680 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001570:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001572:	4b3f      	ldr	r3, [pc, #252]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <HAL_RCC_OscConfig+0x1ba>
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2b18      	cmp	r3, #24
 8001582:	d137      	bne.n	80015f4 <HAL_RCC_OscConfig+0x220>
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b00      	cmp	r3, #0
 800158c:	d132      	bne.n	80015f4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1d2>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e313      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0219 	bic.w	r2, r3, #25
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	492f      	ldr	r1, [pc, #188]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015b8:	f7ff fbbc 	bl	8000d34 <HAL_GetTick>
 80015bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fbb8 	bl	8000d34 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e2fd      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b24      	ldr	r3, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	061b      	lsls	r3, r3, #24
 80015ec:	4920      	ldr	r1, [pc, #128]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f2:	e045      	b.n	8001680 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d026      	beq.n	800164a <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 0219 	bic.w	r2, r3, #25
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4919      	ldr	r1, [pc, #100]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fb91 	bl	8000d34 <HAL_GetTick>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fb8d 	bl	8000d34 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e2d2      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	490b      	ldr	r1, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
 8001648:	e01a      	b.n	8001680 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_RCC_OscConfig+0x29c>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fb6d 	bl	8000d34 <HAL_GetTick>
 800165a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff fb69 	bl	8000d34 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d903      	bls.n	8001674 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e2ae      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
 8001670:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001674:	4b99      	ldr	r3, [pc, #612]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ee      	bne.n	800165e <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	d06a      	beq.n	8001762 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800168c:	4b93      	ldr	r3, [pc, #588]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001694:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001696:	4b91      	ldr	r3, [pc, #580]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d007      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2de>
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b18      	cmp	r3, #24
 80016a6:	d11b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x30c>
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016b2:	4b8a      	ldr	r3, [pc, #552]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b80      	cmp	r3, #128	; 0x80
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e281      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ca:	4b84      	ldr	r3, [pc, #528]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	061b      	lsls	r3, r3, #24
 80016d8:	4980      	ldr	r1, [pc, #512]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016de:	e040      	b.n	8001762 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016e8:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a7b      	ldr	r2, [pc, #492]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80016ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb1e 	bl	8000d34 <HAL_GetTick>
 80016f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016fc:	f7ff fb1a 	bl	8000d34 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e25f      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800171a:	4b70      	ldr	r3, [pc, #448]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	061b      	lsls	r3, r3, #24
 8001728:	496c      	ldr	r1, [pc, #432]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800172a:	4313      	orrs	r3, r2
 800172c:	60cb      	str	r3, [r1, #12]
 800172e:	e018      	b.n	8001762 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001730:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800173a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fafa 	bl	8000d34 <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001744:	f7ff faf6 	bl	8000d34 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e23b      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001756:	4b61      	ldr	r3, [pc, #388]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d036      	beq.n	80017dc <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fad7 	bl	8000d34 <HAL_GetTick>
 8001786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fad3 	bl	8000d34 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e218      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179c:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x3b6>
 80017a8:	e018      	b.n	80017dc <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	4a4b      	ldr	r2, [pc, #300]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fabd 	bl	8000d34 <HAL_GetTick>
 80017ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fab9 	bl	8000d34 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1fe      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d0:	4b42      	ldr	r3, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f0      	bne.n	80017be <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d036      	beq.n	8001856 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d019      	beq.n	8001824 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017f0:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a39      	ldr	r2, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80017f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa9a 	bl	8000d34 <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001804:	f7ff fa96 	bl	8000d34 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1db      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001816:	4b31      	ldr	r3, [pc, #196]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x430>
 8001822:	e018      	b.n	8001856 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a2c      	ldr	r2, [pc, #176]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800182a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800182e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001830:	f7ff fa80 	bl	8000d34 <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001838:	f7ff fa7c 	bl	8000d34 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e1c1      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80af 	beq.w	80019c2 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_OscConfig+0x50c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_RCC_OscConfig+0x50c>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001870:	f7ff fa60 	bl	8000d34 <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001878:	f7ff fa5c 	bl	8000d34 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1a1      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_RCC_OscConfig+0x50c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d106      	bne.n	80018ac <HAL_RCC_OscConfig+0x4d8>
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6713      	str	r3, [r2, #112]	; 0x70
 80018aa:	e05b      	b.n	8001964 <HAL_RCC_OscConfig+0x590>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d117      	bne.n	80018e4 <HAL_RCC_OscConfig+0x510>
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a08      	ldr	r2, [pc, #32]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c4:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ca:	6713      	str	r3, [r2, #112]	; 0x70
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	4a02      	ldr	r2, [pc, #8]	; (80018dc <HAL_RCC_OscConfig+0x508>)
 80018d2:	f023 0304 	bic.w	r3, r3, #4
 80018d6:	6713      	str	r3, [r2, #112]	; 0x70
 80018d8:	e044      	b.n	8001964 <HAL_RCC_OscConfig+0x590>
 80018da:	bf00      	nop
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58024800 	.word	0x58024800
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x53e>
 80018ec:	4b95      	ldr	r3, [pc, #596]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a94      	ldr	r2, [pc, #592]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a91      	ldr	r2, [pc, #580]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80018fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a8e      	ldr	r2, [pc, #568]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
 8001910:	e028      	b.n	8001964 <HAL_RCC_OscConfig+0x590>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b85      	cmp	r3, #133	; 0x85
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x56c>
 800191a:	4b8a      	ldr	r3, [pc, #552]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a89      	ldr	r2, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	4b87      	ldr	r3, [pc, #540]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	4a86      	ldr	r2, [pc, #536]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800192c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001930:	6713      	str	r3, [r2, #112]	; 0x70
 8001932:	4b84      	ldr	r3, [pc, #528]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a83      	ldr	r2, [pc, #524]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	e011      	b.n	8001964 <HAL_RCC_OscConfig+0x590>
 8001940:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	4a7f      	ldr	r2, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	6713      	str	r3, [r2, #112]	; 0x70
 800194c:	4b7d      	ldr	r3, [pc, #500]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001950:	4a7c      	ldr	r2, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001952:	f023 0304 	bic.w	r3, r3, #4
 8001956:	6713      	str	r3, [r2, #112]	; 0x70
 8001958:	4b7a      	ldr	r3, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a79      	ldr	r2, [pc, #484]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800195e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d015      	beq.n	8001998 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196c:	f7ff f9e2 	bl	8000d34 <HAL_GetTick>
 8001970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001972:	e00a      	b.n	800198a <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001974:	f7ff f9de 	bl	8000d34 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e121      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800198a:	4b6e      	ldr	r3, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ee      	beq.n	8001974 <HAL_RCC_OscConfig+0x5a0>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff f9cc 	bl	8000d34 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a0:	f7ff f9c8 	bl	8000d34 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e10b      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80019b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1ee      	bne.n	80019a0 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8100 	beq.w	8001bcc <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019cc:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019d4:	2b18      	cmp	r3, #24
 80019d6:	f000 80bb 	beq.w	8001b50 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2b02      	cmp	r3, #2
 80019e0:	f040 8095 	bne.w	8001b0e <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b57      	ldr	r3, [pc, #348]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 80019ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f9a0 	bl	8000d34 <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f99c 	bl	8000d34 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0e1      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a0a:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x774>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	4946      	ldr	r1, [pc, #280]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	628b      	str	r3, [r1, #40]	; 0x28
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	3b01      	subs	r3, #1
 8001a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	025b      	lsls	r3, r3, #9
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a60:	4938      	ldr	r1, [pc, #224]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	4a36      	ldr	r2, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a76:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_RCC_OscConfig+0x778>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a7e:	00d2      	lsls	r2, r2, #3
 8001a80:	4930      	ldr	r1, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f023 020c 	bic.w	r2, r3, #12
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	492c      	ldr	r1, [pc, #176]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9c:	f023 0202 	bic.w	r2, r3, #2
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	4927      	ldr	r1, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ab6:	4b23      	ldr	r3, [pc, #140]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	4a22      	ldr	r2, [pc, #136]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001ae0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f925 	bl	8000d34 <HAL_GetTick>
 8001aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff f921 	bl	8000d34 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e066      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x71a>
 8001b0c:	e05e      	b.n	8001bcc <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f90b 	bl	8000d34 <HAL_GetTick>
 8001b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f907 	bl	8000d34 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e04c      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x770>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x74e>
 8001b40:	e044      	b.n	8001bcc <HAL_RCC_OscConfig+0x7f8>
 8001b42:	bf00      	nop
 8001b44:	58024400 	.word	0x58024400
 8001b48:	fffffc0c 	.word	0xfffffc0c
 8001b4c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x804>)
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x804>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d031      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	f003 0203 	and.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d12a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d122      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d11a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	0a5b      	lsrs	r3, r3, #9
 8001b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d111      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	0c1b      	lsrs	r3, r3, #16
 8001ba8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	0e1b      	lsrs	r3, r3, #24
 8001bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3730      	adds	r7, #48	; 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400

08001bdc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e19c      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b8a      	ldr	r3, [pc, #552]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d910      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b87      	ldr	r3, [pc, #540]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 020f 	bic.w	r2, r3, #15
 8001c06:	4985      	ldr	r1, [pc, #532]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e184      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d908      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c3c:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4975      	ldr	r1, [pc, #468]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d010      	beq.n	8001c7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	4b70      	ldr	r3, [pc, #448]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d908      	bls.n	8001c7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c6a:	4b6d      	ldr	r3, [pc, #436]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	496a      	ldr	r1, [pc, #424]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699a      	ldr	r2, [r3, #24]
 8001c8c:	4b64      	ldr	r3, [pc, #400]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d908      	bls.n	8001caa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c98:	4b61      	ldr	r3, [pc, #388]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	495e      	ldr	r1, [pc, #376]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d010      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d908      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001cc6:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	4953      	ldr	r1, [pc, #332]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d908      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f023 020f 	bic.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4947      	ldr	r1, [pc, #284]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d055      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4940      	ldr	r1, [pc, #256]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d121      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0f6      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d44:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d115      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0ea      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0de      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0d6      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	f023 0207 	bic.w	r2, r3, #7
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4925      	ldr	r1, [pc, #148]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ffd1 	bl	8000d34 <HAL_GetTick>
 8001d92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d96:	f7fe ffcd 	bl	8000d34 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e0be      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d1eb      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d208      	bcs.n	8001dec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f023 020f 	bic.w	r2, r3, #15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	490e      	ldr	r1, [pc, #56]	; (8001e20 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d214      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 020f 	bic.w	r2, r3, #15
 8001e02:	4906      	ldr	r1, [pc, #24]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e086      	b.n	8001f2a <HAL_RCC_ClockConfig+0x34e>
 8001e1c:	52002000 	.word	0x52002000
 8001e20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d010      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d208      	bcs.n	8001e52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e40:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	4939      	ldr	r1, [pc, #228]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d208      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	492e      	ldr	r1, [pc, #184]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d010      	beq.n	8001eae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d208      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4922      	ldr	r1, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d208      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001eca:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4917      	ldr	r1, [pc, #92]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001edc:	f000 f834 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	0a1b      	lsrs	r3, r3, #8
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	4912      	ldr	r1, [pc, #72]	; (8001f38 <HAL_RCC_ClockConfig+0x35c>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_ClockConfig+0x358>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x35c>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f10:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_RCC_ClockConfig+0x360>)
 8001f12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x364>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x368>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe febe 	bl	8000ca0 <HAL_InitTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	58024400 	.word	0x58024400
 8001f38:	080022ac 	.word	0x080022ac
 8001f3c:	24000004 	.word	0x24000004
 8001f40:	24000000 	.word	0x24000000
 8001f44:	24000008 	.word	0x24000008

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f4e:	4bb3      	ldr	r3, [pc, #716]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f56:	2b18      	cmp	r3, #24
 8001f58:	f200 8155 	bhi.w	8002206 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f5c:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001fc9 	.word	0x08001fc9
 8001f68:	08002207 	.word	0x08002207
 8001f6c:	08002207 	.word	0x08002207
 8001f70:	08002207 	.word	0x08002207
 8001f74:	08002207 	.word	0x08002207
 8001f78:	08002207 	.word	0x08002207
 8001f7c:	08002207 	.word	0x08002207
 8001f80:	08002207 	.word	0x08002207
 8001f84:	08001fef 	.word	0x08001fef
 8001f88:	08002207 	.word	0x08002207
 8001f8c:	08002207 	.word	0x08002207
 8001f90:	08002207 	.word	0x08002207
 8001f94:	08002207 	.word	0x08002207
 8001f98:	08002207 	.word	0x08002207
 8001f9c:	08002207 	.word	0x08002207
 8001fa0:	08002207 	.word	0x08002207
 8001fa4:	08001ff5 	.word	0x08001ff5
 8001fa8:	08002207 	.word	0x08002207
 8001fac:	08002207 	.word	0x08002207
 8001fb0:	08002207 	.word	0x08002207
 8001fb4:	08002207 	.word	0x08002207
 8001fb8:	08002207 	.word	0x08002207
 8001fbc:	08002207 	.word	0x08002207
 8001fc0:	08002207 	.word	0x08002207
 8001fc4:	08001ffb 	.word	0x08001ffb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fc8:	4b94      	ldr	r3, [pc, #592]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fd4:	4b91      	ldr	r3, [pc, #580]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	4a90      	ldr	r2, [pc, #576]	; (8002220 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001fe6:	e111      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001fe8:	4b8d      	ldr	r3, [pc, #564]	; (8002220 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fea:	61bb      	str	r3, [r7, #24]
    break;
 8001fec:	e10e      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001fee:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ff0:	61bb      	str	r3, [r7, #24]
    break;
 8001ff2:	e10b      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001ff4:	4b8c      	ldr	r3, [pc, #560]	; (8002228 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ff6:	61bb      	str	r3, [r7, #24]
    break;
 8001ff8:	e108      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ffa:	4b88      	ldr	r3, [pc, #544]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002004:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002010:	4b82      	ldr	r3, [pc, #520]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800201a:	4b80      	ldr	r3, [pc, #512]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	08db      	lsrs	r3, r3, #3
 8002020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002032:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80e1 	beq.w	8002200 <HAL_RCC_GetSysClockFreq+0x2b8>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b02      	cmp	r3, #2
 8002042:	f000 8083 	beq.w	800214c <HAL_RCC_GetSysClockFreq+0x204>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b02      	cmp	r3, #2
 800204a:	f200 80a1 	bhi.w	8002190 <HAL_RCC_GetSysClockFreq+0x248>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x114>
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d056      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x1c0>
 800205a:	e099      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800205c:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02d      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002068:	4b6c      	ldr	r3, [pc, #432]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	4a6b      	ldr	r2, [pc, #428]	; (8002220 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	ee07 3a90 	vmov	s15, r3
 8002080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002092:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020a6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800222c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80020c2:	e087      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002230 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800222c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002106:	e065      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002112:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002234 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800212a:	ed97 6a02 	vldr	s12, [r7, #8]
 800212e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800222c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800213a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800213e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800214a:	e043      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002238 <HAL_RCC_GetSysClockFreq+0x2f0>
 800215a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800216e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002172:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800222c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800217a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800217e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800218e:	e021      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800219a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002234 <HAL_RCC_GetSysClockFreq+0x2ec>
 800219e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800222c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d8:	0a5b      	lsrs	r3, r3, #9
 80021da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021de:	3301      	adds	r3, #1
 80021e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80021f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f8:	ee17 3a90 	vmov	r3, s15
 80021fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80021fe:	e005      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
    break;
 8002204:	e002      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002208:	61bb      	str	r3, [r7, #24]
    break;
 800220a:	bf00      	nop
  }

  return sysclockfreq;
 800220c:	69bb      	ldr	r3, [r7, #24]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	; 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	58024400 	.word	0x58024400
 8002220:	03d09000 	.word	0x03d09000
 8002224:	003d0900 	.word	0x003d0900
 8002228:	016e3600 	.word	0x016e3600
 800222c:	46000000 	.word	0x46000000
 8002230:	4c742400 	.word	0x4c742400
 8002234:	4a742400 	.word	0x4a742400
 8002238:	4bb71b00 	.word	0x4bb71b00

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	4d0d      	ldr	r5, [pc, #52]	; (8002274 <__libc_init_array+0x38>)
 8002240:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002242:	1b64      	subs	r4, r4, r5
 8002244:	10a4      	asrs	r4, r4, #2
 8002246:	2600      	movs	r6, #0
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	4d0b      	ldr	r5, [pc, #44]	; (800227c <__libc_init_array+0x40>)
 800224e:	4c0c      	ldr	r4, [pc, #48]	; (8002280 <__libc_init_array+0x44>)
 8002250:	f000 f820 	bl	8002294 <_init>
 8002254:	1b64      	subs	r4, r4, r5
 8002256:	10a4      	asrs	r4, r4, #2
 8002258:	2600      	movs	r6, #0
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080022bc 	.word	0x080022bc
 8002278:	080022bc 	.word	0x080022bc
 800227c:	080022bc 	.word	0x080022bc
 8002280:	080022c0 	.word	0x080022c0

08002284 <memset>:
 8002284:	4402      	add	r2, r0
 8002286:	4603      	mov	r3, r0
 8002288:	4293      	cmp	r3, r2
 800228a:	d100      	bne.n	800228e <memset+0xa>
 800228c:	4770      	bx	lr
 800228e:	f803 1b01 	strb.w	r1, [r3], #1
 8002292:	e7f9      	b.n	8002288 <memset+0x4>

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
