
tf-luna_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007288  08007288  00017288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800728c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000270  24000078  08007304  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002e8  08007304  000202e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026b2a  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003aaf  00000000  00000000  00046bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  0004a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001088  00000000  00000000  0004b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003188d  00000000  00000000  0004c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000177fa  00000000  00000000  0007e145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f1ee  00000000  00000000  0009593f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d4b2d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004f90  00000000  00000000  001d4b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007138 	.word	0x08007138

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08007138 	.word	0x08007138

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800068c:	4b56      	ldr	r3, [pc, #344]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 800068e:	4a57      	ldr	r2, [pc, #348]	; (80007ec <MX_FDCAN1_Init+0x164>)
 8000690:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000692:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000698:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800069a:	4b53      	ldr	r3, [pc, #332]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80006a6:	4b50      	ldr	r3, [pc, #320]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80006ac:	4b4e      	ldr	r3, [pc, #312]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80006b2:	4b4d      	ldr	r3, [pc, #308]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80006b8:	4b4b      	ldr	r3, [pc, #300]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80006be:	4b4a      	ldr	r3, [pc, #296]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006c0:	2205      	movs	r2, #5
 80006c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006ca:	4b47      	ldr	r3, [pc, #284]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80006d0:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80006d6:	4b44      	ldr	r3, [pc, #272]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006d8:	2205      	movs	r2, #5
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80006dc:	4b42      	ldr	r3, [pc, #264]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006de:	2204      	movs	r2, #4
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006e2:	4b41      	ldr	r3, [pc, #260]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80006e8:	4b3f      	ldr	r3, [pc, #252]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006ee:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000700:	4b39      	ldr	r3, [pc, #228]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000702:	2200      	movs	r2, #0
 8000704:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000708:	2204      	movs	r2, #4
 800070a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 800070e:	2201      	movs	r2, #1
 8000710:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000714:	2204      	movs	r2, #4
 8000716:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000718:	4b33      	ldr	r3, [pc, #204]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 800071a:	2200      	movs	r2, #0
 800071c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000720:	2200      	movs	r2, #0
 8000722:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000724:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000726:	2201      	movs	r2, #1
 8000728:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800072a:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 800072c:	2200      	movs	r2, #0
 800072e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000732:	2204      	movs	r2, #4
 8000734:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000738:	f000 ff8a 	bl	8001650 <HAL_FDCAN_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000742:	f000 fa69 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID; //IdType ?? ?���????? ID ?��?�� ?��?�� ID�????? ?��?��?��?���????? ?���?????�????? ?��?��?��?��?�� .
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
     sFilterConfig.FilterIndex = 0; //Filterindex ?�� ?��?�� 개의 ?��?���????? 구성?��?�� 경우?�� ?��?��?��?��?��. 1개의 ?��?���????? ?��?��?���????? ?���????? ?��문에 0?���????? ?��?��?��?��?��.
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
     sFilterConfig.FilterType = FDCAN_FILTER_MASK; //FilterType ?? ?��리�? ?��?��?��?�� ?��?�� ?��?��?��?��?��. ?��기서?�� MASK ?��?���????? ?��?��?���????? ?��?��?��?��
 8000752:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 8000754:	2202      	movs	r2, #2
 8000756:	609a      	str	r2, [r3, #8]
     sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //FilterConfig ?�� ?��?���????? ?��과하?�� 메시�??????�� ?��?��?��?�� ?��?�� ?��?��?�� 결정?��?��?��. RX FIFO 0?���????? 보내?���????? ?��?��?��?�� ?��?��?��?��.
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 800075a:	2201      	movs	r2, #1
 800075c:	60da      	str	r2, [r3, #12]

     sFilterConfig.FilterID1 = 0x33; // ID Node2  //?�� MASK ?��?��?�� 경우 ID1( 0x22 )?�� ID�????? ?��?��?���????? ID2( 0x22 )�????? 마스?�� 비트�????? ?��?��?��?��?��.
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 8000760:	2233      	movs	r2, #51	; 0x33
 8000762:	611a      	str	r2, [r3, #16]
     sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 8000766:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800076a:	615a      	str	r2, [r3, #20]
     sFilterConfig.RxBufferIndex = 0; //RxBufferIndex ?�� FIFO ???�� RX Buffer�????? ?��?��?�� 경우 ?��?��?���?????�????? 0?���????? ?��?��?��?��.
 800076c:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
       if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000772:	491f      	ldr	r1, [pc, #124]	; (80007f0 <MX_FDCAN1_Init+0x168>)
 8000774:	481c      	ldr	r0, [pc, #112]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000776:	f001 f94d 	bl	8001a14 <HAL_FDCAN_ConfigFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_FDCAN1_Init+0xfc>
       {
         Error_Handler();
 8000780:	f000 fa4a 	bl	8000c18 <Error_Handler>
       }
       if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000784:	4818      	ldr	r0, [pc, #96]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 8000786:	f001 f9bb 	bl	8001b00 <HAL_FDCAN_Start>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_FDCAN1_Init+0x10c>
              {
               Error_Handler();
 8000790:	f000 fa42 	bl	8000c18 <Error_Handler>

              // STart FDCAN2


              // Activate the notification for new data in FIFO0 for FDCAN1
              if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	4813      	ldr	r0, [pc, #76]	; (80007e8 <MX_FDCAN1_Init+0x160>)
 800079a:	f001 fa37 	bl	8001c0c <HAL_FDCAN_ActivateNotification>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_FDCAN1_Init+0x120>
              {
                /* Notification Error */
                Error_Handler();
 80007a4:	f000 fa38 	bl	8000c18 <Error_Handler>
              }


              // Configure TX Header for FDCAN1
              TxHeader.Identifier = 0x11;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007aa:	2211      	movs	r2, #17
 80007ac:	601a      	str	r2, [r3, #0]
              TxHeader.IdType = FDCAN_STANDARD_ID;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
              TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
              TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007c0:	60da      	str	r2, [r3, #12]
              TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
              TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
              TxHeader.FDFormat = FDCAN_FD_CAN;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007d4:	619a      	str	r2, [r3, #24]
              TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
              TxHeader.MessageMarker = 0x0;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_FDCAN1_Init+0x16c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	240000c8 	.word	0x240000c8
 80007ec:	4000a000 	.word	0x4000a000
 80007f0:	240000a8 	.word	0x240000a8
 80007f4:	24000168 	.word	0x24000168

080007f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0b8      	sub	sp, #224	; 0xe0
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	22b8      	movs	r2, #184	; 0xb8
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f006 f865 	bl	80068e8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a29      	ldr	r2, [pc, #164]	; (80008c8 <HAL_FDCAN_MspInit+0xd0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d14b      	bne.n	80008c0 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000828:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800082e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fb88 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000846:	f000 f9e7 	bl	8000c18 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_FDCAN_MspInit+0xd4>)
 800084c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000850:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <HAL_FDCAN_MspInit+0xd4>)
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <HAL_FDCAN_MspInit+0xd4>)
 800085c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000868:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_FDCAN_MspInit+0xd4>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_FDCAN_MspInit+0xd4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <HAL_FDCAN_MspInit+0xd4>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000886:	2303      	movs	r3, #3
 8000888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800089e:	2309      	movs	r3, #9
 80008a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008a8:	4619      	mov	r1, r3
 80008aa:	4809      	ldr	r0, [pc, #36]	; (80008d0 <HAL_FDCAN_MspInit+0xd8>)
 80008ac:	f001 fc2c 	bl	8002108 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2105      	movs	r1, #5
 80008b4:	2013      	movs	r0, #19
 80008b6:	f000 fe96 	bl	80015e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008ba:	2013      	movs	r0, #19
 80008bc:	f000 fead 	bl	800161a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80008c0:	bf00      	nop
 80008c2:	37e0      	adds	r7, #224	; 0xe0
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	4000a000 	.word	0x4000a000
 80008cc:	58024400 	.word	0x58024400
 80008d0:	58020c00 	.word	0x58020c00

080008d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_GPIO_Init+0x6c>)
 80008dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_GPIO_Init+0x6c>)
 80008e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0x6c>)
 80008ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_GPIO_Init+0x6c>)
 80008fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <MX_GPIO_Init+0x6c>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <MX_GPIO_Init+0x6c>)
 800090a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_GPIO_Init+0x6c>)
 8000918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091c:	4a08      	ldr	r2, [pc, #32]	; (8000940 <MX_GPIO_Init+0x6c>)
 800091e:	f043 0302 	orr.w	r3, r3, #2
 8000922:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_GPIO_Init+0x6c>)
 8000928:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800092c:	f003 0302 	and.w	r3, r3, #2
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]

}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	58024400 	.word	0x58024400

08000944 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x74>)
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <MX_I2C1_Init+0x78>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000950:	4a1b      	ldr	r2, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x7c>)
 8000952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_I2C1_Init+0x74>)
 800095c:	2201      	movs	r2, #1
 800095e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_I2C1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097e:	480e      	ldr	r0, [pc, #56]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000980:	f001 fd72 	bl	8002468 <HAL_I2C_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800098a:	f000 f945 	bl	8000c18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_I2C1_Init+0x74>)
 8000992:	f002 fa5b 	bl	8002e4c <HAL_I2CEx_ConfigAnalogFilter>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800099c:	f000 f93c 	bl	8000c18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_I2C1_Init+0x74>)
 80009a4:	f002 fa9d 	bl	8002ee2 <HAL_I2CEx_ConfigDigitalFilter>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ae:	f000 f933 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	240001b4 	.word	0x240001b4
 80009bc:	40005400 	.word	0x40005400
 80009c0:	00707cbb 	.word	0x00707cbb

080009c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0b8      	sub	sp, #224	; 0xe0
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	22b8      	movs	r2, #184	; 0xb8
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f005 ff7f 	bl	80068e8 <memset>
  if(i2cHandle->Instance==I2C1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a24      	ldr	r2, [pc, #144]	; (8000a80 <HAL_I2C_MspInit+0xbc>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d141      	bne.n	8000a78 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009f4:	2308      	movs	r3, #8
 80009f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 faa4 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a0e:	f000 f903 	bl	8000c18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <HAL_I2C_MspInit+0xc0>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a18:	4a1a      	ldr	r2, [pc, #104]	; (8000a84 <HAL_I2C_MspInit+0xc0>)
 8000a1a:	f043 0302 	orr.w	r3, r3, #2
 8000a1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <HAL_I2C_MspInit+0xc0>)
 8000a24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a30:	23c0      	movs	r3, #192	; 0xc0
 8000a32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a36:	2312      	movs	r3, #18
 8000a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <HAL_I2C_MspInit+0xc4>)
 8000a56:	f001 fb57 	bl	8002108 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <HAL_I2C_MspInit+0xc0>)
 8000a5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a60:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_I2C_MspInit+0xc0>)
 8000a62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a66:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <HAL_I2C_MspInit+0xc0>)
 8000a6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a78:	bf00      	nop
 8000a7a:	37e0      	adds	r7, #224	; 0xe0
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40005400 	.word	0x40005400
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020400 	.word	0x58020400

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fc18 	bl	80012c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  TF_Luna_init(&TF_Luna_1, &hi2c1, 0x10);
 8000a94:	2210      	movs	r2, #16
 8000a96:	491c      	ldr	r1, [pc, #112]	; (8000b08 <main+0x7c>)
 8000a98:	481c      	ldr	r0, [pc, #112]	; (8000b0c <main+0x80>)
 8000a9a:	f000 f9b5 	bl	8000e08 <TF_Luna_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f84d 	bl	8000b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f7ff ff17 	bl	80008d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aa6:	f7ff ff4d 	bl	8000944 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000aaa:	f000 fb2f 	bl	800110c <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000aae:	f7ff fdeb 	bl	8000688 <MX_FDCAN1_Init>
     *   TF_Luna_init(&TF_Luna_5, &hi2c1, 0x14);
     */



        Get_Frame_Rate( &TF_Luna_1,&tfFrame);
 8000ab2:	4917      	ldr	r1, [pc, #92]	; (8000b10 <main+0x84>)
 8000ab4:	4815      	ldr	r0, [pc, #84]	; (8000b0c <main+0x80>)
 8000ab6:	f000 fabd 	bl	8001034 <Get_Frame_Rate>
        Get_Firmware_Version(&TF_Luna_1, tfVer);
 8000aba:	4916      	ldr	r1, [pc, #88]	; (8000b14 <main+0x88>)
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <main+0x80>)
 8000abe:	f000 fa8f 	bl	8000fe0 <Get_Firmware_Version>
        Get_Prod_Code(&TF_Luna_1, tfCode);
 8000ac2:	4915      	ldr	r1, [pc, #84]	; (8000b18 <main+0x8c>)
 8000ac4:	4811      	ldr	r0, [pc, #68]	; (8000b0c <main+0x80>)
 8000ac6:	f000 fa61 	bl	8000f8c <Get_Prod_Code>
        Get_Time(&TF_Luna_1, &tfTime);
 8000aca:	4914      	ldr	r1, [pc, #80]	; (8000b1c <main+0x90>)
 8000acc:	480f      	ldr	r0, [pc, #60]	; (8000b0c <main+0x80>)
 8000ace:	f000 fa2d 	bl	8000f2c <Get_Time>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getData(&TF_Luna_1, &tfDist, &tfFlux, &tfTemp);
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <main+0x94>)
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <main+0x98>)
 8000ad6:	4914      	ldr	r1, [pc, #80]	; (8000b28 <main+0x9c>)
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <main+0x80>)
 8000ada:	f000 f9a9 	bl	8000e30 <getData>
//	  printDataArray();
//	  printf("%d",tfDist); // Open your SVW ITM Data Console
	  	  HAL_Delay(100); // 250Hz
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f000 fc82 	bl	80013e8 <HAL_Delay>
	  	sprintf ((char *)TxData_Node1_To_Node3, "%d",tfDist );
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <main+0x9c>)
 8000ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aea:	461a      	mov	r2, r3
 8000aec:	490f      	ldr	r1, [pc, #60]	; (8000b2c <main+0xa0>)
 8000aee:	4810      	ldr	r0, [pc, #64]	; (8000b30 <main+0xa4>)
 8000af0:	f005 ff02 	bl	80068f8 <siprintf>
//	  	"%d",tfDist
	  		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData_Node1_To_Node3)!= HAL_OK)
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <main+0xa4>)
 8000af6:	490f      	ldr	r1, [pc, #60]	; (8000b34 <main+0xa8>)
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <main+0xac>)
 8000afa:	f001 f82c 	bl	8001b56 <HAL_FDCAN_AddMessageToTxFifoQ>
	  		              {
//	  		                 Error_Handler();
	  		                }
	  		HAL_Delay(100);
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f000 fc72 	bl	80013e8 <HAL_Delay>
	  getData(&TF_Luna_1, &tfDist, &tfFlux, &tfTemp);
 8000b04:	e7e5      	b.n	8000ad2 <main+0x46>
 8000b06:	bf00      	nop
 8000b08:	240001b4 	.word	0x240001b4
 8000b0c:	2400021c 	.word	0x2400021c
 8000b10:	24000000 	.word	0x24000000
 8000b14:	24000218 	.word	0x24000218
 8000b18:	24000200 	.word	0x24000200
 8000b1c:	2400009a 	.word	0x2400009a
 8000b20:	24000098 	.word	0x24000098
 8000b24:	24000096 	.word	0x24000096
 8000b28:	24000094 	.word	0x24000094
 8000b2c:	08007150 	.word	0x08007150
 8000b30:	2400022c 	.word	0x2400022c
 8000b34:	24000168 	.word	0x24000168
 8000b38:	240000c8 	.word	0x240000c8

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	224c      	movs	r2, #76	; 0x4c
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f005 fecc 	bl	80068e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2220      	movs	r2, #32
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 fec6 	bl	80068e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b5c:	2004      	movs	r0, #4
 8000b5e:	f002 fa0d 	bl	8002f7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a2a      	ldr	r2, [pc, #168]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b7e:	bf00      	nop
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <SystemClock_Config+0xd8>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8c:	d1f8      	bne.n	8000b80 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b96:	2340      	movs	r3, #64	; 0x40
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fa32 	bl	8003030 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bd2:	f000 f821 	bl	8000c18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	233f      	movs	r3, #63	; 0x3f
 8000bd8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000be6:	2340      	movs	r3, #64	; 0x40
 8000be8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bea:	2340      	movs	r3, #64	; 0x40
 8000bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bf2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bf4:	2340      	movs	r3, #64	; 0x40
 8000bf6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 fe1b 	bl	8003838 <HAL_RCC_ClockConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000c08:	f000 f806 	bl	8000c18 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3770      	adds	r7, #112	; 0x70
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	58024800 	.word	0x58024800

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_MspInit+0x30>)
 8000c2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_MspInit+0x30>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	58024400 	.word	0x58024400

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 fb80 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f005 fdcc 	bl	8006878 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24100000 	.word	0x24100000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	2400009c 	.word	0x2400009c
 8000d14:	240002e8 	.word	0x240002e8

08000d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <SystemInit+0xd0>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <SystemInit+0xd0>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <SystemInit+0xd4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d807      	bhi.n	8000d48 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d38:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <SystemInit+0xd4>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 030f 	bic.w	r3, r3, #15
 8000d40:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <SystemInit+0xd4>)
 8000d42:	f043 0303 	orr.w	r3, r3, #3
 8000d46:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d48:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <SystemInit+0xd8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <SystemInit+0xd8>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <SystemInit+0xd8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <SystemInit+0xd8>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	4924      	ldr	r1, [pc, #144]	; (8000df0 <SystemInit+0xd8>)
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <SystemInit+0xdc>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <SystemInit+0xd4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d007      	beq.n	8000d82 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <SystemInit+0xd4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 030f 	bic.w	r3, r3, #15
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <SystemInit+0xd4>)
 8000d7c:	f043 0303 	orr.w	r3, r3, #3
 8000d80:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <SystemInit+0xd8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <SystemInit+0xd8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <SystemInit+0xd8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <SystemInit+0xd8>)
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <SystemInit+0xe0>)
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <SystemInit+0xd8>)
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <SystemInit+0xe4>)
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <SystemInit+0xd8>)
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <SystemInit+0xe8>)
 8000da4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <SystemInit+0xd8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000dac:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <SystemInit+0xd8>)
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <SystemInit+0xe8>)
 8000db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <SystemInit+0xd8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <SystemInit+0xd8>)
 8000dba:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <SystemInit+0xe8>)
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <SystemInit+0xd8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <SystemInit+0xd8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <SystemInit+0xd8>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <SystemInit+0xd8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <SystemInit+0xec>)
 8000dd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ddc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	52002000 	.word	0x52002000
 8000df0:	58024400 	.word	0x58024400
 8000df4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000df8:	02020200 	.word	0x02020200
 8000dfc:	01ff0000 	.word	0x01ff0000
 8000e00:	01010280 	.word	0x01010280
 8000e04:	52004000 	.word	0x52004000

08000e08 <TF_Luna_init>:

// Init your device or devices.
// Supported multiple devices on one i2c line.

bool TF_Luna_init(TF_Luna_Lidar *tf_luna,I2C_HandleTypeDef *i2c,uint8_t TF_Luna_address)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]

	  tf_luna->i2c = i2c;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	601a      	str	r2, [r3, #0]
	  tf_luna->TF_Luna_address=TF_Luna_address;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	711a      	strb	r2, [r3, #4]
	  return 1;
 8000e22:	2301      	movs	r3, #1

}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <getData>:
//             GET DATA FROM THE DEVICE
// - - - - - - - - - - - - - - - - - - - - - - - - - -


bool getData(TF_Luna_Lidar *tf_luna, int16_t *dist, int16_t *flux, int16_t *temp)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
    tfStatus = TFL_READY;    // clear status of any error condition
 8000e3e:	4b37      	ldr	r3, [pc, #220]	; (8000f1c <getData+0xec>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Step 1 - Use the `HAL_I2C_MASTER_Receive` function `readReg` to fill the six byte
    // `dataArray` from the contiguous sequence of registers `TFL_DIST_LO`
    // to `TFL_TEMP_HI` that declared in the header file 'tfluna_i2c.h`.
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    for (uint8_t reg = TFL_DIST_LO; reg <= TFL_TEMP_HI; reg++)
 8000e44:	2300      	movs	r3, #0
 8000e46:	75fb      	strb	r3, [r7, #23]
 8000e48:	e014      	b.n	8000e74 <getData+0x44>
    {
      if( !readReg(tf_luna, reg)) return false;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f000 f920 	bl	8001094 <readReg>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <getData+0x34>
 8000e60:	2300      	movs	r3, #0
 8000e62:	e056      	b.n	8000f12 <getData+0xe2>
          else dataArray[ reg] = regReply;
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <getData+0xf0>)
 8000e68:	7811      	ldrb	r1, [r2, #0]
 8000e6a:	4a2e      	ldr	r2, [pc, #184]	; (8000f24 <getData+0xf4>)
 8000e6c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t reg = TFL_DIST_LO; reg <= TFL_TEMP_HI; reg++)
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	3301      	adds	r3, #1
 8000e72:	75fb      	strb	r3, [r7, #23]
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	d9e7      	bls.n	8000e4a <getData+0x1a>
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Step 2 - Shift data from read array into the three variables
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
   *dist = dataArray[ 0] + ( dataArray[ 1] << 8);
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <getData+0xf4>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <getData+0xf4>)
 8000e82:	785b      	ldrb	r3, [r3, #1]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	801a      	strh	r2, [r3, #0]
   *flux = dataArray[ 2] + ( dataArray[ 3] << 8);
 8000e94:	4b23      	ldr	r3, [pc, #140]	; (8000f24 <getData+0xf4>)
 8000e96:	789b      	ldrb	r3, [r3, #2]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <getData+0xf4>)
 8000e9c:	78db      	ldrb	r3, [r3, #3]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	801a      	strh	r2, [r3, #0]
   *temp = dataArray[ 4] + ( dataArray[ 5] << 8);
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <getData+0xf4>)
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <getData+0xf4>)
 8000eb6:	795b      	ldrb	r3, [r3, #5]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	801a      	strh	r2, [r3, #0]



    // Convert temperature from hundredths
    // of a degree to a whole number
   *temp = *temp / 100;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <getData+0xf8>)
 8000ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed4:	1152      	asrs	r2, r2, #5
 8000ed6:	17db      	asrs	r3, r3, #31
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	801a      	strh	r2, [r3, #0]
    // Then convert Celsius to degrees Fahrenheit


    // - - Evaluate Abnormal Data Values - -
    // Signal strength <= 100
    if( *flux < (int16_t)100)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee6:	2b63      	cmp	r3, #99	; 0x63
 8000ee8:	dc04      	bgt.n	8000ef4 <getData+0xc4>
    {
      tfStatus = TFL_WEAK;
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <getData+0xec>)
 8000eec:	220a      	movs	r2, #10
 8000eee:	701a      	strb	r2, [r3, #0]
      return false;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	e00e      	b.n	8000f12 <getData+0xe2>
    }
    // Signal Strength saturation
    else if( *flux == (int16_t)0xFFFF)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efe:	d104      	bne.n	8000f0a <getData+0xda>
    {
      tfStatus = TFL_STRONG;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <getData+0xec>)
 8000f02:	220b      	movs	r2, #11
 8000f04:	701a      	strb	r2, [r3, #0]
      return false;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e003      	b.n	8000f12 <getData+0xe2>
    }
    else
    {
      tfStatus = TFL_READY;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <getData+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
      return true;
 8000f10:	2301      	movs	r3, #1
    }

}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3718      	adds	r7, #24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000216 	.word	0x24000216
 8000f20:	2400021b 	.word	0x2400021b
 8000f24:	24000210 	.word	0x24000210
 8000f28:	51eb851f 	.word	0x51eb851f

08000f2c <Get_Time>:
// - - - - - - - - - - - - - - - - - - - - - - - - - -

//  = =  GET DEVICE TIME (in milliseconds) = = =
//  Pass back time as an unsigned 16-bit variable
bool Get_Time(TF_Luna_Lidar *tf_luna, uint16_t *tim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
    // Recast the address of the unsigned integer `tim`
    // as a pointer to an unsigned byte `p_tim`...
    uint8_t * p_tim = (uint8_t *) *&tim;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	60fb      	str	r3, [r7, #12]

    // ... then address the pointer as an array.
    if( !readReg( tf_luna, TFL_TICK_LO)) return false;
 8000f3a:	2106      	movs	r1, #6
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 f8a9 	bl	8001094 <readReg>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <Get_Time+0x26>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e015      	b.n	8000f7e <Get_Time+0x52>
        else p_tim[ 0] = regReply;  // Read into `tim` array
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <Get_Time+0x5c>)
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	701a      	strb	r2, [r3, #0]
    if( !readReg( tf_luna, TFL_TICK_HI)) return false;
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 f899 	bl	8001094 <readReg>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f083 0301 	eor.w	r3, r3, #1
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <Get_Time+0x46>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e005      	b.n	8000f7e <Get_Time+0x52>
        else p_tim[ 1] = regReply;  // Read into `tim` array
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <Get_Time+0x5c>)
 8000f78:	7812      	ldrb	r2, [r2, #0]
 8000f7a:	701a      	strb	r2, [r3, #0]
    return true;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2400021b 	.word	0x2400021b

08000f8c <Get_Prod_Code>:
// When you pass an array as a parameter to a function
// it decays into a pointer to the first element of the array.
// The 14 byte array variable `tfCode` declared in the example
// sketch decays to the array pointer `p_cod`.
bool Get_Prod_Code(TF_Luna_Lidar *tf_luna, uint8_t * p_cod)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
   for (uint8_t i = 0; i < 14; ++i)
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
 8000f9a:	e017      	b.n	8000fcc <Get_Prod_Code+0x40>
    {
      if( !readReg(tf_luna, ( 0x10 + i))) return false;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3310      	adds	r3, #16
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f875 	bl	8001094 <readReg>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f083 0301 	eor.w	r3, r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <Get_Prod_Code+0x2e>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e00c      	b.n	8000fd4 <Get_Prod_Code+0x48>
        else p_cod[ i] = regReply;  // Read into product code array
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <Get_Prod_Code+0x50>)
 8000fc2:	7812      	ldrb	r2, [r2, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
   for (uint8_t i = 0; i < 14; ++i)
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b0d      	cmp	r3, #13
 8000fd0:	d9e4      	bls.n	8000f9c <Get_Prod_Code+0x10>
    }
    return true;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2400021b 	.word	0x2400021b

08000fe0 <Get_Firmware_Version>:

//  = = = =    GET FIRMWARE VERSION   = = = =
// The 3 byte array variable `tfVer` declared in the
// example sketch decays to the array pointer `p_ver`.
bool Get_Firmware_Version(TF_Luna_Lidar *tf_luna, uint8_t * p_ver)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < 3; ++i)
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e017      	b.n	8001020 <Get_Firmware_Version+0x40>
    {
      if( !readReg( tf_luna, ( 0x0A + i))) return false;
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	330a      	adds	r3, #10
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f84b 	bl	8001094 <readReg>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <Get_Firmware_Version+0x2e>
 800100a:	2300      	movs	r3, #0
 800100c:	e00c      	b.n	8001028 <Get_Firmware_Version+0x48>
        else p_ver[ i] = regReply;  // Read into version array
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <Get_Firmware_Version+0x50>)
 8001016:	7812      	ldrb	r2, [r2, #0]
 8001018:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; ++i)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d9e4      	bls.n	8000ff0 <Get_Firmware_Version+0x10>
    }
    return true;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2400021b 	.word	0x2400021b

08001034 <Get_Frame_Rate>:
    return true;
}

//  = = = = = =    GET FRAME RATE   = = = = = =
bool Get_Frame_Rate( TF_Luna_Lidar *tf_luna, uint16_t *frm)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
    uint8_t * p_frm = (uint8_t *) *&frm;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	60fb      	str	r3, [r7, #12]
    if( !readReg( tf_luna, TFL_FPS_LO)) return false;
 8001042:	2126      	movs	r1, #38	; 0x26
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f825 	bl	8001094 <readReg>
 800104a:	4603      	mov	r3, r0
 800104c:	f083 0301 	eor.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <Get_Frame_Rate+0x26>
 8001056:	2300      	movs	r3, #0
 8001058:	e015      	b.n	8001086 <Get_Frame_Rate+0x52>
        else p_frm[ 0] = regReply;  // Read into `frm` array
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <Get_Frame_Rate+0x5c>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	701a      	strb	r2, [r3, #0]
    if( !readReg( tf_luna, TFL_FPS_HI)) return false;
 8001062:	2127      	movs	r1, #39	; 0x27
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 f815 	bl	8001094 <readReg>
 800106a:	4603      	mov	r3, r0
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <Get_Frame_Rate+0x46>
 8001076:	2300      	movs	r3, #0
 8001078:	e005      	b.n	8001086 <Get_Frame_Rate+0x52>
        else p_frm[ 1] = regReply;  // Read into `frm` array
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <Get_Frame_Rate+0x5c>)
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]
    return true;
 8001084:	2301      	movs	r3, #1
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	2400021b 	.word	0x2400021b

08001094 <readReg>:

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//       READ OR WRITE A GIVEN REGISTER OF THE SLAVE DEVICE
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bool readReg( TF_Luna_Lidar *tf_luna, uint8_t nmbr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	460b      	mov	r3, r1
 800109e:	70fb      	strb	r3, [r7, #3]


  if( HAL_I2C_Master_Transmit(tf_luna->i2c, tf_luna->TF_Luna_address<<1, &nmbr, 1, 1000) != 0)  // If write error...
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b299      	uxth	r1, r3
 80010ae:	1cfa      	adds	r2, r7, #3
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	f001 fa66 	bl	8002588 <HAL_I2C_Master_Transmit>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d004      	beq.n	80010cc <readReg+0x38>
  {
    tfStatus = TFL_I2CWRITE;        // then set status code...
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <readReg+0x70>)
 80010c4:	2208      	movs	r2, #8
 80010c6:	701a      	strb	r2, [r3, #0]
    return false;                   // and return `false`.
 80010c8:	2300      	movs	r3, #0
 80010ca:	e016      	b.n	80010fa <readReg+0x66>
  }
  // Request 1 byte from the device
  // and release bus when finished.


   if( HAL_I2C_Master_Receive(tf_luna->i2c, tf_luna->TF_Luna_address<<1, &regReply, 1, 1000) != 0)            // If read error...
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6818      	ldr	r0, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b299      	uxth	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2301      	movs	r3, #1
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <readReg+0x74>)
 80010e4:	f001 fb44 	bl	8002770 <HAL_I2C_Master_Receive>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <readReg+0x64>
    {
      tfStatus = TFL_I2CREAD;         // then set status code.
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <readReg+0x70>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	701a      	strb	r2, [r3, #0]
      return false;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e000      	b.n	80010fa <readReg+0x66>
    }

  return true;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000216 	.word	0x24000216
 8001108:	2400021b 	.word	0x2400021b

0800110c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001112:	4a23      	ldr	r2, [pc, #140]	; (80011a0 <MX_USART3_UART_Init+0x94>)
 8001114:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_USART3_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_USART3_UART_Init+0x90>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001150:	2200      	movs	r2, #0
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001156:	f004 fa29 	bl	80055ac <HAL_UART_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001160:	f7ff fd5a 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001164:	2100      	movs	r1, #0
 8001166:	480d      	ldr	r0, [pc, #52]	; (800119c <MX_USART3_UART_Init+0x90>)
 8001168:	f005 fabc 	bl	80066e4 <HAL_UARTEx_SetTxFifoThreshold>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001172:	f7ff fd51 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4808      	ldr	r0, [pc, #32]	; (800119c <MX_USART3_UART_Init+0x90>)
 800117a:	f005 faf1 	bl	8006760 <HAL_UARTEx_SetRxFifoThreshold>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001184:	f7ff fd48 	bl	8000c18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_USART3_UART_Init+0x90>)
 800118a:	f005 fa72 	bl	8006672 <HAL_UARTEx_DisableFifoMode>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001194:	f7ff fd40 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	24000244 	.word	0x24000244
 80011a0:	40004800 	.word	0x40004800

080011a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0b8      	sub	sp, #224	; 0xe0
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	22b8      	movs	r2, #184	; 0xb8
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fb8f 	bl	80068e8 <memset>
  if(uartHandle->Instance==USART3)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_UART_MspInit+0xc0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d142      	bne.n	800125a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011d4:	2302      	movs	r3, #2
 80011d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4618      	mov	r0, r3
 80011e4:	f002 feb4 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ee:	f7ff fd13 	bl	8000c18 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011f2:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <HAL_UART_MspInit+0xc4>)
 80011f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011f8:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <HAL_UART_MspInit+0xc4>)
 80011fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001204:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001212:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0xc4>)
 8001222:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800122e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001232:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001248:	2307      	movs	r3, #7
 800124a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_UART_MspInit+0xc8>)
 8001256:	f000 ff57 	bl	8002108 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800125a:	bf00      	nop
 800125c:	37e0      	adds	r7, #224	; 0xe0
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004800 	.word	0x40004800
 8001268:	58024400 	.word	0x58024400
 800126c:	58020c00 	.word	0x58020c00

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001274:	f7ff fd50 	bl	8000d18 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800129e:	f005 faf1 	bl	8006884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fbf3 	bl	8000a8c <main>
  bx  lr
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80012b4:	0800728c 	.word	0x0800728c
  ldr r2, =_sbss
 80012b8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80012bc:	240002e8 	.word	0x240002e8

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 f980 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012d0:	f002 fc68 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_Init+0x68>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	4913      	ldr	r1, [pc, #76]	; (8001330 <HAL_Init+0x6c>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_Init+0x68>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_Init+0x6c>)
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_Init+0x70>)
 8001306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_Init+0x74>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130e:	200f      	movs	r0, #15
 8001310:	f000 f814 	bl	800133c <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e002      	b.n	8001324 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131e:	f7ff fc81 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58024400 	.word	0x58024400
 8001330:	080071a0 	.word	0x080071a0
 8001334:	24000008 	.word	0x24000008
 8001338:	24000004 	.word	0x24000004

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_InitTick+0x60>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e021      	b.n	8001394 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_InitTick+0x64>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f965 	bl	8001636 <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f92f 	bl	80015e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x68>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	24000010 	.word	0x24000010
 80013a0:	24000004 	.word	0x24000004
 80013a4:	2400000c 	.word	0x2400000c

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	24000010 	.word	0x24000010
 80013cc:	240002d4 	.word	0x240002d4

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	240002d4 	.word	0x240002d4

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	24000010 	.word	0x24000010

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <__NVIC_SetPriorityGrouping+0x40>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x40>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	05fa0000 	.word	0x05fa0000

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <__NVIC_EnableIRQ+0x38>)
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000e100 	.word	0xe000e100

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff29 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff40 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff33 	bl	8001494 <__NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ffa4 	bl	800158c <SysTick_Config>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b098      	sub	sp, #96	; 0x60
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001658:	4a84      	ldr	r2, [pc, #528]	; (800186c <HAL_FDCAN_Init+0x21c>)
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4611      	mov	r1, r2
 8001660:	224c      	movs	r2, #76	; 0x4c
 8001662:	4618      	mov	r0, r3
 8001664:	f005 f932 	bl	80068cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1ca      	b.n	8001a08 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a7e      	ldr	r2, [pc, #504]	; (8001870 <HAL_FDCAN_Init+0x220>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d106      	bne.n	800168a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001684:	461a      	mov	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff f8aa 	bl	80007f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0210 	bic.w	r2, r2, #16
 80016b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b4:	f7ff fe8c 	bl	80013d0 <HAL_GetTick>
 80016b8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016ba:	e014      	b.n	80016e6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80016bc:	f7ff fe88 	bl	80013d0 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b0a      	cmp	r3, #10
 80016c8:	d90d      	bls.n	80016e6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e190      	b.n	8001a08 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d0e3      	beq.n	80016bc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff fe64 	bl	80013d0 <HAL_GetTick>
 8001708:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800170a:	e014      	b.n	8001736 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800170c:	f7ff fe60 	bl	80013d0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90d      	bls.n	8001736 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e168      	b.n	8001a08 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0e3      	beq.n	800170c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699a      	ldr	r2, [r3, #24]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0202 	orr.w	r2, r2, #2
 8001752:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7c1b      	ldrb	r3, [r3, #16]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699a      	ldr	r2, [r3, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176a:	619a      	str	r2, [r3, #24]
 800176c:	e007      	b.n	800177e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800177c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7c5b      	ldrb	r3, [r3, #17]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001794:	619a      	str	r2, [r3, #24]
 8001796:	e007      	b.n	80017a8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	699a      	ldr	r2, [r3, #24]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7c9b      	ldrb	r3, [r3, #18]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d108      	bne.n	80017c2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	e007      	b.n	80017d2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80017d0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699a      	ldr	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80017f6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0210 	bic.w	r2, r2, #16
 8001806:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	699a      	ldr	r2, [r3, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0204 	orr.w	r2, r2, #4
 800181e:	619a      	str	r2, [r3, #24]
 8001820:	e030      	b.n	8001884 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d02c      	beq.n	8001884 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d020      	beq.n	8001874 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001840:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0210 	orr.w	r2, r2, #16
 8001850:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d114      	bne.n	8001884 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0220 	orr.w	r2, r2, #32
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	e00b      	b.n	8001884 <HAL_FDCAN_Init+0x234>
 800186c:	08007154 	.word	0x08007154
 8001870:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0220 	orr.w	r2, r2, #32
 8001882:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	3b01      	subs	r3, #1
 800188a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	3b01      	subs	r3, #1
 8001892:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001894:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800189c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80018ac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80018ae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018b8:	d115      	bne.n	80018e6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	3b01      	subs	r3, #1
 80018c6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018c8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	3b01      	subs	r3, #1
 80018d0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80018d2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	3b01      	subs	r3, #1
 80018dc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80018e2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80018e4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00a      	beq.n	8001904 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190c:	4413      	add	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d012      	beq.n	8001938 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800191a:	f023 0107 	bic.w	r1, r3, #7
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001928:	4413      	add	r3, r2
 800192a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001948:	f023 0107 	bic.w	r1, r3, #7
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001956:	4413      	add	r3, r2
 8001958:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	2b00      	cmp	r3, #0
 800196c:	d013      	beq.n	8001996 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001976:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001984:	4413      	add	r3, r2
 8001986:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800198a:	011a      	lsls	r2, r3, #4
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800199a:	2b00      	cmp	r3, #0
 800199c:	d013      	beq.n	80019c6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80019a6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80019b4:	4413      	add	r3, r2
 80019b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80019ba:	021a      	lsls	r2, r3, #8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_FDCAN_Init+0x3c0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d107      	bne.n	80019e0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f022 0203 	bic.w	r2, r2, #3
 80019de:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f981 	bl	8001d00 <FDCAN_CalcultateRamBlockAddresses>
 80019fe:	4603      	mov	r3, r0
 8001a00:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001a04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3760      	adds	r7, #96	; 0x60
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	4000a000 	.word	0x4000a000

08001a14 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a24:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d002      	beq.n	8001a32 <HAL_FDCAN_ConfigFilter+0x1e>
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d157      	bne.n	8001ae2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d12b      	bne.n	8001a92 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b07      	cmp	r3, #7
 8001a40:	d10d      	bne.n	8001a5e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001a4e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001a54:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001a56:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00e      	b.n	8001a7c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a6a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001a72:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	4413      	add	r3, r2
 8001a88:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e025      	b.n	8001ade <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	075a      	lsls	r2, r3, #29
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d103      	bne.n	8001ab0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	e006      	b.n	8001abe <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	079a      	lsls	r2, r3, #30
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4413      	add	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e008      	b.n	8001af4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ae8:	f043 0202 	orr.w	r2, r3, #2
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d111      	bne.n	8001b38 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e008      	b.n	8001b4a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
  }
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d141      	bne.n	8001bf2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b76:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b84:	f043 0220 	orr.w	r2, r3, #32
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e038      	b.n	8001c04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d009      	beq.n	8001bb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e026      	b.n	8001c04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 fa1d 	bl	800200c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	fa01 f202 	lsl.w	r2, r1, r2
 8001bde:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e008      	b.n	8001c04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bf8:	f043 0208 	orr.w	r2, r3, #8
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001c1e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d002      	beq.n	8001c2c <HAL_FDCAN_ActivateNotification+0x20>
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d155      	bne.n	8001cd8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d108      	bne.n	8001c4c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c4a:	e014      	b.n	8001c76 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d108      	bne.n	8001c6e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0202 	orr.w	r2, r2, #2
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c6c:	e003      	b.n	8001c76 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2203      	movs	r2, #3
 8001c74:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <HAL_FDCAN_ActivateNotification+0xec>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	6553      	str	r3, [r2, #84]	; 0x54
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <HAL_FDCAN_ActivateNotification+0xf0>)
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	0f9b      	lsrs	r3, r3, #30
 8001cce:	490b      	ldr	r1, [pc, #44]	; (8001cfc <HAL_FDCAN_ActivateNotification+0xf0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e008      	b.n	8001cea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
  }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	371c      	adds	r7, #28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	3fcfffff 	.word	0x3fcfffff
 8001cfc:	4000a800 	.word	0x4000a800

08001d00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d16:	4ba7      	ldr	r3, [pc, #668]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	0091      	lsls	r1, r2, #2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	430b      	orrs	r3, r1
 8001d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d30:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d56:	4b97      	ldr	r3, [pc, #604]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	0091      	lsls	r1, r2, #2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d70:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	041a      	lsls	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d98:	4b86      	ldr	r3, [pc, #536]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	0091      	lsls	r1, r2, #2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001db2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001de0:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	0091      	lsls	r1, r2, #2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6812      	ldr	r2, [r2, #0]
 8001dec:	430b      	orrs	r3, r1
 8001dee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dfa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e28:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	0091      	lsls	r1, r2, #2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	0091      	lsls	r1, r2, #2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e6e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	0091      	lsls	r1, r2, #2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	430b      	orrs	r3, r1
 8001ea4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001eb0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ecc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed4:	061a      	lsls	r2, r3, #24
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ee4:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009a      	lsls	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	441a      	add	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	441a      	add	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	441a      	add	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f7a:	fb01 f303 	mul.w	r3, r1, r3
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	441a      	add	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d915      	bls.n	8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fb0:	e006      	b.n	8001fc0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fb2:	bf00      	nop
 8001fb4:	ffff0003 	.word	0xffff0003
 8001fb8:	10002b00 	.word	0x10002b00
 8001fbc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fc6:	f043 0220 	orr.w	r2, r3, #32
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e010      	b.n	8001ffe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	e005      	b.n	8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3304      	adds	r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3f3      	bcc.n	8001fe4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800202a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002032:	4313      	orrs	r3, r2
 8002034:	61fb      	str	r3, [r7, #28]
 8002036:	e00a      	b.n	800204e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002040:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002046:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800204c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002058:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800205e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002064:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800206a:	4313      	orrs	r3, r2
 800206c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002078:	6839      	ldr	r1, [r7, #0]
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3304      	adds	r3, #4
 800208e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3304      	adds	r3, #4
 800209a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e020      	b.n	80020e4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3303      	adds	r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3302      	adds	r3, #2
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	440b      	add	r3, r1
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020ba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	440b      	add	r3, r1
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020c8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	440a      	add	r2, r1
 80020d0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020d2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	3304      	adds	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	3304      	adds	r3, #4
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <FDCAN_CopyMessageToRAM+0xf8>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	461a      	mov	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d3d5      	bcc.n	80020a2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3724      	adds	r7, #36	; 0x24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	080071b0 	.word	0x080071b0

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002116:	4b89      	ldr	r3, [pc, #548]	; (800233c <HAL_GPIO_Init+0x234>)
 8002118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800211a:	e194      	b.n	8002446 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8186 	beq.w	8002440 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b01      	cmp	r3, #1
 800213e:	d005      	beq.n	800214c <HAL_GPIO_Init+0x44>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d130      	bne.n	80021ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002182:	2201      	movs	r2, #1
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 0201 	and.w	r2, r3, #1
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b03      	cmp	r3, #3
 80021b8:	d017      	beq.n	80021ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	2203      	movs	r2, #3
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d123      	bne.n	800223e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	08da      	lsrs	r2, r3, #3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3208      	adds	r2, #8
 80021fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	691a      	ldr	r2, [r3, #16]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	69b9      	ldr	r1, [r7, #24]
 800223a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0203 	and.w	r2, r3, #3
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80e0 	beq.w	8002440 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_GPIO_Init+0x238>)
 8002282:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002286:	4a2e      	ldr	r2, [pc, #184]	; (8002340 <HAL_GPIO_Init+0x238>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <HAL_GPIO_Init+0x238>)
 8002292:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a29      	ldr	r2, [pc, #164]	; (8002344 <HAL_GPIO_Init+0x23c>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a20      	ldr	r2, [pc, #128]	; (8002348 <HAL_GPIO_Init+0x240>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d052      	beq.n	8002370 <HAL_GPIO_Init+0x268>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_GPIO_Init+0x244>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d031      	beq.n	8002336 <HAL_GPIO_Init+0x22e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_GPIO_Init+0x248>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <HAL_GPIO_Init+0x22a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_GPIO_Init+0x24c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x226>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <HAL_GPIO_Init+0x250>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x222>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HAL_GPIO_Init+0x254>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x21e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <HAL_GPIO_Init+0x258>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x21a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <HAL_GPIO_Init+0x25c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x216>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <HAL_GPIO_Init+0x260>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x212>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a17      	ldr	r2, [pc, #92]	; (800236c <HAL_GPIO_Init+0x264>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x20e>
 8002312:	2309      	movs	r3, #9
 8002314:	e02d      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 8002316:	230a      	movs	r3, #10
 8002318:	e02b      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 800231a:	2308      	movs	r3, #8
 800231c:	e029      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 800231e:	2307      	movs	r3, #7
 8002320:	e027      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 8002322:	2306      	movs	r3, #6
 8002324:	e025      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 8002326:	2305      	movs	r3, #5
 8002328:	e023      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 800232a:	2304      	movs	r3, #4
 800232c:	e021      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 800232e:	2303      	movs	r3, #3
 8002330:	e01f      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 8002332:	2302      	movs	r3, #2
 8002334:	e01d      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 8002336:	2301      	movs	r3, #1
 8002338:	e01b      	b.n	8002372 <HAL_GPIO_Init+0x26a>
 800233a:	bf00      	nop
 800233c:	58000080 	.word	0x58000080
 8002340:	58024400 	.word	0x58024400
 8002344:	58000400 	.word	0x58000400
 8002348:	58020000 	.word	0x58020000
 800234c:	58020400 	.word	0x58020400
 8002350:	58020800 	.word	0x58020800
 8002354:	58020c00 	.word	0x58020c00
 8002358:	58021000 	.word	0x58021000
 800235c:	58021400 	.word	0x58021400
 8002360:	58021800 	.word	0x58021800
 8002364:	58021c00 	.word	0x58021c00
 8002368:	58022000 	.word	0x58022000
 800236c:	58022400 	.word	0x58022400
 8002370:	2300      	movs	r3, #0
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	f002 0203 	and.w	r2, r2, #3
 8002378:	0092      	lsls	r2, r2, #2
 800237a:	4093      	lsls	r3, r2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002382:	4938      	ldr	r1, [pc, #224]	; (8002464 <HAL_GPIO_Init+0x35c>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	3301      	adds	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa22 f303 	lsr.w	r3, r2, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f ae63 	bne.w	800211c <HAL_GPIO_Init+0x14>
  }
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	58000400 	.word	0x58000400

08002468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7fe fa98 	bl	80009c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	e006      	b.n	80024f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d104      	bne.n	8002502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_I2C_Init+0x11c>)
 800250e:	430b      	orrs	r3, r1
 8002510:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002520:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69d9      	ldr	r1, [r3, #28]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	02008000 	.word	0x02008000

08002588 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	461a      	mov	r2, r3
 8002594:	460b      	mov	r3, r1
 8002596:	817b      	strh	r3, [r7, #10]
 8002598:	4613      	mov	r3, r2
 800259a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b20      	cmp	r3, #32
 80025a6:	f040 80da 	bne.w	800275e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_I2C_Master_Transmit+0x30>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0d3      	b.n	8002760 <HAL_I2C_Master_Transmit+0x1d8>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe ff06 	bl	80013d0 <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2319      	movs	r3, #25
 80025cc:	2201      	movs	r2, #1
 80025ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f9e6 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0be      	b.n	8002760 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2221      	movs	r2, #33	; 0x21
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2210      	movs	r2, #16
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	893a      	ldrh	r2, [r7, #8]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	2bff      	cmp	r3, #255	; 0xff
 8002612:	d90e      	bls.n	8002632 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	22ff      	movs	r2, #255	; 0xff
 8002618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261e:	b2da      	uxtb	r2, r3
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	4b51      	ldr	r3, [pc, #324]	; (8002768 <HAL_I2C_Master_Transmit+0x1e0>)
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800262a:	68f8      	ldr	r0, [r7, #12]
 800262c:	f000 fbdc 	bl	8002de8 <I2C_TransferConfig>
 8002630:	e06c      	b.n	800270c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002640:	b2da      	uxtb	r2, r3
 8002642:	8979      	ldrh	r1, [r7, #10]
 8002644:	4b48      	ldr	r3, [pc, #288]	; (8002768 <HAL_I2C_Master_Transmit+0x1e0>)
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fbcb 	bl	8002de8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002652:	e05b      	b.n	800270c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	6a39      	ldr	r1, [r7, #32]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f9e3 	bl	8002a24 <I2C_WaitOnTXISFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e07b      	b.n	8002760 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	781a      	ldrb	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d034      	beq.n	800270c <HAL_I2C_Master_Transmit+0x184>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d130      	bne.n	800270c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f975 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e04d      	b.n	8002760 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d90e      	bls.n	80026ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	22ff      	movs	r2, #255	; 0xff
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fb7f 	bl	8002de8 <I2C_TransferConfig>
 80026ea:	e00f      	b.n	800270c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fb6e 	bl	8002de8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d19e      	bne.n	8002654 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	6a39      	ldr	r1, [r7, #32]
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f9c2 	bl	8002aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e01a      	b.n	8002760 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2220      	movs	r2, #32
 8002730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_I2C_Master_Transmit+0x1e4>)
 800273e:	400b      	ands	r3, r1
 8002740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	80002000 	.word	0x80002000
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
 8002780:	4613      	mov	r3, r2
 8002782:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b20      	cmp	r3, #32
 800278e:	f040 80db 	bne.w	8002948 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_I2C_Master_Receive+0x30>
 800279c:	2302      	movs	r3, #2
 800279e:	e0d4      	b.n	800294a <HAL_I2C_Master_Receive+0x1da>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fe12 	bl	80013d0 <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2319      	movs	r3, #25
 80027b4:	2201      	movs	r2, #1
 80027b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f8f2 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0bf      	b.n	800294a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2222      	movs	r2, #34	; 0x22
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2210      	movs	r2, #16
 80027d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	893a      	ldrh	r2, [r7, #8]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2bff      	cmp	r3, #255	; 0xff
 80027fa:	d90e      	bls.n	800281a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	b2da      	uxtb	r2, r3
 8002808:	8979      	ldrh	r1, [r7, #10]
 800280a:	4b52      	ldr	r3, [pc, #328]	; (8002954 <HAL_I2C_Master_Receive+0x1e4>)
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 fae8 	bl	8002de8 <I2C_TransferConfig>
 8002818:	e06d      	b.n	80028f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	b2da      	uxtb	r2, r3
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	4b49      	ldr	r3, [pc, #292]	; (8002954 <HAL_I2C_Master_Receive+0x1e4>)
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fad7 	bl	8002de8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800283a:	e05c      	b.n	80028f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	6a39      	ldr	r1, [r7, #32]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f96b 	bl	8002b1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e07c      	b.n	800294a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	3b01      	subs	r3, #1
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d034      	beq.n	80028f6 <HAL_I2C_Master_Receive+0x186>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	d130      	bne.n	80028f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	2200      	movs	r2, #0
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f880 	bl	80029a4 <I2C_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e04d      	b.n	800294a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2bff      	cmp	r3, #255	; 0xff
 80028b6:	d90e      	bls.n	80028d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	22ff      	movs	r2, #255	; 0xff
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	8979      	ldrh	r1, [r7, #10]
 80028c6:	2300      	movs	r3, #0
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 fa8a 	bl	8002de8 <I2C_TransferConfig>
 80028d4:	e00f      	b.n	80028f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	2300      	movs	r3, #0
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa79 	bl	8002de8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d19d      	bne.n	800283c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	6a39      	ldr	r1, [r7, #32]
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f8cd 	bl	8002aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e01a      	b.n	800294a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2220      	movs	r2, #32
 800291a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6859      	ldr	r1, [r3, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <HAL_I2C_Master_Receive+0x1e8>)
 8002928:	400b      	ands	r3, r1
 800292a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	80002400 	.word	0x80002400
 8002958:	fe00e800 	.word	0xfe00e800

0800295c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d103      	bne.n	800297a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d007      	beq.n	8002998 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	619a      	str	r2, [r3, #24]
  }
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029b4:	e022      	b.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d01e      	beq.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe fd07 	bl	80013d0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d113      	bne.n	80029fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0220 	orr.w	r2, r3, #32
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00f      	b.n	8002a1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	4013      	ands	r3, r2
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d0cd      	beq.n	80029b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a30:	e02c      	b.n	8002a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f8ea 	bl	8002c10 <I2C_IsErrorOccurred>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e02a      	b.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d01e      	beq.n	8002a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7fe fcbf 	bl	80013d0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d113      	bne.n	8002a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e007      	b.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d1cb      	bne.n	8002a32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab0:	e028      	b.n	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f8aa 	bl	8002c10 <I2C_IsErrorOccurred>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e026      	b.n	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac6:	f7fe fc83 	bl	80013d0 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d302      	bcc.n	8002adc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d113      	bne.n	8002b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e007      	b.n	8002b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	d1cf      	bne.n	8002ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b28:	e064      	b.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f86e 	bl	8002c10 <I2C_IsErrorOccurred>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e062      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d138      	bne.n	8002bbe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d105      	bne.n	8002b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e04e      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d107      	bne.n	8002b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2210      	movs	r2, #16
 8002b7a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2204      	movs	r2, #4
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
 8002b82:	e002      	b.n	8002b8a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e022      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fc07 	bl	80013d0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10f      	bne.n	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d193      	bne.n	8002b2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	fe00e800 	.word	0xfe00e800

08002c10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d075      	beq.n	8002d28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2210      	movs	r2, #16
 8002c42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c44:	e056      	b.n	8002cf4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d052      	beq.n	8002cf4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe fbbf 	bl	80013d0 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <I2C_IsErrorOccurred+0x54>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d147      	bne.n	8002cf4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c86:	d12e      	bne.n	8002ce6 <I2C_IsErrorOccurred+0xd6>
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c8e:	d02a      	beq.n	8002ce6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002c90:	7cfb      	ldrb	r3, [r7, #19]
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d027      	beq.n	8002ce6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ca4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ca6:	f7fe fb93 	bl	80013d0 <HAL_GetTick>
 8002caa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cac:	e01b      	b.n	8002ce6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cae:	f7fe fb8f 	bl	80013d0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b19      	cmp	r3, #25
 8002cba:	d914      	bls.n	8002ce6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0320 	and.w	r3, r3, #32
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d1dc      	bne.n	8002cae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b20      	cmp	r3, #32
 8002d00:	d003      	beq.n	8002d0a <I2C_IsErrorOccurred+0xfa>
 8002d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d09d      	beq.n	8002c46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d103      	bne.n	8002d1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2220      	movs	r2, #32
 8002d18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	f043 0308 	orr.w	r3, r3, #8
 8002d62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01c      	beq.n	8002dd8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff fddc 	bl	800295c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <I2C_IsErrorOccurred+0x1d4>)
 8002db0:	400b      	ands	r3, r1
 8002db2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3728      	adds	r7, #40	; 0x28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	460b      	mov	r3, r1
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	4613      	mov	r3, r2
 8002df8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002dfa:	897b      	ldrh	r3, [r7, #10]
 8002dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e00:	7a7b      	ldrb	r3, [r7, #9]
 8002e02:	041b      	lsls	r3, r3, #16
 8002e04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e08:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e16:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	0d5b      	lsrs	r3, r3, #21
 8002e22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002e26:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <I2C_TransferConfig+0x60>)
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	ea02 0103 	and.w	r1, r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	03ff63ff 	.word	0x03ff63ff

08002e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d138      	bne.n	8002ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e032      	b.n	8002ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2224      	movs	r2, #36	; 0x24
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d139      	bne.n	8002f6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e033      	b.n	8002f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2224      	movs	r2, #36	; 0x24
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f84:	4b29      	ldr	r3, [pc, #164]	; (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d00a      	beq.n	8002fa6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d001      	beq.n	8002fa2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e040      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e03e      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002fae:	491f      	ldr	r1, [pc, #124]	; (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002fb6:	f7fe fa0b 	bl	80013d0 <HAL_GetTick>
 8002fba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fbc:	e009      	b.n	8002fd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fbe:	f7fe fa07 	bl	80013d0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fcc:	d901      	bls.n	8002fd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e028      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fd2:	4b16      	ldr	r3, [pc, #88]	; (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fde:	d1ee      	bne.n	8002fbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b1e      	cmp	r3, #30
 8002fe4:	d008      	beq.n	8002ff8 <HAL_PWREx_ConfigSupply+0x7c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8002fea:	d005      	beq.n	8002ff8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b1d      	cmp	r3, #29
 8002ff0:	d002      	beq.n	8002ff8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b2d      	cmp	r3, #45	; 0x2d
 8002ff6:	d114      	bne.n	8003022 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002ff8:	f7fe f9ea 	bl	80013d0 <HAL_GetTick>
 8002ffc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ffe:	e009      	b.n	8003014 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003000:	f7fe f9e6 	bl	80013d0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800300e:	d901      	bls.n	8003014 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_PWREx_ConfigSupply+0xb0>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d1ee      	bne.n	8003000 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	58024800 	.word	0x58024800

08003030 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08c      	sub	sp, #48	; 0x30
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e3f3      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80b3 	beq.w	80031b6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003050:	4b9e      	ldr	r3, [pc, #632]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003058:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800305a:	4b9c      	ldr	r3, [pc, #624]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	2b10      	cmp	r3, #16
 8003064:	d007      	beq.n	8003076 <HAL_RCC_OscConfig+0x46>
 8003066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003068:	2b18      	cmp	r3, #24
 800306a:	d112      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d10d      	bne.n	8003092 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003076:	4b95      	ldr	r3, [pc, #596]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8098 	beq.w	80031b4 <HAL_RCC_OscConfig+0x184>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 8093 	bne.w	80031b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e3cb      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x7a>
 800309c:	4b8b      	ldr	r3, [pc, #556]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8a      	ldr	r2, [pc, #552]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e058      	b.n	800315c <HAL_RCC_OscConfig+0x12c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d112      	bne.n	80030d8 <HAL_RCC_OscConfig+0xa8>
 80030b2:	4b86      	ldr	r3, [pc, #536]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a85      	ldr	r2, [pc, #532]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b83      	ldr	r3, [pc, #524]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a82      	ldr	r2, [pc, #520]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b80      	ldr	r3, [pc, #512]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7f      	ldr	r2, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e041      	b.n	800315c <HAL_RCC_OscConfig+0x12c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d112      	bne.n	8003108 <HAL_RCC_OscConfig+0xd8>
 80030e2:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a79      	ldr	r2, [pc, #484]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b77      	ldr	r3, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a76      	ldr	r2, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a73      	ldr	r2, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e029      	b.n	800315c <HAL_RCC_OscConfig+0x12c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003110:	d112      	bne.n	8003138 <HAL_RCC_OscConfig+0x108>
 8003112:	4b6e      	ldr	r3, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b6b      	ldr	r3, [pc, #428]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6a      	ldr	r2, [pc, #424]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e011      	b.n	800315c <HAL_RCC_OscConfig+0x12c>
 8003138:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a60      	ldr	r2, [pc, #384]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5d      	ldr	r2, [pc, #372]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003156:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f934 	bl	80013d0 <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe f930 	bl	80013d0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	; 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e355      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800317e:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x13c>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe f920 	bl	80013d0 <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe f91c 	bl	80013d0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e341      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x164>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 808c 	beq.w	80032dc <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c4:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_RCC_OscConfig+0x1ba>
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	2b18      	cmp	r3, #24
 80031de:	d137      	bne.n	8003250 <HAL_RCC_OscConfig+0x220>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d132      	bne.n	8003250 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ea:	4b38      	ldr	r3, [pc, #224]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x1d2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e313      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003202:	4b32      	ldr	r3, [pc, #200]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0219 	bic.w	r2, r3, #25
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	492f      	ldr	r1, [pc, #188]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003214:	f7fe f8dc 	bl	80013d0 <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe f8d8 	bl	80013d0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2fd      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	4920      	ldr	r1, [pc, #128]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324e:	e045      	b.n	80032dc <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d026      	beq.n	80032a6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003258:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 0219 	bic.w	r2, r3, #25
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4919      	ldr	r1, [pc, #100]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe f8b1 	bl	80013d0 <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe f8ad 	bl	80013d0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e2d2      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	490b      	ldr	r1, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
 80032a4:	e01a      	b.n	80032dc <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a08      	ldr	r2, [pc, #32]	; (80032cc <HAL_RCC_OscConfig+0x29c>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe f88d 	bl	80013d0 <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe f889 	bl	80013d0 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d903      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e2ae      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
 80032cc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d0:	4b99      	ldr	r3, [pc, #612]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d06a      	beq.n	80033be <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e8:	4b93      	ldr	r3, [pc, #588]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f2:	4b91      	ldr	r3, [pc, #580]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d007      	beq.n	800330e <HAL_RCC_OscConfig+0x2de>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b18      	cmp	r3, #24
 8003302:	d11b      	bne.n	800333c <HAL_RCC_OscConfig+0x30c>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800330e:	4b8a      	ldr	r3, [pc, #552]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x2f6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e281      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003326:	4b84      	ldr	r3, [pc, #528]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	4980      	ldr	r1, [pc, #512]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800333a:	e040      	b.n	80033be <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d023      	beq.n	800338c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003344:	4b7c      	ldr	r3, [pc, #496]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a7b      	ldr	r2, [pc, #492]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800334a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe f83e 	bl	80013d0 <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003358:	f7fe f83a 	bl	80013d0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e25f      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800336a:	4b73      	ldr	r3, [pc, #460]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003376:	4b70      	ldr	r3, [pc, #448]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	496c      	ldr	r1, [pc, #432]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
 800338a:	e018      	b.n	80033be <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800338c:	4b6a      	ldr	r3, [pc, #424]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a69      	ldr	r2, [pc, #420]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe f81a 	bl	80013d0 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033a0:	f7fe f816 	bl	80013d0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e23b      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033b2:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d019      	beq.n	8003406 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fd fff7 	bl	80013d0 <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e6:	f7fd fff3 	bl	80013d0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e218      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033f8:	4b4f      	ldr	r3, [pc, #316]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x3b6>
 8003404:	e018      	b.n	8003438 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b4c      	ldr	r3, [pc, #304]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340a:	4a4b      	ldr	r2, [pc, #300]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fd ffdd 	bl	80013d0 <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800341a:	f7fd ffd9 	bl	80013d0 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1fe      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800342c:	4b42      	ldr	r3, [pc, #264]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d036      	beq.n	80034b2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d019      	beq.n	8003480 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800344c:	4b3a      	ldr	r3, [pc, #232]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a39      	ldr	r2, [pc, #228]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003456:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003458:	f7fd ffba 	bl	80013d0 <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003460:	f7fd ffb6 	bl	80013d0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1db      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003472:	4b31      	ldr	r3, [pc, #196]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x430>
 800347e:	e018      	b.n	80034b2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003480:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800348a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800348c:	f7fd ffa0 	bl	80013d0 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003494:	f7fd ff9c 	bl	80013d0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1c1      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034a6:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80af 	beq.w	800361e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <HAL_RCC_OscConfig+0x50c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_RCC_OscConfig+0x50c>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034cc:	f7fd ff80 	bl	80013d0 <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fd ff7c 	bl	80013d0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1a1      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <HAL_RCC_OscConfig+0x50c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x4d8>
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	4a0e      	ldr	r2, [pc, #56]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	; 0x70
 8003506:	e05b      	b.n	80035c0 <HAL_RCC_OscConfig+0x590>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d117      	bne.n	8003540 <HAL_RCC_OscConfig+0x510>
 8003510:	4b09      	ldr	r3, [pc, #36]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a08      	ldr	r2, [pc, #32]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a05      	ldr	r2, [pc, #20]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 8003522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
 8003528:	4b03      	ldr	r3, [pc, #12]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a02      	ldr	r2, [pc, #8]	; (8003538 <HAL_RCC_OscConfig+0x508>)
 800352e:	f023 0304 	bic.w	r3, r3, #4
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e044      	b.n	80035c0 <HAL_RCC_OscConfig+0x590>
 8003536:	bf00      	nop
 8003538:	58024400 	.word	0x58024400
 800353c:	58024800 	.word	0x58024800
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b05      	cmp	r3, #5
 8003546:	d112      	bne.n	800356e <HAL_RCC_OscConfig+0x53e>
 8003548:	4b95      	ldr	r3, [pc, #596]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	4a94      	ldr	r2, [pc, #592]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	6713      	str	r3, [r2, #112]	; 0x70
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	4a91      	ldr	r2, [pc, #580]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800355a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800355e:	6713      	str	r3, [r2, #112]	; 0x70
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a8e      	ldr	r2, [pc, #568]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
 800356c:	e028      	b.n	80035c0 <HAL_RCC_OscConfig+0x590>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b85      	cmp	r3, #133	; 0x85
 8003574:	d112      	bne.n	800359c <HAL_RCC_OscConfig+0x56c>
 8003576:	4b8a      	ldr	r3, [pc, #552]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a89      	ldr	r2, [pc, #548]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800357c:	f043 0304 	orr.w	r3, r3, #4
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	4b87      	ldr	r3, [pc, #540]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a86      	ldr	r2, [pc, #536]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
 800358e:	4b84      	ldr	r3, [pc, #528]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a83      	ldr	r2, [pc, #524]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	e011      	b.n	80035c0 <HAL_RCC_OscConfig+0x590>
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a7f      	ldr	r2, [pc, #508]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80035ae:	f023 0304 	bic.w	r3, r3, #4
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
 80035b4:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a79      	ldr	r2, [pc, #484]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80035ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d015      	beq.n	80035f4 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd ff02 	bl	80013d0 <HAL_GetTick>
 80035cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ce:	e00a      	b.n	80035e6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d0:	f7fd fefe 	bl	80013d0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	f241 3288 	movw	r2, #5000	; 0x1388
 80035de:	4293      	cmp	r3, r2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e121      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0ee      	beq.n	80035d0 <HAL_RCC_OscConfig+0x5a0>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f4:	f7fd feec 	bl	80013d0 <HAL_GetTick>
 80035f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035fc:	f7fd fee8 	bl	80013d0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	; 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e10b      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ee      	bne.n	80035fc <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 8100 	beq.w	8003828 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003628:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003630:	2b18      	cmp	r3, #24
 8003632:	f000 80bb 	beq.w	80037ac <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2b02      	cmp	r3, #2
 800363c:	f040 8095 	bne.w	800376a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a56      	ldr	r2, [pc, #344]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd fec0 	bl	80013d0 <HAL_GetTick>
 8003650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7fd febc 	bl	80013d0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0e1      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003666:	4b4e      	ldr	r3, [pc, #312]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003672:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003676:	4b4b      	ldr	r3, [pc, #300]	; (80037a4 <HAL_RCC_OscConfig+0x774>)
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	430a      	orrs	r2, r1
 8003686:	4946      	ldr	r1, [pc, #280]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003688:	4313      	orrs	r3, r2
 800368a:	628b      	str	r3, [r1, #40]	; 0x28
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	3b01      	subs	r3, #1
 8003692:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	3b01      	subs	r3, #1
 800369c:	025b      	lsls	r3, r3, #9
 800369e:	b29b      	uxth	r3, r3
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	3b01      	subs	r3, #1
 80036a8:	041b      	lsls	r3, r3, #16
 80036aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	3b01      	subs	r3, #1
 80036b6:	061b      	lsls	r3, r3, #24
 80036b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036bc:	4938      	ldr	r1, [pc, #224]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80036c2:	4b37      	ldr	r3, [pc, #220]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	4a36      	ldr	r2, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ce:	4b34      	ldr	r3, [pc, #208]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d2:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <HAL_RCC_OscConfig+0x778>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036da:	00d2      	lsls	r2, r2, #3
 80036dc:	4930      	ldr	r1, [pc, #192]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f023 020c 	bic.w	r2, r3, #12
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	492c      	ldr	r1, [pc, #176]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	f023 0202 	bic.w	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	4927      	ldr	r1, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003702:	4313      	orrs	r3, r2
 8003704:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003706:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003712:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800371e:	4b20      	ldr	r3, [pc, #128]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003736:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a19      	ldr	r2, [pc, #100]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800373c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fe45 	bl	80013d0 <HAL_GetTick>
 8003746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374a:	f7fd fe41 	bl	80013d0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e066      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x71a>
 8003768:	e05e      	b.n	8003828 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003776:	f7fd fe2b 	bl	80013d0 <HAL_GetTick>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7fd fe27 	bl	80013d0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e04c      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_OscConfig+0x770>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x74e>
 800379c:	e044      	b.n	8003828 <HAL_RCC_OscConfig+0x7f8>
 800379e:	bf00      	nop
 80037a0:	58024400 	.word	0x58024400
 80037a4:	fffffc0c 	.word	0xfffffc0c
 80037a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037ac:	4b21      	ldr	r3, [pc, #132]	; (8003834 <HAL_RCC_OscConfig+0x804>)
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_OscConfig+0x804>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d031      	beq.n	8003824 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0203 	and.w	r2, r3, #3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d12a      	bne.n	8003824 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d122      	bne.n	8003824 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d11a      	bne.n	8003824 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	0a5b      	lsrs	r3, r3, #9
 80037f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d111      	bne.n	8003824 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d108      	bne.n	8003824 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	0e1b      	lsrs	r3, r3, #24
 8003816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e000      	b.n	800382a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3730      	adds	r7, #48	; 0x30
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58024400 	.word	0x58024400

08003838 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e19c      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b8a      	ldr	r3, [pc, #552]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 030f 	and.w	r3, r3, #15
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d910      	bls.n	800387c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b87      	ldr	r3, [pc, #540]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	4985      	ldr	r1, [pc, #532]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b83      	ldr	r3, [pc, #524]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e184      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003894:	429a      	cmp	r2, r3
 8003896:	d908      	bls.n	80038aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003898:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	4975      	ldr	r1, [pc, #468]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d010      	beq.n	80038d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	4b70      	ldr	r3, [pc, #448]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d908      	bls.n	80038d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038c6:	4b6d      	ldr	r3, [pc, #436]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	496a      	ldr	r1, [pc, #424]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d010      	beq.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d908      	bls.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038f4:	4b61      	ldr	r3, [pc, #388]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	495e      	ldr	r1, [pc, #376]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003902:	4313      	orrs	r3, r2
 8003904:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d010      	beq.n	8003934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800391e:	429a      	cmp	r2, r3
 8003920:	d908      	bls.n	8003934 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003922:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	4953      	ldr	r1, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003930:	4313      	orrs	r3, r2
 8003932:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	4b4d      	ldr	r3, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	429a      	cmp	r2, r3
 800394e:	d908      	bls.n	8003962 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b4a      	ldr	r3, [pc, #296]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f023 020f 	bic.w	r2, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4947      	ldr	r1, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800395e:	4313      	orrs	r3, r2
 8003960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d055      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4940      	ldr	r1, [pc, #256]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800397c:	4313      	orrs	r3, r2
 800397e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d107      	bne.n	8003998 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003988:	4b3c      	ldr	r3, [pc, #240]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d121      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e0f6      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b03      	cmp	r3, #3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d115      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0ea      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039b8:	4b30      	ldr	r3, [pc, #192]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0de      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0d6      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f023 0207 	bic.w	r2, r3, #7
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	4925      	ldr	r1, [pc, #148]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fd fcf1 	bl	80013d0 <HAL_GetTick>
 80039ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f0:	e00a      	b.n	8003a08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f2:	f7fd fced 	bl	80013d0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e0be      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d1eb      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d010      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d208      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x244>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d214      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	4906      	ldr	r1, [pc, #24]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCC_ClockConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e086      	b.n	8003b86 <HAL_RCC_ClockConfig+0x34e>
 8003a78:	52002000 	.word	0x52002000
 8003a7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d010      	beq.n	8003aae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d208      	bcs.n	8003aae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a9c:	4b3c      	ldr	r3, [pc, #240]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	4939      	ldr	r1, [pc, #228]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d010      	beq.n	8003adc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d208      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aca:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	492e      	ldr	r1, [pc, #184]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d010      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	4b28      	ldr	r3, [pc, #160]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d208      	bcs.n	8003b0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003af8:	4b25      	ldr	r3, [pc, #148]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4922      	ldr	r1, [pc, #136]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d010      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	4b1d      	ldr	r3, [pc, #116]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d208      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b26:	4b1a      	ldr	r3, [pc, #104]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	4917      	ldr	r1, [pc, #92]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003b38:	f000 f834 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	f003 030f 	and.w	r3, r3, #15
 8003b48:	4912      	ldr	r1, [pc, #72]	; (8003b94 <HAL_RCC_ClockConfig+0x35c>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
 8003b54:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x358>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	4a0d      	ldr	r2, [pc, #52]	; (8003b94 <HAL_RCC_ClockConfig+0x35c>)
 8003b60:	5cd3      	ldrb	r3, [r2, r3]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_RCC_ClockConfig+0x360>)
 8003b6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x364>)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x368>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fbde 	bl	800133c <HAL_InitTick>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	58024400 	.word	0x58024400
 8003b94:	080071a0 	.word	0x080071a0
 8003b98:	24000008 	.word	0x24000008
 8003b9c:	24000004 	.word	0x24000004
 8003ba0:	2400000c 	.word	0x2400000c

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b089      	sub	sp, #36	; 0x24
 8003ba8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003baa:	4bb3      	ldr	r3, [pc, #716]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bb2:	2b18      	cmp	r3, #24
 8003bb4:	f200 8155 	bhi.w	8003e62 <HAL_RCC_GetSysClockFreq+0x2be>
 8003bb8:	a201      	add	r2, pc, #4	; (adr r2, 8003bc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003e63 	.word	0x08003e63
 8003bc8:	08003e63 	.word	0x08003e63
 8003bcc:	08003e63 	.word	0x08003e63
 8003bd0:	08003e63 	.word	0x08003e63
 8003bd4:	08003e63 	.word	0x08003e63
 8003bd8:	08003e63 	.word	0x08003e63
 8003bdc:	08003e63 	.word	0x08003e63
 8003be0:	08003c4b 	.word	0x08003c4b
 8003be4:	08003e63 	.word	0x08003e63
 8003be8:	08003e63 	.word	0x08003e63
 8003bec:	08003e63 	.word	0x08003e63
 8003bf0:	08003e63 	.word	0x08003e63
 8003bf4:	08003e63 	.word	0x08003e63
 8003bf8:	08003e63 	.word	0x08003e63
 8003bfc:	08003e63 	.word	0x08003e63
 8003c00:	08003c51 	.word	0x08003c51
 8003c04:	08003e63 	.word	0x08003e63
 8003c08:	08003e63 	.word	0x08003e63
 8003c0c:	08003e63 	.word	0x08003e63
 8003c10:	08003e63 	.word	0x08003e63
 8003c14:	08003e63 	.word	0x08003e63
 8003c18:	08003e63 	.word	0x08003e63
 8003c1c:	08003e63 	.word	0x08003e63
 8003c20:	08003c57 	.word	0x08003c57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c24:	4b94      	ldr	r3, [pc, #592]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c30:	4b91      	ldr	r3, [pc, #580]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	08db      	lsrs	r3, r3, #3
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	4a90      	ldr	r2, [pc, #576]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c42:	e111      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c44:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c46:	61bb      	str	r3, [r7, #24]
    break;
 8003c48:	e10e      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c4a:	4b8d      	ldr	r3, [pc, #564]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c4c:	61bb      	str	r3, [r7, #24]
    break;
 8003c4e:	e10b      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c50:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c52:	61bb      	str	r3, [r7, #24]
    break;
 8003c54:	e108      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c56:	4b88      	ldr	r3, [pc, #544]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c60:	4b85      	ldr	r3, [pc, #532]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c6c:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c76:	4b80      	ldr	r3, [pc, #512]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80e1 	beq.w	8003e5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f000 8083 	beq.w	8003da8 <HAL_RCC_GetSysClockFreq+0x204>
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	f200 80a1 	bhi.w	8003dec <HAL_RCC_GetSysClockFreq+0x248>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x114>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d056      	beq.n	8003d64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cb6:	e099      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d02d      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cc4:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	ee07 3a90 	vmov	s15, r3
 8003cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b62      	ldr	r3, [pc, #392]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003d1e:	e087      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d62:	e065      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b40      	ldr	r3, [pc, #256]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003da6:	e043      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dea:	e021      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b1e      	ldr	r3, [pc, #120]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	0a5b      	lsrs	r3, r3, #9
 8003e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e54:	ee17 3a90 	vmov	r3, s15
 8003e58:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e5a:	e005      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
    break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e64:	61bb      	str	r3, [r7, #24]
    break;
 8003e66:	bf00      	nop
  }

  return sysclockfreq;
 8003e68:	69bb      	ldr	r3, [r7, #24]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	03d09000 	.word	0x03d09000
 8003e80:	003d0900 	.word	0x003d0900
 8003e84:	016e3600 	.word	0x016e3600
 8003e88:	46000000 	.word	0x46000000
 8003e8c:	4c742400 	.word	0x4c742400
 8003e90:	4a742400 	.word	0x4a742400
 8003e94:	4bb71b00 	.word	0x4bb71b00

08003e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003e9e:	f7ff fe81 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490f      	ldr	r1, [pc, #60]	; (8003eec <HAL_RCC_GetHCLKFreq+0x54>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	4a09      	ldr	r2, [pc, #36]	; (8003eec <HAL_RCC_GetHCLKFreq+0x54>)
 8003ec6:	5cd3      	ldrb	r3, [r2, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ed4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ed6:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	080071a0 	.word	0x080071a0
 8003ef0:	24000008 	.word	0x24000008
 8003ef4:	24000004 	.word	0x24000004

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003efc:	f7ff ffcc 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4904      	ldr	r1, [pc, #16]	; (8003f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	080071a0 	.word	0x080071a0

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003f28:	f7ff ffb6 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	0a1b      	lsrs	r3, r3, #8
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4904      	ldr	r1, [pc, #16]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	080071a0 	.word	0x080071a0

08003f50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d03f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f74:	d02a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f7a:	d824      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f80:	d018      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f86:	d81e      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f90:	d007      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f92:	e018      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f94:	4ba6      	ldr	r3, [pc, #664]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	4aa5      	ldr	r2, [pc, #660]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fa0:	e015      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 f99b 	bl	80052e4 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fb2:	e00c      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3324      	adds	r3, #36	; 0x24
 8003fb8:	2102      	movs	r1, #2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 fa44 	bl	8005448 <RCCEx_PLL3_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d109      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003fd4:	4b96      	ldr	r3, [pc, #600]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fe0:	4993      	ldr	r1, [pc, #588]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8003fe6:	e001      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03d      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d826      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	0800401d 	.word	0x0800401d
 800400c:	0800402b 	.word	0x0800402b
 8004010:	0800403d 	.word	0x0800403d
 8004014:	08004055 	.word	0x08004055
 8004018:	08004055 	.word	0x08004055
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800401c:	4b84      	ldr	r3, [pc, #528]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004020:	4a83      	ldr	r2, [pc, #524]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004028:	e015      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f001 f957 	bl	80052e4 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800403a:	e00c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3324      	adds	r3, #36	; 0x24
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f001 fa00 	bl	8005448 <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	75fb      	strb	r3, [r7, #23]
      break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d109      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405c:	4b74      	ldr	r3, [pc, #464]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800405e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004060:	f023 0207 	bic.w	r2, r3, #7
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004068:	4971      	ldr	r1, [pc, #452]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800406a:	4313      	orrs	r3, r2
 800406c:	650b      	str	r3, [r1, #80]	; 0x50
 800406e:	e001      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	d04a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004088:	d031      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800408a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800408e:	d82b      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004094:	d02d      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d825      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800409c:	2bc0      	cmp	r3, #192	; 0xc0
 800409e:	d02a      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040a0:	2bc0      	cmp	r3, #192	; 0xc0
 80040a2:	d821      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040a4:	2b80      	cmp	r3, #128	; 0x80
 80040a6:	d016      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d81d      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d007      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80040b4:	e018      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b6:	4b5e      	ldr	r3, [pc, #376]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a5d      	ldr	r2, [pc, #372]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80040c2:	e019      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f90a 	bl	80052e4 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80040d4:	e010      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 f9b3 	bl	8005448 <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80040e6:	e007      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e004      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80040f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80040fe:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4949      	ldr	r1, [pc, #292]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	650b      	str	r3, [r1, #80]	; 0x50
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04f      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004126:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800412a:	d036      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800412c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004130:	d830      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d032      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413c:	d82a      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800413e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004142:	d02e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004144:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004148:	d824      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d018      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d81e      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d007      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004160:	e018      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004162:	4b33      	ldr	r3, [pc, #204]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	4a32      	ldr	r2, [pc, #200]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800416e:	e019      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f001 f8b4 	bl	80052e4 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004180:	e010      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f001 f95d 	bl	8005448 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004192:	e007      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
      break;
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80041a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ae:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b6:	491e      	ldr	r1, [pc, #120]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	650b      	str	r3, [r1, #80]	; 0x50
 80041bc:	e001      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d034      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	2b30      	cmp	r3, #48	; 0x30
 80041d4:	d01c      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	d817      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80041da:	2b20      	cmp	r3, #32
 80041dc:	d00c      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d813      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d10f      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80041f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80041f6:	e00e      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f870 	bl	80052e4 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004208:	e005      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
      break;
 800420e:	e002      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004210:	bf00      	nop
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004216:	7dfb      	ldrb	r3, [r7, #23]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800421e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004220:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004228:	4901      	ldr	r1, [pc, #4]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004230:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d047      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424c:	d030      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800424e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004252:	d82a      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004258:	d02c      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800425a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425e:	d824      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d018      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426a:	d81e      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d007      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004276:	e018      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004278:	4bb0      	ldr	r3, [pc, #704]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4aaf      	ldr	r2, [pc, #700]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800427e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004284:	e017      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f829 	bl	80052e4 <RCCEx_PLL2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004296:	e00e      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3324      	adds	r3, #36	; 0x24
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f8d2 	bl	8005448 <RCCEx_PLL3_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042a8:	e005      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042bc:	4b9f      	ldr	r3, [pc, #636]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c8:	499c      	ldr	r1, [pc, #624]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	650b      	str	r3, [r1, #80]	; 0x50
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d049      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e8:	d02e      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80042ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ee:	d828      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f4:	d02a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80042f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042fa:	d822      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80042fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004300:	d026      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004306:	d81c      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430c:	d010      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800430e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004312:	d816      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d111      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 ffdd 	bl	80052e4 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800432e:	e012      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f886 	bl	8005448 <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004340:	e009      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	e006      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004348:	bf00      	nop
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800435c:	4b77      	ldr	r3, [pc, #476]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004368:	4974      	ldr	r1, [pc, #464]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800436a:	4313      	orrs	r3, r2
 800436c:	650b      	str	r3, [r1, #80]	; 0x50
 800436e:	e001      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d053      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004386:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800438a:	d034      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800438c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004390:	d82e      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004396:	d030      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800439c:	d828      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d02c      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d822      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80043aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043ae:	d028      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80043b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043b4:	d81c      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80043b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ba:	d010      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80043bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c0:	d816      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01f      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80043c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043ca:	d111      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 ff86 	bl	80052e4 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043dc:	e014      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3324      	adds	r3, #36	; 0x24
 80043e2:	2101      	movs	r1, #1
 80043e4:	4618      	mov	r0, r3
 80043e6:	f001 f82f 	bl	8005448 <RCCEx_PLL3_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043ee:	e00b      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
      break;
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e006      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043fa:	bf00      	nop
 80043fc:	e004      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800440e:	4b4b      	ldr	r3, [pc, #300]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800441c:	4947      	ldr	r1, [pc, #284]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800441e:	4313      	orrs	r3, r2
 8004420:	658b      	str	r3, [r1, #88]	; 0x58
 8004422:	e001      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02f      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443c:	d00e      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800443e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004442:	d814      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444c:	d10f      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444e:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004458:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800445a:	e00c      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f000 ff3e 	bl	80052e4 <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	75fb      	strb	r3, [r7, #23]
      break;
 8004472:	e000      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800447c:	4b2f      	ldr	r3, [pc, #188]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004488:	492c      	ldr	r1, [pc, #176]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800448a:	4313      	orrs	r3, r2
 800448c:	650b      	str	r3, [r1, #80]	; 0x50
 800448e:	e001      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d032      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d81b      	bhi.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044e7 	.word	0x080044e7
 80044b4:	080044c1 	.word	0x080044c1
 80044b8:	080044cf 	.word	0x080044cf
 80044bc:	080044e7 	.word	0x080044e7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044cc:	e00c      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2102      	movs	r1, #2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 ff05 	bl	80052e4 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044de:	e003      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
      break;
 80044e4:	e000      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80044e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4910      	ldr	r1, [pc, #64]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004500:	e001      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 808a 	beq.w	8004628 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a09      	ldr	r2, [pc, #36]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800451a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004520:	f7fc ff56 	bl	80013d0 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004526:	e00d      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004528:	f7fc ff52 	bl	80013d0 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b64      	cmp	r3, #100	; 0x64
 8004534:	d906      	bls.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	75fb      	strb	r3, [r7, #23]
        break;
 800453a:	e009      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800453c:	58024400 	.word	0x58024400
 8004540:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004544:	4bba      	ldr	r3, [pc, #744]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0eb      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8004550:	7dfb      	ldrb	r3, [r7, #23]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d166      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004556:	4bb7      	ldr	r3, [pc, #732]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004558:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004560:	4053      	eors	r3, r2
 8004562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800456a:	4bb2      	ldr	r3, [pc, #712]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004574:	4baf      	ldr	r3, [pc, #700]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	4aae      	ldr	r2, [pc, #696]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800457a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004580:	4bac      	ldr	r3, [pc, #688]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4aab      	ldr	r2, [pc, #684]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800458c:	4aa9      	ldr	r2, [pc, #676]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459c:	d115      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fc ff17 	bl	80013d0 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045a4:	e00b      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fc ff13 	bl	80013d0 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d902      	bls.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	75fb      	strb	r3, [r7, #23]
            break;
 80045bc:	e005      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045be:	4b9d      	ldr	r3, [pc, #628]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ed      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d126      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045de:	d10d      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80045e0:	4b94      	ldr	r3, [pc, #592]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045ee:	0919      	lsrs	r1, r3, #4
 80045f0:	4b91      	ldr	r3, [pc, #580]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80045f2:	400b      	ands	r3, r1
 80045f4:	498f      	ldr	r1, [pc, #572]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	610b      	str	r3, [r1, #16]
 80045fa:	e005      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80045fc:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	4a8c      	ldr	r2, [pc, #560]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004602:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004606:	6113      	str	r3, [r2, #16]
 8004608:	4b8a      	ldr	r3, [pc, #552]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800460a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004616:	4987      	ldr	r1, [pc, #540]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004618:	4313      	orrs	r3, r2
 800461a:	670b      	str	r3, [r1, #112]	; 0x70
 800461c:	e004      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	75bb      	strb	r3, [r7, #22]
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d07f      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463a:	2b28      	cmp	r3, #40	; 0x28
 800463c:	d866      	bhi.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800463e:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004644:	08004713 	.word	0x08004713
 8004648:	0800470d 	.word	0x0800470d
 800464c:	0800470d 	.word	0x0800470d
 8004650:	0800470d 	.word	0x0800470d
 8004654:	0800470d 	.word	0x0800470d
 8004658:	0800470d 	.word	0x0800470d
 800465c:	0800470d 	.word	0x0800470d
 8004660:	0800470d 	.word	0x0800470d
 8004664:	080046e9 	.word	0x080046e9
 8004668:	0800470d 	.word	0x0800470d
 800466c:	0800470d 	.word	0x0800470d
 8004670:	0800470d 	.word	0x0800470d
 8004674:	0800470d 	.word	0x0800470d
 8004678:	0800470d 	.word	0x0800470d
 800467c:	0800470d 	.word	0x0800470d
 8004680:	0800470d 	.word	0x0800470d
 8004684:	080046fb 	.word	0x080046fb
 8004688:	0800470d 	.word	0x0800470d
 800468c:	0800470d 	.word	0x0800470d
 8004690:	0800470d 	.word	0x0800470d
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	0800470d 	.word	0x0800470d
 80046a4:	08004713 	.word	0x08004713
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	0800470d 	.word	0x0800470d
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	0800470d 	.word	0x0800470d
 80046c4:	08004713 	.word	0x08004713
 80046c8:	0800470d 	.word	0x0800470d
 80046cc:	0800470d 	.word	0x0800470d
 80046d0:	0800470d 	.word	0x0800470d
 80046d4:	0800470d 	.word	0x0800470d
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	08004713 	.word	0x08004713
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	2101      	movs	r1, #1
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fdf8 	bl	80052e4 <RCCEx_PLL2_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046f8:	e00c      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3324      	adds	r3, #36	; 0x24
 80046fe:	2101      	movs	r1, #1
 8004700:	4618      	mov	r0, r3
 8004702:	f000 fea1 	bl	8005448 <RCCEx_PLL3_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	75fb      	strb	r3, [r7, #23]
      break;
 8004710:	e000      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800471a:	4b46      	ldr	r3, [pc, #280]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004728:	4942      	ldr	r1, [pc, #264]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	654b      	str	r3, [r1, #84]	; 0x54
 800472e:	e001      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d038      	beq.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004744:	2b05      	cmp	r3, #5
 8004746:	d821      	bhi.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004748:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800474a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474e:	bf00      	nop
 8004750:	08004793 	.word	0x08004793
 8004754:	08004769 	.word	0x08004769
 8004758:	0800477b 	.word	0x0800477b
 800475c:	08004793 	.word	0x08004793
 8004760:	08004793 	.word	0x08004793
 8004764:	08004793 	.word	0x08004793
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	2101      	movs	r1, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fdb8 	bl	80052e4 <RCCEx_PLL2_Config>
 8004774:	4603      	mov	r3, r0
 8004776:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004778:	e00c      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fe61 	bl	8005448 <RCCEx_PLL3_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	75fb      	strb	r3, [r7, #23]
      break;
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800479c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a6:	4923      	ldr	r1, [pc, #140]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	654b      	str	r3, [r1, #84]	; 0x54
 80047ac:	e001      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d040      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047c4:	2b05      	cmp	r3, #5
 80047c6:	d821      	bhi.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	08004813 	.word	0x08004813
 80047d4:	080047e9 	.word	0x080047e9
 80047d8:	080047fb 	.word	0x080047fb
 80047dc:	08004813 	.word	0x08004813
 80047e0:	08004813 	.word	0x08004813
 80047e4:	08004813 	.word	0x08004813
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fd78 	bl	80052e4 <RCCEx_PLL2_Config>
 80047f4:	4603      	mov	r3, r0
 80047f6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047f8:	e00c      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3324      	adds	r3, #36	; 0x24
 80047fe:	2101      	movs	r1, #1
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fe21 	bl	8005448 <RCCEx_PLL3_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800480a:	e003      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	75fb      	strb	r3, [r7, #23]
      break;
 8004810:	e000      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d110      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481e:	f023 0207 	bic.w	r2, r3, #7
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004828:	4902      	ldr	r1, [pc, #8]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	658b      	str	r3, [r1, #88]	; 0x58
 800482e:	e007      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004830:	58024800 	.word	0x58024800
 8004834:	58024400 	.word	0x58024400
 8004838:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d04b      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004856:	d02e      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800485c:	d828      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d02a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d822      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800486a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800486e:	d026      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004870:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004874:	d81c      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800487a:	d010      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800487c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004880:	d816      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01d      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004886:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800488a:	d111      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3304      	adds	r3, #4
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fd26 	bl	80052e4 <RCCEx_PLL2_Config>
 8004898:	4603      	mov	r3, r0
 800489a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800489c:	e012      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3324      	adds	r3, #36	; 0x24
 80048a2:	2102      	movs	r1, #2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fdcf 	bl	8005448 <RCCEx_PLL3_Config>
 80048aa:	4603      	mov	r3, r0
 80048ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048ae:	e009      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
      break;
 80048b4:	e006      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048b6:	bf00      	nop
 80048b8:	e004      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048ba:	bf00      	nop
 80048bc:	e002      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048be:	bf00      	nop
 80048c0:	e000      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80048c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048c4:	7dfb      	ldrb	r3, [r7, #23]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ca:	4bb3      	ldr	r3, [pc, #716]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d8:	49af      	ldr	r1, [pc, #700]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	654b      	str	r3, [r1, #84]	; 0x54
 80048de:	e001      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
 80048e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d04b      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048fa:	d02e      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80048fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004900:	d828      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004906:	d02a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800490c:	d822      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800490e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004912:	d026      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004918:	d81c      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800491a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491e:	d010      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004924:	d816      	bhi.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d01d      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492e:	d111      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	2100      	movs	r1, #0
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fcd4 	bl	80052e4 <RCCEx_PLL2_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004940:	e012      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3324      	adds	r3, #36	; 0x24
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fd7d 	bl	8005448 <RCCEx_PLL3_Config>
 800494e:	4603      	mov	r3, r0
 8004950:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004952:	e009      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
      break;
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800495a:	bf00      	nop
 800495c:	e004      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800495e:	bf00      	nop
 8004960:	e002      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004962:	bf00      	nop
 8004964:	e000      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004966:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10a      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800496e:	4b8a      	ldr	r3, [pc, #552]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800497c:	4986      	ldr	r1, [pc, #536]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800497e:	4313      	orrs	r3, r2
 8004980:	658b      	str	r3, [r1, #88]	; 0x58
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7dfb      	ldrb	r3, [r7, #23]
 8004986:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d04b      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800499a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800499e:	d02e      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80049a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049a4:	d828      	bhi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049aa:	d02a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	d822      	bhi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049b6:	d026      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80049b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049bc:	d81c      	bhi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c2:	d010      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80049c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049c8:	d816      	bhi.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01d      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	d111      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3304      	adds	r3, #4
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fc82 	bl	80052e4 <RCCEx_PLL2_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049e4:	e012      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3324      	adds	r3, #36	; 0x24
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fd2b 	bl	8005448 <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049f6:	e009      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	75fb      	strb	r3, [r7, #23]
      break;
 80049fc:	e006      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80049fe:	bf00      	nop
 8004a00:	e004      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a02:	bf00      	nop
 8004a04:	e002      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a06:	bf00      	nop
 8004a08:	e000      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a12:	4b61      	ldr	r3, [pc, #388]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a20:	495d      	ldr	r1, [pc, #372]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	658b      	str	r3, [r1, #88]	; 0x58
 8004a26:	e001      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	7dfb      	ldrb	r3, [r7, #23]
 8004a2a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d01a      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	d10a      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3324      	adds	r3, #36	; 0x24
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fcfc 	bl	8005448 <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a5a:	4b4f      	ldr	r3, [pc, #316]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a68:	494b      	ldr	r1, [pc, #300]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a84:	d10a      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3324      	adds	r3, #36	; 0x24
 8004a8a:	2102      	movs	r1, #2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fcdb 	bl	8005448 <RCCEx_PLL3_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004aaa:	493b      	ldr	r1, [pc, #236]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d034      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac6:	d01d      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004acc:	d817      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ad8:	e011      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fbff 	bl	80052e4 <RCCEx_PLL2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004aea:	e00c      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3324      	adds	r3, #36	; 0x24
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fca8 	bl	8005448 <RCCEx_PLL3_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	75fb      	strb	r3, [r7, #23]
      break;
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b0c:	4b22      	ldr	r3, [pc, #136]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b1a:	491f      	ldr	r1, [pc, #124]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	658b      	str	r3, [r1, #88]	; 0x58
 8004b20:	e001      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d036      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b3c:	d01c      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b42:	d816      	bhi.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b48:	d003      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4e:	d007      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004b50:	e00f      	b.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b5e:	e00c      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3324      	adds	r3, #36	; 0x24
 8004b64:	2101      	movs	r1, #1
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fc6e 	bl	8005448 <RCCEx_PLL3_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	75fb      	strb	r3, [r7, #23]
      break;
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8e:	4902      	ldr	r1, [pc, #8]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	654b      	str	r3, [r1, #84]	; 0x54
 8004b94:	e004      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d029      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d007      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004bba:	e00f      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bbc:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a68      	ldr	r2, [pc, #416]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bc8:	e00b      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	2102      	movs	r1, #2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fb87 	bl	80052e4 <RCCEx_PLL2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004be8:	4b5e      	ldr	r3, [pc, #376]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf4:	495b      	ldr	r1, [pc, #364]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004bfa:	e001      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3324      	adds	r3, #36	; 0x24
 8004c10:	2102      	movs	r1, #2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fc18 	bl	8005448 <RCCEx_PLL3_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d032      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c38:	d017      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c3e:	d811      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c44:	d013      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004c46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c4a:	d80b      	bhi.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c54:	d106      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c56:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a42      	ldr	r2, [pc, #264]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c62:	e007      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
      break;
 8004c68:	e004      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e002      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c88:	4936      	ldr	r1, [pc, #216]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	654b      	str	r3, [r1, #84]	; 0x54
 8004c8e:	e001      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ca0:	4b30      	ldr	r3, [pc, #192]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cac:	492d      	ldr	r1, [pc, #180]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cbe:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cca:	4926      	ldr	r1, [pc, #152]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d008      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	491e      	ldr	r1, [pc, #120]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d04:	6113      	str	r3, [r2, #16]
 8004d06:	4b17      	ldr	r3, [pc, #92]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004d10:	4914      	ldr	r1, [pc, #80]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da08      	bge.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d1e:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	490e      	ldr	r1, [pc, #56]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d009      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4a:	4906      	ldr	r1, [pc, #24]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d50:	7dbb      	ldrb	r3, [r7, #22]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	58024400 	.word	0x58024400

08004d68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004d6c:	f7ff f894 	bl	8003e98 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	091b      	lsrs	r3, r3, #4
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	58024400 	.word	0x58024400
 8004d90:	080071a0 	.word	0x080071a0

08004d94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	; 0x24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d9c:	4ba1      	ldr	r3, [pc, #644]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004da6:	4b9f      	ldr	r3, [pc, #636]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	0b1b      	lsrs	r3, r3, #12
 8004dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004db2:	4b9c      	ldr	r3, [pc, #624]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004dbe:	4b99      	ldr	r3, [pc, #612]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	08db      	lsrs	r3, r3, #3
 8004dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8111 	beq.w	8005004 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	f000 8083 	beq.w	8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	f200 80a1 	bhi.w	8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d056      	beq.n	8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dfe:	e099      	b.n	8004f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e00:	4b88      	ldr	r3, [pc, #544]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02d      	beq.n	8004e68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e0c:	4b85      	ldr	r3, [pc, #532]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	08db      	lsrs	r3, r3, #3
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	4a84      	ldr	r2, [pc, #528]	; (8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	ee07 3a90 	vmov	s15, r3
 8004e24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e66:	e087      	b.n	8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005030 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b6a      	ldr	r3, [pc, #424]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eaa:	e065      	b.n	8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebe:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eee:	e043      	b.n	8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f02:	4b48      	ldr	r3, [pc, #288]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f16:	eddf 5a45 	vldr	s11, [pc, #276]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f32:	e021      	b.n	8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f46:	4b37      	ldr	r3, [pc, #220]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800502c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f78:	4b2a      	ldr	r3, [pc, #168]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	0a5b      	lsrs	r3, r3, #9
 8004f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9e:	ee17 2a90 	vmov	r2, s15
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fcc:	ee17 2a90 	vmov	r2, s15
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fd4:	4b13      	ldr	r3, [pc, #76]	; (8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffa:	ee17 2a90 	vmov	r2, s15
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005002:	e008      	b.n	8005016 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	609a      	str	r2, [r3, #8]
}
 8005016:	bf00      	nop
 8005018:	3724      	adds	r7, #36	; 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	58024400 	.word	0x58024400
 8005028:	03d09000 	.word	0x03d09000
 800502c:	46000000 	.word	0x46000000
 8005030:	4c742400 	.word	0x4c742400
 8005034:	4a742400 	.word	0x4a742400
 8005038:	4bb71b00 	.word	0x4bb71b00

0800503c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005044:	4ba1      	ldr	r3, [pc, #644]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800504e:	4b9f      	ldr	r3, [pc, #636]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005052:	0d1b      	lsrs	r3, r3, #20
 8005054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005058:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800505a:	4b9c      	ldr	r3, [pc, #624]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005066:	4b99      	ldr	r3, [pc, #612]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	08db      	lsrs	r3, r3, #3
 800506c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8111 	beq.w	80052ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b02      	cmp	r3, #2
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b02      	cmp	r3, #2
 8005096:	f200 80a1 	bhi.w	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d056      	beq.n	8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050a6:	e099      	b.n	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a8:	4b88      	ldr	r3, [pc, #544]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02d      	beq.n	8005110 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b4:	4b85      	ldr	r3, [pc, #532]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	4a84      	ldr	r2, [pc, #528]	; (80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800510e:	e087      	b.n	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b6a      	ldr	r3, [pc, #424]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005152:	e065      	b.n	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b59      	ldr	r3, [pc, #356]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a03 	vldr	s12, [r7, #12]
 800517a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005196:	e043      	b.n	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b48      	ldr	r3, [pc, #288]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80051be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051da:	e021      	b.n	8005220 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b37      	ldr	r3, [pc, #220]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005202:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800521e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005220:	4b2a      	ldr	r3, [pc, #168]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800523a:	edd7 6a07 	vldr	s13, [r7, #28]
 800523e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005246:	ee17 2a90 	vmov	r2, s15
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800524e:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005260:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005268:	edd7 6a07 	vldr	s13, [r7, #28]
 800526c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005274:	ee17 2a90 	vmov	r2, s15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005296:	edd7 6a07 	vldr	s13, [r7, #28]
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a2:	ee17 2a90 	vmov	r2, s15
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
}
 80052be:	bf00      	nop
 80052c0:	3724      	adds	r7, #36	; 0x24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400
 80052d0:	03d09000 	.word	0x03d09000
 80052d4:	46000000 	.word	0x46000000
 80052d8:	4c742400 	.word	0x4c742400
 80052dc:	4a742400 	.word	0x4a742400
 80052e0:	4bb71b00 	.word	0x4bb71b00

080052e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052f2:	4b53      	ldr	r3, [pc, #332]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d101      	bne.n	8005302 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e099      	b.n	8005436 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005302:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a4e      	ldr	r2, [pc, #312]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005308:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fc f85f 	bl	80013d0 <HAL_GetTick>
 8005312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005314:	e008      	b.n	8005328 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005316:	f7fc f85b 	bl	80013d0 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e086      	b.n	8005436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005328:	4b45      	ldr	r3, [pc, #276]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f0      	bne.n	8005316 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005334:	4b42      	ldr	r3, [pc, #264]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	493f      	ldr	r1, [pc, #252]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005344:	4313      	orrs	r3, r2
 8005346:	628b      	str	r3, [r1, #40]	; 0x28
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	3b01      	subs	r3, #1
 800534e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	3b01      	subs	r3, #1
 8005358:	025b      	lsls	r3, r3, #9
 800535a:	b29b      	uxth	r3, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	3b01      	subs	r3, #1
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	3b01      	subs	r3, #1
 8005372:	061b      	lsls	r3, r3, #24
 8005374:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005378:	4931      	ldr	r1, [pc, #196]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 800537a:	4313      	orrs	r3, r2
 800537c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800537e:	4b30      	ldr	r3, [pc, #192]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005382:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	492d      	ldr	r1, [pc, #180]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 800538c:	4313      	orrs	r3, r2
 800538e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005390:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	f023 0220 	bic.w	r2, r3, #32
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4928      	ldr	r1, [pc, #160]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053a2:	4b27      	ldr	r3, [pc, #156]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	4a26      	ldr	r2, [pc, #152]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	f023 0310 	bic.w	r3, r3, #16
 80053ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053ae:	4b24      	ldr	r3, [pc, #144]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <RCCEx_PLL2_Config+0x160>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	69d2      	ldr	r2, [r2, #28]
 80053ba:	00d2      	lsls	r2, r2, #3
 80053bc:	4920      	ldr	r1, [pc, #128]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053c2:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053c8:	f043 0310 	orr.w	r3, r3, #16
 80053cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053d4:	4b1a      	ldr	r3, [pc, #104]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a19      	ldr	r2, [pc, #100]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053e0:	e00f      	b.n	8005402 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d106      	bne.n	80053f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053e8:	4b15      	ldr	r3, [pc, #84]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053f4:	e005      	b.n	8005402 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053f6:	4b12      	ldr	r3, [pc, #72]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fa:	4a11      	ldr	r2, [pc, #68]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 80053fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005400:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005402:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a0e      	ldr	r2, [pc, #56]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 8005408:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800540c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540e:	f7fb ffdf 	bl	80013d0 <HAL_GetTick>
 8005412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005414:	e008      	b.n	8005428 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005416:	f7fb ffdb 	bl	80013d0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e006      	b.n	8005436 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <RCCEx_PLL2_Config+0x15c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	58024400 	.word	0x58024400
 8005444:	ffff0007 	.word	0xffff0007

08005448 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005456:	4b53      	ldr	r3, [pc, #332]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	f003 0303 	and.w	r3, r3, #3
 800545e:	2b03      	cmp	r3, #3
 8005460:	d101      	bne.n	8005466 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e099      	b.n	800559a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005466:	4b4f      	ldr	r3, [pc, #316]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4e      	ldr	r2, [pc, #312]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800546c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005472:	f7fb ffad 	bl	80013d0 <HAL_GetTick>
 8005476:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005478:	e008      	b.n	800548c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800547a:	f7fb ffa9 	bl	80013d0 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e086      	b.n	800559a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800548c:	4b45      	ldr	r3, [pc, #276]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f0      	bne.n	800547a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005498:	4b42      	ldr	r3, [pc, #264]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800549a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	051b      	lsls	r3, r3, #20
 80054a6:	493f      	ldr	r1, [pc, #252]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	628b      	str	r3, [r1, #40]	; 0x28
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	b29b      	uxth	r3, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054dc:	4931      	ldr	r1, [pc, #196]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	492d      	ldr	r1, [pc, #180]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054f4:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	4928      	ldr	r1, [pc, #160]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005502:	4313      	orrs	r3, r2
 8005504:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005506:	4b27      	ldr	r3, [pc, #156]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800550c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <RCCEx_PLL3_Config+0x160>)
 8005518:	4013      	ands	r3, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	69d2      	ldr	r2, [r2, #28]
 800551e:	00d2      	lsls	r2, r2, #3
 8005520:	4920      	ldr	r1, [pc, #128]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005522:	4313      	orrs	r3, r2
 8005524:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005526:	4b1f      	ldr	r3, [pc, #124]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	4a1e      	ldr	r2, [pc, #120]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800552c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005530:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005538:	4b1a      	ldr	r3, [pc, #104]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800553e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005542:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005544:	e00f      	b.n	8005566 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d106      	bne.n	800555a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800554c:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005552:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005558:	e005      	b.n	8005566 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005564:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005566:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800556c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005572:	f7fb ff2d 	bl	80013d0 <HAL_GetTick>
 8005576:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005578:	e008      	b.n	800558c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800557a:	f7fb ff29 	bl	80013d0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e006      	b.n	800559a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <RCCEx_PLL3_Config+0x15c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0f0      	beq.n	800557a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
 80055a8:	ffff0007 	.word	0xffff0007

080055ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e042      	b.n	8005644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7fb fde7 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2224      	movs	r2, #36	; 0x24
 80055da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f82c 	bl	800564c <UART_SetConfig>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e022      	b.n	8005644 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fe7e 	bl	8006308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800561a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800562a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 ff05 	bl	800644c <UART_CheckIdleState>
 8005642:	4603      	mov	r3, r0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	b5b0      	push	{r4, r5, r7, lr}
 800564e:	b08e      	sub	sp, #56	; 0x38
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	4313      	orrs	r3, r2
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	4bbf      	ldr	r3, [pc, #764]	; (8005978 <UART_SetConfig+0x32c>)
 800567a:	4013      	ands	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005682:	430b      	orrs	r3, r1
 8005684:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4ab5      	ldr	r2, [pc, #724]	; (800597c <UART_SetConfig+0x330>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d004      	beq.n	80056b6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b2:	4313      	orrs	r3, r2
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	4bb0      	ldr	r3, [pc, #704]	; (8005980 <UART_SetConfig+0x334>)
 80056be:	4013      	ands	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d0:	f023 010f 	bic.w	r1, r3, #15
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4aa7      	ldr	r2, [pc, #668]	; (8005984 <UART_SetConfig+0x338>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d176      	bne.n	80057d8 <UART_SetConfig+0x18c>
 80056ea:	4ba7      	ldr	r3, [pc, #668]	; (8005988 <UART_SetConfig+0x33c>)
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056f2:	2b28      	cmp	r3, #40	; 0x28
 80056f4:	d86c      	bhi.n	80057d0 <UART_SetConfig+0x184>
 80056f6:	a201      	add	r2, pc, #4	; (adr r2, 80056fc <UART_SetConfig+0xb0>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	080057a1 	.word	0x080057a1
 8005700:	080057d1 	.word	0x080057d1
 8005704:	080057d1 	.word	0x080057d1
 8005708:	080057d1 	.word	0x080057d1
 800570c:	080057d1 	.word	0x080057d1
 8005710:	080057d1 	.word	0x080057d1
 8005714:	080057d1 	.word	0x080057d1
 8005718:	080057d1 	.word	0x080057d1
 800571c:	080057a9 	.word	0x080057a9
 8005720:	080057d1 	.word	0x080057d1
 8005724:	080057d1 	.word	0x080057d1
 8005728:	080057d1 	.word	0x080057d1
 800572c:	080057d1 	.word	0x080057d1
 8005730:	080057d1 	.word	0x080057d1
 8005734:	080057d1 	.word	0x080057d1
 8005738:	080057d1 	.word	0x080057d1
 800573c:	080057b1 	.word	0x080057b1
 8005740:	080057d1 	.word	0x080057d1
 8005744:	080057d1 	.word	0x080057d1
 8005748:	080057d1 	.word	0x080057d1
 800574c:	080057d1 	.word	0x080057d1
 8005750:	080057d1 	.word	0x080057d1
 8005754:	080057d1 	.word	0x080057d1
 8005758:	080057d1 	.word	0x080057d1
 800575c:	080057b9 	.word	0x080057b9
 8005760:	080057d1 	.word	0x080057d1
 8005764:	080057d1 	.word	0x080057d1
 8005768:	080057d1 	.word	0x080057d1
 800576c:	080057d1 	.word	0x080057d1
 8005770:	080057d1 	.word	0x080057d1
 8005774:	080057d1 	.word	0x080057d1
 8005778:	080057d1 	.word	0x080057d1
 800577c:	080057c1 	.word	0x080057c1
 8005780:	080057d1 	.word	0x080057d1
 8005784:	080057d1 	.word	0x080057d1
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057d1 	.word	0x080057d1
 8005790:	080057d1 	.word	0x080057d1
 8005794:	080057d1 	.word	0x080057d1
 8005798:	080057d1 	.word	0x080057d1
 800579c:	080057c9 	.word	0x080057c9
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a6:	e326      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ae:	e322      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b6:	e31e      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057be:	e31a      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057c0:	2320      	movs	r3, #32
 80057c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c6:	e316      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057c8:	2340      	movs	r3, #64	; 0x40
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e312      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e30e      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6b      	ldr	r2, [pc, #428]	; (800598c <UART_SetConfig+0x340>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d130      	bne.n	8005844 <UART_SetConfig+0x1f8>
 80057e2:	4b69      	ldr	r3, [pc, #420]	; (8005988 <UART_SetConfig+0x33c>)
 80057e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	2b05      	cmp	r3, #5
 80057ec:	d826      	bhi.n	800583c <UART_SetConfig+0x1f0>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x1a8>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	0800580d 	.word	0x0800580d
 80057f8:	08005815 	.word	0x08005815
 80057fc:	0800581d 	.word	0x0800581d
 8005800:	08005825 	.word	0x08005825
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005835 	.word	0x08005835
 800580c:	2300      	movs	r3, #0
 800580e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005812:	e2f0      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005814:	2304      	movs	r3, #4
 8005816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581a:	e2ec      	b.n	8005df6 <UART_SetConfig+0x7aa>
 800581c:	2308      	movs	r3, #8
 800581e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005822:	e2e8      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005824:	2310      	movs	r3, #16
 8005826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582a:	e2e4      	b.n	8005df6 <UART_SetConfig+0x7aa>
 800582c:	2320      	movs	r3, #32
 800582e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005832:	e2e0      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005834:	2340      	movs	r3, #64	; 0x40
 8005836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583a:	e2dc      	b.n	8005df6 <UART_SetConfig+0x7aa>
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005842:	e2d8      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a51      	ldr	r2, [pc, #324]	; (8005990 <UART_SetConfig+0x344>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d130      	bne.n	80058b0 <UART_SetConfig+0x264>
 800584e:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <UART_SetConfig+0x33c>)
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	2b05      	cmp	r3, #5
 8005858:	d826      	bhi.n	80058a8 <UART_SetConfig+0x25c>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <UART_SetConfig+0x214>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	08005879 	.word	0x08005879
 8005864:	08005881 	.word	0x08005881
 8005868:	08005889 	.word	0x08005889
 800586c:	08005891 	.word	0x08005891
 8005870:	08005899 	.word	0x08005899
 8005874:	080058a1 	.word	0x080058a1
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587e:	e2ba      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005880:	2304      	movs	r3, #4
 8005882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005886:	e2b6      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005888:	2308      	movs	r3, #8
 800588a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588e:	e2b2      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005896:	e2ae      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005898:	2320      	movs	r3, #32
 800589a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589e:	e2aa      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80058a0:	2340      	movs	r3, #64	; 0x40
 80058a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a6:	e2a6      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e2a2      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a37      	ldr	r2, [pc, #220]	; (8005994 <UART_SetConfig+0x348>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d130      	bne.n	800591c <UART_SetConfig+0x2d0>
 80058ba:	4b33      	ldr	r3, [pc, #204]	; (8005988 <UART_SetConfig+0x33c>)
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	d826      	bhi.n	8005914 <UART_SetConfig+0x2c8>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <UART_SetConfig+0x280>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	080058f5 	.word	0x080058f5
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800590d 	.word	0x0800590d
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ea:	e284      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80058ec:	2304      	movs	r3, #4
 80058ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058f2:	e280      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80058f4:	2308      	movs	r3, #8
 80058f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058fa:	e27c      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80058fc:	2310      	movs	r3, #16
 80058fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005902:	e278      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005904:	2320      	movs	r3, #32
 8005906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800590a:	e274      	b.n	8005df6 <UART_SetConfig+0x7aa>
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005912:	e270      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005914:	2380      	movs	r3, #128	; 0x80
 8005916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591a:	e26c      	b.n	8005df6 <UART_SetConfig+0x7aa>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1d      	ldr	r2, [pc, #116]	; (8005998 <UART_SetConfig+0x34c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d142      	bne.n	80059ac <UART_SetConfig+0x360>
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <UART_SetConfig+0x33c>)
 8005928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	2b05      	cmp	r3, #5
 8005930:	d838      	bhi.n	80059a4 <UART_SetConfig+0x358>
 8005932:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <UART_SetConfig+0x2ec>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005951 	.word	0x08005951
 800593c:	08005959 	.word	0x08005959
 8005940:	08005961 	.word	0x08005961
 8005944:	08005969 	.word	0x08005969
 8005948:	08005971 	.word	0x08005971
 800594c:	0800599d 	.word	0x0800599d
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005956:	e24e      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800595e:	e24a      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005966:	e246      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800596e:	e242      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005970:	2320      	movs	r3, #32
 8005972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005976:	e23e      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005978:	cfff69f3 	.word	0xcfff69f3
 800597c:	58000c00 	.word	0x58000c00
 8005980:	11fff4ff 	.word	0x11fff4ff
 8005984:	40011000 	.word	0x40011000
 8005988:	58024400 	.word	0x58024400
 800598c:	40004400 	.word	0x40004400
 8005990:	40004800 	.word	0x40004800
 8005994:	40004c00 	.word	0x40004c00
 8005998:	40005000 	.word	0x40005000
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059a2:	e228      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80059aa:	e224      	b.n	8005df6 <UART_SetConfig+0x7aa>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4ab1      	ldr	r2, [pc, #708]	; (8005c78 <UART_SetConfig+0x62c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d176      	bne.n	8005aa4 <UART_SetConfig+0x458>
 80059b6:	4bb1      	ldr	r3, [pc, #708]	; (8005c7c <UART_SetConfig+0x630>)
 80059b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059be:	2b28      	cmp	r3, #40	; 0x28
 80059c0:	d86c      	bhi.n	8005a9c <UART_SetConfig+0x450>
 80059c2:	a201      	add	r2, pc, #4	; (adr r2, 80059c8 <UART_SetConfig+0x37c>)
 80059c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c8:	08005a6d 	.word	0x08005a6d
 80059cc:	08005a9d 	.word	0x08005a9d
 80059d0:	08005a9d 	.word	0x08005a9d
 80059d4:	08005a9d 	.word	0x08005a9d
 80059d8:	08005a9d 	.word	0x08005a9d
 80059dc:	08005a9d 	.word	0x08005a9d
 80059e0:	08005a9d 	.word	0x08005a9d
 80059e4:	08005a9d 	.word	0x08005a9d
 80059e8:	08005a75 	.word	0x08005a75
 80059ec:	08005a9d 	.word	0x08005a9d
 80059f0:	08005a9d 	.word	0x08005a9d
 80059f4:	08005a9d 	.word	0x08005a9d
 80059f8:	08005a9d 	.word	0x08005a9d
 80059fc:	08005a9d 	.word	0x08005a9d
 8005a00:	08005a9d 	.word	0x08005a9d
 8005a04:	08005a9d 	.word	0x08005a9d
 8005a08:	08005a7d 	.word	0x08005a7d
 8005a0c:	08005a9d 	.word	0x08005a9d
 8005a10:	08005a9d 	.word	0x08005a9d
 8005a14:	08005a9d 	.word	0x08005a9d
 8005a18:	08005a9d 	.word	0x08005a9d
 8005a1c:	08005a9d 	.word	0x08005a9d
 8005a20:	08005a9d 	.word	0x08005a9d
 8005a24:	08005a9d 	.word	0x08005a9d
 8005a28:	08005a85 	.word	0x08005a85
 8005a2c:	08005a9d 	.word	0x08005a9d
 8005a30:	08005a9d 	.word	0x08005a9d
 8005a34:	08005a9d 	.word	0x08005a9d
 8005a38:	08005a9d 	.word	0x08005a9d
 8005a3c:	08005a9d 	.word	0x08005a9d
 8005a40:	08005a9d 	.word	0x08005a9d
 8005a44:	08005a9d 	.word	0x08005a9d
 8005a48:	08005a8d 	.word	0x08005a8d
 8005a4c:	08005a9d 	.word	0x08005a9d
 8005a50:	08005a9d 	.word	0x08005a9d
 8005a54:	08005a9d 	.word	0x08005a9d
 8005a58:	08005a9d 	.word	0x08005a9d
 8005a5c:	08005a9d 	.word	0x08005a9d
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a9d 	.word	0x08005a9d
 8005a68:	08005a95 	.word	0x08005a95
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a72:	e1c0      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a7a:	e1bc      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a82:	e1b8      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a8a:	e1b4      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005a8c:	2320      	movs	r3, #32
 8005a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a92:	e1b0      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005a94:	2340      	movs	r3, #64	; 0x40
 8005a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005a9a:	e1ac      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aa2:	e1a8      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a75      	ldr	r2, [pc, #468]	; (8005c80 <UART_SetConfig+0x634>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d130      	bne.n	8005b10 <UART_SetConfig+0x4c4>
 8005aae:	4b73      	ldr	r3, [pc, #460]	; (8005c7c <UART_SetConfig+0x630>)
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d826      	bhi.n	8005b08 <UART_SetConfig+0x4bc>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <UART_SetConfig+0x474>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005ad9 	.word	0x08005ad9
 8005ac4:	08005ae1 	.word	0x08005ae1
 8005ac8:	08005ae9 	.word	0x08005ae9
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af9 	.word	0x08005af9
 8005ad4:	08005b01 	.word	0x08005b01
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ade:	e18a      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ae6:	e186      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005aee:	e182      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005af6:	e17e      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005af8:	2320      	movs	r3, #32
 8005afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005afe:	e17a      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b06:	e176      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b0e:	e172      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a5b      	ldr	r2, [pc, #364]	; (8005c84 <UART_SetConfig+0x638>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d130      	bne.n	8005b7c <UART_SetConfig+0x530>
 8005b1a:	4b58      	ldr	r3, [pc, #352]	; (8005c7c <UART_SetConfig+0x630>)
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d826      	bhi.n	8005b74 <UART_SetConfig+0x528>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <UART_SetConfig+0x4e0>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b45 	.word	0x08005b45
 8005b30:	08005b4d 	.word	0x08005b4d
 8005b34:	08005b55 	.word	0x08005b55
 8005b38:	08005b5d 	.word	0x08005b5d
 8005b3c:	08005b65 	.word	0x08005b65
 8005b40:	08005b6d 	.word	0x08005b6d
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b4a:	e154      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b52:	e150      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b5a:	e14c      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b62:	e148      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b64:	2320      	movs	r3, #32
 8005b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b6a:	e144      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b6c:	2340      	movs	r3, #64	; 0x40
 8005b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b72:	e140      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005b7a:	e13c      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a41      	ldr	r2, [pc, #260]	; (8005c88 <UART_SetConfig+0x63c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	f040 8082 	bne.w	8005c8c <UART_SetConfig+0x640>
 8005b88:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <UART_SetConfig+0x630>)
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b90:	2b28      	cmp	r3, #40	; 0x28
 8005b92:	d86d      	bhi.n	8005c70 <UART_SetConfig+0x624>
 8005b94:	a201      	add	r2, pc, #4	; (adr r2, 8005b9c <UART_SetConfig+0x550>)
 8005b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b9a:	bf00      	nop
 8005b9c:	08005c41 	.word	0x08005c41
 8005ba0:	08005c71 	.word	0x08005c71
 8005ba4:	08005c71 	.word	0x08005c71
 8005ba8:	08005c71 	.word	0x08005c71
 8005bac:	08005c71 	.word	0x08005c71
 8005bb0:	08005c71 	.word	0x08005c71
 8005bb4:	08005c71 	.word	0x08005c71
 8005bb8:	08005c71 	.word	0x08005c71
 8005bbc:	08005c49 	.word	0x08005c49
 8005bc0:	08005c71 	.word	0x08005c71
 8005bc4:	08005c71 	.word	0x08005c71
 8005bc8:	08005c71 	.word	0x08005c71
 8005bcc:	08005c71 	.word	0x08005c71
 8005bd0:	08005c71 	.word	0x08005c71
 8005bd4:	08005c71 	.word	0x08005c71
 8005bd8:	08005c71 	.word	0x08005c71
 8005bdc:	08005c51 	.word	0x08005c51
 8005be0:	08005c71 	.word	0x08005c71
 8005be4:	08005c71 	.word	0x08005c71
 8005be8:	08005c71 	.word	0x08005c71
 8005bec:	08005c71 	.word	0x08005c71
 8005bf0:	08005c71 	.word	0x08005c71
 8005bf4:	08005c71 	.word	0x08005c71
 8005bf8:	08005c71 	.word	0x08005c71
 8005bfc:	08005c59 	.word	0x08005c59
 8005c00:	08005c71 	.word	0x08005c71
 8005c04:	08005c71 	.word	0x08005c71
 8005c08:	08005c71 	.word	0x08005c71
 8005c0c:	08005c71 	.word	0x08005c71
 8005c10:	08005c71 	.word	0x08005c71
 8005c14:	08005c71 	.word	0x08005c71
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005c61 	.word	0x08005c61
 8005c20:	08005c71 	.word	0x08005c71
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c71 	.word	0x08005c71
 8005c2c:	08005c71 	.word	0x08005c71
 8005c30:	08005c71 	.word	0x08005c71
 8005c34:	08005c71 	.word	0x08005c71
 8005c38:	08005c71 	.word	0x08005c71
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	2301      	movs	r3, #1
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e0d6      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e0d2      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e0ce      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	e0ca      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c60:	2320      	movs	r3, #32
 8005c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c66:	e0c6      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c68:	2340      	movs	r3, #64	; 0x40
 8005c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c6e:	e0c2      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c76:	e0be      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005c78:	40011400 	.word	0x40011400
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	40007800 	.word	0x40007800
 8005c84:	40007c00 	.word	0x40007c00
 8005c88:	40011800 	.word	0x40011800
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4aad      	ldr	r2, [pc, #692]	; (8005f48 <UART_SetConfig+0x8fc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d176      	bne.n	8005d84 <UART_SetConfig+0x738>
 8005c96:	4bad      	ldr	r3, [pc, #692]	; (8005f4c <UART_SetConfig+0x900>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c9e:	2b28      	cmp	r3, #40	; 0x28
 8005ca0:	d86c      	bhi.n	8005d7c <UART_SetConfig+0x730>
 8005ca2:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x65c>)
 8005ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d7d 	.word	0x08005d7d
 8005cb0:	08005d7d 	.word	0x08005d7d
 8005cb4:	08005d7d 	.word	0x08005d7d
 8005cb8:	08005d7d 	.word	0x08005d7d
 8005cbc:	08005d7d 	.word	0x08005d7d
 8005cc0:	08005d7d 	.word	0x08005d7d
 8005cc4:	08005d7d 	.word	0x08005d7d
 8005cc8:	08005d55 	.word	0x08005d55
 8005ccc:	08005d7d 	.word	0x08005d7d
 8005cd0:	08005d7d 	.word	0x08005d7d
 8005cd4:	08005d7d 	.word	0x08005d7d
 8005cd8:	08005d7d 	.word	0x08005d7d
 8005cdc:	08005d7d 	.word	0x08005d7d
 8005ce0:	08005d7d 	.word	0x08005d7d
 8005ce4:	08005d7d 	.word	0x08005d7d
 8005ce8:	08005d5d 	.word	0x08005d5d
 8005cec:	08005d7d 	.word	0x08005d7d
 8005cf0:	08005d7d 	.word	0x08005d7d
 8005cf4:	08005d7d 	.word	0x08005d7d
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005d7d 	.word	0x08005d7d
 8005d00:	08005d7d 	.word	0x08005d7d
 8005d04:	08005d7d 	.word	0x08005d7d
 8005d08:	08005d65 	.word	0x08005d65
 8005d0c:	08005d7d 	.word	0x08005d7d
 8005d10:	08005d7d 	.word	0x08005d7d
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d7d 	.word	0x08005d7d
 8005d1c:	08005d7d 	.word	0x08005d7d
 8005d20:	08005d7d 	.word	0x08005d7d
 8005d24:	08005d7d 	.word	0x08005d7d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	08005d7d 	.word	0x08005d7d
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005d7d 	.word	0x08005d7d
 8005d3c:	08005d7d 	.word	0x08005d7d
 8005d40:	08005d7d 	.word	0x08005d7d
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d75 	.word	0x08005d75
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e050      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d54:	2304      	movs	r3, #4
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e04c      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e048      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d64:	2310      	movs	r3, #16
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e044      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e040      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7a:	e03c      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d7c:	2380      	movs	r3, #128	; 0x80
 8005d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d82:	e038      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a71      	ldr	r2, [pc, #452]	; (8005f50 <UART_SetConfig+0x904>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d130      	bne.n	8005df0 <UART_SetConfig+0x7a4>
 8005d8e:	4b6f      	ldr	r3, [pc, #444]	; (8005f4c <UART_SetConfig+0x900>)
 8005d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d826      	bhi.n	8005de8 <UART_SetConfig+0x79c>
 8005d9a:	a201      	add	r2, pc, #4	; (adr r2, 8005da0 <UART_SetConfig+0x754>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db9 	.word	0x08005db9
 8005da4:	08005dc1 	.word	0x08005dc1
 8005da8:	08005dc9 	.word	0x08005dc9
 8005dac:	08005dd1 	.word	0x08005dd1
 8005db0:	08005dd9 	.word	0x08005dd9
 8005db4:	08005de1 	.word	0x08005de1
 8005db8:	2302      	movs	r3, #2
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e01a      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005dc0:	2304      	movs	r3, #4
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e016      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005dc8:	2308      	movs	r3, #8
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e012      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005dd0:	2310      	movs	r3, #16
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e00e      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005dd8:	2320      	movs	r3, #32
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e00a      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005de0:	2340      	movs	r3, #64	; 0x40
 8005de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de6:	e006      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dee:	e002      	b.n	8005df6 <UART_SetConfig+0x7aa>
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a55      	ldr	r2, [pc, #340]	; (8005f50 <UART_SetConfig+0x904>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	f040 80f0 	bne.w	8005fe2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	dc46      	bgt.n	8005e98 <UART_SetConfig+0x84c>
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	db75      	blt.n	8005efa <UART_SetConfig+0x8ae>
 8005e0e:	3b02      	subs	r3, #2
 8005e10:	2b1e      	cmp	r3, #30
 8005e12:	d872      	bhi.n	8005efa <UART_SetConfig+0x8ae>
 8005e14:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <UART_SetConfig+0x7d0>)
 8005e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1a:	bf00      	nop
 8005e1c:	08005e9f 	.word	0x08005e9f
 8005e20:	08005efb 	.word	0x08005efb
 8005e24:	08005ea7 	.word	0x08005ea7
 8005e28:	08005efb 	.word	0x08005efb
 8005e2c:	08005efb 	.word	0x08005efb
 8005e30:	08005efb 	.word	0x08005efb
 8005e34:	08005eb7 	.word	0x08005eb7
 8005e38:	08005efb 	.word	0x08005efb
 8005e3c:	08005efb 	.word	0x08005efb
 8005e40:	08005efb 	.word	0x08005efb
 8005e44:	08005efb 	.word	0x08005efb
 8005e48:	08005efb 	.word	0x08005efb
 8005e4c:	08005efb 	.word	0x08005efb
 8005e50:	08005efb 	.word	0x08005efb
 8005e54:	08005ec7 	.word	0x08005ec7
 8005e58:	08005efb 	.word	0x08005efb
 8005e5c:	08005efb 	.word	0x08005efb
 8005e60:	08005efb 	.word	0x08005efb
 8005e64:	08005efb 	.word	0x08005efb
 8005e68:	08005efb 	.word	0x08005efb
 8005e6c:	08005efb 	.word	0x08005efb
 8005e70:	08005efb 	.word	0x08005efb
 8005e74:	08005efb 	.word	0x08005efb
 8005e78:	08005efb 	.word	0x08005efb
 8005e7c:	08005efb 	.word	0x08005efb
 8005e80:	08005efb 	.word	0x08005efb
 8005e84:	08005efb 	.word	0x08005efb
 8005e88:	08005efb 	.word	0x08005efb
 8005e8c:	08005efb 	.word	0x08005efb
 8005e90:	08005efb 	.word	0x08005efb
 8005e94:	08005eed 	.word	0x08005eed
 8005e98:	2b40      	cmp	r3, #64	; 0x40
 8005e9a:	d02a      	beq.n	8005ef2 <UART_SetConfig+0x8a6>
 8005e9c:	e02d      	b.n	8005efa <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e9e:	f7fe ff63 	bl	8004d68 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ea4:	e02f      	b.n	8005f06 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ea6:	f107 0314 	add.w	r3, r7, #20
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe ff72 	bl	8004d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eb4:	e027      	b.n	8005f06 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb6:	f107 0308 	add.w	r3, r7, #8
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff f8be 	bl	800503c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ec4:	e01f      	b.n	8005f06 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec6:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <UART_SetConfig+0x900>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <UART_SetConfig+0x900>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	4a1d      	ldr	r2, [pc, #116]	; (8005f54 <UART_SetConfig+0x908>)
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ee4:	e00f      	b.n	8005f06 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <UART_SetConfig+0x908>)
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005eea:	e00c      	b.n	8005f06 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <UART_SetConfig+0x90c>)
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ef0:	e009      	b.n	8005f06 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ef8:	e005      	b.n	8005f06 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 81e6 	beq.w	80062da <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <UART_SetConfig+0x910>)
 8005f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f20:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	4413      	add	r3, r2
 8005f2c:	6a3a      	ldr	r2, [r7, #32]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d305      	bcc.n	8005f3e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f38:	6a3a      	ldr	r2, [r7, #32]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d910      	bls.n	8005f60 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005f44:	e1c9      	b.n	80062da <UART_SetConfig+0xc8e>
 8005f46:	bf00      	nop
 8005f48:	40011c00 	.word	0x40011c00
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	58000c00 	.word	0x58000c00
 8005f54:	03d09000 	.word	0x03d09000
 8005f58:	003d0900 	.word	0x003d0900
 8005f5c:	080071c0 	.word	0x080071c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f62:	4618      	mov	r0, r3
 8005f64:	f04f 0100 	mov.w	r1, #0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	4ac1      	ldr	r2, [pc, #772]	; (8006274 <UART_SetConfig+0xc28>)
 8005f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	f7fa fa0a 	bl	8000390 <__aeabi_uldivmod>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	460b      	mov	r3, r1
 8005f80:	4610      	mov	r0, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	020b      	lsls	r3, r1, #8
 8005f8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f92:	0202      	lsls	r2, r0, #8
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	6849      	ldr	r1, [r1, #4]
 8005f98:	0849      	lsrs	r1, r1, #1
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	1814      	adds	r4, r2, r0
 8005fa2:	eb43 0501 	adc.w	r5, r3, r1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa f9ec 	bl	8000390 <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc6:	d308      	bcc.n	8005fda <UART_SetConfig+0x98e>
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fce:	d204      	bcs.n	8005fda <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fd6:	60da      	str	r2, [r3, #12]
 8005fd8:	e17f      	b.n	80062da <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005fe0:	e17b      	b.n	80062da <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fea:	f040 80bd 	bne.w	8006168 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8005fee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	dc48      	bgt.n	8006088 <UART_SetConfig+0xa3c>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	db7b      	blt.n	80060f2 <UART_SetConfig+0xaa6>
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d879      	bhi.n	80060f2 <UART_SetConfig+0xaa6>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <UART_SetConfig+0x9b8>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	0800608f 	.word	0x0800608f
 8006008:	08006097 	.word	0x08006097
 800600c:	080060f3 	.word	0x080060f3
 8006010:	080060f3 	.word	0x080060f3
 8006014:	0800609f 	.word	0x0800609f
 8006018:	080060f3 	.word	0x080060f3
 800601c:	080060f3 	.word	0x080060f3
 8006020:	080060f3 	.word	0x080060f3
 8006024:	080060af 	.word	0x080060af
 8006028:	080060f3 	.word	0x080060f3
 800602c:	080060f3 	.word	0x080060f3
 8006030:	080060f3 	.word	0x080060f3
 8006034:	080060f3 	.word	0x080060f3
 8006038:	080060f3 	.word	0x080060f3
 800603c:	080060f3 	.word	0x080060f3
 8006040:	080060f3 	.word	0x080060f3
 8006044:	080060bf 	.word	0x080060bf
 8006048:	080060f3 	.word	0x080060f3
 800604c:	080060f3 	.word	0x080060f3
 8006050:	080060f3 	.word	0x080060f3
 8006054:	080060f3 	.word	0x080060f3
 8006058:	080060f3 	.word	0x080060f3
 800605c:	080060f3 	.word	0x080060f3
 8006060:	080060f3 	.word	0x080060f3
 8006064:	080060f3 	.word	0x080060f3
 8006068:	080060f3 	.word	0x080060f3
 800606c:	080060f3 	.word	0x080060f3
 8006070:	080060f3 	.word	0x080060f3
 8006074:	080060f3 	.word	0x080060f3
 8006078:	080060f3 	.word	0x080060f3
 800607c:	080060f3 	.word	0x080060f3
 8006080:	080060f3 	.word	0x080060f3
 8006084:	080060e5 	.word	0x080060e5
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d02e      	beq.n	80060ea <UART_SetConfig+0xa9e>
 800608c:	e031      	b.n	80060f2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800608e:	f7fd ff33 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8006092:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006094:	e033      	b.n	80060fe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006096:	f7fd ff45 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 800609a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800609c:	e02f      	b.n	80060fe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800609e:	f107 0314 	add.w	r3, r7, #20
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fe76 	bl	8004d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060ac:	e027      	b.n	80060fe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ae:	f107 0308 	add.w	r3, r7, #8
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe ffc2 	bl	800503c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060bc:	e01f      	b.n	80060fe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060be:	4b6e      	ldr	r3, [pc, #440]	; (8006278 <UART_SetConfig+0xc2c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d009      	beq.n	80060de <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060ca:	4b6b      	ldr	r3, [pc, #428]	; (8006278 <UART_SetConfig+0xc2c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	4a69      	ldr	r2, [pc, #420]	; (800627c <UART_SetConfig+0xc30>)
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060dc:	e00f      	b.n	80060fe <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 80060de:	4b67      	ldr	r3, [pc, #412]	; (800627c <UART_SetConfig+0xc30>)
 80060e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060e2:	e00c      	b.n	80060fe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060e4:	4b66      	ldr	r3, [pc, #408]	; (8006280 <UART_SetConfig+0xc34>)
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060e8:	e009      	b.n	80060fe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060f0:	e005      	b.n	80060fe <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80ea 	beq.w	80062da <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	4a5a      	ldr	r2, [pc, #360]	; (8006274 <UART_SetConfig+0xc28>)
 800610c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006110:	461a      	mov	r2, r3
 8006112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006114:	fbb3 f3f2 	udiv	r3, r3, r2
 8006118:	005a      	lsls	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	441a      	add	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	fbb2 f3f3 	udiv	r3, r2, r3
 800612a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	2b0f      	cmp	r3, #15
 8006130:	d916      	bls.n	8006160 <UART_SetConfig+0xb14>
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d212      	bcs.n	8006160 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	b29b      	uxth	r3, r3
 800613e:	f023 030f 	bic.w	r3, r3, #15
 8006142:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	b29b      	uxth	r3, r3
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	b29a      	uxth	r2, r3
 8006150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006152:	4313      	orrs	r3, r2
 8006154:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	e0bc      	b.n	80062da <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006166:	e0b8      	b.n	80062da <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800616c:	2b20      	cmp	r3, #32
 800616e:	dc4b      	bgt.n	8006208 <UART_SetConfig+0xbbc>
 8006170:	2b00      	cmp	r3, #0
 8006172:	f2c0 8087 	blt.w	8006284 <UART_SetConfig+0xc38>
 8006176:	2b20      	cmp	r3, #32
 8006178:	f200 8084 	bhi.w	8006284 <UART_SetConfig+0xc38>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <UART_SetConfig+0xb38>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	0800620f 	.word	0x0800620f
 8006188:	08006217 	.word	0x08006217
 800618c:	08006285 	.word	0x08006285
 8006190:	08006285 	.word	0x08006285
 8006194:	0800621f 	.word	0x0800621f
 8006198:	08006285 	.word	0x08006285
 800619c:	08006285 	.word	0x08006285
 80061a0:	08006285 	.word	0x08006285
 80061a4:	0800622f 	.word	0x0800622f
 80061a8:	08006285 	.word	0x08006285
 80061ac:	08006285 	.word	0x08006285
 80061b0:	08006285 	.word	0x08006285
 80061b4:	08006285 	.word	0x08006285
 80061b8:	08006285 	.word	0x08006285
 80061bc:	08006285 	.word	0x08006285
 80061c0:	08006285 	.word	0x08006285
 80061c4:	0800623f 	.word	0x0800623f
 80061c8:	08006285 	.word	0x08006285
 80061cc:	08006285 	.word	0x08006285
 80061d0:	08006285 	.word	0x08006285
 80061d4:	08006285 	.word	0x08006285
 80061d8:	08006285 	.word	0x08006285
 80061dc:	08006285 	.word	0x08006285
 80061e0:	08006285 	.word	0x08006285
 80061e4:	08006285 	.word	0x08006285
 80061e8:	08006285 	.word	0x08006285
 80061ec:	08006285 	.word	0x08006285
 80061f0:	08006285 	.word	0x08006285
 80061f4:	08006285 	.word	0x08006285
 80061f8:	08006285 	.word	0x08006285
 80061fc:	08006285 	.word	0x08006285
 8006200:	08006285 	.word	0x08006285
 8006204:	08006265 	.word	0x08006265
 8006208:	2b40      	cmp	r3, #64	; 0x40
 800620a:	d02e      	beq.n	800626a <UART_SetConfig+0xc1e>
 800620c:	e03a      	b.n	8006284 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800620e:	f7fd fe73 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8006212:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006214:	e03c      	b.n	8006290 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006216:	f7fd fe85 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 800621a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800621c:	e038      	b.n	8006290 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800621e:	f107 0314 	add.w	r3, r7, #20
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fdb6 	bl	8004d94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800622c:	e030      	b.n	8006290 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe ff02 	bl	800503c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800623c:	e028      	b.n	8006290 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <UART_SetConfig+0xc2c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <UART_SetConfig+0xc2c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f003 0303 	and.w	r3, r3, #3
 8006254:	4a09      	ldr	r2, [pc, #36]	; (800627c <UART_SetConfig+0xc30>)
 8006256:	fa22 f303 	lsr.w	r3, r2, r3
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800625c:	e018      	b.n	8006290 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <UART_SetConfig+0xc30>)
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006262:	e015      	b.n	8006290 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <UART_SetConfig+0xc34>)
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006268:	e012      	b.n	8006290 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006270:	e00e      	b.n	8006290 <UART_SetConfig+0xc44>
 8006272:	bf00      	nop
 8006274:	080071c0 	.word	0x080071c0
 8006278:	58024400 	.word	0x58024400
 800627c:	03d09000 	.word	0x03d09000
 8006280:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800628e:	bf00      	nop
    }

    if (pclk != 0U)
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	2b00      	cmp	r3, #0
 8006294:	d021      	beq.n	80062da <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	4a1a      	ldr	r2, [pc, #104]	; (8006304 <UART_SetConfig+0xcb8>)
 800629c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	085b      	lsrs	r3, r3, #1
 80062ae:	441a      	add	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062bc:	2b0f      	cmp	r3, #15
 80062be:	d909      	bls.n	80062d4 <UART_SetConfig+0xc88>
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c6:	d205      	bcs.n	80062d4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60da      	str	r2, [r3, #12]
 80062d2:	e002      	b.n	80062da <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80062f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3738      	adds	r7, #56	; 0x38
 80062fe:	46bd      	mov	sp, r7
 8006300:	bdb0      	pop	{r4, r5, r7, pc}
 8006302:	bf00      	nop
 8006304:	080071c0 	.word	0x080071c0

08006308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00a      	beq.n	8006398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00a      	beq.n	80063ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	430a      	orrs	r2, r1
 80063da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01a      	beq.n	800641e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006406:	d10a      	bne.n	800641e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	605a      	str	r2, [r3, #4]
  }
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af02      	add	r7, sp, #8
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800645c:	f7fa ffb8 	bl	80013d0 <HAL_GetTick>
 8006460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b08      	cmp	r3, #8
 800646e:	d10e      	bne.n	800648e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f82f 	bl	80064e2 <UART_WaitOnFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e025      	b.n	80064da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d10e      	bne.n	80064ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f819 	bl	80064e2 <UART_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e00f      	b.n	80064da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b09c      	sub	sp, #112	; 0x70
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	603b      	str	r3, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f2:	e0a9      	b.n	8006648 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fa:	f000 80a5 	beq.w	8006648 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fe:	f7fa ff67 	bl	80013d0 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800650a:	429a      	cmp	r2, r3
 800650c:	d302      	bcc.n	8006514 <UART_WaitOnFlagUntilTimeout+0x32>
 800650e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006510:	2b00      	cmp	r3, #0
 8006512:	d140      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006528:	667b      	str	r3, [r7, #100]	; 0x64
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006534:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e6      	bne.n	8006514 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	f023 0301 	bic.w	r3, r3, #1
 800655c:	663b      	str	r3, [r7, #96]	; 0x60
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3308      	adds	r3, #8
 8006564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006566:	64ba      	str	r2, [r7, #72]	; 0x48
 8006568:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800656c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e5      	bne.n	8006546 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2220      	movs	r2, #32
 8006586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e069      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d051      	beq.n	8006648 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b2:	d149      	bne.n	8006648 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	461a      	mov	r2, r3
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
 80065de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e4:	e841 2300 	strex	r3, r2, [r1]
 80065e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1e6      	bne.n	80065be <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	3308      	adds	r3, #8
 80065f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	e853 3f00 	ldrex	r3, [r3]
 80065fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	f023 0301 	bic.w	r3, r3, #1
 8006606:	66bb      	str	r3, [r7, #104]	; 0x68
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006610:	623a      	str	r2, [r7, #32]
 8006612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	69f9      	ldr	r1, [r7, #28]
 8006616:	6a3a      	ldr	r2, [r7, #32]
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	61bb      	str	r3, [r7, #24]
   return(result);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e5      	bne.n	80065f0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e010      	b.n	800666a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4013      	ands	r3, r2
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	429a      	cmp	r2, r3
 8006656:	bf0c      	ite	eq
 8006658:	2301      	moveq	r3, #1
 800665a:	2300      	movne	r3, #0
 800665c:	b2db      	uxtb	r3, r3
 800665e:	461a      	mov	r2, r3
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	429a      	cmp	r2, r3
 8006664:	f43f af46 	beq.w	80064f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3770      	adds	r7, #112	; 0x70
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_UARTEx_DisableFifoMode+0x16>
 8006684:	2302      	movs	r3, #2
 8006686:	e027      	b.n	80066d8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2224      	movs	r2, #36	; 0x24
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e02d      	b.n	8006758 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2224      	movs	r2, #36	; 0x24
 8006708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0201 	bic.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f84f 	bl	80067dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006774:	2302      	movs	r3, #2
 8006776:	e02d      	b.n	80067d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2224      	movs	r2, #36	; 0x24
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0201 	bic.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f811 	bl	80067dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80067fc:	e031      	b.n	8006862 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80067fe:	2310      	movs	r3, #16
 8006800:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006802:	2310      	movs	r3, #16
 8006804:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	0e5b      	lsrs	r3, r3, #25
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	0f5b      	lsrs	r3, r3, #29
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	7b3a      	ldrb	r2, [r7, #12]
 800682a:	4911      	ldr	r1, [pc, #68]	; (8006870 <UARTEx_SetNbDataToProcess+0x94>)
 800682c:	5c8a      	ldrb	r2, [r1, r2]
 800682e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006832:	7b3a      	ldrb	r2, [r7, #12]
 8006834:	490f      	ldr	r1, [pc, #60]	; (8006874 <UARTEx_SetNbDataToProcess+0x98>)
 8006836:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006838:	fb93 f3f2 	sdiv	r3, r3, r2
 800683c:	b29a      	uxth	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	7b7a      	ldrb	r2, [r7, #13]
 8006848:	4909      	ldr	r1, [pc, #36]	; (8006870 <UARTEx_SetNbDataToProcess+0x94>)
 800684a:	5c8a      	ldrb	r2, [r1, r2]
 800684c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006850:	7b7a      	ldrb	r2, [r7, #13]
 8006852:	4908      	ldr	r1, [pc, #32]	; (8006874 <UARTEx_SetNbDataToProcess+0x98>)
 8006854:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006856:	fb93 f3f2 	sdiv	r3, r3, r2
 800685a:	b29a      	uxth	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006862:	bf00      	nop
 8006864:	3714      	adds	r7, #20
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	080071d8 	.word	0x080071d8
 8006874:	080071e0 	.word	0x080071e0

08006878 <__errno>:
 8006878:	4b01      	ldr	r3, [pc, #4]	; (8006880 <__errno+0x8>)
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	24000014 	.word	0x24000014

08006884 <__libc_init_array>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4d0d      	ldr	r5, [pc, #52]	; (80068bc <__libc_init_array+0x38>)
 8006888:	4c0d      	ldr	r4, [pc, #52]	; (80068c0 <__libc_init_array+0x3c>)
 800688a:	1b64      	subs	r4, r4, r5
 800688c:	10a4      	asrs	r4, r4, #2
 800688e:	2600      	movs	r6, #0
 8006890:	42a6      	cmp	r6, r4
 8006892:	d109      	bne.n	80068a8 <__libc_init_array+0x24>
 8006894:	4d0b      	ldr	r5, [pc, #44]	; (80068c4 <__libc_init_array+0x40>)
 8006896:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <__libc_init_array+0x44>)
 8006898:	f000 fc4e 	bl	8007138 <_init>
 800689c:	1b64      	subs	r4, r4, r5
 800689e:	10a4      	asrs	r4, r4, #2
 80068a0:	2600      	movs	r6, #0
 80068a2:	42a6      	cmp	r6, r4
 80068a4:	d105      	bne.n	80068b2 <__libc_init_array+0x2e>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ac:	4798      	blx	r3
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7ee      	b.n	8006890 <__libc_init_array+0xc>
 80068b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b6:	4798      	blx	r3
 80068b8:	3601      	adds	r6, #1
 80068ba:	e7f2      	b.n	80068a2 <__libc_init_array+0x1e>
 80068bc:	08007284 	.word	0x08007284
 80068c0:	08007284 	.word	0x08007284
 80068c4:	08007284 	.word	0x08007284
 80068c8:	08007288 	.word	0x08007288

080068cc <memcpy>:
 80068cc:	440a      	add	r2, r1
 80068ce:	4291      	cmp	r1, r2
 80068d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068d4:	d100      	bne.n	80068d8 <memcpy+0xc>
 80068d6:	4770      	bx	lr
 80068d8:	b510      	push	{r4, lr}
 80068da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e2:	4291      	cmp	r1, r2
 80068e4:	d1f9      	bne.n	80068da <memcpy+0xe>
 80068e6:	bd10      	pop	{r4, pc}

080068e8 <memset>:
 80068e8:	4402      	add	r2, r0
 80068ea:	4603      	mov	r3, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <siprintf>:
 80068f8:	b40e      	push	{r1, r2, r3}
 80068fa:	b500      	push	{lr}
 80068fc:	b09c      	sub	sp, #112	; 0x70
 80068fe:	ab1d      	add	r3, sp, #116	; 0x74
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	9006      	str	r0, [sp, #24]
 8006904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006908:	4809      	ldr	r0, [pc, #36]	; (8006930 <siprintf+0x38>)
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	4909      	ldr	r1, [pc, #36]	; (8006934 <siprintf+0x3c>)
 8006910:	f853 2b04 	ldr.w	r2, [r3], #4
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	a902      	add	r1, sp, #8
 800691c:	f000 f8c4 	bl	8006aa8 <_svfiprintf_r>
 8006920:	9b02      	ldr	r3, [sp, #8]
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	b01c      	add	sp, #112	; 0x70
 8006928:	f85d eb04 	ldr.w	lr, [sp], #4
 800692c:	b003      	add	sp, #12
 800692e:	4770      	bx	lr
 8006930:	24000014 	.word	0x24000014
 8006934:	ffff0208 	.word	0xffff0208

08006938 <__retarget_lock_acquire_recursive>:
 8006938:	4770      	bx	lr

0800693a <__retarget_lock_release_recursive>:
 800693a:	4770      	bx	lr

0800693c <_malloc_r>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	1ccd      	adds	r5, r1, #3
 8006940:	f025 0503 	bic.w	r5, r5, #3
 8006944:	3508      	adds	r5, #8
 8006946:	2d0c      	cmp	r5, #12
 8006948:	bf38      	it	cc
 800694a:	250c      	movcc	r5, #12
 800694c:	2d00      	cmp	r5, #0
 800694e:	4606      	mov	r6, r0
 8006950:	db01      	blt.n	8006956 <_malloc_r+0x1a>
 8006952:	42a9      	cmp	r1, r5
 8006954:	d903      	bls.n	800695e <_malloc_r+0x22>
 8006956:	230c      	movs	r3, #12
 8006958:	6033      	str	r3, [r6, #0]
 800695a:	2000      	movs	r0, #0
 800695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800695e:	f000 fb61 	bl	8007024 <__malloc_lock>
 8006962:	4921      	ldr	r1, [pc, #132]	; (80069e8 <_malloc_r+0xac>)
 8006964:	680a      	ldr	r2, [r1, #0]
 8006966:	4614      	mov	r4, r2
 8006968:	b99c      	cbnz	r4, 8006992 <_malloc_r+0x56>
 800696a:	4f20      	ldr	r7, [pc, #128]	; (80069ec <_malloc_r+0xb0>)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	b923      	cbnz	r3, 800697a <_malloc_r+0x3e>
 8006970:	4621      	mov	r1, r4
 8006972:	4630      	mov	r0, r6
 8006974:	f000 fb2c 	bl	8006fd0 <_sbrk_r>
 8006978:	6038      	str	r0, [r7, #0]
 800697a:	4629      	mov	r1, r5
 800697c:	4630      	mov	r0, r6
 800697e:	f000 fb27 	bl	8006fd0 <_sbrk_r>
 8006982:	1c43      	adds	r3, r0, #1
 8006984:	d123      	bne.n	80069ce <_malloc_r+0x92>
 8006986:	230c      	movs	r3, #12
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	4630      	mov	r0, r6
 800698c:	f000 fb50 	bl	8007030 <__malloc_unlock>
 8006990:	e7e3      	b.n	800695a <_malloc_r+0x1e>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	1b5b      	subs	r3, r3, r5
 8006996:	d417      	bmi.n	80069c8 <_malloc_r+0x8c>
 8006998:	2b0b      	cmp	r3, #11
 800699a:	d903      	bls.n	80069a4 <_malloc_r+0x68>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	441c      	add	r4, r3
 80069a0:	6025      	str	r5, [r4, #0]
 80069a2:	e004      	b.n	80069ae <_malloc_r+0x72>
 80069a4:	6863      	ldr	r3, [r4, #4]
 80069a6:	42a2      	cmp	r2, r4
 80069a8:	bf0c      	ite	eq
 80069aa:	600b      	streq	r3, [r1, #0]
 80069ac:	6053      	strne	r3, [r2, #4]
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 fb3e 	bl	8007030 <__malloc_unlock>
 80069b4:	f104 000b 	add.w	r0, r4, #11
 80069b8:	1d23      	adds	r3, r4, #4
 80069ba:	f020 0007 	bic.w	r0, r0, #7
 80069be:	1ac2      	subs	r2, r0, r3
 80069c0:	d0cc      	beq.n	800695c <_malloc_r+0x20>
 80069c2:	1a1b      	subs	r3, r3, r0
 80069c4:	50a3      	str	r3, [r4, r2]
 80069c6:	e7c9      	b.n	800695c <_malloc_r+0x20>
 80069c8:	4622      	mov	r2, r4
 80069ca:	6864      	ldr	r4, [r4, #4]
 80069cc:	e7cc      	b.n	8006968 <_malloc_r+0x2c>
 80069ce:	1cc4      	adds	r4, r0, #3
 80069d0:	f024 0403 	bic.w	r4, r4, #3
 80069d4:	42a0      	cmp	r0, r4
 80069d6:	d0e3      	beq.n	80069a0 <_malloc_r+0x64>
 80069d8:	1a21      	subs	r1, r4, r0
 80069da:	4630      	mov	r0, r6
 80069dc:	f000 faf8 	bl	8006fd0 <_sbrk_r>
 80069e0:	3001      	adds	r0, #1
 80069e2:	d1dd      	bne.n	80069a0 <_malloc_r+0x64>
 80069e4:	e7cf      	b.n	8006986 <_malloc_r+0x4a>
 80069e6:	bf00      	nop
 80069e8:	240000a0 	.word	0x240000a0
 80069ec:	240000a4 	.word	0x240000a4

080069f0 <__ssputs_r>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	688e      	ldr	r6, [r1, #8]
 80069f6:	429e      	cmp	r6, r3
 80069f8:	4682      	mov	sl, r0
 80069fa:	460c      	mov	r4, r1
 80069fc:	4690      	mov	r8, r2
 80069fe:	461f      	mov	r7, r3
 8006a00:	d838      	bhi.n	8006a74 <__ssputs_r+0x84>
 8006a02:	898a      	ldrh	r2, [r1, #12]
 8006a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a08:	d032      	beq.n	8006a70 <__ssputs_r+0x80>
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	6909      	ldr	r1, [r1, #16]
 8006a0e:	eba5 0901 	sub.w	r9, r5, r1
 8006a12:	6965      	ldr	r5, [r4, #20]
 8006a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	444b      	add	r3, r9
 8006a20:	106d      	asrs	r5, r5, #1
 8006a22:	429d      	cmp	r5, r3
 8006a24:	bf38      	it	cc
 8006a26:	461d      	movcc	r5, r3
 8006a28:	0553      	lsls	r3, r2, #21
 8006a2a:	d531      	bpl.n	8006a90 <__ssputs_r+0xa0>
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	f7ff ff85 	bl	800693c <_malloc_r>
 8006a32:	4606      	mov	r6, r0
 8006a34:	b950      	cbnz	r0, 8006a4c <__ssputs_r+0x5c>
 8006a36:	230c      	movs	r3, #12
 8006a38:	f8ca 3000 	str.w	r3, [sl]
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4c:	6921      	ldr	r1, [r4, #16]
 8006a4e:	464a      	mov	r2, r9
 8006a50:	f7ff ff3c 	bl	80068cc <memcpy>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5e:	81a3      	strh	r3, [r4, #12]
 8006a60:	6126      	str	r6, [r4, #16]
 8006a62:	6165      	str	r5, [r4, #20]
 8006a64:	444e      	add	r6, r9
 8006a66:	eba5 0509 	sub.w	r5, r5, r9
 8006a6a:	6026      	str	r6, [r4, #0]
 8006a6c:	60a5      	str	r5, [r4, #8]
 8006a6e:	463e      	mov	r6, r7
 8006a70:	42be      	cmp	r6, r7
 8006a72:	d900      	bls.n	8006a76 <__ssputs_r+0x86>
 8006a74:	463e      	mov	r6, r7
 8006a76:	4632      	mov	r2, r6
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	f000 fab8 	bl	8006ff0 <memmove>
 8006a80:	68a3      	ldr	r3, [r4, #8]
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	1b9b      	subs	r3, r3, r6
 8006a86:	4432      	add	r2, r6
 8006a88:	60a3      	str	r3, [r4, #8]
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e7db      	b.n	8006a48 <__ssputs_r+0x58>
 8006a90:	462a      	mov	r2, r5
 8006a92:	f000 fb23 	bl	80070dc <_realloc_r>
 8006a96:	4606      	mov	r6, r0
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d1e1      	bne.n	8006a60 <__ssputs_r+0x70>
 8006a9c:	6921      	ldr	r1, [r4, #16]
 8006a9e:	4650      	mov	r0, sl
 8006aa0:	f000 facc 	bl	800703c <_free_r>
 8006aa4:	e7c7      	b.n	8006a36 <__ssputs_r+0x46>
	...

08006aa8 <_svfiprintf_r>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	4698      	mov	r8, r3
 8006aae:	898b      	ldrh	r3, [r1, #12]
 8006ab0:	061b      	lsls	r3, r3, #24
 8006ab2:	b09d      	sub	sp, #116	; 0x74
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	d50e      	bpl.n	8006ada <_svfiprintf_r+0x32>
 8006abc:	690b      	ldr	r3, [r1, #16]
 8006abe:	b963      	cbnz	r3, 8006ada <_svfiprintf_r+0x32>
 8006ac0:	2140      	movs	r1, #64	; 0x40
 8006ac2:	f7ff ff3b 	bl	800693c <_malloc_r>
 8006ac6:	6028      	str	r0, [r5, #0]
 8006ac8:	6128      	str	r0, [r5, #16]
 8006aca:	b920      	cbnz	r0, 8006ad6 <_svfiprintf_r+0x2e>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad4:	e0d1      	b.n	8006c7a <_svfiprintf_r+0x1d2>
 8006ad6:	2340      	movs	r3, #64	; 0x40
 8006ad8:	616b      	str	r3, [r5, #20]
 8006ada:	2300      	movs	r3, #0
 8006adc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ade:	2320      	movs	r3, #32
 8006ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ae8:	2330      	movs	r3, #48	; 0x30
 8006aea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c94 <_svfiprintf_r+0x1ec>
 8006aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006af2:	f04f 0901 	mov.w	r9, #1
 8006af6:	4623      	mov	r3, r4
 8006af8:	469a      	mov	sl, r3
 8006afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006afe:	b10a      	cbz	r2, 8006b04 <_svfiprintf_r+0x5c>
 8006b00:	2a25      	cmp	r2, #37	; 0x25
 8006b02:	d1f9      	bne.n	8006af8 <_svfiprintf_r+0x50>
 8006b04:	ebba 0b04 	subs.w	fp, sl, r4
 8006b08:	d00b      	beq.n	8006b22 <_svfiprintf_r+0x7a>
 8006b0a:	465b      	mov	r3, fp
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff ff6d 	bl	80069f0 <__ssputs_r>
 8006b16:	3001      	adds	r0, #1
 8006b18:	f000 80aa 	beq.w	8006c70 <_svfiprintf_r+0x1c8>
 8006b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1e:	445a      	add	r2, fp
 8006b20:	9209      	str	r2, [sp, #36]	; 0x24
 8006b22:	f89a 3000 	ldrb.w	r3, [sl]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 80a2 	beq.w	8006c70 <_svfiprintf_r+0x1c8>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b36:	f10a 0a01 	add.w	sl, sl, #1
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	9307      	str	r3, [sp, #28]
 8006b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b42:	931a      	str	r3, [sp, #104]	; 0x68
 8006b44:	4654      	mov	r4, sl
 8006b46:	2205      	movs	r2, #5
 8006b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4c:	4851      	ldr	r0, [pc, #324]	; (8006c94 <_svfiprintf_r+0x1ec>)
 8006b4e:	f7f9 fbcf 	bl	80002f0 <memchr>
 8006b52:	9a04      	ldr	r2, [sp, #16]
 8006b54:	b9d8      	cbnz	r0, 8006b8e <_svfiprintf_r+0xe6>
 8006b56:	06d0      	lsls	r0, r2, #27
 8006b58:	bf44      	itt	mi
 8006b5a:	2320      	movmi	r3, #32
 8006b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b60:	0711      	lsls	r1, r2, #28
 8006b62:	bf44      	itt	mi
 8006b64:	232b      	movmi	r3, #43	; 0x2b
 8006b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d015      	beq.n	8006b9e <_svfiprintf_r+0xf6>
 8006b72:	9a07      	ldr	r2, [sp, #28]
 8006b74:	4654      	mov	r4, sl
 8006b76:	2000      	movs	r0, #0
 8006b78:	f04f 0c0a 	mov.w	ip, #10
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b82:	3b30      	subs	r3, #48	; 0x30
 8006b84:	2b09      	cmp	r3, #9
 8006b86:	d94e      	bls.n	8006c26 <_svfiprintf_r+0x17e>
 8006b88:	b1b0      	cbz	r0, 8006bb8 <_svfiprintf_r+0x110>
 8006b8a:	9207      	str	r2, [sp, #28]
 8006b8c:	e014      	b.n	8006bb8 <_svfiprintf_r+0x110>
 8006b8e:	eba0 0308 	sub.w	r3, r0, r8
 8006b92:	fa09 f303 	lsl.w	r3, r9, r3
 8006b96:	4313      	orrs	r3, r2
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	46a2      	mov	sl, r4
 8006b9c:	e7d2      	b.n	8006b44 <_svfiprintf_r+0x9c>
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	9103      	str	r1, [sp, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	bfbb      	ittet	lt
 8006baa:	425b      	neglt	r3, r3
 8006bac:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb0:	9307      	strge	r3, [sp, #28]
 8006bb2:	9307      	strlt	r3, [sp, #28]
 8006bb4:	bfb8      	it	lt
 8006bb6:	9204      	strlt	r2, [sp, #16]
 8006bb8:	7823      	ldrb	r3, [r4, #0]
 8006bba:	2b2e      	cmp	r3, #46	; 0x2e
 8006bbc:	d10c      	bne.n	8006bd8 <_svfiprintf_r+0x130>
 8006bbe:	7863      	ldrb	r3, [r4, #1]
 8006bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc2:	d135      	bne.n	8006c30 <_svfiprintf_r+0x188>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	9203      	str	r2, [sp, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfb8      	it	lt
 8006bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd4:	3402      	adds	r4, #2
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ca4 <_svfiprintf_r+0x1fc>
 8006bdc:	7821      	ldrb	r1, [r4, #0]
 8006bde:	2203      	movs	r2, #3
 8006be0:	4650      	mov	r0, sl
 8006be2:	f7f9 fb85 	bl	80002f0 <memchr>
 8006be6:	b140      	cbz	r0, 8006bfa <_svfiprintf_r+0x152>
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	eba0 000a 	sub.w	r0, r0, sl
 8006bee:	fa03 f000 	lsl.w	r0, r3, r0
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	4303      	orrs	r3, r0
 8006bf6:	3401      	adds	r4, #1
 8006bf8:	9304      	str	r3, [sp, #16]
 8006bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfe:	4826      	ldr	r0, [pc, #152]	; (8006c98 <_svfiprintf_r+0x1f0>)
 8006c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c04:	2206      	movs	r2, #6
 8006c06:	f7f9 fb73 	bl	80002f0 <memchr>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d038      	beq.n	8006c80 <_svfiprintf_r+0x1d8>
 8006c0e:	4b23      	ldr	r3, [pc, #140]	; (8006c9c <_svfiprintf_r+0x1f4>)
 8006c10:	bb1b      	cbnz	r3, 8006c5a <_svfiprintf_r+0x1b2>
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	3307      	adds	r3, #7
 8006c16:	f023 0307 	bic.w	r3, r3, #7
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	9303      	str	r3, [sp, #12]
 8006c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c20:	4433      	add	r3, r6
 8006c22:	9309      	str	r3, [sp, #36]	; 0x24
 8006c24:	e767      	b.n	8006af6 <_svfiprintf_r+0x4e>
 8006c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	e7a5      	b.n	8006b7c <_svfiprintf_r+0xd4>
 8006c30:	2300      	movs	r3, #0
 8006c32:	3401      	adds	r4, #1
 8006c34:	9305      	str	r3, [sp, #20]
 8006c36:	4619      	mov	r1, r3
 8006c38:	f04f 0c0a 	mov.w	ip, #10
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c42:	3a30      	subs	r2, #48	; 0x30
 8006c44:	2a09      	cmp	r2, #9
 8006c46:	d903      	bls.n	8006c50 <_svfiprintf_r+0x1a8>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d0c5      	beq.n	8006bd8 <_svfiprintf_r+0x130>
 8006c4c:	9105      	str	r1, [sp, #20]
 8006c4e:	e7c3      	b.n	8006bd8 <_svfiprintf_r+0x130>
 8006c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c54:	4604      	mov	r4, r0
 8006c56:	2301      	movs	r3, #1
 8006c58:	e7f0      	b.n	8006c3c <_svfiprintf_r+0x194>
 8006c5a:	ab03      	add	r3, sp, #12
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	462a      	mov	r2, r5
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <_svfiprintf_r+0x1f8>)
 8006c62:	a904      	add	r1, sp, #16
 8006c64:	4638      	mov	r0, r7
 8006c66:	f3af 8000 	nop.w
 8006c6a:	1c42      	adds	r2, r0, #1
 8006c6c:	4606      	mov	r6, r0
 8006c6e:	d1d6      	bne.n	8006c1e <_svfiprintf_r+0x176>
 8006c70:	89ab      	ldrh	r3, [r5, #12]
 8006c72:	065b      	lsls	r3, r3, #25
 8006c74:	f53f af2c 	bmi.w	8006ad0 <_svfiprintf_r+0x28>
 8006c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c7a:	b01d      	add	sp, #116	; 0x74
 8006c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c80:	ab03      	add	r3, sp, #12
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	462a      	mov	r2, r5
 8006c86:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <_svfiprintf_r+0x1f8>)
 8006c88:	a904      	add	r1, sp, #16
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	f000 f87a 	bl	8006d84 <_printf_i>
 8006c90:	e7eb      	b.n	8006c6a <_svfiprintf_r+0x1c2>
 8006c92:	bf00      	nop
 8006c94:	08007248 	.word	0x08007248
 8006c98:	08007252 	.word	0x08007252
 8006c9c:	00000000 	.word	0x00000000
 8006ca0:	080069f1 	.word	0x080069f1
 8006ca4:	0800724e 	.word	0x0800724e

08006ca8 <_printf_common>:
 8006ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cac:	4616      	mov	r6, r2
 8006cae:	4699      	mov	r9, r3
 8006cb0:	688a      	ldr	r2, [r1, #8]
 8006cb2:	690b      	ldr	r3, [r1, #16]
 8006cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	bfb8      	it	lt
 8006cbc:	4613      	movlt	r3, r2
 8006cbe:	6033      	str	r3, [r6, #0]
 8006cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	b10a      	cbz	r2, 8006cce <_printf_common+0x26>
 8006cca:	3301      	adds	r3, #1
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	0699      	lsls	r1, r3, #26
 8006cd2:	bf42      	ittt	mi
 8006cd4:	6833      	ldrmi	r3, [r6, #0]
 8006cd6:	3302      	addmi	r3, #2
 8006cd8:	6033      	strmi	r3, [r6, #0]
 8006cda:	6825      	ldr	r5, [r4, #0]
 8006cdc:	f015 0506 	ands.w	r5, r5, #6
 8006ce0:	d106      	bne.n	8006cf0 <_printf_common+0x48>
 8006ce2:	f104 0a19 	add.w	sl, r4, #25
 8006ce6:	68e3      	ldr	r3, [r4, #12]
 8006ce8:	6832      	ldr	r2, [r6, #0]
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	42ab      	cmp	r3, r5
 8006cee:	dc26      	bgt.n	8006d3e <_printf_common+0x96>
 8006cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cf4:	1e13      	subs	r3, r2, #0
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	bf18      	it	ne
 8006cfa:	2301      	movne	r3, #1
 8006cfc:	0692      	lsls	r2, r2, #26
 8006cfe:	d42b      	bmi.n	8006d58 <_printf_common+0xb0>
 8006d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d04:	4649      	mov	r1, r9
 8006d06:	4638      	mov	r0, r7
 8006d08:	47c0      	blx	r8
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d01e      	beq.n	8006d4c <_printf_common+0xa4>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	68e5      	ldr	r5, [r4, #12]
 8006d12:	6832      	ldr	r2, [r6, #0]
 8006d14:	f003 0306 	and.w	r3, r3, #6
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	bf08      	it	eq
 8006d1c:	1aad      	subeq	r5, r5, r2
 8006d1e:	68a3      	ldr	r3, [r4, #8]
 8006d20:	6922      	ldr	r2, [r4, #16]
 8006d22:	bf0c      	ite	eq
 8006d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d28:	2500      	movne	r5, #0
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	bfc4      	itt	gt
 8006d2e:	1a9b      	subgt	r3, r3, r2
 8006d30:	18ed      	addgt	r5, r5, r3
 8006d32:	2600      	movs	r6, #0
 8006d34:	341a      	adds	r4, #26
 8006d36:	42b5      	cmp	r5, r6
 8006d38:	d11a      	bne.n	8006d70 <_printf_common+0xc8>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e008      	b.n	8006d50 <_printf_common+0xa8>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4652      	mov	r2, sl
 8006d42:	4649      	mov	r1, r9
 8006d44:	4638      	mov	r0, r7
 8006d46:	47c0      	blx	r8
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d103      	bne.n	8006d54 <_printf_common+0xac>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d54:	3501      	adds	r5, #1
 8006d56:	e7c6      	b.n	8006ce6 <_printf_common+0x3e>
 8006d58:	18e1      	adds	r1, r4, r3
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	2030      	movs	r0, #48	; 0x30
 8006d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d62:	4422      	add	r2, r4
 8006d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d6c:	3302      	adds	r3, #2
 8006d6e:	e7c7      	b.n	8006d00 <_printf_common+0x58>
 8006d70:	2301      	movs	r3, #1
 8006d72:	4622      	mov	r2, r4
 8006d74:	4649      	mov	r1, r9
 8006d76:	4638      	mov	r0, r7
 8006d78:	47c0      	blx	r8
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d0e6      	beq.n	8006d4c <_printf_common+0xa4>
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7d9      	b.n	8006d36 <_printf_common+0x8e>
	...

08006d84 <_printf_i>:
 8006d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d88:	460c      	mov	r4, r1
 8006d8a:	4691      	mov	r9, r2
 8006d8c:	7e27      	ldrb	r7, [r4, #24]
 8006d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d90:	2f78      	cmp	r7, #120	; 0x78
 8006d92:	4680      	mov	r8, r0
 8006d94:	469a      	mov	sl, r3
 8006d96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d9a:	d807      	bhi.n	8006dac <_printf_i+0x28>
 8006d9c:	2f62      	cmp	r7, #98	; 0x62
 8006d9e:	d80a      	bhi.n	8006db6 <_printf_i+0x32>
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	f000 80d8 	beq.w	8006f56 <_printf_i+0x1d2>
 8006da6:	2f58      	cmp	r7, #88	; 0x58
 8006da8:	f000 80a3 	beq.w	8006ef2 <_printf_i+0x16e>
 8006dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006db4:	e03a      	b.n	8006e2c <_printf_i+0xa8>
 8006db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dba:	2b15      	cmp	r3, #21
 8006dbc:	d8f6      	bhi.n	8006dac <_printf_i+0x28>
 8006dbe:	a001      	add	r0, pc, #4	; (adr r0, 8006dc4 <_printf_i+0x40>)
 8006dc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006dc4:	08006e1d 	.word	0x08006e1d
 8006dc8:	08006e31 	.word	0x08006e31
 8006dcc:	08006dad 	.word	0x08006dad
 8006dd0:	08006dad 	.word	0x08006dad
 8006dd4:	08006dad 	.word	0x08006dad
 8006dd8:	08006dad 	.word	0x08006dad
 8006ddc:	08006e31 	.word	0x08006e31
 8006de0:	08006dad 	.word	0x08006dad
 8006de4:	08006dad 	.word	0x08006dad
 8006de8:	08006dad 	.word	0x08006dad
 8006dec:	08006dad 	.word	0x08006dad
 8006df0:	08006f3d 	.word	0x08006f3d
 8006df4:	08006e61 	.word	0x08006e61
 8006df8:	08006f1f 	.word	0x08006f1f
 8006dfc:	08006dad 	.word	0x08006dad
 8006e00:	08006dad 	.word	0x08006dad
 8006e04:	08006f5f 	.word	0x08006f5f
 8006e08:	08006dad 	.word	0x08006dad
 8006e0c:	08006e61 	.word	0x08006e61
 8006e10:	08006dad 	.word	0x08006dad
 8006e14:	08006dad 	.word	0x08006dad
 8006e18:	08006f27 	.word	0x08006f27
 8006e1c:	680b      	ldr	r3, [r1, #0]
 8006e1e:	1d1a      	adds	r2, r3, #4
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	600a      	str	r2, [r1, #0]
 8006e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0a3      	b.n	8006f78 <_printf_i+0x1f4>
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	6808      	ldr	r0, [r1, #0]
 8006e34:	062e      	lsls	r6, r5, #24
 8006e36:	f100 0304 	add.w	r3, r0, #4
 8006e3a:	d50a      	bpl.n	8006e52 <_printf_i+0xce>
 8006e3c:	6805      	ldr	r5, [r0, #0]
 8006e3e:	600b      	str	r3, [r1, #0]
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	da03      	bge.n	8006e4c <_printf_i+0xc8>
 8006e44:	232d      	movs	r3, #45	; 0x2d
 8006e46:	426d      	negs	r5, r5
 8006e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e4c:	485e      	ldr	r0, [pc, #376]	; (8006fc8 <_printf_i+0x244>)
 8006e4e:	230a      	movs	r3, #10
 8006e50:	e019      	b.n	8006e86 <_printf_i+0x102>
 8006e52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e56:	6805      	ldr	r5, [r0, #0]
 8006e58:	600b      	str	r3, [r1, #0]
 8006e5a:	bf18      	it	ne
 8006e5c:	b22d      	sxthne	r5, r5
 8006e5e:	e7ef      	b.n	8006e40 <_printf_i+0xbc>
 8006e60:	680b      	ldr	r3, [r1, #0]
 8006e62:	6825      	ldr	r5, [r4, #0]
 8006e64:	1d18      	adds	r0, r3, #4
 8006e66:	6008      	str	r0, [r1, #0]
 8006e68:	0628      	lsls	r0, r5, #24
 8006e6a:	d501      	bpl.n	8006e70 <_printf_i+0xec>
 8006e6c:	681d      	ldr	r5, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <_printf_i+0xf2>
 8006e70:	0669      	lsls	r1, r5, #25
 8006e72:	d5fb      	bpl.n	8006e6c <_printf_i+0xe8>
 8006e74:	881d      	ldrh	r5, [r3, #0]
 8006e76:	4854      	ldr	r0, [pc, #336]	; (8006fc8 <_printf_i+0x244>)
 8006e78:	2f6f      	cmp	r7, #111	; 0x6f
 8006e7a:	bf0c      	ite	eq
 8006e7c:	2308      	moveq	r3, #8
 8006e7e:	230a      	movne	r3, #10
 8006e80:	2100      	movs	r1, #0
 8006e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e86:	6866      	ldr	r6, [r4, #4]
 8006e88:	60a6      	str	r6, [r4, #8]
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	bfa2      	ittt	ge
 8006e8e:	6821      	ldrge	r1, [r4, #0]
 8006e90:	f021 0104 	bicge.w	r1, r1, #4
 8006e94:	6021      	strge	r1, [r4, #0]
 8006e96:	b90d      	cbnz	r5, 8006e9c <_printf_i+0x118>
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	d04d      	beq.n	8006f38 <_printf_i+0x1b4>
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ea2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ea6:	5dc7      	ldrb	r7, [r0, r7]
 8006ea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eac:	462f      	mov	r7, r5
 8006eae:	42bb      	cmp	r3, r7
 8006eb0:	460d      	mov	r5, r1
 8006eb2:	d9f4      	bls.n	8006e9e <_printf_i+0x11a>
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d10b      	bne.n	8006ed0 <_printf_i+0x14c>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07df      	lsls	r7, r3, #31
 8006ebc:	d508      	bpl.n	8006ed0 <_printf_i+0x14c>
 8006ebe:	6923      	ldr	r3, [r4, #16]
 8006ec0:	6861      	ldr	r1, [r4, #4]
 8006ec2:	4299      	cmp	r1, r3
 8006ec4:	bfde      	ittt	le
 8006ec6:	2330      	movle	r3, #48	; 0x30
 8006ec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ecc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ed0:	1b92      	subs	r2, r2, r6
 8006ed2:	6122      	str	r2, [r4, #16]
 8006ed4:	f8cd a000 	str.w	sl, [sp]
 8006ed8:	464b      	mov	r3, r9
 8006eda:	aa03      	add	r2, sp, #12
 8006edc:	4621      	mov	r1, r4
 8006ede:	4640      	mov	r0, r8
 8006ee0:	f7ff fee2 	bl	8006ca8 <_printf_common>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d14c      	bne.n	8006f82 <_printf_i+0x1fe>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b004      	add	sp, #16
 8006eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef2:	4835      	ldr	r0, [pc, #212]	; (8006fc8 <_printf_i+0x244>)
 8006ef4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	680e      	ldr	r6, [r1, #0]
 8006efc:	061f      	lsls	r7, r3, #24
 8006efe:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f02:	600e      	str	r6, [r1, #0]
 8006f04:	d514      	bpl.n	8006f30 <_printf_i+0x1ac>
 8006f06:	07d9      	lsls	r1, r3, #31
 8006f08:	bf44      	itt	mi
 8006f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f0e:	6023      	strmi	r3, [r4, #0]
 8006f10:	b91d      	cbnz	r5, 8006f1a <_printf_i+0x196>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	f023 0320 	bic.w	r3, r3, #32
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	e7b0      	b.n	8006e80 <_printf_i+0xfc>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f043 0320 	orr.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	2378      	movs	r3, #120	; 0x78
 8006f28:	4828      	ldr	r0, [pc, #160]	; (8006fcc <_printf_i+0x248>)
 8006f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f2e:	e7e3      	b.n	8006ef8 <_printf_i+0x174>
 8006f30:	065e      	lsls	r6, r3, #25
 8006f32:	bf48      	it	mi
 8006f34:	b2ad      	uxthmi	r5, r5
 8006f36:	e7e6      	b.n	8006f06 <_printf_i+0x182>
 8006f38:	4616      	mov	r6, r2
 8006f3a:	e7bb      	b.n	8006eb4 <_printf_i+0x130>
 8006f3c:	680b      	ldr	r3, [r1, #0]
 8006f3e:	6826      	ldr	r6, [r4, #0]
 8006f40:	6960      	ldr	r0, [r4, #20]
 8006f42:	1d1d      	adds	r5, r3, #4
 8006f44:	600d      	str	r5, [r1, #0]
 8006f46:	0635      	lsls	r5, r6, #24
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	d501      	bpl.n	8006f50 <_printf_i+0x1cc>
 8006f4c:	6018      	str	r0, [r3, #0]
 8006f4e:	e002      	b.n	8006f56 <_printf_i+0x1d2>
 8006f50:	0671      	lsls	r1, r6, #25
 8006f52:	d5fb      	bpl.n	8006f4c <_printf_i+0x1c8>
 8006f54:	8018      	strh	r0, [r3, #0]
 8006f56:	2300      	movs	r3, #0
 8006f58:	6123      	str	r3, [r4, #16]
 8006f5a:	4616      	mov	r6, r2
 8006f5c:	e7ba      	b.n	8006ed4 <_printf_i+0x150>
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	1d1a      	adds	r2, r3, #4
 8006f62:	600a      	str	r2, [r1, #0]
 8006f64:	681e      	ldr	r6, [r3, #0]
 8006f66:	6862      	ldr	r2, [r4, #4]
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7f9 f9c0 	bl	80002f0 <memchr>
 8006f70:	b108      	cbz	r0, 8006f76 <_printf_i+0x1f2>
 8006f72:	1b80      	subs	r0, r0, r6
 8006f74:	6060      	str	r0, [r4, #4]
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	6123      	str	r3, [r4, #16]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f80:	e7a8      	b.n	8006ed4 <_printf_i+0x150>
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	4632      	mov	r2, r6
 8006f86:	4649      	mov	r1, r9
 8006f88:	4640      	mov	r0, r8
 8006f8a:	47d0      	blx	sl
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d0ab      	beq.n	8006ee8 <_printf_i+0x164>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	079b      	lsls	r3, r3, #30
 8006f94:	d413      	bmi.n	8006fbe <_printf_i+0x23a>
 8006f96:	68e0      	ldr	r0, [r4, #12]
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	4298      	cmp	r0, r3
 8006f9c:	bfb8      	it	lt
 8006f9e:	4618      	movlt	r0, r3
 8006fa0:	e7a4      	b.n	8006eec <_printf_i+0x168>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4632      	mov	r2, r6
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	4640      	mov	r0, r8
 8006faa:	47d0      	blx	sl
 8006fac:	3001      	adds	r0, #1
 8006fae:	d09b      	beq.n	8006ee8 <_printf_i+0x164>
 8006fb0:	3501      	adds	r5, #1
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	9903      	ldr	r1, [sp, #12]
 8006fb6:	1a5b      	subs	r3, r3, r1
 8006fb8:	42ab      	cmp	r3, r5
 8006fba:	dcf2      	bgt.n	8006fa2 <_printf_i+0x21e>
 8006fbc:	e7eb      	b.n	8006f96 <_printf_i+0x212>
 8006fbe:	2500      	movs	r5, #0
 8006fc0:	f104 0619 	add.w	r6, r4, #25
 8006fc4:	e7f5      	b.n	8006fb2 <_printf_i+0x22e>
 8006fc6:	bf00      	nop
 8006fc8:	08007259 	.word	0x08007259
 8006fcc:	0800726a 	.word	0x0800726a

08006fd0 <_sbrk_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d06      	ldr	r5, [pc, #24]	; (8006fec <_sbrk_r+0x1c>)
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	4608      	mov	r0, r1
 8006fda:	602b      	str	r3, [r5, #0]
 8006fdc:	f7f9 fe66 	bl	8000cac <_sbrk>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_sbrk_r+0x1a>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_sbrk_r+0x1a>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	240002e4 	.word	0x240002e4

08006ff0 <memmove>:
 8006ff0:	4288      	cmp	r0, r1
 8006ff2:	b510      	push	{r4, lr}
 8006ff4:	eb01 0402 	add.w	r4, r1, r2
 8006ff8:	d902      	bls.n	8007000 <memmove+0x10>
 8006ffa:	4284      	cmp	r4, r0
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	d807      	bhi.n	8007010 <memmove+0x20>
 8007000:	1e43      	subs	r3, r0, #1
 8007002:	42a1      	cmp	r1, r4
 8007004:	d008      	beq.n	8007018 <memmove+0x28>
 8007006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800700a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800700e:	e7f8      	b.n	8007002 <memmove+0x12>
 8007010:	4402      	add	r2, r0
 8007012:	4601      	mov	r1, r0
 8007014:	428a      	cmp	r2, r1
 8007016:	d100      	bne.n	800701a <memmove+0x2a>
 8007018:	bd10      	pop	{r4, pc}
 800701a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800701e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007022:	e7f7      	b.n	8007014 <memmove+0x24>

08007024 <__malloc_lock>:
 8007024:	4801      	ldr	r0, [pc, #4]	; (800702c <__malloc_lock+0x8>)
 8007026:	f7ff bc87 	b.w	8006938 <__retarget_lock_acquire_recursive>
 800702a:	bf00      	nop
 800702c:	240002dc 	.word	0x240002dc

08007030 <__malloc_unlock>:
 8007030:	4801      	ldr	r0, [pc, #4]	; (8007038 <__malloc_unlock+0x8>)
 8007032:	f7ff bc82 	b.w	800693a <__retarget_lock_release_recursive>
 8007036:	bf00      	nop
 8007038:	240002dc 	.word	0x240002dc

0800703c <_free_r>:
 800703c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703e:	2900      	cmp	r1, #0
 8007040:	d048      	beq.n	80070d4 <_free_r+0x98>
 8007042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007046:	9001      	str	r0, [sp, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f1a1 0404 	sub.w	r4, r1, #4
 800704e:	bfb8      	it	lt
 8007050:	18e4      	addlt	r4, r4, r3
 8007052:	f7ff ffe7 	bl	8007024 <__malloc_lock>
 8007056:	4a20      	ldr	r2, [pc, #128]	; (80070d8 <_free_r+0x9c>)
 8007058:	9801      	ldr	r0, [sp, #4]
 800705a:	6813      	ldr	r3, [r2, #0]
 800705c:	4615      	mov	r5, r2
 800705e:	b933      	cbnz	r3, 800706e <_free_r+0x32>
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6014      	str	r4, [r2, #0]
 8007064:	b003      	add	sp, #12
 8007066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800706a:	f7ff bfe1 	b.w	8007030 <__malloc_unlock>
 800706e:	42a3      	cmp	r3, r4
 8007070:	d90b      	bls.n	800708a <_free_r+0x4e>
 8007072:	6821      	ldr	r1, [r4, #0]
 8007074:	1862      	adds	r2, r4, r1
 8007076:	4293      	cmp	r3, r2
 8007078:	bf04      	itt	eq
 800707a:	681a      	ldreq	r2, [r3, #0]
 800707c:	685b      	ldreq	r3, [r3, #4]
 800707e:	6063      	str	r3, [r4, #4]
 8007080:	bf04      	itt	eq
 8007082:	1852      	addeq	r2, r2, r1
 8007084:	6022      	streq	r2, [r4, #0]
 8007086:	602c      	str	r4, [r5, #0]
 8007088:	e7ec      	b.n	8007064 <_free_r+0x28>
 800708a:	461a      	mov	r2, r3
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b10b      	cbz	r3, 8007094 <_free_r+0x58>
 8007090:	42a3      	cmp	r3, r4
 8007092:	d9fa      	bls.n	800708a <_free_r+0x4e>
 8007094:	6811      	ldr	r1, [r2, #0]
 8007096:	1855      	adds	r5, r2, r1
 8007098:	42a5      	cmp	r5, r4
 800709a:	d10b      	bne.n	80070b4 <_free_r+0x78>
 800709c:	6824      	ldr	r4, [r4, #0]
 800709e:	4421      	add	r1, r4
 80070a0:	1854      	adds	r4, r2, r1
 80070a2:	42a3      	cmp	r3, r4
 80070a4:	6011      	str	r1, [r2, #0]
 80070a6:	d1dd      	bne.n	8007064 <_free_r+0x28>
 80070a8:	681c      	ldr	r4, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	6053      	str	r3, [r2, #4]
 80070ae:	4421      	add	r1, r4
 80070b0:	6011      	str	r1, [r2, #0]
 80070b2:	e7d7      	b.n	8007064 <_free_r+0x28>
 80070b4:	d902      	bls.n	80070bc <_free_r+0x80>
 80070b6:	230c      	movs	r3, #12
 80070b8:	6003      	str	r3, [r0, #0]
 80070ba:	e7d3      	b.n	8007064 <_free_r+0x28>
 80070bc:	6825      	ldr	r5, [r4, #0]
 80070be:	1961      	adds	r1, r4, r5
 80070c0:	428b      	cmp	r3, r1
 80070c2:	bf04      	itt	eq
 80070c4:	6819      	ldreq	r1, [r3, #0]
 80070c6:	685b      	ldreq	r3, [r3, #4]
 80070c8:	6063      	str	r3, [r4, #4]
 80070ca:	bf04      	itt	eq
 80070cc:	1949      	addeq	r1, r1, r5
 80070ce:	6021      	streq	r1, [r4, #0]
 80070d0:	6054      	str	r4, [r2, #4]
 80070d2:	e7c7      	b.n	8007064 <_free_r+0x28>
 80070d4:	b003      	add	sp, #12
 80070d6:	bd30      	pop	{r4, r5, pc}
 80070d8:	240000a0 	.word	0x240000a0

080070dc <_realloc_r>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	4607      	mov	r7, r0
 80070e0:	4614      	mov	r4, r2
 80070e2:	460e      	mov	r6, r1
 80070e4:	b921      	cbnz	r1, 80070f0 <_realloc_r+0x14>
 80070e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80070ea:	4611      	mov	r1, r2
 80070ec:	f7ff bc26 	b.w	800693c <_malloc_r>
 80070f0:	b922      	cbnz	r2, 80070fc <_realloc_r+0x20>
 80070f2:	f7ff ffa3 	bl	800703c <_free_r>
 80070f6:	4625      	mov	r5, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070fc:	f000 f814 	bl	8007128 <_malloc_usable_size_r>
 8007100:	42a0      	cmp	r0, r4
 8007102:	d20f      	bcs.n	8007124 <_realloc_r+0x48>
 8007104:	4621      	mov	r1, r4
 8007106:	4638      	mov	r0, r7
 8007108:	f7ff fc18 	bl	800693c <_malloc_r>
 800710c:	4605      	mov	r5, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d0f2      	beq.n	80070f8 <_realloc_r+0x1c>
 8007112:	4631      	mov	r1, r6
 8007114:	4622      	mov	r2, r4
 8007116:	f7ff fbd9 	bl	80068cc <memcpy>
 800711a:	4631      	mov	r1, r6
 800711c:	4638      	mov	r0, r7
 800711e:	f7ff ff8d 	bl	800703c <_free_r>
 8007122:	e7e9      	b.n	80070f8 <_realloc_r+0x1c>
 8007124:	4635      	mov	r5, r6
 8007126:	e7e7      	b.n	80070f8 <_realloc_r+0x1c>

08007128 <_malloc_usable_size_r>:
 8007128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800712c:	1f18      	subs	r0, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	bfbc      	itt	lt
 8007132:	580b      	ldrlt	r3, [r1, r0]
 8007134:	18c0      	addlt	r0, r0, r3
 8007136:	4770      	bx	lr

08007138 <_init>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr

08007144 <_fini>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	bf00      	nop
 8007148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714a:	bc08      	pop	{r3}
 800714c:	469e      	mov	lr, r3
 800714e:	4770      	bx	lr
