
STM32CubeIDE_Sensor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a028  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a2d8  0800a2d8  0001a2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a414  0800a414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a41c  0800a41c  0001a41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a420  0800a420  0001a420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002bc  24000074  0800a498  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000330  0800a498  00020330  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fc7e  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004460  00000000  00000000  0004fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  00054180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001738  00000000  00000000  00055a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000354ed  00000000  00000000  00057148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001df08  00000000  00000000  0008c635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f2e7  00000000  00000000  000aa53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00209824  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007390  00000000  00000000  00209878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800a2c0 	.word	0x0800a2c0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	0800a2c0 	.word	0x0800a2c0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_ADC1_Init+0xe4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_ADC1_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC1_Init+0xe4>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_ADC1_Init+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC1_Init+0xe4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_ADC1_Init+0xe4>)
 80006d8:	2201      	movs	r2, #1
 80006da:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC1_Init+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC1_Init+0xe4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC1_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ADC1_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_ADC1_Init+0xe4>)
 800070a:	f001 f973 	bl	80019f4 <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000714:	f000 fbe2 	bl	8000edc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_ADC1_Init+0xe4>)
 8000724:	f002 f8b4 	bl	8002890 <HAL_ADCEx_MultiModeConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800072e:	f000 fbd5 	bl	8000edc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_ADC1_Init+0xec>)
 8000734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000736:	2306      	movs	r3, #6
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000742:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000744:	2304      	movs	r3, #4
 8000746:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_ADC1_Init+0xe4>)
 8000756:	f001 fc47 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000760:	f000 fbbc 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	240000ac 	.word	0x240000ac
 8000770:	40022000 	.word	0x40022000
 8000774:	08600004 	.word	0x08600004

08000778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0b8      	sub	sp, #224	; 0xe0
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	22b8      	movs	r2, #184	; 0xb8
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f008 fc6f 	bl	800907c <memset>
  if(adcHandle->Instance==ADC1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <HAL_ADC_MspInit+0xd4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d14d      	bne.n	8000844 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80007b2:	2308      	movs	r3, #8
 80007b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 f915 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80007e4:	f000 fb7a 	bl	8000edc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007fa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082c:	2303      	movs	r3, #3
 800082e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800083c:	4619      	mov	r1, r3
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 8000840:	f002 ff2e 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000844:	bf00      	nop
 8000846:	37e0      	adds	r7, #224	; 0xe0
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40022000 	.word	0x40022000
 8000850:	58024400 	.word	0x58024400
 8000854:	58021400 	.word	0x58021400

08000858 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800085c:	4b56      	ldr	r3, [pc, #344]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 800085e:	4a57      	ldr	r2, [pc, #348]	; (80009bc <MX_FDCAN1_Init+0x164>)
 8000860:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000862:	4b55      	ldr	r3, [pc, #340]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000868:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800086a:	4b53      	ldr	r3, [pc, #332]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000870:	4b51      	ldr	r3, [pc, #324]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000872:	2201      	movs	r2, #1
 8000874:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000876:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000878:	2200      	movs	r2, #0
 800087a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800087c:	4b4e      	ldr	r3, [pc, #312]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 800087e:	2200      	movs	r2, #0
 8000880:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000882:	4b4d      	ldr	r3, [pc, #308]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000888:	4b4b      	ldr	r3, [pc, #300]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 800088a:	2201      	movs	r2, #1
 800088c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 800088e:	4b4a      	ldr	r3, [pc, #296]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000890:	2205      	movs	r2, #5
 8000892:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000894:	4b48      	ldr	r3, [pc, #288]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000896:	2202      	movs	r2, #2
 8000898:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800089a:	4b47      	ldr	r3, [pc, #284]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 800089c:	2201      	movs	r2, #1
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80008a0:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80008a6:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008a8:	2205      	movs	r2, #5
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80008ac:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008b2:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80008b8:	4b3f      	ldr	r3, [pc, #252]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008be:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80008c4:	4b3c      	ldr	r3, [pc, #240]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008ca:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008d0:	4b39      	ldr	r3, [pc, #228]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008d8:	2204      	movs	r2, #4
 80008da:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80008dc:	4b36      	ldr	r3, [pc, #216]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008de:	2201      	movs	r2, #1
 80008e0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000902:	2204      	movs	r2, #4
 8000904:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000906:	482c      	ldr	r0, [pc, #176]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000908:	f002 f96e 	bl	8002be8 <HAL_FDCAN_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000912:	f000 fae3 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID; //IdType ?? ?���????? ID ?��?�� ?��?�� ID�????? ?��?��?��?���????? ?���?????�????? ?��?��?��?��?�� .
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
     sFilterConfig.FilterIndex = 0; //Filterindex ?�� ?��?�� 개의 ?��?���????? 구성?��?�� 경우?�� ?��?��?��?��?��. 1개의 ?��?���????? ?��?��?���????? ?���????? ?��문에 0?���????? ?��?��?��?��?��.
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
     sFilterConfig.FilterType = FDCAN_FILTER_MASK; //FilterType ?? ?��리�? ?��?��?��?�� ?��?�� ?��?��?��?��?��. ?��기서?�� MASK ?��?���????? ?��?��?���????? ?��?��?��?��
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 8000924:	2202      	movs	r2, #2
 8000926:	609a      	str	r2, [r3, #8]
     sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //FilterConfig ?�� ?��?���????? ?��과하?�� 메시�??????�� ?��?��?��?�� ?��?�� ?��?��?�� 결정?��?��?��. RX FIFO 0?���????? 보내?���????? ?��?��?��?�� ?��?��?��?��.
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 800092a:	2201      	movs	r2, #1
 800092c:	60da      	str	r2, [r3, #12]

     sFilterConfig.FilterID1 = 0x33; // ID Node2  //?�� MASK ?��?��?�� 경우 ID1( 0x22 )?�� ID�????? ?��?��?���????? ID2( 0x22 )�????? 마스?�� 비트�????? ?��?��?��?��?��.
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 8000930:	2233      	movs	r2, #51	; 0x33
 8000932:	611a      	str	r2, [r3, #16]
     sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 8000936:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800093a:	615a      	str	r2, [r3, #20]
     sFilterConfig.RxBufferIndex = 0; //RxBufferIndex ?�� FIFO ???�� RX Buffer�????? ?��?��?�� 경우 ?��?��?���?????�????? 0?���????? ?��?��?��?��.
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
       if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000942:	491f      	ldr	r1, [pc, #124]	; (80009c0 <MX_FDCAN1_Init+0x168>)
 8000944:	481c      	ldr	r0, [pc, #112]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000946:	f002 fb31 	bl	8002fac <HAL_FDCAN_ConfigFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_FDCAN1_Init+0xfc>
       {
         Error_Handler();
 8000950:	f000 fac4 	bl	8000edc <Error_Handler>
       }
       if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000954:	4818      	ldr	r0, [pc, #96]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 8000956:	f002 fb9f 	bl	8003098 <HAL_FDCAN_Start>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_FDCAN1_Init+0x10c>
              {
               Error_Handler();
 8000960:	f000 fabc 	bl	8000edc <Error_Handler>

              // STart FDCAN2


              // Activate the notification for new data in FIFO0 for FDCAN1
              if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	4813      	ldr	r0, [pc, #76]	; (80009b8 <MX_FDCAN1_Init+0x160>)
 800096a:	f002 fc1b 	bl	80031a4 <HAL_FDCAN_ActivateNotification>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_FDCAN1_Init+0x120>
              {
                /* Notification Error */
                Error_Handler();
 8000974:	f000 fab2 	bl	8000edc <Error_Handler>
              }


              // Configure TX Header for FDCAN1
              TxHeader.Identifier = 0x11;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 800097a:	2211      	movs	r2, #17
 800097c:	601a      	str	r2, [r3, #0]
              TxHeader.IdType = FDCAN_STANDARD_ID;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
              TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
              TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 800098c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000990:	60da      	str	r2, [r3, #12]
              TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
              TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
              TxHeader.FDFormat = FDCAN_FD_CAN;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 80009a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009a4:	619a      	str	r2, [r3, #24]
              TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80009a6:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
              TxHeader.MessageMarker = 0x0;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <MX_FDCAN1_Init+0x16c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	24000130 	.word	0x24000130
 80009bc:	4000a000 	.word	0x4000a000
 80009c0:	24000110 	.word	0x24000110
 80009c4:	240001d0 	.word	0x240001d0

080009c8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0b8      	sub	sp, #224	; 0xe0
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	22b8      	movs	r2, #184	; 0xb8
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f008 fb47 	bl	800907c <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a29      	ldr	r2, [pc, #164]	; (8000a98 <HAL_FDCAN_MspInit+0xd0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d14b      	bne.n	8000a90 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80009f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80009fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fffc 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000a16:	f000 fa61 	bl	8000edc <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_FDCAN_MspInit+0xd4>)
 8000a1c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <HAL_FDCAN_MspInit+0xd4>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_FDCAN_MspInit+0xd4>)
 8000a2c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_FDCAN_MspInit+0xd4>)
 8000a3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_FDCAN_MspInit+0xd4>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_FDCAN_MspInit+0xd4>)
 8000a4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a56:	2303      	movs	r3, #3
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a6e:	2309      	movs	r3, #9
 8000a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4809      	ldr	r0, [pc, #36]	; (8000aa0 <HAL_FDCAN_MspInit+0xd8>)
 8000a7c:	f002 fe10 	bl	80036a0 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2105      	movs	r1, #5
 8000a84:	2013      	movs	r0, #19
 8000a86:	f002 f87a 	bl	8002b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a8a:	2013      	movs	r0, #19
 8000a8c:	f002 f891 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000a90:	bf00      	nop
 8000a92:	37e0      	adds	r7, #224	; 0xe0
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	4000a000 	.word	0x4000a000
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020c00 	.word	0x58020c00

08000aa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac0:	4a27      	ldr	r2, [pc, #156]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ade:	4a20      	ldr	r2, [pc, #128]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afc:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0c:	f003 0320 	and.w	r3, r3, #32
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_GPIO_Init+0xbc>)
 8000b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0xc0>)
 8000b38:	f002 ff62 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0xc0>)
 8000b54:	f002 fda4 	bl	80036a0 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	; 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58020000 	.word	0x58020000

08000b68 <delay>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <delay+0x30>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000b7a:	bf00      	nop
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <delay+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3f9      	bcc.n	8000b7c <delay+0x14>
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	24000240 	.word	0x24000240
 8000b9c:	00000000 	.word	0x00000000

08000ba0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7f1b      	ldrb	r3, [r3, #28]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d17a      	bne.n	8000ca6 <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000bb0:	4b41      	ldr	r3, [pc, #260]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11a      	bne.n	8000bee <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000bb8:	2100      	movs	r1, #0
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f006 fc8a 	bl	80074d4 <HAL_TIM_ReadCapturedValue>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a3e      	ldr	r2, [pc, #248]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000bc4:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6a1a      	ldr	r2, [r3, #32]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 020a 	bic.w	r2, r2, #10
 8000bda:	621a      	str	r2, [r3, #32]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0202 	orr.w	r2, r2, #2
 8000bea:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000bec:	e05b      	b.n	8000ca6 <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d157      	bne.n	8000ca6 <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f006 fc6b 	bl	80074d4 <HAL_TIM_ReadCapturedValue>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a2f      	ldr	r2, [pc, #188]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c02:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d907      	bls.n	8000c28 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e00f      	b.n	8000c48 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d909      	bls.n	8000c48 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	1ad2      	subs	r2, r2, r3
 8000c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c42:	4413      	add	r3, r2
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c46:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	ee07 3a90 	vmov	s15, r3
 8000c50:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c54:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000cb0 <HAL_TIM_IC_CaptureCallback+0x110>
 8000c58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c68:	edc7 7a00 	vstr	s15, [r7]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000c72:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6a1a      	ldr	r2, [r3, #32]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f022 020a 	bic.w	r2, r2, #10
 8000c88:	621a      	str	r2, [r3, #32]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6a12      	ldr	r2, [r2, #32]
 8000c94:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0202 	bic.w	r2, r2, #2
 8000ca4:	60da      	str	r2, [r3, #12]
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	b020c49c 	.word	0xb020c49c
 8000cb4:	3fa16872 	.word	0x3fa16872
 8000cb8:	2400009c 	.word	0x2400009c
 8000cbc:	24000090 	.word	0x24000090
 8000cc0:	24000094 	.word	0x24000094
 8000cc4:	24000098 	.word	0x24000098
 8000cc8:	2400009d 	.word	0x2400009d
 8000ccc:	24000240 	.word	0x24000240

08000cd0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <HCSR04_Read+0x34>)
 8000cda:	f002 fe91 	bl	8003a00 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f7ff ff42 	bl	8000b68 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <HCSR04_Read+0x34>)
 8000cea:	f002 fe89 	bl	8003a00 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HCSR04_Read+0x38>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HCSR04_Read+0x38>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f042 0202 	orr.w	r2, r2, #2
 8000cfc:	60da      	str	r2, [r3, #12]
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	58020000 	.word	0x58020000
 8000d08:	24000240 	.word	0x24000240

08000d0c <_write>:
   uint8_t TxData_Node1_To_Node3[8];
   uint8_t TxData_Node3_To_Node2[8];
   uint8_t RxData_From_Node2[8];
   uint8_t RxData_From_Node3[8];

   int _write(int file, unsigned char * p, int len){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
   	HAL_UART_Transmit(&huart3, p, len, 10);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	230a      	movs	r3, #10
 8000d1e:	68b9      	ldr	r1, [r7, #8]
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <_write+0x24>)
 8000d22:	f006 ffc7 	bl	8007cb4 <HAL_UART_Transmit>
   	return len;
 8000d26:	687b      	ldr	r3, [r7, #4]
   }
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	2400028c 	.word	0x2400028c

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f000 fbc3 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f857 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f7ff feaf 	bl	8000aa4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d46:	f7ff fc9f 	bl	8000688 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000d4a:	f7ff fd85 	bl	8000858 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 8000d4e:	f000 fa19 	bl	8001184 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000d52:	f000 fadb 	bl	800130c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <main+0x98>)
 8000d5a:	f005 ffb7 	bl	8006ccc <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 8000d5e:	f7ff ffb7 	bl	8000cd0 <HCSR04_Read>
	  	  printf("%d cm\r\n",Distance);
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <main+0x9c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	481a      	ldr	r0, [pc, #104]	; (8000dd4 <main+0xa0>)
 8000d6a:	f008 f98f 	bl	800908c <iprintf>

	  	HAL_ADC_Start(&hadc1);
 8000d6e:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <main+0xa4>)
 8000d70:	f000 ff9a 	bl	8001ca8 <HAL_ADC_Start>
	  		  	  			  HAL_ADC_PollForConversion(&hadc1, 10);
 8000d74:	210a      	movs	r1, #10
 8000d76:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <main+0xa4>)
 8000d78:	f001 f850 	bl	8001e1c <HAL_ADC_PollForConversion>
	  		  	  			  adc1 = HAL_ADC_GetValue(&hadc1);
 8000d7c:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <main+0xa4>)
 8000d7e:	f001 f925 	bl	8001fcc <HAL_ADC_GetValue>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <main+0xa8>)
 8000d88:	801a      	strh	r2, [r3, #0]
	  		  int adc;
	  		  if(adc1 > 30000)
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <main+0xa8>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d901      	bls.n	8000d9a <main+0x66>
	  		  	  {
	  		  	  	 adc = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
	  		  	  }
	  		  	  if(adc1 < 30000)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <main+0xa8>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	f247 522f 	movw	r2, #29999	; 0x752f
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d801      	bhi.n	8000daa <main+0x76>
	  		  	  {
	  		  	  	adc = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	607b      	str	r3, [r7, #4]
	  		  	  }
	  		  	sprintf ((char *)TxData_Node1_To_Node3, "%d%d",adc,Distance );
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <main+0x9c>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	490b      	ldr	r1, [pc, #44]	; (8000de0 <main+0xac>)
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <main+0xb0>)
 8000db4:	f008 f982 	bl	80090bc <siprintf>
	  		  	//	  	"%d",tfDist
	  		  		  		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData_Node1_To_Node3)!= HAL_OK)
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <main+0xb0>)
 8000dba:	490b      	ldr	r1, [pc, #44]	; (8000de8 <main+0xb4>)
 8000dbc:	480b      	ldr	r0, [pc, #44]	; (8000dec <main+0xb8>)
 8000dbe:	f002 f996 	bl	80030ee <HAL_FDCAN_AddMessageToTxFifoQ>
	  		  		  		              {
	  		  		  	//	                 Error_Handler();
	  		  		  		                }
	  		  		  		HAL_Delay(100);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 fc10 	bl	80015e8 <HAL_Delay>
  {
 8000dc8:	e7c9      	b.n	8000d5e <main+0x2a>
 8000dca:	bf00      	nop
 8000dcc:	24000240 	.word	0x24000240
 8000dd0:	2400009d 	.word	0x2400009d
 8000dd4:	0800a2d8 	.word	0x0800a2d8
 8000dd8:	240000ac 	.word	0x240000ac
 8000ddc:	2400021c 	.word	0x2400021c
 8000de0:	0800a2e0 	.word	0x0800a2e0
 8000de4:	24000228 	.word	0x24000228
 8000de8:	240001d0 	.word	0x240001d0
 8000dec:	24000130 	.word	0x24000130

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09c      	sub	sp, #112	; 0x70
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfa:	224c      	movs	r2, #76	; 0x4c
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 f93c 	bl	800907c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2220      	movs	r2, #32
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f008 f936 	bl	800907c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f002 fe0f 	bl	8003a34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <SystemClock_Config+0xe4>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	4a2d      	ldr	r2, [pc, #180]	; (8000ed4 <SystemClock_Config+0xe4>)
 8000e20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e24:	6193      	str	r3, [r2, #24]
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <SystemClock_Config+0xe4>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e32:	bf00      	nop
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <SystemClock_Config+0xe4>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e40:	d1f8      	bne.n	8000e34 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e42:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <SystemClock_Config+0xe8>)
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <SystemClock_Config+0xe8>)
 8000e48:	f023 0303 	bic.w	r3, r3, #3
 8000e4c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e56:	2340      	movs	r3, #64	; 0x40
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e62:	2304      	movs	r3, #4
 8000e64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000e66:	2308      	movs	r3, #8
 8000e68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e72:	2302      	movs	r3, #2
 8000e74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e76:	230c      	movs	r3, #12
 8000e78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 fe2e 	bl	8003ae8 <HAL_RCC_OscConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e92:	f000 f823 	bl	8000edc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e96:	233f      	movs	r3, #63	; 0x3f
 8000e98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ea6:	2340      	movs	r3, #64	; 0x40
 8000ea8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000eaa:	2340      	movs	r3, #64	; 0x40
 8000eac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000eb4:	2340      	movs	r3, #64	; 0x40
 8000eb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2102      	movs	r1, #2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f003 fa17 	bl	80042f0 <HAL_RCC_ClockConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000ec8:	f000 f808 	bl	8000edc <Error_Handler>
  }
}
 8000ecc:	bf00      	nop
 8000ece:	3770      	adds	r7, #112	; 0x70
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	58024800 	.word	0x58024800
 8000ed8:	58024400 	.word	0x58024400

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_MspInit+0x30>)
 8000ef6:	f043 0302 	orr.w	r3, r3, #2
 8000efa:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_MspInit+0x30>)
 8000f00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58024400 	.word	0x58024400

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f68:	f000 fb1e 	bl	80015a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM3_IRQHandler+0x10>)
 8000f76:	f005 fff9 	bl	8006f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000240 	.word	0x24000240

08000f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
	}

return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe6:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_isatty>:

int _isatty(int file)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f007 ffd8 	bl	800900c <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24100000 	.word	0x24100000
 8001088:	00000400 	.word	0x00000400
 800108c:	240000a0 	.word	0x240000a0
 8001090:	24000330 	.word	0x24000330

08001094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <SystemInit+0xd0>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <SystemInit+0xd0>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <SystemInit+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d807      	bhi.n	80010c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <SystemInit+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f023 030f 	bic.w	r3, r3, #15
 80010bc:	4a2a      	ldr	r2, [pc, #168]	; (8001168 <SystemInit+0xd4>)
 80010be:	f043 0303 	orr.w	r3, r3, #3
 80010c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <SystemInit+0xd8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a28      	ldr	r2, [pc, #160]	; (800116c <SystemInit+0xd8>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <SystemInit+0xd8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <SystemInit+0xd8>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4924      	ldr	r1, [pc, #144]	; (800116c <SystemInit+0xd8>)
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <SystemInit+0xdc>)
 80010de:	4013      	ands	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <SystemInit+0xd4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <SystemInit+0xd4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 030f 	bic.w	r3, r3, #15
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <SystemInit+0xd4>)
 80010f8:	f043 0303 	orr.w	r3, r3, #3
 80010fc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <SystemInit+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <SystemInit+0xd8>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <SystemInit+0xd8>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <SystemInit+0xd8>)
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <SystemInit+0xe0>)
 8001114:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <SystemInit+0xd8>)
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <SystemInit+0xe4>)
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800111c:	4b13      	ldr	r3, [pc, #76]	; (800116c <SystemInit+0xd8>)
 800111e:	4a17      	ldr	r2, [pc, #92]	; (800117c <SystemInit+0xe8>)
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <SystemInit+0xd8>)
 8001124:	2200      	movs	r2, #0
 8001126:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <SystemInit+0xd8>)
 800112a:	4a14      	ldr	r2, [pc, #80]	; (800117c <SystemInit+0xe8>)
 800112c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <SystemInit+0xd8>)
 8001130:	2200      	movs	r2, #0
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <SystemInit+0xd8>)
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <SystemInit+0xe8>)
 8001138:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <SystemInit+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <SystemInit+0xd8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <SystemInit+0xd8>)
 8001146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <SystemInit+0xd8>)
 800114e:	2200      	movs	r2, #0
 8001150:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <SystemInit+0xec>)
 8001154:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001158:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	52002000 	.word	0x52002000
 800116c:	58024400 	.word	0x58024400
 8001170:	eaf6ed7f 	.word	0xeaf6ed7f
 8001174:	02020200 	.word	0x02020200
 8001178:	01ff0000 	.word	0x01ff0000
 800117c:	01010280 	.word	0x01010280
 8001180:	52004000 	.word	0x52004000

08001184 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b0:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <MX_TIM3_Init+0xe0>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011b8:	223f      	movs	r2, #63	; 0x3f
 80011ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80011c2:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011d8:	f005 fcc0 	bl	8006b5c <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80011e2:	f7ff fe7b 	bl	8000edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	4619      	mov	r1, r3
 80011f2:	481b      	ldr	r0, [pc, #108]	; (8001260 <MX_TIM3_Init+0xdc>)
 80011f4:	f006 f876 	bl	80072e4 <HAL_TIM_ConfigClockSource>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80011fe:	f7ff fe6d 	bl	8000edc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <MX_TIM3_Init+0xdc>)
 8001204:	f005 fd01 	bl	8006c0a <HAL_TIM_IC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800120e:	f7ff fe65 	bl	8000edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <MX_TIM3_Init+0xdc>)
 8001222:	f006 fc4b 	bl	8007abc <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800122c:	f7ff fe56 	bl	8000edc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001234:	2301      	movs	r3, #1
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM3_Init+0xdc>)
 8001248:	f005 ffaf 	bl	80071aa <HAL_TIM_IC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8001252:	f7ff fe43 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	24000240 	.word	0x24000240
 8001264:	40000400 	.word	0x40000400

08001268 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <HAL_TIM_Base_MspInit+0x98>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d135      	bne.n	80012f6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_TIM_Base_MspInit+0x9c>)
 800128c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_TIM_Base_MspInit+0x9c>)
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <HAL_TIM_Base_MspInit+0x9c>)
 800129c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_TIM_Base_MspInit+0x9c>)
 80012aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <HAL_TIM_Base_MspInit+0x9c>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_TIM_Base_MspInit+0x9c>)
 80012ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012c6:	2340      	movs	r3, #64	; 0x40
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012d6:	2302      	movs	r3, #2
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <HAL_TIM_Base_MspInit+0xa0>)
 80012e2:	f002 f9dd 	bl	80036a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201d      	movs	r0, #29
 80012ec:	f001 fc47 	bl	8002b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012f0:	201d      	movs	r0, #29
 80012f2:	f001 fc5e 	bl	8002bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3728      	adds	r7, #40	; 0x28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40000400 	.word	0x40000400
 8001304:	58024400 	.word	0x58024400
 8001308:	58020000 	.word	0x58020000

0800130c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <MX_USART3_UART_Init+0x94>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_USART3_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_USART3_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001356:	f006 fc5d 	bl	8007c14 <HAL_UART_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001360:	f7ff fdbc 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001368:	f007 fd86 	bl	8008e78 <HAL_UARTEx_SetTxFifoThreshold>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001372:	f7ff fdb3 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001376:	2100      	movs	r1, #0
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <MX_USART3_UART_Init+0x90>)
 800137a:	f007 fdbb 	bl	8008ef4 <HAL_UARTEx_SetRxFifoThreshold>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001384:	f7ff fdaa 	bl	8000edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_USART3_UART_Init+0x90>)
 800138a:	f007 fd3c 	bl	8008e06 <HAL_UARTEx_DisableFifoMode>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001394:	f7ff fda2 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2400028c 	.word	0x2400028c
 80013a0:	40004800 	.word	0x40004800

080013a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b8      	sub	sp, #224	; 0xe0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	22b8      	movs	r2, #184	; 0xb8
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 fe59 	bl	800907c <memset>
  if(uartHandle->Instance==USART3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_UART_MspInit+0xc0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d142      	bne.n	800145a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d4:	2302      	movs	r3, #2
 80013d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fb10 	bl	8004a08 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ee:	f7ff fd75 	bl	8000edc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_UART_MspInit+0xc4>)
 80013f4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_UART_MspInit+0xc4>)
 80013fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fe:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001404:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001412:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001422:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800142e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001448:	2307      	movs	r3, #7
 800144a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_MspInit+0xc8>)
 8001456:	f002 f923 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	37e0      	adds	r7, #224	; 0xe0
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004800 	.word	0x40004800
 8001468:	58024400 	.word	0x58024400
 800146c:	58020c00 	.word	0x58020c00

08001470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff fe0e 	bl	8001094 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147a:	490d      	ldr	r1, [pc, #52]	; (80014b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800147c:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001480:	e002      	b.n	8001488 <LoopCopyDataInit>

08001482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001486:	3304      	adds	r3, #4

08001488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800148c:	d3f9      	bcc.n	8001482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001490:	4c0a      	ldr	r4, [pc, #40]	; (80014bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001494:	e001      	b.n	800149a <LoopFillZerobss>

08001496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001498:	3204      	adds	r2, #4

0800149a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800149c:	d3fb      	bcc.n	8001496 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800149e:	f007 fdbb 	bl	8009018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014a2:	f7ff fc47 	bl	8000d34 <main>
  bx  lr
 80014a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80014ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014b0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80014b4:	0800a424 	.word	0x0800a424
  ldr r2, =_sbss
 80014b8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80014bc:	24000330 	.word	0x24000330

080014c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
 80014cc:	f001 fb4c 	bl	8002b68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80014d0:	f003 f8c4 	bl	800465c <HAL_RCC_GetSysClockFreq>
 80014d4:	4602      	mov	r2, r0
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_Init+0x68>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	4913      	ldr	r1, [pc, #76]	; (8001530 <HAL_Init+0x6c>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	f003 031f 	and.w	r3, r3, #31
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_Init+0x68>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <HAL_Init+0x6c>)
 80014f8:	5cd3      	ldrb	r3, [r2, r3]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	fa22 f303 	lsr.w	r3, r2, r3
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_Init+0x70>)
 8001506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_Init+0x74>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800150e:	200f      	movs	r0, #15
 8001510:	f000 f814 	bl	800153c <HAL_InitTick>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e002      	b.n	8001524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800151e:	f7ff fce3 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	58024400 	.word	0x58024400
 8001530:	0800a334 	.word	0x0800a334
 8001534:	24000004 	.word	0x24000004
 8001538:	24000000 	.word	0x24000000

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_InitTick+0x60>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e021      	b.n	8001594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_InitTick+0x64>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_InitTick+0x60>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f001 fb31 	bl	8002bce <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e00e      	b.n	8001594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b0f      	cmp	r3, #15
 800157a:	d80a      	bhi.n	8001592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f001 fafb 	bl	8002b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_InitTick+0x68>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2400000c 	.word	0x2400000c
 80015a0:	24000000 	.word	0x24000000
 80015a4:	24000008 	.word	0x24000008

080015a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_IncTick+0x20>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x24>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_IncTick+0x24>)
 80015ba:	6013      	str	r3, [r2, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2400000c 	.word	0x2400000c
 80015cc:	2400031c 	.word	0x2400031c

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_GetTick+0x14>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	2400031c 	.word	0x2400031c

080015e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f0:	f7ff ffee 	bl	80015d0 <HAL_GetTick>
 80015f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001600:	d005      	beq.n	800160e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <HAL_Delay+0x44>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160e:	bf00      	nop
 8001610:	f7ff ffde 	bl	80015d0 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	429a      	cmp	r2, r3
 800161e:	d8f7      	bhi.n	8001610 <HAL_Delay+0x28>
  {
  }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2400000c 	.word	0x2400000c

08001630 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	609a      	str	r2, [r3, #8]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3360      	adds	r3, #96	; 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	430b      	orrs	r3, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	fa01 f303 	lsl.w	r3, r1, r3
 80016f8:	431a      	orrs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	611a      	str	r2, [r3, #16]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800170a:	b480      	push	{r7}
 800170c:	b087      	sub	sp, #28
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3360      	adds	r3, #96	; 0x60
 800171a:	461a      	mov	r2, r3
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	431a      	orrs	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	601a      	str	r2, [r3, #0]
  }
}
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001766:	b480      	push	{r7}
 8001768:	b087      	sub	sp, #28
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3330      	adds	r3, #48	; 0x30
 8001776:	461a      	mov	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	4413      	add	r3, r2
 8001784:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	211f      	movs	r1, #31
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	401a      	ands	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 011f 	and.w	r1, r3, #31
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017b2:	bf00      	nop
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017be:	b480      	push	{r7}
 80017c0:	b087      	sub	sp, #28
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3314      	adds	r3, #20
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	0e5b      	lsrs	r3, r3, #25
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	4413      	add	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	0d1b      	lsrs	r3, r3, #20
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2107      	movs	r1, #7
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0d1b      	lsrs	r3, r3, #20
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	431a      	orrs	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001808:	bf00      	nop
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800182c:	43db      	mvns	r3, r3
 800182e:	401a      	ands	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0318 	and.w	r3, r3, #24
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001838:	40d9      	lsrs	r1, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	400b      	ands	r3, r1
 800183e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001842:	431a      	orrs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	000fffff 	.word	0x000fffff

0800185c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 031f 	and.w	r3, r3, #31
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6093      	str	r3, [r2, #8]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	5fffffc0 	.word	0x5fffffc0

080018b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <LL_ADC_EnableInternalRegulator+0x24>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	6fffffc0 	.word	0x6fffffc0

08001908 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800191c:	d101      	bne.n	8001922 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LL_ADC_Enable+0x24>)
 800193e:	4013      	ands	r3, r2
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	7fffffc0 	.word	0x7fffffc0

08001958 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <LL_ADC_IsEnabled+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_ADC_IsEnabled+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <LL_ADC_REG_StartConversion+0x24>)
 800198e:	4013      	ands	r3, r2
 8001990:	f043 0204 	orr.w	r2, r3, #4
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	7fffffc0 	.word	0x7fffffc0

080019a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d101      	bne.n	80019c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d101      	bne.n	80019e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e138      	b.n	8001c80 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7fe feab 	bl	8000778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff3f 	bl	80018b8 <LL_ADC_IsDeepPowerDownEnabled>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff25 	bl	8001894 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ff5a 	bl	8001908 <LL_ADC_IsInternalRegulatorEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d114      	bne.n	8001a84 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff3e 	bl	80018e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_ADC_Init+0x294>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	4a88      	ldr	r2, [pc, #544]	; (8001c8c <HAL_ADC_Init+0x298>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	099b      	lsrs	r3, r3, #6
 8001a72:	3301      	adds	r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a76:	e002      	b.n	8001a7e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f9      	bne.n	8001a78 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff3d 	bl	8001908 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d10d      	bne.n	8001ab0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff77 	bl	80019a8 <LL_ADC_REG_IsConversionOngoing>
 8001aba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 80d2 	bne.w	8001c6e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 80ce 	bne.w	8001c6e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ada:	f043 0202 	orr.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff36 	bl	8001958 <LL_ADC_IsEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d110      	bne.n	8001b14 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001af2:	4867      	ldr	r0, [pc, #412]	; (8001c90 <HAL_ADC_Init+0x29c>)
 8001af4:	f7ff ff30 	bl	8001958 <LL_ADC_IsEnabled>
 8001af8:	4604      	mov	r4, r0
 8001afa:	4866      	ldr	r0, [pc, #408]	; (8001c94 <HAL_ADC_Init+0x2a0>)
 8001afc:	f7ff ff2c 	bl	8001958 <LL_ADC_IsEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4323      	orrs	r3, r4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4862      	ldr	r0, [pc, #392]	; (8001c98 <HAL_ADC_Init+0x2a4>)
 8001b10:	f7ff fd8e 	bl	8001630 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7d5b      	ldrb	r3, [r3, #21]
 8001b18:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b1e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001b24:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7f1b      	ldrb	r3, [r3, #28]
 8001b2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7f1b      	ldrb	r3, [r3, #28]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d106      	bne.n	8001b46 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	045b      	lsls	r3, r3, #17
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	4b4c      	ldr	r3, [pc, #304]	; (8001c9c <HAL_ADC_Init+0x2a8>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	69b9      	ldr	r1, [r7, #24]
 8001b72:	430b      	orrs	r3, r1
 8001b74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff14 	bl	80019a8 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff21 	bl	80019ce <LL_ADC_INJ_IsConversionOngoing>
 8001b8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d14a      	bne.n	8001c2a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d147      	bne.n	8001c2a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7d1b      	ldrb	r3, [r3, #20]
 8001b9e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <HAL_ADC_Init+0x2ac>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d11b      	bne.n	8001bfe <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_ADC_Init+0x2b0>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	0411      	lsls	r1, r2, #16
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	e007      	b.n	8001c0e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 fd41 	bl	80026ac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d10c      	bne.n	8001c4c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f023 010f 	bic.w	r1, r3, #15
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4a:	e007      	b.n	8001c5c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 020f 	bic.w	r2, r2, #15
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	f023 0303 	bic.w	r3, r3, #3
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c6c:	e007      	b.n	8001c7e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3724      	adds	r7, #36	; 0x24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	24000000 	.word	0x24000000
 8001c8c:	053e2d63 	.word	0x053e2d63
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40022100 	.word	0x40022100
 8001c98:	40022300 	.word	0x40022300
 8001c9c:	fff0c003 	.word	0xfff0c003
 8001ca0:	ffffbffc 	.word	0xffffbffc
 8001ca4:	fc00f81e 	.word	0xfc00f81e

08001ca8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb0:	4856      	ldr	r0, [pc, #344]	; (8001e0c <HAL_ADC_Start+0x164>)
 8001cb2:	f7ff fdd3 	bl	800185c <LL_ADC_GetMultimode>
 8001cb6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe73 	bl	80019a8 <LL_ADC_REG_IsConversionOngoing>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 809a 	bne.w	8001dfe <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_Start+0x30>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e095      	b.n	8001e04 <HAL_ADC_Start+0x15c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fc67 	bl	80025b4 <ADC_Enable>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 8081 	bne.w	8001df4 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_ADC_Start+0x168>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a43      	ldr	r2, [pc, #268]	; (8001e14 <HAL_ADC_Start+0x16c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d002      	beq.n	8001d12 <HAL_ADC_Start+0x6a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e000      	b.n	8001d14 <HAL_ADC_Start+0x6c>
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_ADC_Start+0x170>)
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d002      	beq.n	8001d22 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d105      	bne.n	8001d2e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f023 0206 	bic.w	r2, r3, #6
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	659a      	str	r2, [r3, #88]	; 0x58
 8001d48:	e002      	b.n	8001d50 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	221c      	movs	r2, #28
 8001d56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_ADC_Start+0x16c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d002      	beq.n	8001d70 <HAL_ADC_Start+0xc8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_Start+0xca>
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_ADC_Start+0x170>)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d008      	beq.n	8001d8c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d002      	beq.n	8001d8c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	d114      	bne.n	8001db6 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001da2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fde6 	bl	8001980 <LL_ADC_REG_StartConversion>
 8001db4:	e025      	b.n	8001e02 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <HAL_ADC_Start+0x16c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d002      	beq.n	8001dd2 <HAL_ADC_Start+0x12a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_Start+0x12c>
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_ADC_Start+0x170>)
 8001dd4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00f      	beq.n	8001e02 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54
 8001df2:	e006      	b.n	8001e02 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001dfc:	e001      	b.n	8001e02 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40022300 	.word	0x40022300
 8001e10:	fffff0fe 	.word	0xfffff0fe
 8001e14:	40022100 	.word	0x40022100
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e26:	4866      	ldr	r0, [pc, #408]	; (8001fc0 <HAL_ADC_PollForConversion+0x1a4>)
 8001e28:	f7ff fd18 	bl	800185c <LL_ADC_GetMultimode>
 8001e2c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d102      	bne.n	8001e3c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e36:	2308      	movs	r3, #8
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e02a      	b.n	8001e92 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d002      	beq.n	8001e4e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b09      	cmp	r3, #9
 8001e4c:	d111      	bne.n	8001e72 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d007      	beq.n	8001e6c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0220 	orr.w	r2, r3, #32
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0a4      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001e70:	e00f      	b.n	8001e92 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e72:	4853      	ldr	r0, [pc, #332]	; (8001fc0 <HAL_ADC_PollForConversion+0x1a4>)
 8001e74:	f7ff fd00 	bl	8001878 <LL_ADC_GetMultiDMATransfer>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e093      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e8e:	2304      	movs	r3, #4
 8001e90:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e92:	f7ff fb9d 	bl	80015d0 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e98:	e021      	b.n	8001ede <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d01d      	beq.n	8001ede <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ea2:	f7ff fb95 	bl	80015d0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d302      	bcc.n	8001eb8 <HAL_ADC_PollForConversion+0x9c>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d112      	bne.n	8001ede <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10b      	bne.n	8001ede <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	f043 0204 	orr.w	r2, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e06b      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0d6      	beq.n	8001e9a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fc1f 	bl	8001740 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01c      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7d5b      	ldrb	r3, [r3, #21]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d118      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d111      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <HAL_ADC_PollForConversion+0x1a8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d002      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x136>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	e000      	b.n	8001f54 <HAL_ADC_PollForConversion+0x138>
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_ADC_PollForConversion+0x1ac>)
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d008      	beq.n	8001f6e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d002      	beq.n	8001f6e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b09      	cmp	r3, #9
 8001f6c:	d104      	bne.n	8001f78 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	e00c      	b.n	8001f92 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a11      	ldr	r2, [pc, #68]	; (8001fc4 <HAL_ADC_PollForConversion+0x1a8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d002      	beq.n	8001f88 <HAL_ADC_PollForConversion+0x16c>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e000      	b.n	8001f8a <HAL_ADC_PollForConversion+0x16e>
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_ADC_PollForConversion+0x1ac>)
 8001f8a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d104      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e008      	b.n	8001fb4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40022300 	.word	0x40022300
 8001fc4:	40022100 	.word	0x40022100
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b0a1      	sub	sp, #132	; 0x84
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a9a      	ldr	r2, [pc, #616]	; (800226c <HAL_ADC_ConfigChannel+0x284>)
 8002002:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_ADC_ConfigChannel+0x2a>
 800200e:	2302      	movs	r3, #2
 8002010:	e2bc      	b.n	800258c <HAL_ADC_ConfigChannel+0x5a4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fcc2 	bl	80019a8 <LL_ADC_REG_IsConversionOngoing>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 82a1 	bne.w	800256e <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002034:	2b00      	cmp	r3, #0
 8002036:	d108      	bne.n	800204a <HAL_ADC_ConfigChannel+0x62>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	0e9b      	lsrs	r3, r3, #26
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2201      	movs	r2, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	e016      	b.n	8002078 <HAL_ADC_ConfigChannel+0x90>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800205a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800205c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e003      	b.n	800206e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002068:	fab3 f383 	clz	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	2201      	movs	r2, #1
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	69d1      	ldr	r1, [r2, #28]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6812      	ldr	r2, [r2, #0]
 8002082:	430b      	orrs	r3, r1
 8002084:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6859      	ldr	r1, [r3, #4]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f7ff fb67 	bl	8001766 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fc83 	bl	80019a8 <LL_ADC_REG_IsConversionOngoing>
 80020a2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fc90 	bl	80019ce <LL_ADC_INJ_IsConversionOngoing>
 80020ae:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f040 80a0 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f040 809c 	bne.w	80021f8 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6819      	ldr	r1, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	461a      	mov	r2, r3
 80020ce:	f7ff fb76 	bl	80017be <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x110>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	e00a      	b.n	800210e <HAL_ADC_ConfigChannel+0x126>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d027      	beq.n	8002168 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002126:	f7ff fab7 	bl	8001698 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7e5b      	ldrb	r3, [r3, #25]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d102      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x158>
 800213a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800213e:	e000      	b.n	8002142 <HAL_ADC_ConfigChannel+0x15a>
 8002140:	2300      	movs	r3, #0
 8002142:	461a      	mov	r2, r3
 8002144:	f7ff fae1 	bl	800170a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	6919      	ldr	r1, [r3, #16]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	7e1b      	ldrb	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_ADC_ConfigChannel+0x176>
 8002158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800215c:	e000      	b.n	8002160 <HAL_ADC_ConfigChannel+0x178>
 800215e:	2300      	movs	r3, #0
 8002160:	461a      	mov	r2, r3
 8002162:	f7ff fab9 	bl	80016d8 <LL_ADC_SetDataRightShift>
 8002166:	e047      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	069b      	lsls	r3, r3, #26
 8002178:	429a      	cmp	r2, r3
 800217a:	d107      	bne.n	800218c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800218a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	069b      	lsls	r3, r3, #26
 800219c:	429a      	cmp	r2, r3
 800219e:	d107      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021ae:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021d2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	069b      	lsls	r3, r3, #26
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fbab 	bl	8001958 <LL_ADC_IsEnabled>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	f040 81bb 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	461a      	mov	r2, r3
 8002218:	f7ff fafc 	bl	8001814 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <HAL_ADC_ConfigChannel+0x284>)
 8002222:	4293      	cmp	r3, r2
 8002224:	f040 8130 	bne.w	8002488 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x268>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2b09      	cmp	r3, #9
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e01b      	b.n	8002288 <HAL_ADC_ConfigChannel+0x2a0>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800225e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002260:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e005      	b.n	8002278 <HAL_ADC_ConfigChannel+0x290>
 800226c:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8002270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2b09      	cmp	r3, #9
 8002280:	bf94      	ite	ls
 8002282:	2301      	movls	r3, #1
 8002284:	2300      	movhi	r3, #0
 8002286:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002288:	2b00      	cmp	r3, #0
 800228a:	d079      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002294:	2b00      	cmp	r3, #0
 8002296:	d107      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x2c0>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	069b      	lsls	r3, r3, #26
 80022a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a6:	e015      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x2ec>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80022c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	069b      	lsls	r3, r3, #26
 80022d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x30c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	e017      	b.n	8002324 <HAL_ADC_ConfigChannel+0x33c>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022fc:	fa93 f3a3 	rbit	r3, r3
 8002300:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002304:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 800230c:	2320      	movs	r3, #32
 800230e:	e003      	b.n	8002318 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002312:	fab3 f383 	clz	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2101      	movs	r1, #1
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	ea42 0103 	orr.w	r1, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x362>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	f003 021f 	and.w	r2, r3, #31
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	051b      	lsls	r3, r3, #20
 8002348:	e018      	b.n	800237c <HAL_ADC_ConfigChannel+0x394>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800235c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800237c:	430b      	orrs	r3, r1
 800237e:	e07e      	b.n	800247e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_ADC_ConfigChannel+0x3b4>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0e9b      	lsrs	r3, r3, #26
 8002392:	3301      	adds	r3, #1
 8002394:	069b      	lsls	r3, r3, #26
 8002396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800239a:	e015      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x3e0>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023b4:	2320      	movs	r3, #32
 80023b6:	e003      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	069b      	lsls	r3, r3, #26
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x400>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	e017      	b.n	8002418 <HAL_ADC_ConfigChannel+0x430>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa93 f3a3 	rbit	r3, r3
 80023f4:	61bb      	str	r3, [r7, #24]
  return result;
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002400:	2320      	movs	r3, #32
 8002402:	e003      	b.n	800240c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	2101      	movs	r1, #1
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	ea42 0103 	orr.w	r1, r2, r3
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x45c>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	3301      	adds	r3, #1
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	3b1e      	subs	r3, #30
 800243c:	051b      	lsls	r3, r3, #20
 800243e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002442:	e01b      	b.n	800247c <HAL_ADC_ConfigChannel+0x494>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	60fb      	str	r3, [r7, #12]
  return result;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f003 021f 	and.w	r2, r3, #31
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3b1e      	subs	r3, #30
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247c:	430b      	orrs	r3, r1
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	4619      	mov	r1, r3
 8002484:	f7ff f99b 	bl	80017be <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	da77      	bge.n	8002580 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002490:	4840      	ldr	r0, [pc, #256]	; (8002594 <HAL_ADC_ConfigChannel+0x5ac>)
 8002492:	f7ff f8f3 	bl	800167c <LL_ADC_GetCommonPathInternalCh>
 8002496:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002498:	483f      	ldr	r0, [pc, #252]	; (8002598 <HAL_ADC_ConfigChannel+0x5b0>)
 800249a:	f7ff fa5d 	bl	8001958 <LL_ADC_IsEnabled>
 800249e:	4604      	mov	r4, r0
 80024a0:	483e      	ldr	r0, [pc, #248]	; (800259c <HAL_ADC_ConfigChannel+0x5b4>)
 80024a2:	f7ff fa59 	bl	8001958 <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4323      	orrs	r3, r4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d155      	bne.n	800255a <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <HAL_ADC_ConfigChannel+0x5b8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d122      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x516>
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d11d      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a35      	ldr	r2, [pc, #212]	; (800259c <HAL_ADC_ConfigChannel+0x5b4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d159      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024d2:	4619      	mov	r1, r3
 80024d4:	482f      	ldr	r0, [pc, #188]	; (8002594 <HAL_ADC_ConfigChannel+0x5ac>)
 80024d6:	f7ff f8be 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_ADC_ConfigChannel+0x5bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	099b      	lsrs	r3, r3, #6
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <HAL_ADC_ConfigChannel+0x5c0>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	099b      	lsrs	r3, r3, #6
 80024e8:	3301      	adds	r3, #1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024ee:	e002      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1f9      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024fc:	e040      	b.n	8002580 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_ADC_ConfigChannel+0x5c4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d111      	bne.n	800252c <HAL_ADC_ConfigChannel+0x544>
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_ADC_ConfigChannel+0x5b4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d131      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800251c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002522:	4619      	mov	r1, r3
 8002524:	481b      	ldr	r0, [pc, #108]	; (8002594 <HAL_ADC_ConfigChannel+0x5ac>)
 8002526:	f7ff f896 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800252a:	e029      	b.n	8002580 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d124      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x598>
 8002536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d11f      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a15      	ldr	r2, [pc, #84]	; (800259c <HAL_ADC_ConfigChannel+0x5b4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11a      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800254a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002550:	4619      	mov	r1, r3
 8002552:	4810      	ldr	r0, [pc, #64]	; (8002594 <HAL_ADC_ConfigChannel+0x5ac>)
 8002554:	f7ff f87f 	bl	8001656 <LL_ADC_SetCommonPathInternalCh>
 8002558:	e012      	b.n	8002580 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800256c:	e008      	b.n	8002580 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	f043 0220 	orr.w	r2, r3, #32
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002588:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800258c:	4618      	mov	r0, r3
 800258e:	3784      	adds	r7, #132	; 0x84
 8002590:	46bd      	mov	sp, r7
 8002592:	bd90      	pop	{r4, r7, pc}
 8002594:	40022300 	.word	0x40022300
 8002598:	40022000 	.word	0x40022000
 800259c:	40022100 	.word	0x40022100
 80025a0:	cb840000 	.word	0xcb840000
 80025a4:	24000000 	.word	0x24000000
 80025a8:	053e2d63 	.word	0x053e2d63
 80025ac:	bac04000 	.word	0xbac04000
 80025b0:	cfb80000 	.word	0xcfb80000

080025b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff f9c9 	bl	8001958 <LL_ADC_IsEnabled>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d161      	bne.n	8002690 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b32      	ldr	r3, [pc, #200]	; (800269c <ADC_Enable+0xe8>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0210 	orr.w	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f043 0201 	orr.w	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e04d      	b.n	8002692 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f998 	bl	8001930 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002600:	f7fe ffe6 	bl	80015d0 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002606:	4826      	ldr	r0, [pc, #152]	; (80026a0 <ADC_Enable+0xec>)
 8002608:	f7ff f928 	bl	800185c <LL_ADC_GetMultimode>
 800260c:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a24      	ldr	r2, [pc, #144]	; (80026a4 <ADC_Enable+0xf0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d002      	beq.n	800261e <ADC_Enable+0x6a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e000      	b.n	8002620 <ADC_Enable+0x6c>
 800261e:	4b22      	ldr	r3, [pc, #136]	; (80026a8 <ADC_Enable+0xf4>)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4293      	cmp	r3, r2
 8002626:	d02c      	beq.n	8002682 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d130      	bne.n	8002690 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262e:	e028      	b.n	8002682 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f98f 	bl	8001958 <LL_ADC_IsEnabled>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff f973 	bl	8001930 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800264a:	f7fe ffc1 	bl	80015d0 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d914      	bls.n	8002682 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d00d      	beq.n	8002682 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e007      	b.n	8002692 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b01      	cmp	r3, #1
 800268e:	d1cf      	bne.n	8002630 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	8000003f 	.word	0x8000003f
 80026a0:	40022300 	.word	0x40022300
 80026a4:	40022100 	.word	0x40022100
 80026a8:	40022000 	.word	0x40022000

080026ac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026b4:	4b5f      	ldr	r3, [pc, #380]	; (8002834 <ADC_ConfigureBoostMode+0x188>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01c      	beq.n	80026fa <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026c0:	f002 f946 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 80026c4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026ce:	d010      	beq.n	80026f2 <ADC_ConfigureBoostMode+0x46>
 80026d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026d4:	d871      	bhi.n	80027ba <ADC_ConfigureBoostMode+0x10e>
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d002      	beq.n	80026e2 <ADC_ConfigureBoostMode+0x36>
 80026dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e0:	d16b      	bne.n	80027ba <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ee:	60fb      	str	r3, [r7, #12]
        break;
 80026f0:	e066      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	60fb      	str	r3, [r7, #12]
        break;
 80026f8:	e062      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80026fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80026fe:	f003 f88f 	bl	8005820 <HAL_RCCEx_GetPeriphCLKFreq>
 8002702:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800270c:	d051      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x106>
 800270e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002712:	d854      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002714:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002718:	d047      	beq.n	80027aa <ADC_ConfigureBoostMode+0xfe>
 800271a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800271e:	d84e      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002720:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002724:	d03d      	beq.n	80027a2 <ADC_ConfigureBoostMode+0xf6>
 8002726:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800272a:	d848      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 800272c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002730:	d033      	beq.n	800279a <ADC_ConfigureBoostMode+0xee>
 8002732:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002736:	d842      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002738:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800273c:	d029      	beq.n	8002792 <ADC_ConfigureBoostMode+0xe6>
 800273e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002742:	d83c      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002744:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002748:	d01a      	beq.n	8002780 <ADC_ConfigureBoostMode+0xd4>
 800274a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800274e:	d836      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002750:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002754:	d014      	beq.n	8002780 <ADC_ConfigureBoostMode+0xd4>
 8002756:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800275a:	d830      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 800275c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002760:	d00e      	beq.n	8002780 <ADC_ConfigureBoostMode+0xd4>
 8002762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002766:	d82a      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002768:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800276c:	d008      	beq.n	8002780 <ADC_ConfigureBoostMode+0xd4>
 800276e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002772:	d824      	bhi.n	80027be <ADC_ConfigureBoostMode+0x112>
 8002774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002778:	d002      	beq.n	8002780 <ADC_ConfigureBoostMode+0xd4>
 800277a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800277e:	d11e      	bne.n	80027be <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	60fb      	str	r3, [r7, #12]
        break;
 8002790:	e016      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	091b      	lsrs	r3, r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
        break;
 8002798:	e012      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	095b      	lsrs	r3, r3, #5
 800279e:	60fb      	str	r3, [r7, #12]
        break;
 80027a0:	e00e      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	60fb      	str	r3, [r7, #12]
        break;
 80027a8:	e00a      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	09db      	lsrs	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]
        break;
 80027b0:	e006      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	60fb      	str	r3, [r7, #12]
        break;
 80027b8:	e002      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
        break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 80027be:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <ADC_ConfigureBoostMode+0x18c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d808      	bhi.n	80027e0 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027dc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027de:	e025      	b.n	800282c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <ADC_ConfigureBoostMode+0x190>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d80a      	bhi.n	80027fe <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	e016      	b.n	800282c <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a0f      	ldr	r2, [pc, #60]	; (8002840 <ADC_ConfigureBoostMode+0x194>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d80a      	bhi.n	800281c <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002818:	609a      	str	r2, [r3, #8]
}
 800281a:	e007      	b.n	800282c <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800282a:	609a      	str	r2, [r3, #8]
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40022300 	.word	0x40022300
 8002838:	005f5e10 	.word	0x005f5e10
 800283c:	00bebc20 	.word	0x00bebc20
 8002840:	017d7840 	.word	0x017d7840

08002844 <LL_ADC_IsEnabled>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <LL_ADC_IsEnabled+0x18>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <LL_ADC_IsEnabled+0x1a>
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_IsConversionOngoing>:
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b04      	cmp	r3, #4
 800287c:	d101      	bne.n	8002882 <LL_ADC_REG_IsConversionOngoing+0x18>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b09f      	sub	sp, #124	; 0x7c
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e080      	b.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d102      	bne.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	e001      	b.n	80028d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e05f      	b.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ffb9 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 80028f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ffb3 	bl	800286a <LL_ADC_REG_IsConversionOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d141      	bne.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800290a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800290c:	2b00      	cmp	r3, #0
 800290e:	d13e      	bne.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002910:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002912:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800291c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800292c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800292e:	4822      	ldr	r0, [pc, #136]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002930:	f7ff ff88 	bl	8002844 <LL_ADC_IsEnabled>
 8002934:	4604      	mov	r4, r0
 8002936:	4821      	ldr	r0, [pc, #132]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002938:	f7ff ff84 	bl	8002844 <LL_ADC_IsEnabled>
 800293c:	4603      	mov	r3, r0
 800293e:	4323      	orrs	r3, r4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d12e      	bne.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800294a:	4013      	ands	r3, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	6811      	ldr	r1, [r2, #0]
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	6892      	ldr	r2, [r2, #8]
 8002954:	430a      	orrs	r2, r1
 8002956:	431a      	orrs	r2, r3
 8002958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800295c:	e021      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002968:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296a:	4813      	ldr	r0, [pc, #76]	; (80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800296c:	f7ff ff6a 	bl	8002844 <LL_ADC_IsEnabled>
 8002970:	4604      	mov	r4, r0
 8002972:	4812      	ldr	r0, [pc, #72]	; (80029bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002974:	f7ff ff66 	bl	8002844 <LL_ADC_IsEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	4323      	orrs	r3, r4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d110      	bne.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002986:	4013      	ands	r3, r2
 8002988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800298a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800298c:	e009      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f043 0220 	orr.w	r2, r3, #32
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029a0:	e000      	b.n	80029a4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	377c      	adds	r7, #124	; 0x7c
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}
 80029b8:	40022000 	.word	0x40022000
 80029bc:	40022100 	.word	0x40022100
 80029c0:	40022300 	.word	0x40022300
 80029c4:	fffff0e0 	.word	0xfffff0e0

080029c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <__NVIC_SetPriorityGrouping+0x40>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029e4:	4013      	ands	r3, r2
 80029e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <__NVIC_SetPriorityGrouping+0x40>)
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	60d3      	str	r3, [r2, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000ed00 	.word	0xe000ed00
 8002a0c:	05fa0000 	.word	0x05fa0000

08002a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <__NVIC_GetPriorityGrouping+0x18>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	0a1b      	lsrs	r3, r3, #8
 8002a1a:	f003 0307 	and.w	r3, r3, #7
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	db0b      	blt.n	8002a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	f003 021f 	and.w	r2, r3, #31
 8002a44:	4907      	ldr	r1, [pc, #28]	; (8002a64 <__NVIC_EnableIRQ+0x38>)
 8002a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000e100 	.word	0xe000e100

08002a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db0a      	blt.n	8002a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	490c      	ldr	r1, [pc, #48]	; (8002ab4 <__NVIC_SetPriority+0x4c>)
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	0112      	lsls	r2, r2, #4
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a90:	e00a      	b.n	8002aa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <__NVIC_SetPriority+0x50>)
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	3b04      	subs	r3, #4
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	761a      	strb	r2, [r3, #24]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f1c3 0307 	rsb	r3, r3, #7
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	bf28      	it	cs
 8002ada:	2304      	movcs	r3, #4
 8002adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d902      	bls.n	8002aec <NVIC_EncodePriority+0x30>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3b03      	subs	r3, #3
 8002aea:	e000      	b.n	8002aee <NVIC_EncodePriority+0x32>
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	f04f 32ff 	mov.w	r2, #4294967295
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	401a      	ands	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b04:	f04f 31ff 	mov.w	r1, #4294967295
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43d9      	mvns	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	4313      	orrs	r3, r2
         );
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3724      	adds	r7, #36	; 0x24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b34:	d301      	bcc.n	8002b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00f      	b.n	8002b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <SysTick_Config+0x40>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b42:	210f      	movs	r1, #15
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f7ff ff8e 	bl	8002a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <SysTick_Config+0x40>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b52:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <SysTick_Config+0x40>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff29 	bl	80029c8 <__NVIC_SetPriorityGrouping>
}
 8002b76:	bf00      	nop
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	4603      	mov	r3, r0
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b8c:	f7ff ff40 	bl	8002a10 <__NVIC_GetPriorityGrouping>
 8002b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	6978      	ldr	r0, [r7, #20]
 8002b98:	f7ff ff90 	bl	8002abc <NVIC_EncodePriority>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff5f 	bl	8002a68 <__NVIC_SetPriority>
}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff33 	bl	8002a2c <__NVIC_EnableIRQ>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ffa4 	bl	8002b24 <SysTick_Config>
 8002bdc:	4603      	mov	r3, r0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b098      	sub	sp, #96	; 0x60
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002bf0:	4a84      	ldr	r2, [pc, #528]	; (8002e04 <HAL_FDCAN_Init+0x21c>)
 8002bf2:	f107 030c 	add.w	r3, r7, #12
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	224c      	movs	r2, #76	; 0x4c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f006 fa30 	bl	8009060 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e1ca      	b.n	8002fa0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a7e      	ldr	r2, [pc, #504]	; (8002e08 <HAL_FDCAN_Init+0x220>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d106      	bne.n	8002c22 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd fec6 	bl	80009c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0210 	bic.w	r2, r2, #16
 8002c4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c4c:	f7fe fcc0 	bl	80015d0 <HAL_GetTick>
 8002c50:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c52:	e014      	b.n	8002c7e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002c54:	f7fe fcbc 	bl	80015d0 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b0a      	cmp	r3, #10
 8002c60:	d90d      	bls.n	8002c7e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2203      	movs	r2, #3
 8002c76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e190      	b.n	8002fa0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d0e3      	beq.n	8002c54 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c9c:	f7fe fc98 	bl	80015d0 <HAL_GetTick>
 8002ca0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ca2:	e014      	b.n	8002cce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ca4:	f7fe fc94 	bl	80015d0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b0a      	cmp	r3, #10
 8002cb0:	d90d      	bls.n	8002cce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e168      	b.n	8002fa0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0e3      	beq.n	8002ca4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0202 	orr.w	r2, r2, #2
 8002cea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7c1b      	ldrb	r3, [r3, #16]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d108      	bne.n	8002d06 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	e007      	b.n	8002d16 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d14:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	7c5b      	ldrb	r3, [r3, #17]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d108      	bne.n	8002d30 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d2c:	619a      	str	r2, [r3, #24]
 8002d2e:	e007      	b.n	8002d40 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7c9b      	ldrb	r3, [r3, #18]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d108      	bne.n	8002d5a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d56:	619a      	str	r2, [r3, #24]
 8002d58:	e007      	b.n	8002d6a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d68:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002d8e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0210 	bic.w	r2, r2, #16
 8002d9e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0204 	orr.w	r2, r2, #4
 8002db6:	619a      	str	r2, [r3, #24]
 8002db8:	e030      	b.n	8002e1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d02c      	beq.n	8002e1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d020      	beq.n	8002e0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dd8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0210 	orr.w	r2, r2, #16
 8002de8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d114      	bne.n	8002e1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0220 	orr.w	r2, r2, #32
 8002e00:	619a      	str	r2, [r3, #24]
 8002e02:	e00b      	b.n	8002e1c <HAL_FDCAN_Init+0x234>
 8002e04:	0800a2e8 	.word	0x0800a2e8
 8002e08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e50:	d115      	bne.n	8002e7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	3b01      	subs	r3, #1
 8002e74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8002e7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002e7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea4:	4413      	add	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002eb2:	f023 0107 	bic.w	r1, r3, #7
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d012      	beq.n	8002efe <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002ee0:	f023 0107 	bic.w	r1, r3, #7
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002eee:	4413      	add	r3, r2
 8002ef0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f22:	011a      	lsls	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d013      	beq.n	8002f5e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f3e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002f52:	021a      	lsls	r2, r3, #8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_FDCAN_Init+0x3c0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d107      	bne.n	8002f78 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f022 0203 	bic.w	r2, r2, #3
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f981 	bl	8003298 <FDCAN_CalcultateRamBlockAddresses>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002f9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3760      	adds	r7, #96	; 0x60
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	4000a000 	.word	0x4000a000

08002fac <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002fbc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d002      	beq.n	8002fca <HAL_FDCAN_ConfigFilter+0x1e>
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d157      	bne.n	800307a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d12b      	bne.n	800302a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2b07      	cmp	r3, #7
 8002fd8:	d10d      	bne.n	8002ff6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002fe6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002fec:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8002fee:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	e00e      	b.n	8003014 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003002:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800300a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e025      	b.n	8003076 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	075a      	lsls	r2, r3, #29
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b07      	cmp	r3, #7
 800303e:	d103      	bne.n	8003048 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	e006      	b.n	8003056 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	079a      	lsls	r2, r3, #30
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3304      	adds	r3, #4
 800306e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e008      	b.n	800308c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003080:	f043 0202 	orr.w	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d111      	bne.n	80030d0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e008      	b.n	80030e2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030d6:	f043 0204 	orr.w	r2, r3, #4
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d141      	bne.n	800318a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800310e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e038      	b.n	800319c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003140:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e026      	b.n	800319c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003156:	0c1b      	lsrs	r3, r3, #16
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa1d 	bl	80035a4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2101      	movs	r1, #1
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800317a:	2201      	movs	r2, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e008      	b.n	800319c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003190:	f043 0208 	orr.w	r2, r3, #8
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031b6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <HAL_FDCAN_ActivateNotification+0x20>
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d155      	bne.n	8003270 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80031e2:	e014      	b.n	800320e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	4013      	ands	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d108      	bne.n	8003206 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0202 	orr.w	r2, r2, #2
 8003202:	65da      	str	r2, [r3, #92]	; 0x5c
 8003204:	e003      	b.n	800320e <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2203      	movs	r2, #3
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	430a      	orrs	r2, r1
 8003228:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	430a      	orrs	r2, r1
 8003246:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_FDCAN_ActivateNotification+0xec>)
 8003254:	4013      	ands	r3, r2
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	430b      	orrs	r3, r1
 800325c:	6553      	str	r3, [r2, #84]	; 0x54
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	0f9b      	lsrs	r3, r3, #30
 8003266:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e008      	b.n	8003282 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003276:	f043 0202 	orr.w	r2, r3, #2
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	3fcfffff 	.word	0x3fcfffff
 8003294:	4000a800 	.word	0x4000a800

08003298 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80032ae:	4ba7      	ldr	r3, [pc, #668]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	0091      	lsls	r1, r2, #2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6812      	ldr	r2, [r2, #0]
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	041a      	lsls	r2, r3, #16
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	4413      	add	r3, r2
 80032e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032ee:	4b97      	ldr	r3, [pc, #604]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	0091      	lsls	r1, r2, #2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003308:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003330:	4b86      	ldr	r3, [pc, #536]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003332:	4013      	ands	r3, r2
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	0091      	lsls	r1, r2, #2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	430b      	orrs	r3, r1
 800333e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800334a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003366:	fb02 f303 	mul.w	r3, r2, r3
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	4413      	add	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003378:	4b74      	ldr	r3, [pc, #464]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800337a:	4013      	ands	r3, r2
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	0091      	lsls	r1, r2, #2
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6812      	ldr	r2, [r2, #0]
 8003384:	430b      	orrs	r3, r1
 8003386:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003392:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800339a:	041a      	lsls	r2, r3, #16
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80033c0:	4b62      	ldr	r3, [pc, #392]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	0091      	lsls	r1, r2, #2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033da:	fb02 f303 	mul.w	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	0091      	lsls	r1, r2, #2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003406:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	041a      	lsls	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4413      	add	r3, r2
 8003424:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003430:	4013      	ands	r3, r2
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	0091      	lsls	r1, r2, #2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	430b      	orrs	r3, r1
 800343c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003448:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003464:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	061a      	lsls	r2, r3, #24
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800347e:	4413      	add	r3, r2
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	441a      	add	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	441a      	add	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800352e:	fb01 f303 	mul.w	r3, r1, r3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	4a04      	ldr	r2, [pc, #16]	; (8003554 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d915      	bls.n	8003574 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003548:	e006      	b.n	8003558 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800354a:	bf00      	nop
 800354c:	ffff0003 	.word	0xffff0003
 8003550:	10002b00 	.word	0x10002b00
 8003554:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e010      	b.n	8003596 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e005      	b.n	8003588 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3304      	adds	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	429a      	cmp	r2, r3
 8003592:	d3f3      	bcc.n	800357c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop

080035a4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10a      	bne.n	80035d0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80035c2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e00a      	b.n	80035e6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80035d8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80035de:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80035e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035e4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80035f0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80035f6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80035fc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003610:	6839      	ldr	r1, [r7, #0]
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	3304      	adds	r3, #4
 8003626:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	3304      	adds	r3, #4
 8003632:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e020      	b.n	800367c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3303      	adds	r3, #3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	3302      	adds	r3, #2
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	440b      	add	r3, r1
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003652:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3301      	adds	r3, #1
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	440b      	add	r3, r1
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003660:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	440a      	add	r2, r1
 8003668:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800366a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3304      	adds	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3304      	adds	r3, #4
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	4a06      	ldr	r2, [pc, #24]	; (800369c <FDCAN_CopyMessageToRAM+0xf8>)
 8003684:	5cd3      	ldrb	r3, [r2, r3]
 8003686:	461a      	mov	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	4293      	cmp	r3, r2
 800368c:	d3d5      	bcc.n	800363a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	3724      	adds	r7, #36	; 0x24
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	0800a344 	.word	0x0800a344

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036ae:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_GPIO_Init+0x234>)
 80036b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036b2:	e194      	b.n	80039de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8186 	beq.w	80039d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d005      	beq.n	80036e4 <HAL_GPIO_Init+0x44>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d130      	bne.n	8003746 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4013      	ands	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800371a:	2201      	movs	r2, #1
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f003 0201 	and.w	r2, r3, #1
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b03      	cmp	r3, #3
 8003750:	d017      	beq.n	8003782 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d123      	bne.n	80037d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	08da      	lsrs	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3208      	adds	r2, #8
 8003796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	220f      	movs	r2, #15
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3208      	adds	r2, #8
 80037d0:	69b9      	ldr	r1, [r7, #24]
 80037d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	2203      	movs	r2, #3
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0203 	and.w	r2, r3, #3
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80e0 	beq.w	80039d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003818:	4b2f      	ldr	r3, [pc, #188]	; (80038d8 <HAL_GPIO_Init+0x238>)
 800381a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800381e:	4a2e      	ldr	r2, [pc, #184]	; (80038d8 <HAL_GPIO_Init+0x238>)
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003828:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <HAL_GPIO_Init+0x238>)
 800382a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003836:	4a29      	ldr	r2, [pc, #164]	; (80038dc <HAL_GPIO_Init+0x23c>)
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	089b      	lsrs	r3, r3, #2
 800383c:	3302      	adds	r3, #2
 800383e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	220f      	movs	r2, #15
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <HAL_GPIO_Init+0x240>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d052      	beq.n	8003908 <HAL_GPIO_Init+0x268>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_GPIO_Init+0x244>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d031      	beq.n	80038ce <HAL_GPIO_Init+0x22e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_GPIO_Init+0x248>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02b      	beq.n	80038ca <HAL_GPIO_Init+0x22a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <HAL_GPIO_Init+0x24c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d025      	beq.n	80038c6 <HAL_GPIO_Init+0x226>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_GPIO_Init+0x250>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01f      	beq.n	80038c2 <HAL_GPIO_Init+0x222>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_GPIO_Init+0x254>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d019      	beq.n	80038be <HAL_GPIO_Init+0x21e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <HAL_GPIO_Init+0x258>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0x21a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_GPIO_Init+0x25c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00d      	beq.n	80038b6 <HAL_GPIO_Init+0x216>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_GPIO_Init+0x260>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <HAL_GPIO_Init+0x212>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a17      	ldr	r2, [pc, #92]	; (8003904 <HAL_GPIO_Init+0x264>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_GPIO_Init+0x20e>
 80038aa:	2309      	movs	r3, #9
 80038ac:	e02d      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ae:	230a      	movs	r3, #10
 80038b0:	e02b      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038b2:	2308      	movs	r3, #8
 80038b4:	e029      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e027      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ba:	2306      	movs	r3, #6
 80038bc:	e025      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038be:	2305      	movs	r3, #5
 80038c0:	e023      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038c2:	2304      	movs	r3, #4
 80038c4:	e021      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038c6:	2303      	movs	r3, #3
 80038c8:	e01f      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e01d      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e01b      	b.n	800390a <HAL_GPIO_Init+0x26a>
 80038d2:	bf00      	nop
 80038d4:	58000080 	.word	0x58000080
 80038d8:	58024400 	.word	0x58024400
 80038dc:	58000400 	.word	0x58000400
 80038e0:	58020000 	.word	0x58020000
 80038e4:	58020400 	.word	0x58020400
 80038e8:	58020800 	.word	0x58020800
 80038ec:	58020c00 	.word	0x58020c00
 80038f0:	58021000 	.word	0x58021000
 80038f4:	58021400 	.word	0x58021400
 80038f8:	58021800 	.word	0x58021800
 80038fc:	58021c00 	.word	0x58021c00
 8003900:	58022000 	.word	0x58022000
 8003904:	58022400 	.word	0x58022400
 8003908:	2300      	movs	r3, #0
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	f002 0203 	and.w	r2, r2, #3
 8003910:	0092      	lsls	r2, r2, #2
 8003912:	4093      	lsls	r3, r2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800391a:	4938      	ldr	r1, [pc, #224]	; (80039fc <HAL_GPIO_Init+0x35c>)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800394e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800397c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3301      	adds	r3, #1
 80039dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f47f ae63 	bne.w	80036b4 <HAL_GPIO_Init+0x14>
  }
}
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
 80039f2:	3724      	adds	r7, #36	; 0x24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	58000400 	.word	0x58000400

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a1c:	e003      	b.n	8003a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a1e:	887b      	ldrh	r3, [r7, #2]
 8003a20:	041a      	lsls	r2, r3, #16
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003a3c:	4b29      	ldr	r3, [pc, #164]	; (8003ae4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d00a      	beq.n	8003a5e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a48:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e040      	b.n	8003adc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e03e      	b.n	8003adc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003a66:	491f      	ldr	r1, [pc, #124]	; (8003ae4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a6e:	f7fd fdaf 	bl	80015d0 <HAL_GetTick>
 8003a72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a74:	e009      	b.n	8003a8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a76:	f7fd fdab 	bl	80015d0 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a84:	d901      	bls.n	8003a8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e028      	b.n	8003adc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a8a:	4b16      	ldr	r3, [pc, #88]	; (8003ae4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a96:	d1ee      	bne.n	8003a76 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b1e      	cmp	r3, #30
 8003a9c:	d008      	beq.n	8003ab0 <HAL_PWREx_ConfigSupply+0x7c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa2:	d005      	beq.n	8003ab0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b1d      	cmp	r3, #29
 8003aa8:	d002      	beq.n	8003ab0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b2d      	cmp	r3, #45	; 0x2d
 8003aae:	d114      	bne.n	8003ada <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003ab0:	f7fd fd8e 	bl	80015d0 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003ab6:	e009      	b.n	8003acc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003ab8:	f7fd fd8a 	bl	80015d0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac6:	d901      	bls.n	8003acc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e007      	b.n	8003adc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad8:	d1ee      	bne.n	8003ab8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	58024800 	.word	0x58024800

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e3f3      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80b3 	beq.w	8003c6e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	4b9e      	ldr	r3, [pc, #632]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b12:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCC_OscConfig+0x46>
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	2b18      	cmp	r3, #24
 8003b22:	d112      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62>
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d10d      	bne.n	8003b4a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2e:	4b95      	ldr	r3, [pc, #596]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8098 	beq.w	8003c6c <HAL_RCC_OscConfig+0x184>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f040 8093 	bne.w	8003c6c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e3cb      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b52:	d106      	bne.n	8003b62 <HAL_RCC_OscConfig+0x7a>
 8003b54:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e058      	b.n	8003c14 <HAL_RCC_OscConfig+0x12c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d112      	bne.n	8003b90 <HAL_RCC_OscConfig+0xa8>
 8003b6a:	4b86      	ldr	r3, [pc, #536]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a85      	ldr	r2, [pc, #532]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b74:	6013      	str	r3, [r2, #0]
 8003b76:	4b83      	ldr	r3, [pc, #524]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a82      	ldr	r2, [pc, #520]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	4b80      	ldr	r3, [pc, #512]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7f      	ldr	r2, [pc, #508]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e041      	b.n	8003c14 <HAL_RCC_OscConfig+0x12c>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b98:	d112      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xd8>
 8003b9a:	4b7a      	ldr	r3, [pc, #488]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a79      	ldr	r2, [pc, #484]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b77      	ldr	r3, [pc, #476]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a76      	ldr	r2, [pc, #472]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b74      	ldr	r3, [pc, #464]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a73      	ldr	r2, [pc, #460]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e029      	b.n	8003c14 <HAL_RCC_OscConfig+0x12c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x108>
 8003bca:	4b6e      	ldr	r3, [pc, #440]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a6d      	ldr	r2, [pc, #436]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a6a      	ldr	r2, [pc, #424]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a67      	ldr	r2, [pc, #412]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e011      	b.n	8003c14 <HAL_RCC_OscConfig+0x12c>
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a63      	ldr	r2, [pc, #396]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a60      	ldr	r2, [pc, #384]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b5e      	ldr	r3, [pc, #376]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5d      	ldr	r2, [pc, #372]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c0e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd fcd8 	bl	80015d0 <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7fd fcd4 	bl	80015d0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e355      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c36:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x13c>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fd fcc4 	bl	80015d0 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fd fcc0 	bl	80015d0 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e341      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c5e:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1f0      	bne.n	8003c4c <HAL_RCC_OscConfig+0x164>
 8003c6a:	e000      	b.n	8003c6e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 808c 	beq.w	8003d94 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7c:	4b41      	ldr	r3, [pc, #260]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c86:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1ba>
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	2b18      	cmp	r3, #24
 8003c96:	d137      	bne.n	8003d08 <HAL_RCC_OscConfig+0x220>
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d132      	bne.n	8003d08 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca2:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <HAL_RCC_OscConfig+0x1d2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e313      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cba:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0219 	bic.w	r2, r3, #25
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	492f      	ldr	r1, [pc, #188]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ccc:	f7fd fc80 	bl	80015d0 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd4:	f7fd fc7c 	bl	80015d0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e2fd      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	4920      	ldr	r1, [pc, #128]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d06:	e045      	b.n	8003d94 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d026      	beq.n	8003d5e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d10:	4b1c      	ldr	r3, [pc, #112]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 0219 	bic.w	r2, r3, #25
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4919      	ldr	r1, [pc, #100]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fd fc55 	bl	80015d0 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fd fc51 	bl	80015d0 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e2d2      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	490b      	ldr	r1, [pc, #44]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
 8003d5c:	e01a      	b.n	8003d94 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5e:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <HAL_RCC_OscConfig+0x29c>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fd fc31 	bl	80015d0 <HAL_GetTick>
 8003d6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d70:	e00a      	b.n	8003d88 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fd fc2d 	bl	80015d0 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d903      	bls.n	8003d88 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e2ae      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
 8003d84:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d88:	4b99      	ldr	r3, [pc, #612]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1ee      	bne.n	8003d72 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d06a      	beq.n	8003e76 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da0:	4b93      	ldr	r3, [pc, #588]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003daa:	4b91      	ldr	r3, [pc, #580]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d007      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2de>
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b18      	cmp	r3, #24
 8003dba:	d11b      	bne.n	8003df4 <HAL_RCC_OscConfig+0x30c>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d116      	bne.n	8003df4 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dc6:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_RCC_OscConfig+0x2f6>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	2b80      	cmp	r3, #128	; 0x80
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e281      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dde:	4b84      	ldr	r3, [pc, #528]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	4980      	ldr	r1, [pc, #512]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003df2:	e040      	b.n	8003e76 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d023      	beq.n	8003e44 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dfc:	4b7c      	ldr	r3, [pc, #496]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7b      	ldr	r2, [pc, #492]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fd fbe2 	bl	80015d0 <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e10:	f7fd fbde 	bl	80015d0 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e25f      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e22:	4b73      	ldr	r3, [pc, #460]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e2e:	4b70      	ldr	r3, [pc, #448]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	061b      	lsls	r3, r3, #24
 8003e3c:	496c      	ldr	r1, [pc, #432]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60cb      	str	r3, [r1, #12]
 8003e42:	e018      	b.n	8003e76 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fd fbbe 	bl	80015d0 <HAL_GetTick>
 8003e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e58:	f7fd fbba 	bl	80015d0 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e23b      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e6a:	4b61      	ldr	r3, [pc, #388]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d036      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d019      	beq.n	8003ebe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8a:	4b59      	ldr	r3, [pc, #356]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	4a58      	ldr	r2, [pc, #352]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fd fb9b 	bl	80015d0 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9e:	f7fd fb97 	bl	80015d0 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e218      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x3b6>
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebe:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec2:	4a4b      	ldr	r2, [pc, #300]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fd fb81 	bl	80015d0 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd fb7d 	bl	80015d0 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1fe      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d036      	beq.n	8003f6a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d019      	beq.n	8003f38 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f04:	4b3a      	ldr	r3, [pc, #232]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a39      	ldr	r2, [pc, #228]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f10:	f7fd fb5e 	bl	80015d0 <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f18:	f7fd fb5a 	bl	80015d0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e1db      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x430>
 8003f36:	e018      	b.n	8003f6a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f44:	f7fd fb44 	bl	80015d0 <HAL_GetTick>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003f4c:	f7fd fb40 	bl	80015d0 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e1c1      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80af 	beq.w	80040d6 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f78:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_OscConfig+0x50c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1d      	ldr	r2, [pc, #116]	; (8003ff4 <HAL_RCC_OscConfig+0x50c>)
 8003f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f84:	f7fd fb24 	bl	80015d0 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f8c:	f7fd fb20 	bl	80015d0 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b64      	cmp	r3, #100	; 0x64
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1a1      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_RCC_OscConfig+0x50c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d106      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x4d8>
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e05b      	b.n	8004078 <HAL_RCC_OscConfig+0x590>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d117      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x510>
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a02      	ldr	r2, [pc, #8]	; (8003ff0 <HAL_RCC_OscConfig+0x508>)
 8003fe6:	f023 0304 	bic.w	r3, r3, #4
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	e044      	b.n	8004078 <HAL_RCC_OscConfig+0x590>
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	58024800 	.word	0x58024800
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b05      	cmp	r3, #5
 8003ffe:	d112      	bne.n	8004026 <HAL_RCC_OscConfig+0x53e>
 8004000:	4b95      	ldr	r3, [pc, #596]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004004:	4a94      	ldr	r2, [pc, #592]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	6713      	str	r3, [r2, #112]	; 0x70
 800400c:	4b92      	ldr	r3, [pc, #584]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	4a91      	ldr	r2, [pc, #580]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004016:	6713      	str	r3, [r2, #112]	; 0x70
 8004018:	4b8f      	ldr	r3, [pc, #572]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a8e      	ldr	r2, [pc, #568]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	e028      	b.n	8004078 <HAL_RCC_OscConfig+0x590>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b85      	cmp	r3, #133	; 0x85
 800402c:	d112      	bne.n	8004054 <HAL_RCC_OscConfig+0x56c>
 800402e:	4b8a      	ldr	r3, [pc, #552]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004032:	4a89      	ldr	r2, [pc, #548]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6713      	str	r3, [r2, #112]	; 0x70
 800403a:	4b87      	ldr	r3, [pc, #540]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a86      	ldr	r2, [pc, #536]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	4b84      	ldr	r3, [pc, #528]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a83      	ldr	r2, [pc, #524]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	e011      	b.n	8004078 <HAL_RCC_OscConfig+0x590>
 8004054:	4b80      	ldr	r3, [pc, #512]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a7f      	ldr	r2, [pc, #508]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	4b7d      	ldr	r3, [pc, #500]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a7c      	ldr	r2, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
 800406c:	4b7a      	ldr	r3, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004070:	4a79      	ldr	r2, [pc, #484]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004076:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fd faa6 	bl	80015d0 <HAL_GetTick>
 8004084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fd faa2 	bl	80015d0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e121      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800409e:	4b6e      	ldr	r3, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <HAL_RCC_OscConfig+0x5a0>
 80040aa:	e014      	b.n	80040d6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ac:	f7fd fa90 	bl	80015d0 <HAL_GetTick>
 80040b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f7fd fa8c 	bl	80015d0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e10b      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ca:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80040cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1ee      	bne.n	80040b4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 8100 	beq.w	80042e0 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040e0:	4b5d      	ldr	r3, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e8:	2b18      	cmp	r3, #24
 80040ea:	f000 80bb 	beq.w	8004264 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	f040 8095 	bne.w	8004222 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b57      	ldr	r3, [pc, #348]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a56      	ldr	r2, [pc, #344]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd fa64 	bl	80015d0 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fa60 	bl	80015d0 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e0e1      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800411e:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412a:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800412c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412e:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCC_OscConfig+0x774>)
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800413a:	0112      	lsls	r2, r2, #4
 800413c:	430a      	orrs	r2, r1
 800413e:	4946      	ldr	r1, [pc, #280]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004140:	4313      	orrs	r3, r2
 8004142:	628b      	str	r3, [r1, #40]	; 0x28
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	3b01      	subs	r3, #1
 800414a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004152:	3b01      	subs	r3, #1
 8004154:	025b      	lsls	r3, r3, #9
 8004156:	b29b      	uxth	r3, r3
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	3b01      	subs	r3, #1
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416c:	3b01      	subs	r3, #1
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004174:	4938      	ldr	r1, [pc, #224]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004176:	4313      	orrs	r3, r2
 8004178:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	4a36      	ldr	r2, [pc, #216]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418a:	4b35      	ldr	r3, [pc, #212]	; (8004260 <HAL_RCC_OscConfig+0x778>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004192:	00d2      	lsls	r2, r2, #3
 8004194:	4930      	ldr	r1, [pc, #192]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004196:	4313      	orrs	r3, r2
 8004198:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800419a:	4b2f      	ldr	r3, [pc, #188]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f023 020c 	bic.w	r2, r3, #12
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	492c      	ldr	r1, [pc, #176]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f023 0202 	bic.w	r2, r3, #2
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b8:	4927      	ldr	r1, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a25      	ldr	r2, [pc, #148]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ca:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041da:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80041e2:	4b1d      	ldr	r3, [pc, #116]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ee:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 80041f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fd f9e9 	bl	80015d0 <HAL_GetTick>
 80041fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fd f9e5 	bl	80015d0 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e066      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x71a>
 8004220:	e05e      	b.n	80042e0 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a0c      	ldr	r2, [pc, #48]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 8004228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fd f9cf 	bl	80015d0 <HAL_GetTick>
 8004232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004236:	f7fd f9cb 	bl	80015d0 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e04c      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004248:	4b03      	ldr	r3, [pc, #12]	; (8004258 <HAL_RCC_OscConfig+0x770>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1f0      	bne.n	8004236 <HAL_RCC_OscConfig+0x74e>
 8004254:	e044      	b.n	80042e0 <HAL_RCC_OscConfig+0x7f8>
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
 800425c:	fffffc0c 	.word	0xfffffc0c
 8004260:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004264:	4b21      	ldr	r3, [pc, #132]	; (80042ec <HAL_RCC_OscConfig+0x804>)
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_OscConfig+0x804>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	2b01      	cmp	r3, #1
 8004276:	d031      	beq.n	80042dc <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f003 0203 	and.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d12a      	bne.n	80042dc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d122      	bne.n	80042dc <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d11a      	bne.n	80042dc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	0a5b      	lsrs	r3, r3, #9
 80042aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d111      	bne.n	80042dc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d108      	bne.n	80042dc <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	0e1b      	lsrs	r3, r3, #24
 80042ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3730      	adds	r7, #48	; 0x30
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	58024400 	.word	0x58024400

080042f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e19c      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b8a      	ldr	r3, [pc, #552]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d910      	bls.n	8004334 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b87      	ldr	r3, [pc, #540]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	4985      	ldr	r1, [pc, #532]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	4313      	orrs	r3, r2
 8004320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004322:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d001      	beq.n	8004334 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e184      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800434c:	429a      	cmp	r2, r3
 800434e:	d908      	bls.n	8004362 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004350:	4b78      	ldr	r3, [pc, #480]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	4975      	ldr	r1, [pc, #468]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800435e:	4313      	orrs	r3, r2
 8004360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d010      	beq.n	8004390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800437a:	429a      	cmp	r2, r3
 800437c:	d908      	bls.n	8004390 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800437e:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	496a      	ldr	r1, [pc, #424]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800438c:	4313      	orrs	r3, r2
 800438e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d010      	beq.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699a      	ldr	r2, [r3, #24]
 80043a0:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d908      	bls.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043ac:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	495e      	ldr	r1, [pc, #376]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d010      	beq.n	80043ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d908      	bls.n	80043ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4953      	ldr	r1, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	429a      	cmp	r2, r3
 8004406:	d908      	bls.n	800441a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f023 020f 	bic.w	r2, r3, #15
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4947      	ldr	r1, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004416:	4313      	orrs	r3, r2
 8004418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d055      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004426:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4940      	ldr	r1, [pc, #256]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004434:	4313      	orrs	r3, r2
 8004436:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d107      	bne.n	8004450 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004440:	4b3c      	ldr	r3, [pc, #240]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d121      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0f6      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d107      	bne.n	8004468 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004458:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d115      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0ea      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0de      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004480:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0d6      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004490:	4b28      	ldr	r3, [pc, #160]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f023 0207 	bic.w	r2, r3, #7
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4925      	ldr	r1, [pc, #148]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a2:	f7fd f895 	bl	80015d0 <HAL_GetTick>
 80044a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a8:	e00a      	b.n	80044c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044aa:	f7fd f891 	bl	80015d0 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e0be      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c0:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d1eb      	bne.n	80044aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d208      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f023 020f 	bic.w	r2, r3, #15
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x244>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d214      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 020f 	bic.w	r2, r3, #15
 8004516:	4906      	ldr	r1, [pc, #24]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_RCC_ClockConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e086      	b.n	800463e <HAL_RCC_ClockConfig+0x34e>
 8004530:	52002000 	.word	0x52002000
 8004534:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004550:	429a      	cmp	r2, r3
 8004552:	d208      	bcs.n	8004566 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	4939      	ldr	r1, [pc, #228]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004562:	4313      	orrs	r3, r2
 8004564:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	4b34      	ldr	r3, [pc, #208]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800457e:	429a      	cmp	r2, r3
 8004580:	d208      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004582:	4b31      	ldr	r3, [pc, #196]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	492e      	ldr	r1, [pc, #184]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004590:	4313      	orrs	r3, r2
 8004592:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d208      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	4922      	ldr	r1, [pc, #136]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d010      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	4b1d      	ldr	r3, [pc, #116]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045da:	429a      	cmp	r2, r3
 80045dc:	d208      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045de:	4b1a      	ldr	r3, [pc, #104]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4917      	ldr	r1, [pc, #92]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80045f0:	f000 f834 	bl	800465c <HAL_RCC_GetSysClockFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	0a1b      	lsrs	r3, r3, #8
 80045fc:	f003 030f 	and.w	r3, r3, #15
 8004600:	4912      	ldr	r1, [pc, #72]	; (800464c <HAL_RCC_ClockConfig+0x35c>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	fa22 f303 	lsr.w	r3, r2, r3
 800460c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <HAL_RCC_ClockConfig+0x358>)
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	4a0d      	ldr	r2, [pc, #52]	; (800464c <HAL_RCC_ClockConfig+0x35c>)
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <HAL_RCC_ClockConfig+0x360>)
 8004626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004628:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_RCC_ClockConfig+0x364>)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x368>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fc ff82 	bl	800153c <HAL_InitTick>
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	58024400 	.word	0x58024400
 800464c:	0800a334 	.word	0x0800a334
 8004650:	24000004 	.word	0x24000004
 8004654:	24000000 	.word	0x24000000
 8004658:	24000008 	.word	0x24000008

0800465c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	b089      	sub	sp, #36	; 0x24
 8004660:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004662:	4bb3      	ldr	r3, [pc, #716]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466a:	2b18      	cmp	r3, #24
 800466c:	f200 8155 	bhi.w	800491a <HAL_RCC_GetSysClockFreq+0x2be>
 8004670:	a201      	add	r2, pc, #4	; (adr r2, 8004678 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046dd 	.word	0x080046dd
 800467c:	0800491b 	.word	0x0800491b
 8004680:	0800491b 	.word	0x0800491b
 8004684:	0800491b 	.word	0x0800491b
 8004688:	0800491b 	.word	0x0800491b
 800468c:	0800491b 	.word	0x0800491b
 8004690:	0800491b 	.word	0x0800491b
 8004694:	0800491b 	.word	0x0800491b
 8004698:	08004703 	.word	0x08004703
 800469c:	0800491b 	.word	0x0800491b
 80046a0:	0800491b 	.word	0x0800491b
 80046a4:	0800491b 	.word	0x0800491b
 80046a8:	0800491b 	.word	0x0800491b
 80046ac:	0800491b 	.word	0x0800491b
 80046b0:	0800491b 	.word	0x0800491b
 80046b4:	0800491b 	.word	0x0800491b
 80046b8:	08004709 	.word	0x08004709
 80046bc:	0800491b 	.word	0x0800491b
 80046c0:	0800491b 	.word	0x0800491b
 80046c4:	0800491b 	.word	0x0800491b
 80046c8:	0800491b 	.word	0x0800491b
 80046cc:	0800491b 	.word	0x0800491b
 80046d0:	0800491b 	.word	0x0800491b
 80046d4:	0800491b 	.word	0x0800491b
 80046d8:	0800470f 	.word	0x0800470f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046dc:	4b94      	ldr	r3, [pc, #592]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0320 	and.w	r3, r3, #32
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046e8:	4b91      	ldr	r3, [pc, #580]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	08db      	lsrs	r3, r3, #3
 80046ee:	f003 0303 	and.w	r3, r3, #3
 80046f2:	4a90      	ldr	r2, [pc, #576]	; (8004934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046f4:	fa22 f303 	lsr.w	r3, r2, r3
 80046f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80046fa:	e111      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80046fc:	4b8d      	ldr	r3, [pc, #564]	; (8004934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80046fe:	61bb      	str	r3, [r7, #24]
    break;
 8004700:	e10e      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004702:	4b8d      	ldr	r3, [pc, #564]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004704:	61bb      	str	r3, [r7, #24]
    break;
 8004706:	e10b      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004708:	4b8c      	ldr	r3, [pc, #560]	; (800493c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800470a:	61bb      	str	r3, [r7, #24]
    break;
 800470c:	e108      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800470e:	4b88      	ldr	r3, [pc, #544]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004718:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	091b      	lsrs	r3, r3, #4
 800471e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004722:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004724:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800472e:	4b80      	ldr	r3, [pc, #512]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004732:	08db      	lsrs	r3, r3, #3
 8004734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80e1 	beq.w	8004914 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b02      	cmp	r3, #2
 8004756:	f000 8083 	beq.w	8004860 <HAL_RCC_GetSysClockFreq+0x204>
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b02      	cmp	r3, #2
 800475e:	f200 80a1 	bhi.w	80048a4 <HAL_RCC_GetSysClockFreq+0x248>
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x114>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d056      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x1c0>
 800476e:	e099      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004770:	4b6f      	ldr	r3, [pc, #444]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	2b00      	cmp	r3, #0
 800477a:	d02d      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800477c:	4b6c      	ldr	r3, [pc, #432]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	08db      	lsrs	r3, r3, #3
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	4a6b      	ldr	r2, [pc, #428]	; (8004934 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
 800478c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	ee07 3a90 	vmov	s15, r3
 8004794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	ee07 3a90 	vmov	s15, r3
 800479e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b62      	ldr	r3, [pc, #392]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80047d6:	e087      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004944 <HAL_RCC_GetSysClockFreq+0x2e8>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b51      	ldr	r3, [pc, #324]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80047fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e065      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2ec>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b40      	ldr	r3, [pc, #256]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004842:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004940 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	e043      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800494c <HAL_RCC_GetSysClockFreq+0x2f0>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b2f      	ldr	r3, [pc, #188]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a02 	vldr	s12, [r7, #8]
 8004886:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004940 <HAL_RCC_GetSysClockFreq+0x2e4>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a2:	e021      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004948 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004940 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	0a5b      	lsrs	r3, r3, #9
 80048ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f2:	3301      	adds	r3, #1
 80048f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004900:	edd7 6a07 	vldr	s13, [r7, #28]
 8004904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490c:	ee17 3a90 	vmov	r3, s15
 8004910:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004912:	e005      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
    break;
 8004918:	e002      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800491c:	61bb      	str	r3, [r7, #24]
    break;
 800491e:	bf00      	nop
  }

  return sysclockfreq;
 8004920:	69bb      	ldr	r3, [r7, #24]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	58024400 	.word	0x58024400
 8004934:	03d09000 	.word	0x03d09000
 8004938:	003d0900 	.word	0x003d0900
 800493c:	016e3600 	.word	0x016e3600
 8004940:	46000000 	.word	0x46000000
 8004944:	4c742400 	.word	0x4c742400
 8004948:	4a742400 	.word	0x4a742400
 800494c:	4bb71b00 	.word	0x4bb71b00

08004950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004956:	f7ff fe81 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800495a:	4602      	mov	r2, r0
 800495c:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	0a1b      	lsrs	r3, r3, #8
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	490f      	ldr	r1, [pc, #60]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004968:	5ccb      	ldrb	r3, [r1, r3]
 800496a:	f003 031f 	and.w	r3, r3, #31
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	fa22 f303 	lsr.w	r3, r2, r3
 800498a:	4a07      	ldr	r2, [pc, #28]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800498c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800498e:	4a07      	ldr	r2, [pc, #28]	; (80049ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004994:	4b04      	ldr	r3, [pc, #16]	; (80049a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	58024400 	.word	0x58024400
 80049a4:	0800a334 	.word	0x0800a334
 80049a8:	24000004 	.word	0x24000004
 80049ac:	24000000 	.word	0x24000000

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80049b4:	f7ff ffcc 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	091b      	lsrs	r3, r3, #4
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4904      	ldr	r1, [pc, #16]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	58024400 	.word	0x58024400
 80049d8:	0800a334 	.word	0x0800a334

080049dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80049e0:	f7ff ffb6 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	0a1b      	lsrs	r3, r3, #8
 80049ec:	f003 0307 	and.w	r3, r3, #7
 80049f0:	4904      	ldr	r1, [pc, #16]	; (8004a04 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049f2:	5ccb      	ldrb	r3, [r1, r3]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	58024400 	.word	0x58024400
 8004a04:	0800a334 	.word	0x0800a334

08004a08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a10:	2300      	movs	r3, #0
 8004a12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a14:	2300      	movs	r3, #0
 8004a16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03f      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a2c:	d02a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a32:	d824      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a38:	d018      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a3e:	d81e      	bhi.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a48:	d007      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a4a:	e018      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4c:	4ba6      	ldr	r3, [pc, #664]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	4aa5      	ldr	r2, [pc, #660]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a58:	e015      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	2102      	movs	r1, #2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f001 ff17 	bl	8006894 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a6a:	e00c      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3324      	adds	r3, #36	; 0x24
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f001 ffc0 	bl	80069f8 <RCCEx_PLL3_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004a7c:	e003      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	75fb      	strb	r3, [r7, #23]
      break;
 8004a82:	e000      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d109      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004a8c:	4b96      	ldr	r3, [pc, #600]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a98:	4993      	ldr	r1, [pc, #588]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a9e:	e001      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d03d      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d826      	bhi.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ab8:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abe:	bf00      	nop
 8004ac0:	08004ad5 	.word	0x08004ad5
 8004ac4:	08004ae3 	.word	0x08004ae3
 8004ac8:	08004af5 	.word	0x08004af5
 8004acc:	08004b0d 	.word	0x08004b0d
 8004ad0:	08004b0d 	.word	0x08004b0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad4:	4b84      	ldr	r3, [pc, #528]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	4a83      	ldr	r2, [pc, #524]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ae0:	e015      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 fed3 	bl	8006894 <RCCEx_PLL2_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004af2:	e00c      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3324      	adds	r3, #36	; 0x24
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f001 ff7c 	bl	80069f8 <RCCEx_PLL3_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b04:	e003      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
      break;
 8004b0a:	e000      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d109      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b14:	4b74      	ldr	r3, [pc, #464]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b18:	f023 0207 	bic.w	r2, r3, #7
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	4971      	ldr	r1, [pc, #452]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	650b      	str	r3, [r1, #80]	; 0x50
 8004b26:	e001      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d04a      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b40:	d031      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004b42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004b46:	d82b      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d02d      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b52:	d825      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b54:	2bc0      	cmp	r3, #192	; 0xc0
 8004b56:	d02a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b58:	2bc0      	cmp	r3, #192	; 0xc0
 8004b5a:	d821      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b5c:	2b80      	cmp	r3, #128	; 0x80
 8004b5e:	d016      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d81d      	bhi.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d007      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004b6c:	e018      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b6e:	4b5e      	ldr	r3, [pc, #376]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	4a5d      	ldr	r2, [pc, #372]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004b7a:	e019      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fe86 	bl	8006894 <RCCEx_PLL2_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004b8c:	e010      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3324      	adds	r3, #36	; 0x24
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 ff2f 	bl	80069f8 <RCCEx_PLL3_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004b9e:	e007      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004bae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb0:	7dfb      	ldrb	r3, [r7, #23]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004bb6:	4b4c      	ldr	r3, [pc, #304]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc2:	4949      	ldr	r1, [pc, #292]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	650b      	str	r3, [r1, #80]	; 0x50
 8004bc8:	e001      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
 8004bcc:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d04f      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004be2:	d036      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004be4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004be8:	d830      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bee:	d032      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf4:	d82a      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004bf6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bfa:	d02e      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004bfc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c00:	d824      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	d018      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0c:	d81e      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c16:	d007      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004c18:	e018      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1a:	4b33      	ldr	r3, [pc, #204]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a32      	ldr	r2, [pc, #200]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004c26:	e019      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 fe30 	bl	8006894 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004c38:	e010      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3324      	adds	r3, #36	; 0x24
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 fed9 	bl	80069f8 <RCCEx_PLL3_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004c4a:	e007      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c66:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	491e      	ldr	r1, [pc, #120]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	650b      	str	r3, [r1, #80]	; 0x50
 8004c74:	e001      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d034      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	2b30      	cmp	r3, #48	; 0x30
 8004c8c:	d01c      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	d817      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d00c      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d813      	bhi.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d016      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d10f      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	4a10      	ldr	r2, [pc, #64]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004cae:	e00e      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f001 fdec 	bl	8006894 <RCCEx_PLL2_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004cc0:	e005      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc6:	e002      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004cc8:	bf00      	nop
 8004cca:	e000      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cce:	7dfb      	ldrb	r3, [r7, #23]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cd4:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	4901      	ldr	r1, [pc, #4]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ce6:	e003      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cec:	7dfb      	ldrb	r3, [r7, #23]
 8004cee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d047      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d04:	d030      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0a:	d82a      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004d0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d10:	d02c      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004d12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d16:	d824      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1c:	d018      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d22:	d81e      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004d2e:	e018      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4bb0      	ldr	r3, [pc, #704]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	4aaf      	ldr	r2, [pc, #700]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d3c:	e017      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2100      	movs	r1, #0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fda5 	bl	8006894 <RCCEx_PLL2_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d4e:	e00e      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fe4e 	bl	80069f8 <RCCEx_PLL3_Config>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d60:	e005      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8004d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d74:	4b9f      	ldr	r3, [pc, #636]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d78:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	499c      	ldr	r1, [pc, #624]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	650b      	str	r3, [r1, #80]	; 0x50
 8004d86:	e001      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d88:	7dfb      	ldrb	r3, [r7, #23]
 8004d8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d049      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da0:	d02e      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004da2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da6:	d828      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dac:	d02a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004dae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db2:	d822      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004db4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004db8:	d026      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dbe:	d81c      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc4:	d010      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dca:	d816      	bhi.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01d      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d111      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fd59 	bl	8006894 <RCCEx_PLL2_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004de6:	e012      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3324      	adds	r3, #36	; 0x24
 8004dec:	2101      	movs	r1, #1
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 fe02 	bl	80069f8 <RCCEx_PLL3_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004df8:	e009      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfe:	e006      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e00:	bf00      	nop
 8004e02:	e004      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e04:	bf00      	nop
 8004e06:	e002      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e08:	bf00      	nop
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e14:	4b77      	ldr	r3, [pc, #476]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e20:	4974      	ldr	r1, [pc, #464]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	650b      	str	r3, [r1, #80]	; 0x50
 8004e26:	e001      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d053      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e3e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e42:	d034      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004e44:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e48:	d82e      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e4e:	d030      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8004e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e54:	d828      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d02c      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e60:	d822      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e66:	d028      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e6c:	d81c      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e72:	d010      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8004e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e78:	d816      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01f      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e82:	d111      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 fd02 	bl	8006894 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e94:	e014      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fdab 	bl	80069f8 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004eac:	e008      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004eae:	bf00      	nop
 8004eb0:	e006      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004eb2:	bf00      	nop
 8004eb4:	e004      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004eb6:	bf00      	nop
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004eba:	bf00      	nop
 8004ebc:	e000      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004ebe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ec6:	4b4b      	ldr	r3, [pc, #300]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ed4:	4947      	ldr	r1, [pc, #284]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	658b      	str	r3, [r1, #88]	; 0x58
 8004eda:	e001      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02f      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ef4:	d00e      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efa:	d814      	bhi.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d015      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f04:	d10f      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f12:	e00c      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3304      	adds	r3, #4
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fcba 	bl	8006894 <RCCEx_PLL2_Config>
 8004f20:	4603      	mov	r3, r0
 8004f22:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004f24:	e003      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2a:	e000      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004f2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f34:	4b2f      	ldr	r3, [pc, #188]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f40:	492c      	ldr	r1, [pc, #176]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	650b      	str	r3, [r1, #80]	; 0x50
 8004f46:	e001      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
 8004f4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d032      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d81b      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8004f60:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8004f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f66:	bf00      	nop
 8004f68:	08004f9f 	.word	0x08004f9f
 8004f6c:	08004f79 	.word	0x08004f79
 8004f70:	08004f87 	.word	0x08004f87
 8004f74:	08004f9f 	.word	0x08004f9f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f78:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f84:	e00c      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2102      	movs	r1, #2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fc81 	bl	8006894 <RCCEx_PLL2_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f96:	e003      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8004f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004fa6:	4b13      	ldr	r3, [pc, #76]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	4910      	ldr	r1, [pc, #64]	; (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fb8:	e001      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 808a 	beq.w	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd8:	f7fc fafa 	bl	80015d0 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fde:	e00d      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe0:	f7fc faf6 	bl	80015d0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d906      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ff2:	e009      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8004ff4:	58024400 	.word	0x58024400
 8004ff8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ffc:	4bba      	ldr	r3, [pc, #744]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0eb      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d166      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800500e:	4bb7      	ldr	r3, [pc, #732]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005010:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005018:	4053      	eors	r3, r2
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	2b00      	cmp	r3, #0
 8005020:	d013      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005022:	4bb2      	ldr	r3, [pc, #712]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502c:	4baf      	ldr	r3, [pc, #700]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005030:	4aae      	ldr	r2, [pc, #696]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005036:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005038:	4bac      	ldr	r3, [pc, #688]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4aab      	ldr	r2, [pc, #684]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005044:	4aa9      	ldr	r2, [pc, #676]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005054:	d115      	bne.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005056:	f7fc fabb 	bl	80015d0 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800505c:	e00b      	b.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800505e:	f7fc fab7 	bl	80015d0 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f241 3288 	movw	r2, #5000	; 0x1388
 800506c:	4293      	cmp	r3, r2
 800506e:	d902      	bls.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	75fb      	strb	r3, [r7, #23]
            break;
 8005074:	e005      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005076:	4b9d      	ldr	r3, [pc, #628]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0ed      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8005082:	7dfb      	ldrb	r3, [r7, #23]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d126      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005096:	d10d      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8005098:	4b94      	ldr	r3, [pc, #592]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a6:	0919      	lsrs	r1, r3, #4
 80050a8:	4b91      	ldr	r3, [pc, #580]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80050aa:	400b      	ands	r3, r1
 80050ac:	498f      	ldr	r1, [pc, #572]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]
 80050b2:	e005      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80050b4:	4b8d      	ldr	r3, [pc, #564]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	4a8c      	ldr	r2, [pc, #560]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80050ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050be:	6113      	str	r3, [r2, #16]
 80050c0:	4b8a      	ldr	r3, [pc, #552]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80050c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050ce:	4987      	ldr	r1, [pc, #540]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	670b      	str	r3, [r1, #112]	; 0x70
 80050d4:	e004      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	75bb      	strb	r3, [r7, #22]
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d07f      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f2:	2b28      	cmp	r3, #40	; 0x28
 80050f4:	d866      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80050f6:	a201      	add	r2, pc, #4	; (adr r2, 80050fc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80050f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fc:	080051cb 	.word	0x080051cb
 8005100:	080051c5 	.word	0x080051c5
 8005104:	080051c5 	.word	0x080051c5
 8005108:	080051c5 	.word	0x080051c5
 800510c:	080051c5 	.word	0x080051c5
 8005110:	080051c5 	.word	0x080051c5
 8005114:	080051c5 	.word	0x080051c5
 8005118:	080051c5 	.word	0x080051c5
 800511c:	080051a1 	.word	0x080051a1
 8005120:	080051c5 	.word	0x080051c5
 8005124:	080051c5 	.word	0x080051c5
 8005128:	080051c5 	.word	0x080051c5
 800512c:	080051c5 	.word	0x080051c5
 8005130:	080051c5 	.word	0x080051c5
 8005134:	080051c5 	.word	0x080051c5
 8005138:	080051c5 	.word	0x080051c5
 800513c:	080051b3 	.word	0x080051b3
 8005140:	080051c5 	.word	0x080051c5
 8005144:	080051c5 	.word	0x080051c5
 8005148:	080051c5 	.word	0x080051c5
 800514c:	080051c5 	.word	0x080051c5
 8005150:	080051c5 	.word	0x080051c5
 8005154:	080051c5 	.word	0x080051c5
 8005158:	080051c5 	.word	0x080051c5
 800515c:	080051cb 	.word	0x080051cb
 8005160:	080051c5 	.word	0x080051c5
 8005164:	080051c5 	.word	0x080051c5
 8005168:	080051c5 	.word	0x080051c5
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051c5 	.word	0x080051c5
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051cb 	.word	0x080051cb
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051c5 	.word	0x080051c5
 800519c:	080051cb 	.word	0x080051cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f001 fb74 	bl	8006894 <RCCEx_PLL2_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051b0:	e00c      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3324      	adds	r3, #36	; 0x24
 80051b6:	2101      	movs	r1, #1
 80051b8:	4618      	mov	r0, r3
 80051ba:	f001 fc1d 	bl	80069f8 <RCCEx_PLL3_Config>
 80051be:	4603      	mov	r3, r0
 80051c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80051c2:	e003      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      break;
 80051c8:	e000      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80051ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051d2:	4b46      	ldr	r3, [pc, #280]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e0:	4942      	ldr	r1, [pc, #264]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	654b      	str	r3, [r1, #84]	; 0x54
 80051e6:	e001      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
 80051ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d038      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051fc:	2b05      	cmp	r3, #5
 80051fe:	d821      	bhi.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005200:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800524b 	.word	0x0800524b
 800520c:	08005221 	.word	0x08005221
 8005210:	08005233 	.word	0x08005233
 8005214:	0800524b 	.word	0x0800524b
 8005218:	0800524b 	.word	0x0800524b
 800521c:	0800524b 	.word	0x0800524b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	2101      	movs	r1, #1
 8005226:	4618      	mov	r0, r3
 8005228:	f001 fb34 	bl	8006894 <RCCEx_PLL2_Config>
 800522c:	4603      	mov	r3, r0
 800522e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005230:	e00c      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3324      	adds	r3, #36	; 0x24
 8005236:	2101      	movs	r1, #1
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fbdd 	bl	80069f8 <RCCEx_PLL3_Config>
 800523e:	4603      	mov	r3, r0
 8005240:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005242:	e003      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	75fb      	strb	r3, [r7, #23]
      break;
 8005248:	e000      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800524a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d109      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005252:	4b26      	ldr	r3, [pc, #152]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005256:	f023 0207 	bic.w	r2, r3, #7
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525e:	4923      	ldr	r1, [pc, #140]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005260:	4313      	orrs	r3, r2
 8005262:	654b      	str	r3, [r1, #84]	; 0x54
 8005264:	e001      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d040      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800527c:	2b05      	cmp	r3, #5
 800527e:	d821      	bhi.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052cb 	.word	0x080052cb
 800528c:	080052a1 	.word	0x080052a1
 8005290:	080052b3 	.word	0x080052b3
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f001 faf4 	bl	8006894 <RCCEx_PLL2_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80052b0:	e00c      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3324      	adds	r3, #36	; 0x24
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f001 fb9d 	bl	80069f8 <RCCEx_PLL3_Config>
 80052be:	4603      	mov	r3, r0
 80052c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80052c2:	e003      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
      break;
 80052c8:	e000      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80052ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d110      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	f023 0207 	bic.w	r2, r3, #7
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e0:	4902      	ldr	r1, [pc, #8]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	658b      	str	r3, [r1, #88]	; 0x58
 80052e6:	e007      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80052e8:	58024800 	.word	0x58024800
 80052ec:	58024400 	.word	0x58024400
 80052f0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d04b      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800530e:	d02e      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005314:	d828      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d02a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800531c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005320:	d822      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005322:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005326:	d026      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005328:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800532c:	d81c      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800532e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005332:	d010      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005338:	d816      	bhi.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d01d      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800533e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005342:	d111      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3304      	adds	r3, #4
 8005348:	2100      	movs	r1, #0
 800534a:	4618      	mov	r0, r3
 800534c:	f001 faa2 	bl	8006894 <RCCEx_PLL2_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005354:	e012      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3324      	adds	r3, #36	; 0x24
 800535a:	2102      	movs	r1, #2
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fb4b 	bl	80069f8 <RCCEx_PLL3_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005366:	e009      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
      break;
 800536c:	e006      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800536e:	bf00      	nop
 8005370:	e004      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005372:	bf00      	nop
 8005374:	e002      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005376:	bf00      	nop
 8005378:	e000      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800537a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005382:	4bb3      	ldr	r3, [pc, #716]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005390:	49af      	ldr	r1, [pc, #700]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005392:	4313      	orrs	r3, r2
 8005394:	654b      	str	r3, [r1, #84]	; 0x54
 8005396:	e001      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d04b      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053b2:	d02e      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80053b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80053b8:	d828      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80053ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053be:	d02a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80053c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c4:	d822      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80053c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053ca:	d026      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80053cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d0:	d81c      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80053d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053d6:	d010      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053dc:	d816      	bhi.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01d      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80053e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e6:	d111      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fa50 	bl	8006894 <RCCEx_PLL2_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053f8:	e012      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3324      	adds	r3, #36	; 0x24
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f001 faf9 	bl	80069f8 <RCCEx_PLL3_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800540a:	e009      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	75fb      	strb	r3, [r7, #23]
      break;
 8005410:	e006      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005412:	bf00      	nop
 8005414:	e004      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005416:	bf00      	nop
 8005418:	e002      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800541a:	bf00      	nop
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800541e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005420:	7dfb      	ldrb	r3, [r7, #23]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005426:	4b8a      	ldr	r3, [pc, #552]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005434:	4986      	ldr	r1, [pc, #536]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005436:	4313      	orrs	r3, r2
 8005438:	658b      	str	r3, [r1, #88]	; 0x58
 800543a:	e001      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d04b      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005452:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005456:	d02e      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005458:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800545c:	d828      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800545e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005462:	d02a      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005468:	d822      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800546a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800546e:	d026      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005470:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005474:	d81c      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800547a:	d010      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800547c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005480:	d816      	bhi.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01d      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548a:	d111      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f9fe 	bl	8006894 <RCCEx_PLL2_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800549c:	e012      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3324      	adds	r3, #36	; 0x24
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 faa7 	bl	80069f8 <RCCEx_PLL3_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80054ae:	e009      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	e006      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80054b6:	bf00      	nop
 80054b8:	e004      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 80054c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80054ca:	4b61      	ldr	r3, [pc, #388]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054d8:	495d      	ldr	r1, [pc, #372]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	658b      	str	r3, [r1, #88]	; 0x58
 80054de:	e001      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d10a      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3324      	adds	r3, #36	; 0x24
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f001 fa78 	bl	80069f8 <RCCEx_PLL3_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005512:	4b4f      	ldr	r3, [pc, #316]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	494b      	ldr	r1, [pc, #300]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005522:	4313      	orrs	r3, r2
 8005524:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553c:	d10a      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3324      	adds	r3, #36	; 0x24
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f001 fa57 	bl	80069f8 <RCCEx_PLL3_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005554:	4b3e      	ldr	r3, [pc, #248]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005562:	493b      	ldr	r1, [pc, #236]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005564:	4313      	orrs	r3, r2
 8005566:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d034      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800557a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800557e:	d01d      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005584:	d817      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800558a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558e:	d009      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005590:	e011      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	3304      	adds	r3, #4
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f001 f97b 	bl	8006894 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055a2:	e00c      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3324      	adds	r3, #36	; 0x24
 80055a8:	2102      	movs	r1, #2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 fa24 	bl	80069f8 <RCCEx_PLL3_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80055b4:	e003      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
      break;
 80055ba:	e000      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80055bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10a      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055c4:	4b22      	ldr	r3, [pc, #136]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055d2:	491f      	ldr	r1, [pc, #124]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	658b      	str	r3, [r1, #88]	; 0x58
 80055d8:	e001      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
 80055dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d036      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055f4:	d01c      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80055f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055fa:	d816      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80055fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005600:	d003      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005606:	d007      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005608:	e00f      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800560c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005614:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005616:	e00c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3324      	adds	r3, #36	; 0x24
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f001 f9ea 	bl	80069f8 <RCCEx_PLL3_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005628:	e003      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
      break;
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10d      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800563a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005646:	4902      	ldr	r1, [pc, #8]	; (8005650 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8005648:	4313      	orrs	r3, r2
 800564a:	654b      	str	r3, [r1, #84]	; 0x54
 800564c:	e004      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800564e:	bf00      	nop
 8005650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d029      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d007      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8005672:	e00f      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005674:	4b69      	ldr	r3, [pc, #420]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	4a68      	ldr	r2, [pc, #416]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800567a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005680:	e00b      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f001 f903 	bl	8006894 <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005692:	e002      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	75fb      	strb	r3, [r7, #23]
      break;
 8005698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ac:	495b      	ldr	r1, [pc, #364]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056b2:	e001      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3324      	adds	r3, #36	; 0x24
 80056c8:	2102      	movs	r1, #2
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f994 	bl	80069f8 <RCCEx_PLL3_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d032      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f0:	d017      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80056f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f6:	d811      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80056f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fc:	d013      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80056fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005702:	d80b      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8005708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570c:	d106      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570e:	4b43      	ldr	r3, [pc, #268]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	4a42      	ldr	r2, [pc, #264]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005718:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800571a:	e007      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	75fb      	strb	r3, [r7, #23]
      break;
 8005720:	e004      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800572a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005732:	4b3a      	ldr	r3, [pc, #232]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005740:	4936      	ldr	r1, [pc, #216]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005742:	4313      	orrs	r3, r2
 8005744:	654b      	str	r3, [r1, #84]	; 0x54
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005758:	4b30      	ldr	r3, [pc, #192]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800575a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005764:	492d      	ldr	r1, [pc, #180]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005766:	4313      	orrs	r3, r2
 8005768:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005776:	4b29      	ldr	r3, [pc, #164]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005782:	4926      	ldr	r1, [pc, #152]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005784:	4313      	orrs	r3, r2
 8005786:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	491e      	ldr	r1, [pc, #120]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	4a19      	ldr	r2, [pc, #100]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057bc:	6113      	str	r3, [r2, #16]
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80057c8:	4914      	ldr	r1, [pc, #80]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	da08      	bge.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057d6:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	490e      	ldr	r1, [pc, #56]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057f4:	4b09      	ldr	r3, [pc, #36]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80057f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005802:	4906      	ldr	r1, [pc, #24]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005804:	4313      	orrs	r3, r2
 8005806:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005808:	7dbb      	ldrb	r3, [r7, #22]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	58024400 	.word	0x58024400

08005820 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b090      	sub	sp, #64	; 0x40
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582e:	f040 8089 	bne.w	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005832:	4ba8      	ldr	r3, [pc, #672]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
 800583c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583e:	2b04      	cmp	r3, #4
 8005840:	d87d      	bhi.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005842:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005848:	0800585d 	.word	0x0800585d
 800584c:	08005881 	.word	0x08005881
 8005850:	080058a5 	.word	0x080058a5
 8005854:	08005939 	.word	0x08005939
 8005858:	080058c9 	.word	0x080058c9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800585c:	4b9d      	ldr	r3, [pc, #628]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005868:	d107      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800586a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800586e:	4618      	mov	r0, r3
 8005870:	f000 febe 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005878:	e3f5      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800587e:	e3f2      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005880:	4b94      	ldr	r3, [pc, #592]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588c:	d107      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588e:	f107 0318 	add.w	r3, r7, #24
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fc04 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800589c:	e3e3      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a2:	e3e0      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058a4:	4b8b      	ldr	r3, [pc, #556]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058b0:	d107      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058b2:	f107 030c 	add.w	r3, r7, #12
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fd46 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058c0:	e3d1      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c6:	e3ce      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058c8:	4b82      	ldr	r3, [pc, #520]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058d2:	4b80      	ldr	r3, [pc, #512]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d10c      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d109      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058e4:	4b7b      	ldr	r3, [pc, #492]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	08db      	lsrs	r3, r3, #3
 80058ea:	f003 0303 	and.w	r3, r3, #3
 80058ee:	4a7a      	ldr	r2, [pc, #488]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f6:	e01e      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058f8:	4b76      	ldr	r3, [pc, #472]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005904:	d106      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800590c:	d102      	bne.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800590e:	4b73      	ldr	r3, [pc, #460]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005912:	e010      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005914:	4b6f      	ldr	r3, [pc, #444]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005920:	d106      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005928:	d102      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800592a:	4b6d      	ldr	r3, [pc, #436]	; (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800592c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800592e:	e002      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005930:	2300      	movs	r3, #0
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005934:	e397      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005936:	e396      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005938:	4b6a      	ldr	r3, [pc, #424]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800593c:	e393      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005942:	e390      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594a:	f040 8095 	bne.w	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800594e:	4b61      	ldr	r3, [pc, #388]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005956:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595e:	d04d      	beq.n	80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005966:	f200 8084 	bhi.w	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800596a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596c:	2bc0      	cmp	r3, #192	; 0xc0
 800596e:	d07d      	beq.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8005970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005972:	2bc0      	cmp	r3, #192	; 0xc0
 8005974:	d87d      	bhi.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d02d      	beq.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800597c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597e:	2b80      	cmp	r3, #128	; 0x80
 8005980:	d877      	bhi.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d012      	beq.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800598e:	e070      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005990:	4b50      	ldr	r3, [pc, #320]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800599c:	d107      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800599e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fe24 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059ac:	e35b      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059b2:	e358      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b4:	4b47      	ldr	r3, [pc, #284]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c0:	d107      	bne.n	80059d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c2:	f107 0318 	add.w	r3, r7, #24
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fb6a 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059d0:	e349      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d6:	e346      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059d8:	4b3e      	ldr	r3, [pc, #248]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059e4:	d107      	bne.n	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	4618      	mov	r0, r3
 80059ec:	f000 fcac 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059f4:	e337      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059fa:	e334      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059fc:	4b35      	ldr	r3, [pc, #212]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80059fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a04:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a06:	4b33      	ldr	r3, [pc, #204]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a18:	4b2e      	ldr	r3, [pc, #184]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	08db      	lsrs	r3, r3, #3
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	4a2d      	ldr	r2, [pc, #180]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005a24:	fa22 f303 	lsr.w	r3, r2, r3
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2a:	e01e      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a2c:	4b29      	ldr	r3, [pc, #164]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a38:	d106      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a40:	d102      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a42:	4b26      	ldr	r3, [pc, #152]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a46:	e010      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a48:	4b22      	ldr	r3, [pc, #136]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a54:	d106      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a5c:	d102      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a5e:	4b20      	ldr	r3, [pc, #128]	; (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a62:	e002      	b.n	8005a6a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a68:	e2fd      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005a6a:	e2fc      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a70:	e2f9      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a76:	e2f6      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7e:	f040 80a7 	bne.w	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a86:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a92:	d05f      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9a:	f200 8096 	bhi.w	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005aa4:	f000 808e 	beq.w	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005aae:	f200 808c 	bhi.w	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab8:	d03a      	beq.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac0:	f200 8083 	bhi.w	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad0:	d01c      	beq.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8005ad2:	e07a      	b.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	03d09000 	.word	0x03d09000
 8005adc:	003d0900 	.word	0x003d0900
 8005ae0:	016e3600 	.word	0x016e3600
 8005ae4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ae8:	4ba8      	ldr	r3, [pc, #672]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005af4:	d107      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fd78 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b04:	e2af      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0a:	e2ac      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b0c:	4b9f      	ldr	r3, [pc, #636]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b18:	d107      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b1a:	f107 0318 	add.w	r3, r7, #24
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 fabe 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b28:	e29d      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2e:	e29a      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b30:	4b96      	ldr	r3, [pc, #600]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fc00 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b4c:	e28b      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b52:	e288      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b54:	4b8d      	ldr	r3, [pc, #564]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b5e:	4b8b      	ldr	r3, [pc, #556]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d10c      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d109      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b70:	4b86      	ldr	r3, [pc, #536]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	08db      	lsrs	r3, r3, #3
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	4a85      	ldr	r2, [pc, #532]	; (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b82:	e01e      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b84:	4b81      	ldr	r3, [pc, #516]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b90:	d106      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b9a:	4b7e      	ldr	r3, [pc, #504]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b9e:	e010      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ba0:	4b7a      	ldr	r3, [pc, #488]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bac:	d106      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb4:	d102      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005bb6:	4b78      	ldr	r3, [pc, #480]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bba:	e002      	b.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005bc0:	e251      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005bc2:	e250      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bc4:	4b75      	ldr	r3, [pc, #468]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc8:	e24d      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bce:	e24a      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	f040 809c 	bne.w	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005bda:	4b6c      	ldr	r3, [pc, #432]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005be2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bea:	d054      	beq.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bf2:	f200 808b 	bhi.w	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bfc:	f000 8083 	beq.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c06:	f200 8081 	bhi.w	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c10:	d02f      	beq.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c18:	d878      	bhi.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d004      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c26:	d012      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005c28:	e070      	b.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c2a:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c36:	d107      	bne.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fcd7 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c46:	e20e      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c4c:	e20b      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c4e:	4b4f      	ldr	r3, [pc, #316]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5a:	d107      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c5c:	f107 0318 	add.w	r3, r7, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fa1d 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c6a:	e1fc      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c70:	e1f9      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c72:	4b46      	ldr	r3, [pc, #280]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c7e:	d107      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fb5f 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c8e:	e1ea      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c94:	e1e7      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c96:	4b3d      	ldr	r3, [pc, #244]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c9e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ca0:	4b3a      	ldr	r3, [pc, #232]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d10c      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cb2:	4b36      	ldr	r3, [pc, #216]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	4a34      	ldr	r2, [pc, #208]	; (8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc4:	e01e      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005cc6:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd2:	d106      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cda:	d102      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005cdc:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce0:	e010      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ce2:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cee:	d106      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf6:	d102      	bne.n	8005cfe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cf8:	4b27      	ldr	r3, [pc, #156]	; (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfc:	e002      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d02:	e1b0      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005d04:	e1af      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d06:	4b25      	ldr	r3, [pc, #148]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d0a:	e1ac      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d10:	e1a9      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d18:	d17d      	bne.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005d1a:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d2a:	d039      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d32:	d86d      	bhi.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d012      	beq.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005d42:	e065      	b.n	8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d44:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d50:	d107      	bne.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d52:	f107 0318 	add.w	r3, r7, #24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f9a2 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d60:	e181      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d66:	e17e      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d74:	d107      	bne.n	8005d86 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fae4 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d84:	e16f      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d8a:	e16c      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	03d09000 	.word	0x03d09000
 8005d94:	003d0900 	.word	0x003d0900
 8005d98:	016e3600 	.word	0x016e3600
 8005d9c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005da0:	4ba0      	ldr	r3, [pc, #640]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005daa:	4b9e      	ldr	r3, [pc, #632]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d10c      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dbc:	4b99      	ldr	r3, [pc, #612]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	4a98      	ldr	r2, [pc, #608]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dce:	e01e      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dd0:	4b94      	ldr	r3, [pc, #592]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ddc:	d106      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de4:	d102      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005de6:	4b91      	ldr	r3, [pc, #580]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dea:	e010      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005dec:	4b8d      	ldr	r3, [pc, #564]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df8:	d106      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e00:	d102      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e02:	4b8b      	ldr	r3, [pc, #556]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e06:	e002      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e0c:	e12b      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8005e0e:	e12a      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e14:	e127      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1c:	d133      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e1e:	4b81      	ldr	r3, [pc, #516]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e26:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d004      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d012      	beq.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005e36:	e023      	b.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e38:	4b7a      	ldr	r3, [pc, #488]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e44:	d107      	bne.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fbd0 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e54:	e107      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e5a:	e104      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e5c:	4b71      	ldr	r3, [pc, #452]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e68:	d107      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6a:	f107 0318 	add.w	r3, r7, #24
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f916 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005e78:	e0f5      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e7e:	e0f2      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e84:	e0ef      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e8c:	f040 8091 	bne.w	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005e90:	4b64      	ldr	r3, [pc, #400]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e94:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005e98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005ea0:	f000 8081 	beq.w	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005eaa:	d87f      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eb2:	d06b      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005eba:	d877      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec2:	d056      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eca:	d86f      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ed2:	d03b      	beq.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eda:	d867      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee2:	d021      	beq.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eea:	d85f      	bhi.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ef8:	d004      	beq.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8005efa:	e057      	b.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005efc:	f000 f8ba 	bl	8006074 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f00:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005f02:	e0b0      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f04:	4b47      	ldr	r3, [pc, #284]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f10:	d107      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f12:	f107 0318 	add.w	r3, r7, #24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f8c2 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f20:	e0a1      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f26:	e09e      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f28:	4b3e      	ldr	r3, [pc, #248]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f34:	d107      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f36:	f107 030c 	add.w	r3, r7, #12
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fa04 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f44:	e08f      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f4a:	e08c      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f4c:	4b35      	ldr	r3, [pc, #212]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d109      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f58:	4b32      	ldr	r3, [pc, #200]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	08db      	lsrs	r3, r3, #3
 8005f5e:	f003 0303 	and.w	r3, r3, #3
 8005f62:	4a31      	ldr	r2, [pc, #196]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f6a:	e07c      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f70:	e079      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005f72:	4b2c      	ldr	r3, [pc, #176]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f7e:	d102      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8005f80:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8005f82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f84:	e06f      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f8a:	e06c      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005f8c:	4b25      	ldr	r3, [pc, #148]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8005f9a:	4b25      	ldr	r3, [pc, #148]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f9e:	e062      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa4:	e05f      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fa6:	4b23      	ldr	r3, [pc, #140]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005faa:	e05c      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fb0:	e059      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb8:	d153      	bne.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005fba:	4b1a      	ldr	r3, [pc, #104]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fca:	d035      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd2:	d843      	bhi.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d004      	beq.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fe0:	d00d      	beq.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8005fe2:	e03b      	b.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff0:	d102      	bne.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8005ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ff6:	e036      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ffc:	e033      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ffe:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006006:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800600a:	d107      	bne.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800600c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006010:	4618      	mov	r0, r3
 8006012:	f000 faed 	bl	80065f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800601a:	e024      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006020:	e021      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8006022:	bf00      	nop
 8006024:	58024400 	.word	0x58024400
 8006028:	03d09000 	.word	0x03d09000
 800602c:	003d0900 	.word	0x003d0900
 8006030:	016e3600 	.word	0x016e3600
 8006034:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006044:	d107      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006046:	f107 0318 	add.w	r3, r7, #24
 800604a:	4618      	mov	r0, r3
 800604c:	f000 f828 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006054:	e007      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800605a:	e004      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006060:	e001      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8006062:	2300      	movs	r3, #0
 8006064:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006068:	4618      	mov	r0, r3
 800606a:	3740      	adds	r7, #64	; 0x40
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	58024400 	.word	0x58024400

08006074 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8006078:	f7fe fc6a 	bl	8004950 <HAL_RCC_GetHCLKFreq>
 800607c:	4602      	mov	r2, r0
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4904      	ldr	r1, [pc, #16]	; (800609c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800608a:	5ccb      	ldrb	r3, [r1, r3]
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	58024400 	.word	0x58024400
 800609c:	0800a334 	.word	0x0800a334

080060a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b089      	sub	sp, #36	; 0x24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060a8:	4ba1      	ldr	r3, [pc, #644]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80060b2:	4b9f      	ldr	r3, [pc, #636]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	0b1b      	lsrs	r3, r3, #12
 80060b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060be:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80060ca:	4b99      	ldr	r3, [pc, #612]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8111 	beq.w	8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f000 8083 	beq.w	80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	f200 80a1 	bhi.w	8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d056      	beq.n	80061b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800610a:	e099      	b.n	8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800610c:	4b88      	ldr	r3, [pc, #544]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02d      	beq.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006118:	4b85      	ldr	r3, [pc, #532]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	4a84      	ldr	r2, [pc, #528]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006142:	4b7b      	ldr	r3, [pc, #492]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a03 	vldr	s12, [r7, #12]
 8006156:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006172:	e087      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006186:	4b6a      	ldr	r3, [pc, #424]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006196:	ed97 6a03 	vldr	s12, [r7, #12]
 800619a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800619e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b6:	e065      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ca:	4b59      	ldr	r3, [pc, #356]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061da:	ed97 6a03 	vldr	s12, [r7, #12]
 80061de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061fa:	e043      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800620a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620e:	4b48      	ldr	r3, [pc, #288]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006222:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800623e:	e021      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800624e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006252:	4b37      	ldr	r3, [pc, #220]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006262:	ed97 6a03 	vldr	s12, [r7, #12]
 8006266:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800626a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006282:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006284:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	0a5b      	lsrs	r3, r3, #9
 800628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800629e:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062aa:	ee17 2a90 	vmov	r2, s15
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80062b2:	4b1f      	ldr	r3, [pc, #124]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d8:	ee17 2a90 	vmov	r2, s15
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80062e0:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	0e1b      	lsrs	r3, r3, #24
 80062e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80062fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006306:	ee17 2a90 	vmov	r2, s15
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800630e:	e008      	b.n	8006322 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
}
 8006322:	bf00      	nop
 8006324:	3724      	adds	r7, #36	; 0x24
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	58024400 	.word	0x58024400
 8006334:	03d09000 	.word	0x03d09000
 8006338:	46000000 	.word	0x46000000
 800633c:	4c742400 	.word	0x4c742400
 8006340:	4a742400 	.word	0x4a742400
 8006344:	4bb71b00 	.word	0x4bb71b00

08006348 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006350:	4ba1      	ldr	r3, [pc, #644]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800635a:	4b9f      	ldr	r3, [pc, #636]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	0d1b      	lsrs	r3, r3, #20
 8006360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006364:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006366:	4b9c      	ldr	r3, [pc, #624]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006372:	4b99      	ldr	r3, [pc, #612]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8111 	beq.w	80065b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f000 8083 	beq.w	80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	f200 80a1 	bhi.w	80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d056      	beq.n	8006460 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063b2:	e099      	b.n	80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02d      	beq.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063c0:	4b85      	ldr	r3, [pc, #532]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a84      	ldr	r2, [pc, #528]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b7b      	ldr	r3, [pc, #492]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800641a:	e087      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006442:	eddf 5a67 	vldr	s11, [pc, #412]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800645e:	e065      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b59      	ldr	r3, [pc, #356]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a03 	vldr	s12, [r7, #12]
 8006486:	eddf 5a56 	vldr	s11, [pc, #344]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a2:	e043      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	4b48      	ldr	r3, [pc, #288]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064e6:	e021      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fa:	4b37      	ldr	r3, [pc, #220]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650a:	ed97 6a03 	vldr	s12, [r7, #12]
 800650e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800651e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800652c:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	0a5b      	lsrs	r3, r3, #9
 8006532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006546:	edd7 6a07 	vldr	s13, [r7, #28]
 800654a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006552:	ee17 2a90 	vmov	r2, s15
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800655a:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006574:	edd7 6a07 	vldr	s13, [r7, #28]
 8006578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006580:	ee17 2a90 	vmov	r2, s15
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800659e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ae:	ee17 2a90 	vmov	r2, s15
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065b6:	e008      	b.n	80065ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	46000000 	.word	0x46000000
 80065e4:	4c742400 	.word	0x4c742400
 80065e8:	4a742400 	.word	0x4a742400
 80065ec:	4bb71b00 	.word	0x4bb71b00

080065f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b089      	sub	sp, #36	; 0x24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065f8:	4ba0      	ldr	r3, [pc, #640]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80065fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fc:	f003 0303 	and.w	r3, r3, #3
 8006600:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006602:	4b9e      	ldr	r3, [pc, #632]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800660c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800660e:	4b9b      	ldr	r3, [pc, #620]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006618:	4b98      	ldr	r3, [pc, #608]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	08db      	lsrs	r3, r3, #3
 800661e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	fb02 f303 	mul.w	r3, r2, r3
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006630:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 8111 	beq.w	800685e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2b02      	cmp	r3, #2
 8006640:	f000 8083 	beq.w	800674a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	2b02      	cmp	r3, #2
 8006648:	f200 80a1 	bhi.w	800678e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d056      	beq.n	8006706 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006658:	e099      	b.n	800678e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800665a:	4b88      	ldr	r3, [pc, #544]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d02d      	beq.n	80066c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006666:	4b85      	ldr	r3, [pc, #532]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	08db      	lsrs	r3, r3, #3
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	4a83      	ldr	r2, [pc, #524]	; (8006880 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006672:	fa22 f303 	lsr.w	r3, r2, r3
 8006676:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	ee07 3a90 	vmov	s15, r3
 8006688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006690:	4b7a      	ldr	r3, [pc, #488]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80066a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80066c0:	e087      	b.n	80067d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006888 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80066d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d4:	4b69      	ldr	r3, [pc, #420]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80066ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006704:	e065      	b.n	80067d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006710:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800688c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006718:	4b58      	ldr	r3, [pc, #352]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006728:	ed97 6a03 	vldr	s12, [r7, #12]
 800672c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800673c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006748:	e043      	b.n	80067d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006754:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006890 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675c:	4b47      	ldr	r3, [pc, #284]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800675e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006770:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006788:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800678c:	e021      	b.n	80067d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006798:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006888 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800679c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a0:	4b36      	ldr	r3, [pc, #216]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80067b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80067d2:	4b2a      	ldr	r3, [pc, #168]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	0a5b      	lsrs	r3, r3, #9
 80067d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80067ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f8:	ee17 2a90 	vmov	r2, s15
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006800:	4b1e      	ldr	r3, [pc, #120]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800681a:	edd7 6a07 	vldr	s13, [r7, #28]
 800681e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006826:	ee17 2a90 	vmov	r2, s15
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800682e:	4b13      	ldr	r3, [pc, #76]	; (800687c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	0e1b      	lsrs	r3, r3, #24
 8006834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006838:	ee07 3a90 	vmov	s15, r3
 800683c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006848:	edd7 6a07 	vldr	s13, [r7, #28]
 800684c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006854:	ee17 2a90 	vmov	r2, s15
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800685c:	e008      	b.n	8006870 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	609a      	str	r2, [r3, #8]
}
 8006870:	bf00      	nop
 8006872:	3724      	adds	r7, #36	; 0x24
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	58024400 	.word	0x58024400
 8006880:	03d09000 	.word	0x03d09000
 8006884:	46000000 	.word	0x46000000
 8006888:	4c742400 	.word	0x4c742400
 800688c:	4a742400 	.word	0x4a742400
 8006890:	4bb71b00 	.word	0x4bb71b00

08006894 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068a2:	4b53      	ldr	r3, [pc, #332]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d101      	bne.n	80068b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e099      	b.n	80069e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068b2:	4b4f      	ldr	r3, [pc, #316]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a4e      	ldr	r2, [pc, #312]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80068b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068be:	f7fa fe87 	bl	80015d0 <HAL_GetTick>
 80068c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068c4:	e008      	b.n	80068d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068c6:	f7fa fe83 	bl	80015d0 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e086      	b.n	80069e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068d8:	4b45      	ldr	r3, [pc, #276]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1f0      	bne.n	80068c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80068e4:	4b42      	ldr	r3, [pc, #264]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	493f      	ldr	r1, [pc, #252]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	628b      	str	r3, [r1, #40]	; 0x28
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	3b01      	subs	r3, #1
 8006908:	025b      	lsls	r3, r3, #9
 800690a:	b29b      	uxth	r3, r3
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	3b01      	subs	r3, #1
 8006914:	041b      	lsls	r3, r3, #16
 8006916:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	3b01      	subs	r3, #1
 8006922:	061b      	lsls	r3, r3, #24
 8006924:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006928:	4931      	ldr	r1, [pc, #196]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800692a:	4313      	orrs	r3, r2
 800692c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800692e:	4b30      	ldr	r3, [pc, #192]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	492d      	ldr	r1, [pc, #180]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800693c:	4313      	orrs	r3, r2
 800693e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006940:	4b2b      	ldr	r3, [pc, #172]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	f023 0220 	bic.w	r2, r3, #32
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	4928      	ldr	r1, [pc, #160]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800694e:	4313      	orrs	r3, r2
 8006950:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006952:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	4a26      	ldr	r2, [pc, #152]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006958:	f023 0310 	bic.w	r3, r3, #16
 800695c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800695e:	4b24      	ldr	r3, [pc, #144]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006962:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <RCCEx_PLL2_Config+0x160>)
 8006964:	4013      	ands	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	69d2      	ldr	r2, [r2, #28]
 800696a:	00d2      	lsls	r2, r2, #3
 800696c:	4920      	ldr	r1, [pc, #128]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800696e:	4313      	orrs	r3, r2
 8006970:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006972:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	4a1e      	ldr	r2, [pc, #120]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006978:	f043 0310 	orr.w	r3, r3, #16
 800697c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d106      	bne.n	8006992 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 8006986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006988:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800698a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800698e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006990:	e00f      	b.n	80069b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d106      	bne.n	80069a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006998:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800699a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699c:	4a14      	ldr	r2, [pc, #80]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 800699e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069a4:	e005      	b.n	80069b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	4a11      	ldr	r2, [pc, #68]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80069ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069b2:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a0e      	ldr	r2, [pc, #56]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80069b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069be:	f7fa fe07 	bl	80015d0 <HAL_GetTick>
 80069c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069c4:	e008      	b.n	80069d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069c6:	f7fa fe03 	bl	80015d0 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e006      	b.n	80069e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <RCCEx_PLL2_Config+0x15c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80069e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	58024400 	.word	0x58024400
 80069f4:	ffff0007 	.word	0xffff0007

080069f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a06:	4b53      	ldr	r3, [pc, #332]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	f003 0303 	and.w	r3, r3, #3
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d101      	bne.n	8006a16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e099      	b.n	8006b4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a16:	4b4f      	ldr	r3, [pc, #316]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a4e      	ldr	r2, [pc, #312]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a22:	f7fa fdd5 	bl	80015d0 <HAL_GetTick>
 8006a26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a28:	e008      	b.n	8006a3c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a2a:	f7fa fdd1 	bl	80015d0 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e086      	b.n	8006b4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a3c:	4b45      	ldr	r3, [pc, #276]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f0      	bne.n	8006a2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006a48:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	493f      	ldr	r1, [pc, #252]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	628b      	str	r3, [r1, #40]	; 0x28
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	025b      	lsls	r3, r3, #9
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a7e:	431a      	orrs	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	3b01      	subs	r3, #1
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a8c:	4931      	ldr	r1, [pc, #196]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006a92:	4b30      	ldr	r3, [pc, #192]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	492d      	ldr	r1, [pc, #180]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006aa4:	4b2b      	ldr	r3, [pc, #172]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	4928      	ldr	r1, [pc, #160]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006ab6:	4b27      	ldr	r3, [pc, #156]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aba:	4a26      	ldr	r2, [pc, #152]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ac2:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ac6:	4b24      	ldr	r3, [pc, #144]	; (8006b58 <RCCEx_PLL3_Config+0x160>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	69d2      	ldr	r2, [r2, #28]
 8006ace:	00d2      	lsls	r2, r2, #3
 8006ad0:	4920      	ldr	r1, [pc, #128]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006ad6:	4b1f      	ldr	r3, [pc, #124]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	4a1e      	ldr	r2, [pc, #120]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d106      	bne.n	8006af6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a19      	ldr	r2, [pc, #100]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006af4:	e00f      	b.n	8006b16 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d106      	bne.n	8006b0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b00:	4a14      	ldr	r2, [pc, #80]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b08:	e005      	b.n	8006b16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	4a11      	ldr	r2, [pc, #68]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a0e      	ldr	r2, [pc, #56]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b22:	f7fa fd55 	bl	80015d0 <HAL_GetTick>
 8006b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b28:	e008      	b.n	8006b3c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b2a:	f7fa fd51 	bl	80015d0 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e006      	b.n	8006b4a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <RCCEx_PLL3_Config+0x15c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	58024400 	.word	0x58024400
 8006b58:	ffff0007 	.word	0xffff0007

08006b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e049      	b.n	8006c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fa fb70 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f000 fd06 	bl	80075ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e049      	b.n	8006cb0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f841 	bl	8006cb8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	4619      	mov	r1, r3
 8006c48:	4610      	mov	r0, r2
 8006c4a:	f000 fcaf 	bl	80075ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_IC_Start_IT+0x1e>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	e023      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x66>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_IC_Start_IT+0x2e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	e01b      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x66>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_IC_Start_IT+0x3e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	e013      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x66>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b0c      	cmp	r3, #12
 8006d0e:	d104      	bne.n	8006d1a <HAL_TIM_IC_Start_IT+0x4e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	e00b      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x66>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d104      	bne.n	8006d2a <HAL_TIM_IC_Start_IT+0x5e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	e003      	b.n	8006d32 <HAL_TIM_IC_Start_IT+0x66>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <HAL_TIM_IC_Start_IT+0x78>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e013      	b.n	8006d6c <HAL_TIM_IC_Start_IT+0xa0>
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d104      	bne.n	8006d54 <HAL_TIM_IC_Start_IT+0x88>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e00b      	b.n	8006d6c <HAL_TIM_IC_Start_IT+0xa0>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d104      	bne.n	8006d64 <HAL_TIM_IC_Start_IT+0x98>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	e003      	b.n	8006d6c <HAL_TIM_IC_Start_IT+0xa0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d102      	bne.n	8006d7a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d74:	7b7b      	ldrb	r3, [r7, #13]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d001      	beq.n	8006d7e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e0e2      	b.n	8006f44 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_IC_Start_IT+0xc2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d8c:	e023      	b.n	8006dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d104      	bne.n	8006d9e <HAL_TIM_IC_Start_IT+0xd2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d9c:	e01b      	b.n	8006dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d104      	bne.n	8006dae <HAL_TIM_IC_Start_IT+0xe2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006dac:	e013      	b.n	8006dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	d104      	bne.n	8006dbe <HAL_TIM_IC_Start_IT+0xf2>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dbc:	e00b      	b.n	8006dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b10      	cmp	r3, #16
 8006dc2:	d104      	bne.n	8006dce <HAL_TIM_IC_Start_IT+0x102>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dcc:	e003      	b.n	8006dd6 <HAL_TIM_IC_Start_IT+0x10a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_IC_Start_IT+0x11a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006de4:	e013      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x142>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d104      	bne.n	8006df6 <HAL_TIM_IC_Start_IT+0x12a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006df4:	e00b      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x142>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d104      	bne.n	8006e06 <HAL_TIM_IC_Start_IT+0x13a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e04:	e003      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x142>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b0c      	cmp	r3, #12
 8006e12:	d841      	bhi.n	8006e98 <HAL_TIM_IC_Start_IT+0x1cc>
 8006e14:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <HAL_TIM_IC_Start_IT+0x150>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006e99 	.word	0x08006e99
 8006e24:	08006e99 	.word	0x08006e99
 8006e28:	08006e99 	.word	0x08006e99
 8006e2c:	08006e63 	.word	0x08006e63
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006e99 	.word	0x08006e99
 8006e3c:	08006e75 	.word	0x08006e75
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e99 	.word	0x08006e99
 8006e4c:	08006e87 	.word	0x08006e87
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0202 	orr.w	r2, r2, #2
 8006e5e:	60da      	str	r2, [r3, #12]
      break;
 8006e60:	e01d      	b.n	8006e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0204 	orr.w	r2, r2, #4
 8006e70:	60da      	str	r2, [r3, #12]
      break;
 8006e72:	e014      	b.n	8006e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0208 	orr.w	r2, r2, #8
 8006e82:	60da      	str	r2, [r3, #12]
      break;
 8006e84:	e00b      	b.n	8006e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0210 	orr.w	r2, r2, #16
 8006e94:	60da      	str	r2, [r3, #12]
      break;
 8006e96:	e002      	b.n	8006e9e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d14e      	bne.n	8006f42 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 fddf 	bl	8007a70 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a25      	ldr	r2, [pc, #148]	; (8006f4c <HAL_TIM_IC_Start_IT+0x280>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d022      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec4:	d01d      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <HAL_TIM_IC_Start_IT+0x284>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d018      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <HAL_TIM_IC_Start_IT+0x288>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d013      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <HAL_TIM_IC_Start_IT+0x28c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00e      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <HAL_TIM_IC_Start_IT+0x290>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d009      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIM_IC_Start_IT+0x294>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d004      	beq.n	8006f02 <HAL_TIM_IC_Start_IT+0x236>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a19      	ldr	r2, [pc, #100]	; (8006f64 <HAL_TIM_IC_Start_IT+0x298>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d115      	bne.n	8006f2e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <HAL_TIM_IC_Start_IT+0x29c>)
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	d015      	beq.n	8006f40 <HAL_TIM_IC_Start_IT+0x274>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1a:	d011      	beq.n	8006f40 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2c:	e008      	b.n	8006f40 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0201 	orr.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e000      	b.n	8006f42 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40010400 	.word	0x40010400
 8006f60:	40001800 	.word	0x40001800
 8006f64:	40014000 	.word	0x40014000
 8006f68:	00010007 	.word	0x00010007

08006f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d122      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0202 	mvn.w	r2, #2
 8006f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7f9 fdf6 	bl	8000ba0 <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fada 	bl	8007570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fae1 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0204 	mvn.w	r2, #4
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7f9 fdcc 	bl	8000ba0 <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fab0 	bl	8007570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fab7 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b08      	cmp	r3, #8
 8007028:	d122      	bne.n	8007070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b08      	cmp	r3, #8
 8007036:	d11b      	bne.n	8007070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0208 	mvn.w	r2, #8
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2204      	movs	r2, #4
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7f9 fda2 	bl	8000ba0 <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa86 	bl	8007570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa8d 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0310 	and.w	r3, r3, #16
 800707a:	2b10      	cmp	r3, #16
 800707c:	d122      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0310 	and.w	r3, r3, #16
 8007088:	2b10      	cmp	r3, #16
 800708a:	d11b      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0210 	mvn.w	r2, #16
 8007094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2208      	movs	r2, #8
 800709a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7f9 fd78 	bl	8000ba0 <HAL_TIM_IC_CaptureCallback>
 80070b0:	e005      	b.n	80070be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa5c 	bl	8007570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa63 	bl	8007584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10e      	bne.n	80070f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d107      	bne.n	80070f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0201 	mvn.w	r2, #1
 80070e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa36 	bl	800755c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fa:	2b80      	cmp	r3, #128	; 0x80
 80070fc:	d10e      	bne.n	800711c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007108:	2b80      	cmp	r3, #128	; 0x80
 800710a:	d107      	bne.n	800711c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fd68 	bl	8007bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800712a:	d10e      	bne.n	800714a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007136:	2b80      	cmp	r3, #128	; 0x80
 8007138:	d107      	bne.n	800714a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fd5b 	bl	8007c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d10e      	bne.n	8007176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d107      	bne.n	8007176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800716e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa11 	bl	8007598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b20      	cmp	r3, #32
 8007182:	d10e      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0220 	mvn.w	r2, #32
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fd1b 	bl	8007bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b086      	sub	sp, #24
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d101      	bne.n	80071c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80071c4:	2302      	movs	r3, #2
 80071c6:	e088      	b.n	80072da <HAL_TIM_IC_ConfigChannel+0x130>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d11b      	bne.n	800720e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f000 fa7b 	bl	80076e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 020c 	bic.w	r2, r2, #12
 80071f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6999      	ldr	r1, [r3, #24]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	619a      	str	r2, [r3, #24]
 800720c:	e060      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d11c      	bne.n	800724e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6818      	ldr	r0, [r3, #0]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6819      	ldr	r1, [r3, #0]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f000 faff 	bl	8007826 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007236:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6999      	ldr	r1, [r3, #24]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	021a      	lsls	r2, r3, #8
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	619a      	str	r2, [r3, #24]
 800724c:	e040      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b08      	cmp	r3, #8
 8007252:	d11b      	bne.n	800728c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6819      	ldr	r1, [r3, #0]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f000 fb4c 	bl	8007900 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69da      	ldr	r2, [r3, #28]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 020c 	bic.w	r2, r2, #12
 8007276:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69d9      	ldr	r1, [r3, #28]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	689a      	ldr	r2, [r3, #8]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	61da      	str	r2, [r3, #28]
 800728a:	e021      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b0c      	cmp	r3, #12
 8007290:	d11c      	bne.n	80072cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f000 fb69 	bl	8007978 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69da      	ldr	r2, [r3, #28]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69d9      	ldr	r1, [r3, #28]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	021a      	lsls	r2, r3, #8
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	61da      	str	r2, [r3, #28]
 80072ca:	e001      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_TIM_ConfigClockSource+0x1c>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e0dc      	b.n	80074ba <HAL_TIM_ConfigClockSource+0x1d6>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	4b6a      	ldr	r3, [pc, #424]	; (80074c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800731c:	4013      	ands	r3, r2
 800731e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a64      	ldr	r2, [pc, #400]	; (80074c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007336:	4293      	cmp	r3, r2
 8007338:	f000 80a9 	beq.w	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 800733c:	4a62      	ldr	r2, [pc, #392]	; (80074c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	f200 80ae 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007344:	4a61      	ldr	r2, [pc, #388]	; (80074cc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	f000 80a1 	beq.w	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 800734c:	4a5f      	ldr	r2, [pc, #380]	; (80074cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	f200 80a6 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007354:	4a5e      	ldr	r2, [pc, #376]	; (80074d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007356:	4293      	cmp	r3, r2
 8007358:	f000 8099 	beq.w	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 800735c:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800735e:	4293      	cmp	r3, r2
 8007360:	f200 809e 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007364:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007368:	f000 8091 	beq.w	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 800736c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007370:	f200 8096 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007378:	f000 8089 	beq.w	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 800737c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007380:	f200 808e 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007388:	d03e      	beq.n	8007408 <HAL_TIM_ConfigClockSource+0x124>
 800738a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800738e:	f200 8087 	bhi.w	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	f000 8086 	beq.w	80074a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d87f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073a0:	2b70      	cmp	r3, #112	; 0x70
 80073a2:	d01a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0xf6>
 80073a4:	2b70      	cmp	r3, #112	; 0x70
 80073a6:	d87b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073a8:	2b60      	cmp	r3, #96	; 0x60
 80073aa:	d050      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x16a>
 80073ac:	2b60      	cmp	r3, #96	; 0x60
 80073ae:	d877      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073b0:	2b50      	cmp	r3, #80	; 0x50
 80073b2:	d03c      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x14a>
 80073b4:	2b50      	cmp	r3, #80	; 0x50
 80073b6:	d873      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073b8:	2b40      	cmp	r3, #64	; 0x40
 80073ba:	d058      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x18a>
 80073bc:	2b40      	cmp	r3, #64	; 0x40
 80073be:	d86f      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073c0:	2b30      	cmp	r3, #48	; 0x30
 80073c2:	d064      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 80073c4:	2b30      	cmp	r3, #48	; 0x30
 80073c6:	d86b      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073c8:	2b20      	cmp	r3, #32
 80073ca:	d060      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	d867      	bhi.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05c      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 80073d4:	2b10      	cmp	r3, #16
 80073d6:	d05a      	beq.n	800748e <HAL_TIM_ConfigClockSource+0x1aa>
 80073d8:	e062      	b.n	80074a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6899      	ldr	r1, [r3, #8]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685a      	ldr	r2, [r3, #4]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f000 fb21 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	609a      	str	r2, [r3, #8]
      break;
 8007406:	e04f      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6899      	ldr	r1, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f000 fb0a 	bl	8007a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	689a      	ldr	r2, [r3, #8]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800742a:	609a      	str	r2, [r3, #8]
      break;
 800742c:	e03c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 f9c4 	bl	80077c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2150      	movs	r1, #80	; 0x50
 8007446:	4618      	mov	r0, r3
 8007448:	f000 fad4 	bl	80079f4 <TIM_ITRx_SetConfig>
      break;
 800744c:	e02c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fa20 	bl	80078a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2160      	movs	r1, #96	; 0x60
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fac4 	bl	80079f4 <TIM_ITRx_SetConfig>
      break;
 800746c:	e01c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6859      	ldr	r1, [r3, #4]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	461a      	mov	r2, r3
 800747c:	f000 f9a4 	bl	80077c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2140      	movs	r1, #64	; 0x40
 8007486:	4618      	mov	r0, r3
 8007488:	f000 fab4 	bl	80079f4 <TIM_ITRx_SetConfig>
      break;
 800748c:	e00c      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 faab 	bl	80079f4 <TIM_ITRx_SetConfig>
      break;
 800749e:	e003      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	73fb      	strb	r3, [r7, #15]
      break;
 80074a4:	e000      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80074a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	ffceff88 	.word	0xffceff88
 80074c8:	00100040 	.word	0x00100040
 80074cc:	00100030 	.word	0x00100030
 80074d0:	00100020 	.word	0x00100020

080074d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b0c      	cmp	r3, #12
 80074e6:	d831      	bhi.n	800754c <HAL_TIM_ReadCapturedValue+0x78>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007525 	.word	0x08007525
 80074f4:	0800754d 	.word	0x0800754d
 80074f8:	0800754d 	.word	0x0800754d
 80074fc:	0800754d 	.word	0x0800754d
 8007500:	0800752f 	.word	0x0800752f
 8007504:	0800754d 	.word	0x0800754d
 8007508:	0800754d 	.word	0x0800754d
 800750c:	0800754d 	.word	0x0800754d
 8007510:	08007539 	.word	0x08007539
 8007514:	0800754d 	.word	0x0800754d
 8007518:	0800754d 	.word	0x0800754d
 800751c:	0800754d 	.word	0x0800754d
 8007520:	08007543 	.word	0x08007543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	60fb      	str	r3, [r7, #12]

      break;
 800752c:	e00f      	b.n	800754e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	60fb      	str	r3, [r7, #12]

      break;
 8007536:	e00a      	b.n	800754e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	60fb      	str	r3, [r7, #12]

      break;
 8007540:	e005      	b.n	800754e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	60fb      	str	r3, [r7, #12]

      break;
 800754a:	e000      	b.n	800754e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800754c:	bf00      	nop
  }

  return tmpreg;
 800754e:	68fb      	ldr	r3, [r7, #12]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a40      	ldr	r2, [pc, #256]	; (80076c0 <TIM_Base_SetConfig+0x114>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d013      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ca:	d00f      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a3d      	ldr	r2, [pc, #244]	; (80076c4 <TIM_Base_SetConfig+0x118>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00b      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a3c      	ldr	r2, [pc, #240]	; (80076c8 <TIM_Base_SetConfig+0x11c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d007      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a3b      	ldr	r2, [pc, #236]	; (80076cc <TIM_Base_SetConfig+0x120>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <TIM_Base_SetConfig+0x40>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a3a      	ldr	r2, [pc, #232]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d108      	bne.n	80075fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a2f      	ldr	r2, [pc, #188]	; (80076c0 <TIM_Base_SetConfig+0x114>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d01f      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760c:	d01b      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a2c      	ldr	r2, [pc, #176]	; (80076c4 <TIM_Base_SetConfig+0x118>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d017      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a2b      	ldr	r2, [pc, #172]	; (80076c8 <TIM_Base_SetConfig+0x11c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d013      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <TIM_Base_SetConfig+0x120>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d00f      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d00b      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a28      	ldr	r2, [pc, #160]	; (80076d4 <TIM_Base_SetConfig+0x128>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d007      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a27      	ldr	r2, [pc, #156]	; (80076d8 <TIM_Base_SetConfig+0x12c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d003      	beq.n	8007646 <TIM_Base_SetConfig+0x9a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a26      	ldr	r2, [pc, #152]	; (80076dc <TIM_Base_SetConfig+0x130>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d108      	bne.n	8007658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800764c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	4313      	orrs	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	689a      	ldr	r2, [r3, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4a10      	ldr	r2, [pc, #64]	; (80076c0 <TIM_Base_SetConfig+0x114>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00f      	beq.n	80076a4 <TIM_Base_SetConfig+0xf8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <TIM_Base_SetConfig+0x124>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00b      	beq.n	80076a4 <TIM_Base_SetConfig+0xf8>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <TIM_Base_SetConfig+0x128>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d007      	beq.n	80076a4 <TIM_Base_SetConfig+0xf8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a10      	ldr	r2, [pc, #64]	; (80076d8 <TIM_Base_SetConfig+0x12c>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_Base_SetConfig+0xf8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a0f      	ldr	r2, [pc, #60]	; (80076dc <TIM_Base_SetConfig+0x130>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d103      	bne.n	80076ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	691a      	ldr	r2, [r3, #16]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	615a      	str	r2, [r3, #20]
}
 80076b2:	bf00      	nop
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40010000 	.word	0x40010000
 80076c4:	40000400 	.word	0x40000400
 80076c8:	40000800 	.word	0x40000800
 80076cc:	40000c00 	.word	0x40000c00
 80076d0:	40010400 	.word	0x40010400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800

080076e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
 80076ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f023 0201 	bic.w	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a28      	ldr	r2, [pc, #160]	; (80077ac <TIM_TI1_SetConfig+0xcc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d01b      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d017      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4a25      	ldr	r2, [pc, #148]	; (80077b0 <TIM_TI1_SetConfig+0xd0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d013      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a24      	ldr	r2, [pc, #144]	; (80077b4 <TIM_TI1_SetConfig+0xd4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00f      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4a23      	ldr	r2, [pc, #140]	; (80077b8 <TIM_TI1_SetConfig+0xd8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00b      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4a22      	ldr	r2, [pc, #136]	; (80077bc <TIM_TI1_SetConfig+0xdc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d007      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4a21      	ldr	r2, [pc, #132]	; (80077c0 <TIM_TI1_SetConfig+0xe0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d003      	beq.n	8007746 <TIM_TI1_SetConfig+0x66>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4a20      	ldr	r2, [pc, #128]	; (80077c4 <TIM_TI1_SetConfig+0xe4>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d101      	bne.n	800774a <TIM_TI1_SetConfig+0x6a>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <TIM_TI1_SetConfig+0x6c>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f023 0303 	bic.w	r3, r3, #3
 8007756:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e003      	b.n	800776a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007770:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	b2db      	uxtb	r3, r3
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f023 030a 	bic.w	r3, r3, #10
 8007784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f003 030a 	and.w	r3, r3, #10
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	621a      	str	r2, [r3, #32]
}
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40010400 	.word	0x40010400
 80077c0:	40001800 	.word	0x40001800
 80077c4:	40014000 	.word	0x40014000

080077c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	f023 0201 	bic.w	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f023 030a 	bic.w	r3, r3, #10
 8007804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	621a      	str	r2, [r3, #32]
}
 800781a:	bf00      	nop
 800781c:	371c      	adds	r7, #28
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007826:	b480      	push	{r7}
 8007828:	b087      	sub	sp, #28
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	f023 0210 	bic.w	r2, r3, #16
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007852:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	031b      	lsls	r3, r3, #12
 800786a:	b29b      	uxth	r3, r3
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007878:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007882:	693a      	ldr	r2, [r7, #16]
 8007884:	4313      	orrs	r3, r2
 8007886:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	621a      	str	r2, [r3, #32]
}
 8007894:	bf00      	nop
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f023 0210 	bic.w	r2, r3, #16
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	031b      	lsls	r3, r3, #12
 80078d0:	697a      	ldr	r2, [r7, #20]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f023 0303 	bic.w	r3, r3, #3
 800792c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800793c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	b2db      	uxtb	r3, r3
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	4313      	orrs	r3, r2
 8007948:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007950:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	4313      	orrs	r3, r2
 800795e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	621a      	str	r2, [r3, #32]
}
 800796c:	bf00      	nop
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
 8007984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6a1b      	ldr	r3, [r3, #32]
 800799c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	021b      	lsls	r3, r3, #8
 80079aa:	697a      	ldr	r2, [r7, #20]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	031b      	lsls	r3, r3, #12
 80079bc:	b29b      	uxth	r3, r3
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	031b      	lsls	r3, r3, #12
 80079d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	693a      	ldr	r2, [r7, #16]
 80079e4:	621a      	str	r2, [r3, #32]
}
 80079e6:	bf00      	nop
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr
	...

080079f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <TIM_ITRx_SetConfig+0x38>)
 8007a08:	4013      	ands	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f043 0307 	orr.w	r3, r3, #7
 8007a16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	609a      	str	r2, [r3, #8]
}
 8007a1e:	bf00      	nop
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	ffcfff8f 	.word	0xffcfff8f

08007a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	021a      	lsls	r2, r3, #8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	609a      	str	r2, [r3, #8]
}
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 031f 	and.w	r3, r3, #31
 8007a82:	2201      	movs	r2, #1
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6a1a      	ldr	r2, [r3, #32]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	401a      	ands	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a1a      	ldr	r2, [r3, #32]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 031f 	and.w	r3, r3, #31
 8007aa2:	6879      	ldr	r1, [r7, #4]
 8007aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e06d      	b.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a30      	ldr	r2, [pc, #192]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a2f      	ldr	r2, [pc, #188]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d108      	bne.n	8007b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a20      	ldr	r2, [pc, #128]	; (8007bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d022      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b46:	d01d      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d018      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1c      	ldr	r2, [pc, #112]	; (8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d013      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1a      	ldr	r2, [pc, #104]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00e      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d009      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a16      	ldr	r2, [pc, #88]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10c      	bne.n	8007b9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	40010000 	.word	0x40010000
 8007bc0:	40010400 	.word	0x40010400
 8007bc4:	40000400 	.word	0x40000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	40000c00 	.word	0x40000c00
 8007bd0:	40001800 	.word	0x40001800
 8007bd4:	40014000 	.word	0x40014000

08007bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e042      	b.n	8007cac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d106      	bne.n	8007c3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7f9 fbb3 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2224      	movs	r2, #36	; 0x24
 8007c42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f022 0201 	bic.w	r2, r2, #1
 8007c54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f8c2 	bl	8007de0 <UART_SetConfig>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d101      	bne.n	8007c66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e022      	b.n	8007cac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 ff14 	bl	8008a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0201 	orr.w	r2, r2, #1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 ff9b 	bl	8008be0 <UART_CheckIdleState>
 8007caa:	4603      	mov	r3, r0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	f040 8083 	bne.w	8007dd6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <HAL_UART_Transmit+0x28>
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e07b      	b.n	8007dd8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_UART_Transmit+0x3a>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e074      	b.n	8007dd8 <HAL_UART_Transmit+0x124>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2221      	movs	r2, #33	; 0x21
 8007d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d06:	f7f9 fc63 	bl	80015d0 <HAL_GetTick>
 8007d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	88fa      	ldrh	r2, [r7, #6]
 8007d10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	88fa      	ldrh	r2, [r7, #6]
 8007d18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d24:	d108      	bne.n	8007d38 <HAL_UART_Transmit+0x84>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d104      	bne.n	8007d38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	61bb      	str	r3, [r7, #24]
 8007d36:	e003      	b.n	8007d40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007d48:	e02c      	b.n	8007da4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2200      	movs	r2, #0
 8007d52:	2180      	movs	r1, #128	; 0x80
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 ff8e 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e039      	b.n	8007dd8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10b      	bne.n	8007d82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	3302      	adds	r3, #2
 8007d7e:	61bb      	str	r3, [r7, #24]
 8007d80:	e007      	b.n	8007d92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	781a      	ldrb	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1cc      	bne.n	8007d4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2200      	movs	r2, #0
 8007db8:	2140      	movs	r1, #64	; 0x40
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 ff5b 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e006      	b.n	8007dd8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e000      	b.n	8007dd8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007dd6:	2302      	movs	r3, #2
  }
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3720      	adds	r7, #32
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007de0:	b5b0      	push	{r4, r5, r7, lr}
 8007de2:	b08e      	sub	sp, #56	; 0x38
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	431a      	orrs	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4bbf      	ldr	r3, [pc, #764]	; (800810c <UART_SetConfig+0x32c>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e16:	430b      	orrs	r3, r1
 8007e18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4ab5      	ldr	r2, [pc, #724]	; (8008110 <UART_SetConfig+0x330>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d004      	beq.n	8007e4a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e46:	4313      	orrs	r3, r2
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	4bb0      	ldr	r3, [pc, #704]	; (8008114 <UART_SetConfig+0x334>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	f023 010f 	bic.w	r1, r3, #15
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4aa7      	ldr	r2, [pc, #668]	; (8008118 <UART_SetConfig+0x338>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d176      	bne.n	8007f6c <UART_SetConfig+0x18c>
 8007e7e:	4ba7      	ldr	r3, [pc, #668]	; (800811c <UART_SetConfig+0x33c>)
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e86:	2b28      	cmp	r3, #40	; 0x28
 8007e88:	d86c      	bhi.n	8007f64 <UART_SetConfig+0x184>
 8007e8a:	a201      	add	r2, pc, #4	; (adr r2, 8007e90 <UART_SetConfig+0xb0>)
 8007e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e90:	08007f35 	.word	0x08007f35
 8007e94:	08007f65 	.word	0x08007f65
 8007e98:	08007f65 	.word	0x08007f65
 8007e9c:	08007f65 	.word	0x08007f65
 8007ea0:	08007f65 	.word	0x08007f65
 8007ea4:	08007f65 	.word	0x08007f65
 8007ea8:	08007f65 	.word	0x08007f65
 8007eac:	08007f65 	.word	0x08007f65
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f65 	.word	0x08007f65
 8007eb8:	08007f65 	.word	0x08007f65
 8007ebc:	08007f65 	.word	0x08007f65
 8007ec0:	08007f65 	.word	0x08007f65
 8007ec4:	08007f65 	.word	0x08007f65
 8007ec8:	08007f65 	.word	0x08007f65
 8007ecc:	08007f65 	.word	0x08007f65
 8007ed0:	08007f45 	.word	0x08007f45
 8007ed4:	08007f65 	.word	0x08007f65
 8007ed8:	08007f65 	.word	0x08007f65
 8007edc:	08007f65 	.word	0x08007f65
 8007ee0:	08007f65 	.word	0x08007f65
 8007ee4:	08007f65 	.word	0x08007f65
 8007ee8:	08007f65 	.word	0x08007f65
 8007eec:	08007f65 	.word	0x08007f65
 8007ef0:	08007f4d 	.word	0x08007f4d
 8007ef4:	08007f65 	.word	0x08007f65
 8007ef8:	08007f65 	.word	0x08007f65
 8007efc:	08007f65 	.word	0x08007f65
 8007f00:	08007f65 	.word	0x08007f65
 8007f04:	08007f65 	.word	0x08007f65
 8007f08:	08007f65 	.word	0x08007f65
 8007f0c:	08007f65 	.word	0x08007f65
 8007f10:	08007f55 	.word	0x08007f55
 8007f14:	08007f65 	.word	0x08007f65
 8007f18:	08007f65 	.word	0x08007f65
 8007f1c:	08007f65 	.word	0x08007f65
 8007f20:	08007f65 	.word	0x08007f65
 8007f24:	08007f65 	.word	0x08007f65
 8007f28:	08007f65 	.word	0x08007f65
 8007f2c:	08007f65 	.word	0x08007f65
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	2301      	movs	r3, #1
 8007f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f3a:	e326      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f42:	e322      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f4a:	e31e      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f52:	e31a      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f54:	2320      	movs	r3, #32
 8007f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f5a:	e316      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f5c:	2340      	movs	r3, #64	; 0x40
 8007f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f62:	e312      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f64:	2380      	movs	r3, #128	; 0x80
 8007f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007f6a:	e30e      	b.n	800858a <UART_SetConfig+0x7aa>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a6b      	ldr	r2, [pc, #428]	; (8008120 <UART_SetConfig+0x340>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d130      	bne.n	8007fd8 <UART_SetConfig+0x1f8>
 8007f76:	4b69      	ldr	r3, [pc, #420]	; (800811c <UART_SetConfig+0x33c>)
 8007f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	2b05      	cmp	r3, #5
 8007f80:	d826      	bhi.n	8007fd0 <UART_SetConfig+0x1f0>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x1a8>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fa1 	.word	0x08007fa1
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fc1 	.word	0x08007fc1
 8007f9c:	08007fc9 	.word	0x08007fc9
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fa6:	e2f0      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fa8:	2304      	movs	r3, #4
 8007faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fae:	e2ec      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fb6:	e2e8      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fbe:	e2e4      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fc0:	2320      	movs	r3, #32
 8007fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fc6:	e2e0      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fc8:	2340      	movs	r3, #64	; 0x40
 8007fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fce:	e2dc      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007fd6:	e2d8      	b.n	800858a <UART_SetConfig+0x7aa>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a51      	ldr	r2, [pc, #324]	; (8008124 <UART_SetConfig+0x344>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d130      	bne.n	8008044 <UART_SetConfig+0x264>
 8007fe2:	4b4e      	ldr	r3, [pc, #312]	; (800811c <UART_SetConfig+0x33c>)
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d826      	bhi.n	800803c <UART_SetConfig+0x25c>
 8007fee:	a201      	add	r2, pc, #4	; (adr r2, 8007ff4 <UART_SetConfig+0x214>)
 8007ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff4:	0800800d 	.word	0x0800800d
 8007ff8:	08008015 	.word	0x08008015
 8007ffc:	0800801d 	.word	0x0800801d
 8008000:	08008025 	.word	0x08008025
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008035 	.word	0x08008035
 800800c:	2300      	movs	r3, #0
 800800e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008012:	e2ba      	b.n	800858a <UART_SetConfig+0x7aa>
 8008014:	2304      	movs	r3, #4
 8008016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800801a:	e2b6      	b.n	800858a <UART_SetConfig+0x7aa>
 800801c:	2308      	movs	r3, #8
 800801e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008022:	e2b2      	b.n	800858a <UART_SetConfig+0x7aa>
 8008024:	2310      	movs	r3, #16
 8008026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802a:	e2ae      	b.n	800858a <UART_SetConfig+0x7aa>
 800802c:	2320      	movs	r3, #32
 800802e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008032:	e2aa      	b.n	800858a <UART_SetConfig+0x7aa>
 8008034:	2340      	movs	r3, #64	; 0x40
 8008036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803a:	e2a6      	b.n	800858a <UART_SetConfig+0x7aa>
 800803c:	2380      	movs	r3, #128	; 0x80
 800803e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008042:	e2a2      	b.n	800858a <UART_SetConfig+0x7aa>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a37      	ldr	r2, [pc, #220]	; (8008128 <UART_SetConfig+0x348>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d130      	bne.n	80080b0 <UART_SetConfig+0x2d0>
 800804e:	4b33      	ldr	r3, [pc, #204]	; (800811c <UART_SetConfig+0x33c>)
 8008050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b05      	cmp	r3, #5
 8008058:	d826      	bhi.n	80080a8 <UART_SetConfig+0x2c8>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <UART_SetConfig+0x280>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008079 	.word	0x08008079
 8008064:	08008081 	.word	0x08008081
 8008068:	08008089 	.word	0x08008089
 800806c:	08008091 	.word	0x08008091
 8008070:	08008099 	.word	0x08008099
 8008074:	080080a1 	.word	0x080080a1
 8008078:	2300      	movs	r3, #0
 800807a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800807e:	e284      	b.n	800858a <UART_SetConfig+0x7aa>
 8008080:	2304      	movs	r3, #4
 8008082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008086:	e280      	b.n	800858a <UART_SetConfig+0x7aa>
 8008088:	2308      	movs	r3, #8
 800808a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808e:	e27c      	b.n	800858a <UART_SetConfig+0x7aa>
 8008090:	2310      	movs	r3, #16
 8008092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008096:	e278      	b.n	800858a <UART_SetConfig+0x7aa>
 8008098:	2320      	movs	r3, #32
 800809a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809e:	e274      	b.n	800858a <UART_SetConfig+0x7aa>
 80080a0:	2340      	movs	r3, #64	; 0x40
 80080a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a6:	e270      	b.n	800858a <UART_SetConfig+0x7aa>
 80080a8:	2380      	movs	r3, #128	; 0x80
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e26c      	b.n	800858a <UART_SetConfig+0x7aa>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1d      	ldr	r2, [pc, #116]	; (800812c <UART_SetConfig+0x34c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d142      	bne.n	8008140 <UART_SetConfig+0x360>
 80080ba:	4b18      	ldr	r3, [pc, #96]	; (800811c <UART_SetConfig+0x33c>)
 80080bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080be:	f003 0307 	and.w	r3, r3, #7
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d838      	bhi.n	8008138 <UART_SetConfig+0x358>
 80080c6:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <UART_SetConfig+0x2ec>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080e5 	.word	0x080080e5
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	080080f5 	.word	0x080080f5
 80080d8:	080080fd 	.word	0x080080fd
 80080dc:	08008105 	.word	0x08008105
 80080e0:	08008131 	.word	0x08008131
 80080e4:	2300      	movs	r3, #0
 80080e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ea:	e24e      	b.n	800858a <UART_SetConfig+0x7aa>
 80080ec:	2304      	movs	r3, #4
 80080ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f2:	e24a      	b.n	800858a <UART_SetConfig+0x7aa>
 80080f4:	2308      	movs	r3, #8
 80080f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fa:	e246      	b.n	800858a <UART_SetConfig+0x7aa>
 80080fc:	2310      	movs	r3, #16
 80080fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008102:	e242      	b.n	800858a <UART_SetConfig+0x7aa>
 8008104:	2320      	movs	r3, #32
 8008106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810a:	e23e      	b.n	800858a <UART_SetConfig+0x7aa>
 800810c:	cfff69f3 	.word	0xcfff69f3
 8008110:	58000c00 	.word	0x58000c00
 8008114:	11fff4ff 	.word	0x11fff4ff
 8008118:	40011000 	.word	0x40011000
 800811c:	58024400 	.word	0x58024400
 8008120:	40004400 	.word	0x40004400
 8008124:	40004800 	.word	0x40004800
 8008128:	40004c00 	.word	0x40004c00
 800812c:	40005000 	.word	0x40005000
 8008130:	2340      	movs	r3, #64	; 0x40
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008136:	e228      	b.n	800858a <UART_SetConfig+0x7aa>
 8008138:	2380      	movs	r3, #128	; 0x80
 800813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813e:	e224      	b.n	800858a <UART_SetConfig+0x7aa>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4ab1      	ldr	r2, [pc, #708]	; (800840c <UART_SetConfig+0x62c>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d176      	bne.n	8008238 <UART_SetConfig+0x458>
 800814a:	4bb1      	ldr	r3, [pc, #708]	; (8008410 <UART_SetConfig+0x630>)
 800814c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800814e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008152:	2b28      	cmp	r3, #40	; 0x28
 8008154:	d86c      	bhi.n	8008230 <UART_SetConfig+0x450>
 8008156:	a201      	add	r2, pc, #4	; (adr r2, 800815c <UART_SetConfig+0x37c>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008201 	.word	0x08008201
 8008160:	08008231 	.word	0x08008231
 8008164:	08008231 	.word	0x08008231
 8008168:	08008231 	.word	0x08008231
 800816c:	08008231 	.word	0x08008231
 8008170:	08008231 	.word	0x08008231
 8008174:	08008231 	.word	0x08008231
 8008178:	08008231 	.word	0x08008231
 800817c:	08008209 	.word	0x08008209
 8008180:	08008231 	.word	0x08008231
 8008184:	08008231 	.word	0x08008231
 8008188:	08008231 	.word	0x08008231
 800818c:	08008231 	.word	0x08008231
 8008190:	08008231 	.word	0x08008231
 8008194:	08008231 	.word	0x08008231
 8008198:	08008231 	.word	0x08008231
 800819c:	08008211 	.word	0x08008211
 80081a0:	08008231 	.word	0x08008231
 80081a4:	08008231 	.word	0x08008231
 80081a8:	08008231 	.word	0x08008231
 80081ac:	08008231 	.word	0x08008231
 80081b0:	08008231 	.word	0x08008231
 80081b4:	08008231 	.word	0x08008231
 80081b8:	08008231 	.word	0x08008231
 80081bc:	08008219 	.word	0x08008219
 80081c0:	08008231 	.word	0x08008231
 80081c4:	08008231 	.word	0x08008231
 80081c8:	08008231 	.word	0x08008231
 80081cc:	08008231 	.word	0x08008231
 80081d0:	08008231 	.word	0x08008231
 80081d4:	08008231 	.word	0x08008231
 80081d8:	08008231 	.word	0x08008231
 80081dc:	08008221 	.word	0x08008221
 80081e0:	08008231 	.word	0x08008231
 80081e4:	08008231 	.word	0x08008231
 80081e8:	08008231 	.word	0x08008231
 80081ec:	08008231 	.word	0x08008231
 80081f0:	08008231 	.word	0x08008231
 80081f4:	08008231 	.word	0x08008231
 80081f8:	08008231 	.word	0x08008231
 80081fc:	08008229 	.word	0x08008229
 8008200:	2301      	movs	r3, #1
 8008202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008206:	e1c0      	b.n	800858a <UART_SetConfig+0x7aa>
 8008208:	2304      	movs	r3, #4
 800820a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800820e:	e1bc      	b.n	800858a <UART_SetConfig+0x7aa>
 8008210:	2308      	movs	r3, #8
 8008212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008216:	e1b8      	b.n	800858a <UART_SetConfig+0x7aa>
 8008218:	2310      	movs	r3, #16
 800821a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800821e:	e1b4      	b.n	800858a <UART_SetConfig+0x7aa>
 8008220:	2320      	movs	r3, #32
 8008222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008226:	e1b0      	b.n	800858a <UART_SetConfig+0x7aa>
 8008228:	2340      	movs	r3, #64	; 0x40
 800822a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822e:	e1ac      	b.n	800858a <UART_SetConfig+0x7aa>
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008236:	e1a8      	b.n	800858a <UART_SetConfig+0x7aa>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a75      	ldr	r2, [pc, #468]	; (8008414 <UART_SetConfig+0x634>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d130      	bne.n	80082a4 <UART_SetConfig+0x4c4>
 8008242:	4b73      	ldr	r3, [pc, #460]	; (8008410 <UART_SetConfig+0x630>)
 8008244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008246:	f003 0307 	and.w	r3, r3, #7
 800824a:	2b05      	cmp	r3, #5
 800824c:	d826      	bhi.n	800829c <UART_SetConfig+0x4bc>
 800824e:	a201      	add	r2, pc, #4	; (adr r2, 8008254 <UART_SetConfig+0x474>)
 8008250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008254:	0800826d 	.word	0x0800826d
 8008258:	08008275 	.word	0x08008275
 800825c:	0800827d 	.word	0x0800827d
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008295 	.word	0x08008295
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008272:	e18a      	b.n	800858a <UART_SetConfig+0x7aa>
 8008274:	2304      	movs	r3, #4
 8008276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800827a:	e186      	b.n	800858a <UART_SetConfig+0x7aa>
 800827c:	2308      	movs	r3, #8
 800827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008282:	e182      	b.n	800858a <UART_SetConfig+0x7aa>
 8008284:	2310      	movs	r3, #16
 8008286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828a:	e17e      	b.n	800858a <UART_SetConfig+0x7aa>
 800828c:	2320      	movs	r3, #32
 800828e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008292:	e17a      	b.n	800858a <UART_SetConfig+0x7aa>
 8008294:	2340      	movs	r3, #64	; 0x40
 8008296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829a:	e176      	b.n	800858a <UART_SetConfig+0x7aa>
 800829c:	2380      	movs	r3, #128	; 0x80
 800829e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a2:	e172      	b.n	800858a <UART_SetConfig+0x7aa>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a5b      	ldr	r2, [pc, #364]	; (8008418 <UART_SetConfig+0x638>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d130      	bne.n	8008310 <UART_SetConfig+0x530>
 80082ae:	4b58      	ldr	r3, [pc, #352]	; (8008410 <UART_SetConfig+0x630>)
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d826      	bhi.n	8008308 <UART_SetConfig+0x528>
 80082ba:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <UART_SetConfig+0x4e0>)
 80082bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c0:	080082d9 	.word	0x080082d9
 80082c4:	080082e1 	.word	0x080082e1
 80082c8:	080082e9 	.word	0x080082e9
 80082cc:	080082f1 	.word	0x080082f1
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	08008301 	.word	0x08008301
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082de:	e154      	b.n	800858a <UART_SetConfig+0x7aa>
 80082e0:	2304      	movs	r3, #4
 80082e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082e6:	e150      	b.n	800858a <UART_SetConfig+0x7aa>
 80082e8:	2308      	movs	r3, #8
 80082ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ee:	e14c      	b.n	800858a <UART_SetConfig+0x7aa>
 80082f0:	2310      	movs	r3, #16
 80082f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f6:	e148      	b.n	800858a <UART_SetConfig+0x7aa>
 80082f8:	2320      	movs	r3, #32
 80082fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fe:	e144      	b.n	800858a <UART_SetConfig+0x7aa>
 8008300:	2340      	movs	r3, #64	; 0x40
 8008302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008306:	e140      	b.n	800858a <UART_SetConfig+0x7aa>
 8008308:	2380      	movs	r3, #128	; 0x80
 800830a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830e:	e13c      	b.n	800858a <UART_SetConfig+0x7aa>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a41      	ldr	r2, [pc, #260]	; (800841c <UART_SetConfig+0x63c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	f040 8082 	bne.w	8008420 <UART_SetConfig+0x640>
 800831c:	4b3c      	ldr	r3, [pc, #240]	; (8008410 <UART_SetConfig+0x630>)
 800831e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008324:	2b28      	cmp	r3, #40	; 0x28
 8008326:	d86d      	bhi.n	8008404 <UART_SetConfig+0x624>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <UART_SetConfig+0x550>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	080083d5 	.word	0x080083d5
 8008334:	08008405 	.word	0x08008405
 8008338:	08008405 	.word	0x08008405
 800833c:	08008405 	.word	0x08008405
 8008340:	08008405 	.word	0x08008405
 8008344:	08008405 	.word	0x08008405
 8008348:	08008405 	.word	0x08008405
 800834c:	08008405 	.word	0x08008405
 8008350:	080083dd 	.word	0x080083dd
 8008354:	08008405 	.word	0x08008405
 8008358:	08008405 	.word	0x08008405
 800835c:	08008405 	.word	0x08008405
 8008360:	08008405 	.word	0x08008405
 8008364:	08008405 	.word	0x08008405
 8008368:	08008405 	.word	0x08008405
 800836c:	08008405 	.word	0x08008405
 8008370:	080083e5 	.word	0x080083e5
 8008374:	08008405 	.word	0x08008405
 8008378:	08008405 	.word	0x08008405
 800837c:	08008405 	.word	0x08008405
 8008380:	08008405 	.word	0x08008405
 8008384:	08008405 	.word	0x08008405
 8008388:	08008405 	.word	0x08008405
 800838c:	08008405 	.word	0x08008405
 8008390:	080083ed 	.word	0x080083ed
 8008394:	08008405 	.word	0x08008405
 8008398:	08008405 	.word	0x08008405
 800839c:	08008405 	.word	0x08008405
 80083a0:	08008405 	.word	0x08008405
 80083a4:	08008405 	.word	0x08008405
 80083a8:	08008405 	.word	0x08008405
 80083ac:	08008405 	.word	0x08008405
 80083b0:	080083f5 	.word	0x080083f5
 80083b4:	08008405 	.word	0x08008405
 80083b8:	08008405 	.word	0x08008405
 80083bc:	08008405 	.word	0x08008405
 80083c0:	08008405 	.word	0x08008405
 80083c4:	08008405 	.word	0x08008405
 80083c8:	08008405 	.word	0x08008405
 80083cc:	08008405 	.word	0x08008405
 80083d0:	080083fd 	.word	0x080083fd
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e0d6      	b.n	800858a <UART_SetConfig+0x7aa>
 80083dc:	2304      	movs	r3, #4
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e0d2      	b.n	800858a <UART_SetConfig+0x7aa>
 80083e4:	2308      	movs	r3, #8
 80083e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ea:	e0ce      	b.n	800858a <UART_SetConfig+0x7aa>
 80083ec:	2310      	movs	r3, #16
 80083ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083f2:	e0ca      	b.n	800858a <UART_SetConfig+0x7aa>
 80083f4:	2320      	movs	r3, #32
 80083f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083fa:	e0c6      	b.n	800858a <UART_SetConfig+0x7aa>
 80083fc:	2340      	movs	r3, #64	; 0x40
 80083fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008402:	e0c2      	b.n	800858a <UART_SetConfig+0x7aa>
 8008404:	2380      	movs	r3, #128	; 0x80
 8008406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800840a:	e0be      	b.n	800858a <UART_SetConfig+0x7aa>
 800840c:	40011400 	.word	0x40011400
 8008410:	58024400 	.word	0x58024400
 8008414:	40007800 	.word	0x40007800
 8008418:	40007c00 	.word	0x40007c00
 800841c:	40011800 	.word	0x40011800
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4aad      	ldr	r2, [pc, #692]	; (80086dc <UART_SetConfig+0x8fc>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d176      	bne.n	8008518 <UART_SetConfig+0x738>
 800842a:	4bad      	ldr	r3, [pc, #692]	; (80086e0 <UART_SetConfig+0x900>)
 800842c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008432:	2b28      	cmp	r3, #40	; 0x28
 8008434:	d86c      	bhi.n	8008510 <UART_SetConfig+0x730>
 8008436:	a201      	add	r2, pc, #4	; (adr r2, 800843c <UART_SetConfig+0x65c>)
 8008438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843c:	080084e1 	.word	0x080084e1
 8008440:	08008511 	.word	0x08008511
 8008444:	08008511 	.word	0x08008511
 8008448:	08008511 	.word	0x08008511
 800844c:	08008511 	.word	0x08008511
 8008450:	08008511 	.word	0x08008511
 8008454:	08008511 	.word	0x08008511
 8008458:	08008511 	.word	0x08008511
 800845c:	080084e9 	.word	0x080084e9
 8008460:	08008511 	.word	0x08008511
 8008464:	08008511 	.word	0x08008511
 8008468:	08008511 	.word	0x08008511
 800846c:	08008511 	.word	0x08008511
 8008470:	08008511 	.word	0x08008511
 8008474:	08008511 	.word	0x08008511
 8008478:	08008511 	.word	0x08008511
 800847c:	080084f1 	.word	0x080084f1
 8008480:	08008511 	.word	0x08008511
 8008484:	08008511 	.word	0x08008511
 8008488:	08008511 	.word	0x08008511
 800848c:	08008511 	.word	0x08008511
 8008490:	08008511 	.word	0x08008511
 8008494:	08008511 	.word	0x08008511
 8008498:	08008511 	.word	0x08008511
 800849c:	080084f9 	.word	0x080084f9
 80084a0:	08008511 	.word	0x08008511
 80084a4:	08008511 	.word	0x08008511
 80084a8:	08008511 	.word	0x08008511
 80084ac:	08008511 	.word	0x08008511
 80084b0:	08008511 	.word	0x08008511
 80084b4:	08008511 	.word	0x08008511
 80084b8:	08008511 	.word	0x08008511
 80084bc:	08008501 	.word	0x08008501
 80084c0:	08008511 	.word	0x08008511
 80084c4:	08008511 	.word	0x08008511
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008511 	.word	0x08008511
 80084d0:	08008511 	.word	0x08008511
 80084d4:	08008511 	.word	0x08008511
 80084d8:	08008511 	.word	0x08008511
 80084dc:	08008509 	.word	0x08008509
 80084e0:	2301      	movs	r3, #1
 80084e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e6:	e050      	b.n	800858a <UART_SetConfig+0x7aa>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ee:	e04c      	b.n	800858a <UART_SetConfig+0x7aa>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f6:	e048      	b.n	800858a <UART_SetConfig+0x7aa>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084fe:	e044      	b.n	800858a <UART_SetConfig+0x7aa>
 8008500:	2320      	movs	r3, #32
 8008502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008506:	e040      	b.n	800858a <UART_SetConfig+0x7aa>
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850e:	e03c      	b.n	800858a <UART_SetConfig+0x7aa>
 8008510:	2380      	movs	r3, #128	; 0x80
 8008512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008516:	e038      	b.n	800858a <UART_SetConfig+0x7aa>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a71      	ldr	r2, [pc, #452]	; (80086e4 <UART_SetConfig+0x904>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d130      	bne.n	8008584 <UART_SetConfig+0x7a4>
 8008522:	4b6f      	ldr	r3, [pc, #444]	; (80086e0 <UART_SetConfig+0x900>)
 8008524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b05      	cmp	r3, #5
 800852c:	d826      	bhi.n	800857c <UART_SetConfig+0x79c>
 800852e:	a201      	add	r2, pc, #4	; (adr r2, 8008534 <UART_SetConfig+0x754>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	0800854d 	.word	0x0800854d
 8008538:	08008555 	.word	0x08008555
 800853c:	0800855d 	.word	0x0800855d
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	2302      	movs	r3, #2
 800854e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008552:	e01a      	b.n	800858a <UART_SetConfig+0x7aa>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800855a:	e016      	b.n	800858a <UART_SetConfig+0x7aa>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008562:	e012      	b.n	800858a <UART_SetConfig+0x7aa>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856a:	e00e      	b.n	800858a <UART_SetConfig+0x7aa>
 800856c:	2320      	movs	r3, #32
 800856e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008572:	e00a      	b.n	800858a <UART_SetConfig+0x7aa>
 8008574:	2340      	movs	r3, #64	; 0x40
 8008576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857a:	e006      	b.n	800858a <UART_SetConfig+0x7aa>
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008582:	e002      	b.n	800858a <UART_SetConfig+0x7aa>
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a55      	ldr	r2, [pc, #340]	; (80086e4 <UART_SetConfig+0x904>)
 8008590:	4293      	cmp	r3, r2
 8008592:	f040 80f0 	bne.w	8008776 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008596:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800859a:	2b20      	cmp	r3, #32
 800859c:	dc46      	bgt.n	800862c <UART_SetConfig+0x84c>
 800859e:	2b02      	cmp	r3, #2
 80085a0:	db75      	blt.n	800868e <UART_SetConfig+0x8ae>
 80085a2:	3b02      	subs	r3, #2
 80085a4:	2b1e      	cmp	r3, #30
 80085a6:	d872      	bhi.n	800868e <UART_SetConfig+0x8ae>
 80085a8:	a201      	add	r2, pc, #4	; (adr r2, 80085b0 <UART_SetConfig+0x7d0>)
 80085aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ae:	bf00      	nop
 80085b0:	08008633 	.word	0x08008633
 80085b4:	0800868f 	.word	0x0800868f
 80085b8:	0800863b 	.word	0x0800863b
 80085bc:	0800868f 	.word	0x0800868f
 80085c0:	0800868f 	.word	0x0800868f
 80085c4:	0800868f 	.word	0x0800868f
 80085c8:	0800864b 	.word	0x0800864b
 80085cc:	0800868f 	.word	0x0800868f
 80085d0:	0800868f 	.word	0x0800868f
 80085d4:	0800868f 	.word	0x0800868f
 80085d8:	0800868f 	.word	0x0800868f
 80085dc:	0800868f 	.word	0x0800868f
 80085e0:	0800868f 	.word	0x0800868f
 80085e4:	0800868f 	.word	0x0800868f
 80085e8:	0800865b 	.word	0x0800865b
 80085ec:	0800868f 	.word	0x0800868f
 80085f0:	0800868f 	.word	0x0800868f
 80085f4:	0800868f 	.word	0x0800868f
 80085f8:	0800868f 	.word	0x0800868f
 80085fc:	0800868f 	.word	0x0800868f
 8008600:	0800868f 	.word	0x0800868f
 8008604:	0800868f 	.word	0x0800868f
 8008608:	0800868f 	.word	0x0800868f
 800860c:	0800868f 	.word	0x0800868f
 8008610:	0800868f 	.word	0x0800868f
 8008614:	0800868f 	.word	0x0800868f
 8008618:	0800868f 	.word	0x0800868f
 800861c:	0800868f 	.word	0x0800868f
 8008620:	0800868f 	.word	0x0800868f
 8008624:	0800868f 	.word	0x0800868f
 8008628:	08008681 	.word	0x08008681
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d02a      	beq.n	8008686 <UART_SetConfig+0x8a6>
 8008630:	e02d      	b.n	800868e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008632:	f7fd fd1f 	bl	8006074 <HAL_RCCEx_GetD3PCLK1Freq>
 8008636:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008638:	e02f      	b.n	800869a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800863a:	f107 0314 	add.w	r3, r7, #20
 800863e:	4618      	mov	r0, r3
 8008640:	f7fd fd2e 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008648:	e027      	b.n	800869a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800864a:	f107 0308 	add.w	r3, r7, #8
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fe7a 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008658:	e01f      	b.n	800869a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <UART_SetConfig+0x900>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0320 	and.w	r3, r3, #32
 8008662:	2b00      	cmp	r3, #0
 8008664:	d009      	beq.n	800867a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008666:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <UART_SetConfig+0x900>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	08db      	lsrs	r3, r3, #3
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	4a1d      	ldr	r2, [pc, #116]	; (80086e8 <UART_SetConfig+0x908>)
 8008672:	fa22 f303 	lsr.w	r3, r2, r3
 8008676:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008678:	e00f      	b.n	800869a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800867a:	4b1b      	ldr	r3, [pc, #108]	; (80086e8 <UART_SetConfig+0x908>)
 800867c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800867e:	e00c      	b.n	800869a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008680:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <UART_SetConfig+0x90c>)
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008684:	e009      	b.n	800869a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800868c:	e005      	b.n	800869a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008698:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 81e6 	beq.w	8008a6e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a6:	4a12      	ldr	r2, [pc, #72]	; (80086f0 <UART_SetConfig+0x910>)
 80086a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086b4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	4413      	add	r3, r2
 80086c0:	6a3a      	ldr	r2, [r7, #32]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d305      	bcc.n	80086d2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d910      	bls.n	80086f4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80086d8:	e1c9      	b.n	8008a6e <UART_SetConfig+0xc8e>
 80086da:	bf00      	nop
 80086dc:	40011c00 	.word	0x40011c00
 80086e0:	58024400 	.word	0x58024400
 80086e4:	58000c00 	.word	0x58000c00
 80086e8:	03d09000 	.word	0x03d09000
 80086ec:	003d0900 	.word	0x003d0900
 80086f0:	0800a354 	.word	0x0800a354
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	4618      	mov	r0, r3
 80086f8:	f04f 0100 	mov.w	r1, #0
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	4ac1      	ldr	r2, [pc, #772]	; (8008a08 <UART_SetConfig+0xc28>)
 8008702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008706:	b29a      	uxth	r2, r3
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	f7f7 fe40 	bl	8000390 <__aeabi_uldivmod>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4610      	mov	r0, r2
 8008716:	4619      	mov	r1, r3
 8008718:	f04f 0200 	mov.w	r2, #0
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	020b      	lsls	r3, r1, #8
 8008722:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008726:	0202      	lsls	r2, r0, #8
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	6849      	ldr	r1, [r1, #4]
 800872c:	0849      	lsrs	r1, r1, #1
 800872e:	4608      	mov	r0, r1
 8008730:	f04f 0100 	mov.w	r1, #0
 8008734:	1814      	adds	r4, r2, r0
 8008736:	eb43 0501 	adc.w	r5, r3, r1
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	461a      	mov	r2, r3
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f7 fe22 	bl	8000390 <__aeabi_uldivmod>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4613      	mov	r3, r2
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875a:	d308      	bcc.n	800876e <UART_SetConfig+0x98e>
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008762:	d204      	bcs.n	800876e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800876a:	60da      	str	r2, [r3, #12]
 800876c:	e17f      	b.n	8008a6e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008774:	e17b      	b.n	8008a6e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800877e:	f040 80bd 	bne.w	80088fc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8008782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008786:	2b20      	cmp	r3, #32
 8008788:	dc48      	bgt.n	800881c <UART_SetConfig+0xa3c>
 800878a:	2b00      	cmp	r3, #0
 800878c:	db7b      	blt.n	8008886 <UART_SetConfig+0xaa6>
 800878e:	2b20      	cmp	r3, #32
 8008790:	d879      	bhi.n	8008886 <UART_SetConfig+0xaa6>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <UART_SetConfig+0x9b8>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	08008823 	.word	0x08008823
 800879c:	0800882b 	.word	0x0800882b
 80087a0:	08008887 	.word	0x08008887
 80087a4:	08008887 	.word	0x08008887
 80087a8:	08008833 	.word	0x08008833
 80087ac:	08008887 	.word	0x08008887
 80087b0:	08008887 	.word	0x08008887
 80087b4:	08008887 	.word	0x08008887
 80087b8:	08008843 	.word	0x08008843
 80087bc:	08008887 	.word	0x08008887
 80087c0:	08008887 	.word	0x08008887
 80087c4:	08008887 	.word	0x08008887
 80087c8:	08008887 	.word	0x08008887
 80087cc:	08008887 	.word	0x08008887
 80087d0:	08008887 	.word	0x08008887
 80087d4:	08008887 	.word	0x08008887
 80087d8:	08008853 	.word	0x08008853
 80087dc:	08008887 	.word	0x08008887
 80087e0:	08008887 	.word	0x08008887
 80087e4:	08008887 	.word	0x08008887
 80087e8:	08008887 	.word	0x08008887
 80087ec:	08008887 	.word	0x08008887
 80087f0:	08008887 	.word	0x08008887
 80087f4:	08008887 	.word	0x08008887
 80087f8:	08008887 	.word	0x08008887
 80087fc:	08008887 	.word	0x08008887
 8008800:	08008887 	.word	0x08008887
 8008804:	08008887 	.word	0x08008887
 8008808:	08008887 	.word	0x08008887
 800880c:	08008887 	.word	0x08008887
 8008810:	08008887 	.word	0x08008887
 8008814:	08008887 	.word	0x08008887
 8008818:	08008879 	.word	0x08008879
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d02e      	beq.n	800887e <UART_SetConfig+0xa9e>
 8008820:	e031      	b.n	8008886 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008822:	f7fc f8c5 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8008826:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008828:	e033      	b.n	8008892 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800882a:	f7fc f8d7 	bl	80049dc <HAL_RCC_GetPCLK2Freq>
 800882e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008830:	e02f      	b.n	8008892 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008832:	f107 0314 	add.w	r3, r7, #20
 8008836:	4618      	mov	r0, r3
 8008838:	f7fd fc32 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008840:	e027      	b.n	8008892 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008842:	f107 0308 	add.w	r3, r7, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd fd7e 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008850:	e01f      	b.n	8008892 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008852:	4b6e      	ldr	r3, [pc, #440]	; (8008a0c <UART_SetConfig+0xc2c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d009      	beq.n	8008872 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800885e:	4b6b      	ldr	r3, [pc, #428]	; (8008a0c <UART_SetConfig+0xc2c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	08db      	lsrs	r3, r3, #3
 8008864:	f003 0303 	and.w	r3, r3, #3
 8008868:	4a69      	ldr	r2, [pc, #420]	; (8008a10 <UART_SetConfig+0xc30>)
 800886a:	fa22 f303 	lsr.w	r3, r2, r3
 800886e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008870:	e00f      	b.n	8008892 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8008872:	4b67      	ldr	r3, [pc, #412]	; (8008a10 <UART_SetConfig+0xc30>)
 8008874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008876:	e00c      	b.n	8008892 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008878:	4b66      	ldr	r3, [pc, #408]	; (8008a14 <UART_SetConfig+0xc34>)
 800887a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800887c:	e009      	b.n	8008892 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008882:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008884:	e005      	b.n	8008892 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 80ea 	beq.w	8008a6e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889e:	4a5a      	ldr	r2, [pc, #360]	; (8008a08 <UART_SetConfig+0xc28>)
 80088a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ac:	005a      	lsls	r2, r3, #1
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	085b      	lsrs	r3, r3, #1
 80088b4:	441a      	add	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2b0f      	cmp	r3, #15
 80088c4:	d916      	bls.n	80088f4 <UART_SetConfig+0xb14>
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088cc:	d212      	bcs.n	80088f4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	f023 030f 	bic.w	r3, r3, #15
 80088d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088e6:	4313      	orrs	r3, r2
 80088e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80088f0:	60da      	str	r2, [r3, #12]
 80088f2:	e0bc      	b.n	8008a6e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80088fa:	e0b8      	b.n	8008a6e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008900:	2b20      	cmp	r3, #32
 8008902:	dc4b      	bgt.n	800899c <UART_SetConfig+0xbbc>
 8008904:	2b00      	cmp	r3, #0
 8008906:	f2c0 8087 	blt.w	8008a18 <UART_SetConfig+0xc38>
 800890a:	2b20      	cmp	r3, #32
 800890c:	f200 8084 	bhi.w	8008a18 <UART_SetConfig+0xc38>
 8008910:	a201      	add	r2, pc, #4	; (adr r2, 8008918 <UART_SetConfig+0xb38>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	080089a3 	.word	0x080089a3
 800891c:	080089ab 	.word	0x080089ab
 8008920:	08008a19 	.word	0x08008a19
 8008924:	08008a19 	.word	0x08008a19
 8008928:	080089b3 	.word	0x080089b3
 800892c:	08008a19 	.word	0x08008a19
 8008930:	08008a19 	.word	0x08008a19
 8008934:	08008a19 	.word	0x08008a19
 8008938:	080089c3 	.word	0x080089c3
 800893c:	08008a19 	.word	0x08008a19
 8008940:	08008a19 	.word	0x08008a19
 8008944:	08008a19 	.word	0x08008a19
 8008948:	08008a19 	.word	0x08008a19
 800894c:	08008a19 	.word	0x08008a19
 8008950:	08008a19 	.word	0x08008a19
 8008954:	08008a19 	.word	0x08008a19
 8008958:	080089d3 	.word	0x080089d3
 800895c:	08008a19 	.word	0x08008a19
 8008960:	08008a19 	.word	0x08008a19
 8008964:	08008a19 	.word	0x08008a19
 8008968:	08008a19 	.word	0x08008a19
 800896c:	08008a19 	.word	0x08008a19
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a19 	.word	0x08008a19
 8008978:	08008a19 	.word	0x08008a19
 800897c:	08008a19 	.word	0x08008a19
 8008980:	08008a19 	.word	0x08008a19
 8008984:	08008a19 	.word	0x08008a19
 8008988:	08008a19 	.word	0x08008a19
 800898c:	08008a19 	.word	0x08008a19
 8008990:	08008a19 	.word	0x08008a19
 8008994:	08008a19 	.word	0x08008a19
 8008998:	080089f9 	.word	0x080089f9
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d02e      	beq.n	80089fe <UART_SetConfig+0xc1e>
 80089a0:	e03a      	b.n	8008a18 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089a2:	f7fc f805 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 80089a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80089a8:	e03c      	b.n	8008a24 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089aa:	f7fc f817 	bl	80049dc <HAL_RCC_GetPCLK2Freq>
 80089ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80089b0:	e038      	b.n	8008a24 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089b2:	f107 0314 	add.w	r3, r7, #20
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fd fb72 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089c0:	e030      	b.n	8008a24 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c2:	f107 0308 	add.w	r3, r7, #8
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fd fcbe 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089d0:	e028      	b.n	8008a24 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089d2:	4b0e      	ldr	r3, [pc, #56]	; (8008a0c <UART_SetConfig+0xc2c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <UART_SetConfig+0xc2c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	08db      	lsrs	r3, r3, #3
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <UART_SetConfig+0xc30>)
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089f0:	e018      	b.n	8008a24 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <UART_SetConfig+0xc30>)
 80089f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089f6:	e015      	b.n	8008a24 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <UART_SetConfig+0xc34>)
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089fc:	e012      	b.n	8008a24 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a04:	e00e      	b.n	8008a24 <UART_SetConfig+0xc44>
 8008a06:	bf00      	nop
 8008a08:	0800a354 	.word	0x0800a354
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	03d09000 	.word	0x03d09000
 8008a14:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008a22:	bf00      	nop
    }

    if (pclk != 0U)
 8008a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d021      	beq.n	8008a6e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	4a1a      	ldr	r2, [pc, #104]	; (8008a98 <UART_SetConfig+0xcb8>)
 8008a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	441a      	add	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a50:	2b0f      	cmp	r3, #15
 8008a52:	d909      	bls.n	8008a68 <UART_SetConfig+0xc88>
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5a:	d205      	bcs.n	8008a68 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	e002      	b.n	8008a6e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008a8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3738      	adds	r7, #56	; 0x38
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bdb0      	pop	{r4, r5, r7, pc}
 8008a96:	bf00      	nop
 8008a98:	0800a354 	.word	0x0800a354

08008a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01a      	beq.n	8008bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b9a:	d10a      	bne.n	8008bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	430a      	orrs	r2, r1
 8008bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	605a      	str	r2, [r3, #4]
  }
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bf0:	f7f8 fcee 	bl	80015d0 <HAL_GetTick>
 8008bf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d10e      	bne.n	8008c22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f82f 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e025      	b.n	8008c6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d10e      	bne.n	8008c4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f819 	bl	8008c76 <UART_WaitOnFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e00f      	b.n	8008c6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b09c      	sub	sp, #112	; 0x70
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	603b      	str	r3, [r7, #0]
 8008c82:	4613      	mov	r3, r2
 8008c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c86:	e0a9      	b.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8e:	f000 80a5 	beq.w	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c92:	f7f8 fc9d 	bl	80015d0 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d302      	bcc.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d140      	bne.n	8008d2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e6      	bne.n	8008ca8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3308      	adds	r3, #8
 8008ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	f023 0301 	bic.w	r3, r3, #1
 8008cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e069      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d051      	beq.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d149      	bne.n	8008ddc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
 8008d72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d78:	e841 2300 	strex	r3, r2, [r1]
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e6      	bne.n	8008d52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	3308      	adds	r3, #8
 8008d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	e853 3f00 	ldrex	r3, [r3]
 8008d92:	613b      	str	r3, [r7, #16]
   return(result);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008da4:	623a      	str	r2, [r7, #32]
 8008da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	69f9      	ldr	r1, [r7, #28]
 8008daa:	6a3a      	ldr	r2, [r7, #32]
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e5      	bne.n	8008d84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2220      	movs	r2, #32
 8008dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e010      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	69da      	ldr	r2, [r3, #28]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	4013      	ands	r3, r2
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	bf0c      	ite	eq
 8008dec:	2301      	moveq	r3, #1
 8008dee:	2300      	movne	r3, #0
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	79fb      	ldrb	r3, [r7, #7]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	f43f af46 	beq.w	8008c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3770      	adds	r7, #112	; 0x70
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b085      	sub	sp, #20
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <HAL_UARTEx_DisableFifoMode+0x16>
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e027      	b.n	8008e6c <HAL_UARTEx_DisableFifoMode+0x66>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2224      	movs	r2, #36	; 0x24
 8008e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f022 0201 	bic.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e02d      	b.n	8008eec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2224      	movs	r2, #36	; 0x24
 8008e9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0201 	bic.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f84f 	bl	8008f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68fa      	ldr	r2, [r7, #12]
 8008ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2220      	movs	r2, #32
 8008ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d101      	bne.n	8008f0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e02d      	b.n	8008f68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2224      	movs	r2, #36	; 0x24
 8008f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
 8008f32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f811 	bl	8008f70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d108      	bne.n	8008f92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f90:	e031      	b.n	8008ff6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f92:	2310      	movs	r3, #16
 8008f94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f96:	2310      	movs	r3, #16
 8008f98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	0e5b      	lsrs	r3, r3, #25
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	0f5b      	lsrs	r3, r3, #29
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	7b3a      	ldrb	r2, [r7, #12]
 8008fbe:	4911      	ldr	r1, [pc, #68]	; (8009004 <UARTEx_SetNbDataToProcess+0x94>)
 8008fc0:	5c8a      	ldrb	r2, [r1, r2]
 8008fc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fc6:	7b3a      	ldrb	r2, [r7, #12]
 8008fc8:	490f      	ldr	r1, [pc, #60]	; (8009008 <UARTEx_SetNbDataToProcess+0x98>)
 8008fca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	7b7a      	ldrb	r2, [r7, #13]
 8008fdc:	4909      	ldr	r1, [pc, #36]	; (8009004 <UARTEx_SetNbDataToProcess+0x94>)
 8008fde:	5c8a      	ldrb	r2, [r1, r2]
 8008fe0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fe4:	7b7a      	ldrb	r2, [r7, #13]
 8008fe6:	4908      	ldr	r1, [pc, #32]	; (8009008 <UARTEx_SetNbDataToProcess+0x98>)
 8008fe8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ff6:	bf00      	nop
 8008ff8:	3714      	adds	r7, #20
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	0800a36c 	.word	0x0800a36c
 8009008:	0800a374 	.word	0x0800a374

0800900c <__errno>:
 800900c:	4b01      	ldr	r3, [pc, #4]	; (8009014 <__errno+0x8>)
 800900e:	6818      	ldr	r0, [r3, #0]
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	24000010 	.word	0x24000010

08009018 <__libc_init_array>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	4d0d      	ldr	r5, [pc, #52]	; (8009050 <__libc_init_array+0x38>)
 800901c:	4c0d      	ldr	r4, [pc, #52]	; (8009054 <__libc_init_array+0x3c>)
 800901e:	1b64      	subs	r4, r4, r5
 8009020:	10a4      	asrs	r4, r4, #2
 8009022:	2600      	movs	r6, #0
 8009024:	42a6      	cmp	r6, r4
 8009026:	d109      	bne.n	800903c <__libc_init_array+0x24>
 8009028:	4d0b      	ldr	r5, [pc, #44]	; (8009058 <__libc_init_array+0x40>)
 800902a:	4c0c      	ldr	r4, [pc, #48]	; (800905c <__libc_init_array+0x44>)
 800902c:	f001 f948 	bl	800a2c0 <_init>
 8009030:	1b64      	subs	r4, r4, r5
 8009032:	10a4      	asrs	r4, r4, #2
 8009034:	2600      	movs	r6, #0
 8009036:	42a6      	cmp	r6, r4
 8009038:	d105      	bne.n	8009046 <__libc_init_array+0x2e>
 800903a:	bd70      	pop	{r4, r5, r6, pc}
 800903c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009040:	4798      	blx	r3
 8009042:	3601      	adds	r6, #1
 8009044:	e7ee      	b.n	8009024 <__libc_init_array+0xc>
 8009046:	f855 3b04 	ldr.w	r3, [r5], #4
 800904a:	4798      	blx	r3
 800904c:	3601      	adds	r6, #1
 800904e:	e7f2      	b.n	8009036 <__libc_init_array+0x1e>
 8009050:	0800a41c 	.word	0x0800a41c
 8009054:	0800a41c 	.word	0x0800a41c
 8009058:	0800a41c 	.word	0x0800a41c
 800905c:	0800a420 	.word	0x0800a420

08009060 <memcpy>:
 8009060:	440a      	add	r2, r1
 8009062:	4291      	cmp	r1, r2
 8009064:	f100 33ff 	add.w	r3, r0, #4294967295
 8009068:	d100      	bne.n	800906c <memcpy+0xc>
 800906a:	4770      	bx	lr
 800906c:	b510      	push	{r4, lr}
 800906e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009072:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009076:	4291      	cmp	r1, r2
 8009078:	d1f9      	bne.n	800906e <memcpy+0xe>
 800907a:	bd10      	pop	{r4, pc}

0800907c <memset>:
 800907c:	4402      	add	r2, r0
 800907e:	4603      	mov	r3, r0
 8009080:	4293      	cmp	r3, r2
 8009082:	d100      	bne.n	8009086 <memset+0xa>
 8009084:	4770      	bx	lr
 8009086:	f803 1b01 	strb.w	r1, [r3], #1
 800908a:	e7f9      	b.n	8009080 <memset+0x4>

0800908c <iprintf>:
 800908c:	b40f      	push	{r0, r1, r2, r3}
 800908e:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <iprintf+0x2c>)
 8009090:	b513      	push	{r0, r1, r4, lr}
 8009092:	681c      	ldr	r4, [r3, #0]
 8009094:	b124      	cbz	r4, 80090a0 <iprintf+0x14>
 8009096:	69a3      	ldr	r3, [r4, #24]
 8009098:	b913      	cbnz	r3, 80090a0 <iprintf+0x14>
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f886 	bl	80091ac <__sinit>
 80090a0:	ab05      	add	r3, sp, #20
 80090a2:	9a04      	ldr	r2, [sp, #16]
 80090a4:	68a1      	ldr	r1, [r4, #8]
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 faff 	bl	80096ac <_vfiprintf_r>
 80090ae:	b002      	add	sp, #8
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	b004      	add	sp, #16
 80090b6:	4770      	bx	lr
 80090b8:	24000010 	.word	0x24000010

080090bc <siprintf>:
 80090bc:	b40e      	push	{r1, r2, r3}
 80090be:	b500      	push	{lr}
 80090c0:	b09c      	sub	sp, #112	; 0x70
 80090c2:	ab1d      	add	r3, sp, #116	; 0x74
 80090c4:	9002      	str	r0, [sp, #8]
 80090c6:	9006      	str	r0, [sp, #24]
 80090c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090cc:	4809      	ldr	r0, [pc, #36]	; (80090f4 <siprintf+0x38>)
 80090ce:	9107      	str	r1, [sp, #28]
 80090d0:	9104      	str	r1, [sp, #16]
 80090d2:	4909      	ldr	r1, [pc, #36]	; (80090f8 <siprintf+0x3c>)
 80090d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d8:	9105      	str	r1, [sp, #20]
 80090da:	6800      	ldr	r0, [r0, #0]
 80090dc:	9301      	str	r3, [sp, #4]
 80090de:	a902      	add	r1, sp, #8
 80090e0:	f000 f9ba 	bl	8009458 <_svfiprintf_r>
 80090e4:	9b02      	ldr	r3, [sp, #8]
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
 80090ea:	b01c      	add	sp, #112	; 0x70
 80090ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80090f0:	b003      	add	sp, #12
 80090f2:	4770      	bx	lr
 80090f4:	24000010 	.word	0x24000010
 80090f8:	ffff0208 	.word	0xffff0208

080090fc <std>:
 80090fc:	2300      	movs	r3, #0
 80090fe:	b510      	push	{r4, lr}
 8009100:	4604      	mov	r4, r0
 8009102:	e9c0 3300 	strd	r3, r3, [r0]
 8009106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800910a:	6083      	str	r3, [r0, #8]
 800910c:	8181      	strh	r1, [r0, #12]
 800910e:	6643      	str	r3, [r0, #100]	; 0x64
 8009110:	81c2      	strh	r2, [r0, #14]
 8009112:	6183      	str	r3, [r0, #24]
 8009114:	4619      	mov	r1, r3
 8009116:	2208      	movs	r2, #8
 8009118:	305c      	adds	r0, #92	; 0x5c
 800911a:	f7ff ffaf 	bl	800907c <memset>
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <std+0x38>)
 8009120:	6263      	str	r3, [r4, #36]	; 0x24
 8009122:	4b05      	ldr	r3, [pc, #20]	; (8009138 <std+0x3c>)
 8009124:	62a3      	str	r3, [r4, #40]	; 0x28
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <std+0x40>)
 8009128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <std+0x44>)
 800912c:	6224      	str	r4, [r4, #32]
 800912e:	6323      	str	r3, [r4, #48]	; 0x30
 8009130:	bd10      	pop	{r4, pc}
 8009132:	bf00      	nop
 8009134:	08009c55 	.word	0x08009c55
 8009138:	08009c77 	.word	0x08009c77
 800913c:	08009caf 	.word	0x08009caf
 8009140:	08009cd3 	.word	0x08009cd3

08009144 <_cleanup_r>:
 8009144:	4901      	ldr	r1, [pc, #4]	; (800914c <_cleanup_r+0x8>)
 8009146:	f000 b8af 	b.w	80092a8 <_fwalk_reent>
 800914a:	bf00      	nop
 800914c:	08009fad 	.word	0x08009fad

08009150 <__sfmoreglue>:
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	1e4a      	subs	r2, r1, #1
 8009154:	2568      	movs	r5, #104	; 0x68
 8009156:	4355      	muls	r5, r2
 8009158:	460e      	mov	r6, r1
 800915a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800915e:	f000 f8c5 	bl	80092ec <_malloc_r>
 8009162:	4604      	mov	r4, r0
 8009164:	b140      	cbz	r0, 8009178 <__sfmoreglue+0x28>
 8009166:	2100      	movs	r1, #0
 8009168:	e9c0 1600 	strd	r1, r6, [r0]
 800916c:	300c      	adds	r0, #12
 800916e:	60a0      	str	r0, [r4, #8]
 8009170:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009174:	f7ff ff82 	bl	800907c <memset>
 8009178:	4620      	mov	r0, r4
 800917a:	bd70      	pop	{r4, r5, r6, pc}

0800917c <__sfp_lock_acquire>:
 800917c:	4801      	ldr	r0, [pc, #4]	; (8009184 <__sfp_lock_acquire+0x8>)
 800917e:	f000 b8b3 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 8009182:	bf00      	nop
 8009184:	24000328 	.word	0x24000328

08009188 <__sfp_lock_release>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__sfp_lock_release+0x8>)
 800918a:	f000 b8ae 	b.w	80092ea <__retarget_lock_release_recursive>
 800918e:	bf00      	nop
 8009190:	24000328 	.word	0x24000328

08009194 <__sinit_lock_acquire>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__sinit_lock_acquire+0x8>)
 8009196:	f000 b8a7 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 800919a:	bf00      	nop
 800919c:	24000323 	.word	0x24000323

080091a0 <__sinit_lock_release>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sinit_lock_release+0x8>)
 80091a2:	f000 b8a2 	b.w	80092ea <__retarget_lock_release_recursive>
 80091a6:	bf00      	nop
 80091a8:	24000323 	.word	0x24000323

080091ac <__sinit>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	4604      	mov	r4, r0
 80091b0:	f7ff fff0 	bl	8009194 <__sinit_lock_acquire>
 80091b4:	69a3      	ldr	r3, [r4, #24]
 80091b6:	b11b      	cbz	r3, 80091c0 <__sinit+0x14>
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091bc:	f7ff bff0 	b.w	80091a0 <__sinit_lock_release>
 80091c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091c4:	6523      	str	r3, [r4, #80]	; 0x50
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <__sinit+0x68>)
 80091c8:	4a13      	ldr	r2, [pc, #76]	; (8009218 <__sinit+0x6c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	bf04      	itt	eq
 80091d2:	2301      	moveq	r3, #1
 80091d4:	61a3      	streq	r3, [r4, #24]
 80091d6:	4620      	mov	r0, r4
 80091d8:	f000 f820 	bl	800921c <__sfp>
 80091dc:	6060      	str	r0, [r4, #4]
 80091de:	4620      	mov	r0, r4
 80091e0:	f000 f81c 	bl	800921c <__sfp>
 80091e4:	60a0      	str	r0, [r4, #8]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 f818 	bl	800921c <__sfp>
 80091ec:	2200      	movs	r2, #0
 80091ee:	60e0      	str	r0, [r4, #12]
 80091f0:	2104      	movs	r1, #4
 80091f2:	6860      	ldr	r0, [r4, #4]
 80091f4:	f7ff ff82 	bl	80090fc <std>
 80091f8:	68a0      	ldr	r0, [r4, #8]
 80091fa:	2201      	movs	r2, #1
 80091fc:	2109      	movs	r1, #9
 80091fe:	f7ff ff7d 	bl	80090fc <std>
 8009202:	68e0      	ldr	r0, [r4, #12]
 8009204:	2202      	movs	r2, #2
 8009206:	2112      	movs	r1, #18
 8009208:	f7ff ff78 	bl	80090fc <std>
 800920c:	2301      	movs	r3, #1
 800920e:	61a3      	str	r3, [r4, #24]
 8009210:	e7d2      	b.n	80091b8 <__sinit+0xc>
 8009212:	bf00      	nop
 8009214:	0800a37c 	.word	0x0800a37c
 8009218:	08009145 	.word	0x08009145

0800921c <__sfp>:
 800921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921e:	4607      	mov	r7, r0
 8009220:	f7ff ffac 	bl	800917c <__sfp_lock_acquire>
 8009224:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <__sfp+0x84>)
 8009226:	681e      	ldr	r6, [r3, #0]
 8009228:	69b3      	ldr	r3, [r6, #24]
 800922a:	b913      	cbnz	r3, 8009232 <__sfp+0x16>
 800922c:	4630      	mov	r0, r6
 800922e:	f7ff ffbd 	bl	80091ac <__sinit>
 8009232:	3648      	adds	r6, #72	; 0x48
 8009234:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009238:	3b01      	subs	r3, #1
 800923a:	d503      	bpl.n	8009244 <__sfp+0x28>
 800923c:	6833      	ldr	r3, [r6, #0]
 800923e:	b30b      	cbz	r3, 8009284 <__sfp+0x68>
 8009240:	6836      	ldr	r6, [r6, #0]
 8009242:	e7f7      	b.n	8009234 <__sfp+0x18>
 8009244:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009248:	b9d5      	cbnz	r5, 8009280 <__sfp+0x64>
 800924a:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <__sfp+0x88>)
 800924c:	60e3      	str	r3, [r4, #12]
 800924e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009252:	6665      	str	r5, [r4, #100]	; 0x64
 8009254:	f000 f847 	bl	80092e6 <__retarget_lock_init_recursive>
 8009258:	f7ff ff96 	bl	8009188 <__sfp_lock_release>
 800925c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009260:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	61a5      	str	r5, [r4, #24]
 8009268:	2208      	movs	r2, #8
 800926a:	4629      	mov	r1, r5
 800926c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009270:	f7ff ff04 	bl	800907c <memset>
 8009274:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009278:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800927c:	4620      	mov	r0, r4
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009280:	3468      	adds	r4, #104	; 0x68
 8009282:	e7d9      	b.n	8009238 <__sfp+0x1c>
 8009284:	2104      	movs	r1, #4
 8009286:	4638      	mov	r0, r7
 8009288:	f7ff ff62 	bl	8009150 <__sfmoreglue>
 800928c:	4604      	mov	r4, r0
 800928e:	6030      	str	r0, [r6, #0]
 8009290:	2800      	cmp	r0, #0
 8009292:	d1d5      	bne.n	8009240 <__sfp+0x24>
 8009294:	f7ff ff78 	bl	8009188 <__sfp_lock_release>
 8009298:	230c      	movs	r3, #12
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	e7ee      	b.n	800927c <__sfp+0x60>
 800929e:	bf00      	nop
 80092a0:	0800a37c 	.word	0x0800a37c
 80092a4:	ffff0001 	.word	0xffff0001

080092a8 <_fwalk_reent>:
 80092a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092ac:	4606      	mov	r6, r0
 80092ae:	4688      	mov	r8, r1
 80092b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092b4:	2700      	movs	r7, #0
 80092b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ba:	f1b9 0901 	subs.w	r9, r9, #1
 80092be:	d505      	bpl.n	80092cc <_fwalk_reent+0x24>
 80092c0:	6824      	ldr	r4, [r4, #0]
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	d1f7      	bne.n	80092b6 <_fwalk_reent+0xe>
 80092c6:	4638      	mov	r0, r7
 80092c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d907      	bls.n	80092e2 <_fwalk_reent+0x3a>
 80092d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092d6:	3301      	adds	r3, #1
 80092d8:	d003      	beq.n	80092e2 <_fwalk_reent+0x3a>
 80092da:	4629      	mov	r1, r5
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	4307      	orrs	r7, r0
 80092e2:	3568      	adds	r5, #104	; 0x68
 80092e4:	e7e9      	b.n	80092ba <_fwalk_reent+0x12>

080092e6 <__retarget_lock_init_recursive>:
 80092e6:	4770      	bx	lr

080092e8 <__retarget_lock_acquire_recursive>:
 80092e8:	4770      	bx	lr

080092ea <__retarget_lock_release_recursive>:
 80092ea:	4770      	bx	lr

080092ec <_malloc_r>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	1ccd      	adds	r5, r1, #3
 80092f0:	f025 0503 	bic.w	r5, r5, #3
 80092f4:	3508      	adds	r5, #8
 80092f6:	2d0c      	cmp	r5, #12
 80092f8:	bf38      	it	cc
 80092fa:	250c      	movcc	r5, #12
 80092fc:	2d00      	cmp	r5, #0
 80092fe:	4606      	mov	r6, r0
 8009300:	db01      	blt.n	8009306 <_malloc_r+0x1a>
 8009302:	42a9      	cmp	r1, r5
 8009304:	d903      	bls.n	800930e <_malloc_r+0x22>
 8009306:	230c      	movs	r3, #12
 8009308:	6033      	str	r3, [r6, #0]
 800930a:	2000      	movs	r0, #0
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800930e:	f000 ff19 	bl	800a144 <__malloc_lock>
 8009312:	4921      	ldr	r1, [pc, #132]	; (8009398 <_malloc_r+0xac>)
 8009314:	680a      	ldr	r2, [r1, #0]
 8009316:	4614      	mov	r4, r2
 8009318:	b99c      	cbnz	r4, 8009342 <_malloc_r+0x56>
 800931a:	4f20      	ldr	r7, [pc, #128]	; (800939c <_malloc_r+0xb0>)
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	b923      	cbnz	r3, 800932a <_malloc_r+0x3e>
 8009320:	4621      	mov	r1, r4
 8009322:	4630      	mov	r0, r6
 8009324:	f000 fc86 	bl	8009c34 <_sbrk_r>
 8009328:	6038      	str	r0, [r7, #0]
 800932a:	4629      	mov	r1, r5
 800932c:	4630      	mov	r0, r6
 800932e:	f000 fc81 	bl	8009c34 <_sbrk_r>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d123      	bne.n	800937e <_malloc_r+0x92>
 8009336:	230c      	movs	r3, #12
 8009338:	6033      	str	r3, [r6, #0]
 800933a:	4630      	mov	r0, r6
 800933c:	f000 ff08 	bl	800a150 <__malloc_unlock>
 8009340:	e7e3      	b.n	800930a <_malloc_r+0x1e>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	1b5b      	subs	r3, r3, r5
 8009346:	d417      	bmi.n	8009378 <_malloc_r+0x8c>
 8009348:	2b0b      	cmp	r3, #11
 800934a:	d903      	bls.n	8009354 <_malloc_r+0x68>
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	441c      	add	r4, r3
 8009350:	6025      	str	r5, [r4, #0]
 8009352:	e004      	b.n	800935e <_malloc_r+0x72>
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	42a2      	cmp	r2, r4
 8009358:	bf0c      	ite	eq
 800935a:	600b      	streq	r3, [r1, #0]
 800935c:	6053      	strne	r3, [r2, #4]
 800935e:	4630      	mov	r0, r6
 8009360:	f000 fef6 	bl	800a150 <__malloc_unlock>
 8009364:	f104 000b 	add.w	r0, r4, #11
 8009368:	1d23      	adds	r3, r4, #4
 800936a:	f020 0007 	bic.w	r0, r0, #7
 800936e:	1ac2      	subs	r2, r0, r3
 8009370:	d0cc      	beq.n	800930c <_malloc_r+0x20>
 8009372:	1a1b      	subs	r3, r3, r0
 8009374:	50a3      	str	r3, [r4, r2]
 8009376:	e7c9      	b.n	800930c <_malloc_r+0x20>
 8009378:	4622      	mov	r2, r4
 800937a:	6864      	ldr	r4, [r4, #4]
 800937c:	e7cc      	b.n	8009318 <_malloc_r+0x2c>
 800937e:	1cc4      	adds	r4, r0, #3
 8009380:	f024 0403 	bic.w	r4, r4, #3
 8009384:	42a0      	cmp	r0, r4
 8009386:	d0e3      	beq.n	8009350 <_malloc_r+0x64>
 8009388:	1a21      	subs	r1, r4, r0
 800938a:	4630      	mov	r0, r6
 800938c:	f000 fc52 	bl	8009c34 <_sbrk_r>
 8009390:	3001      	adds	r0, #1
 8009392:	d1dd      	bne.n	8009350 <_malloc_r+0x64>
 8009394:	e7cf      	b.n	8009336 <_malloc_r+0x4a>
 8009396:	bf00      	nop
 8009398:	240000a4 	.word	0x240000a4
 800939c:	240000a8 	.word	0x240000a8

080093a0 <__ssputs_r>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	688e      	ldr	r6, [r1, #8]
 80093a6:	429e      	cmp	r6, r3
 80093a8:	4682      	mov	sl, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	4690      	mov	r8, r2
 80093ae:	461f      	mov	r7, r3
 80093b0:	d838      	bhi.n	8009424 <__ssputs_r+0x84>
 80093b2:	898a      	ldrh	r2, [r1, #12]
 80093b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093b8:	d032      	beq.n	8009420 <__ssputs_r+0x80>
 80093ba:	6825      	ldr	r5, [r4, #0]
 80093bc:	6909      	ldr	r1, [r1, #16]
 80093be:	eba5 0901 	sub.w	r9, r5, r1
 80093c2:	6965      	ldr	r5, [r4, #20]
 80093c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093cc:	3301      	adds	r3, #1
 80093ce:	444b      	add	r3, r9
 80093d0:	106d      	asrs	r5, r5, #1
 80093d2:	429d      	cmp	r5, r3
 80093d4:	bf38      	it	cc
 80093d6:	461d      	movcc	r5, r3
 80093d8:	0553      	lsls	r3, r2, #21
 80093da:	d531      	bpl.n	8009440 <__ssputs_r+0xa0>
 80093dc:	4629      	mov	r1, r5
 80093de:	f7ff ff85 	bl	80092ec <_malloc_r>
 80093e2:	4606      	mov	r6, r0
 80093e4:	b950      	cbnz	r0, 80093fc <__ssputs_r+0x5c>
 80093e6:	230c      	movs	r3, #12
 80093e8:	f8ca 3000 	str.w	r3, [sl]
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fc:	6921      	ldr	r1, [r4, #16]
 80093fe:	464a      	mov	r2, r9
 8009400:	f7ff fe2e 	bl	8009060 <memcpy>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800940a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	6126      	str	r6, [r4, #16]
 8009412:	6165      	str	r5, [r4, #20]
 8009414:	444e      	add	r6, r9
 8009416:	eba5 0509 	sub.w	r5, r5, r9
 800941a:	6026      	str	r6, [r4, #0]
 800941c:	60a5      	str	r5, [r4, #8]
 800941e:	463e      	mov	r6, r7
 8009420:	42be      	cmp	r6, r7
 8009422:	d900      	bls.n	8009426 <__ssputs_r+0x86>
 8009424:	463e      	mov	r6, r7
 8009426:	4632      	mov	r2, r6
 8009428:	6820      	ldr	r0, [r4, #0]
 800942a:	4641      	mov	r1, r8
 800942c:	f000 fe70 	bl	800a110 <memmove>
 8009430:	68a3      	ldr	r3, [r4, #8]
 8009432:	6822      	ldr	r2, [r4, #0]
 8009434:	1b9b      	subs	r3, r3, r6
 8009436:	4432      	add	r2, r6
 8009438:	60a3      	str	r3, [r4, #8]
 800943a:	6022      	str	r2, [r4, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e7db      	b.n	80093f8 <__ssputs_r+0x58>
 8009440:	462a      	mov	r2, r5
 8009442:	f000 fedb 	bl	800a1fc <_realloc_r>
 8009446:	4606      	mov	r6, r0
 8009448:	2800      	cmp	r0, #0
 800944a:	d1e1      	bne.n	8009410 <__ssputs_r+0x70>
 800944c:	6921      	ldr	r1, [r4, #16]
 800944e:	4650      	mov	r0, sl
 8009450:	f000 fe84 	bl	800a15c <_free_r>
 8009454:	e7c7      	b.n	80093e6 <__ssputs_r+0x46>
	...

08009458 <_svfiprintf_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	4698      	mov	r8, r3
 800945e:	898b      	ldrh	r3, [r1, #12]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	b09d      	sub	sp, #116	; 0x74
 8009464:	4607      	mov	r7, r0
 8009466:	460d      	mov	r5, r1
 8009468:	4614      	mov	r4, r2
 800946a:	d50e      	bpl.n	800948a <_svfiprintf_r+0x32>
 800946c:	690b      	ldr	r3, [r1, #16]
 800946e:	b963      	cbnz	r3, 800948a <_svfiprintf_r+0x32>
 8009470:	2140      	movs	r1, #64	; 0x40
 8009472:	f7ff ff3b 	bl	80092ec <_malloc_r>
 8009476:	6028      	str	r0, [r5, #0]
 8009478:	6128      	str	r0, [r5, #16]
 800947a:	b920      	cbnz	r0, 8009486 <_svfiprintf_r+0x2e>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	e0d1      	b.n	800962a <_svfiprintf_r+0x1d2>
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	616b      	str	r3, [r5, #20]
 800948a:	2300      	movs	r3, #0
 800948c:	9309      	str	r3, [sp, #36]	; 0x24
 800948e:	2320      	movs	r3, #32
 8009490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009494:	f8cd 800c 	str.w	r8, [sp, #12]
 8009498:	2330      	movs	r3, #48	; 0x30
 800949a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009644 <_svfiprintf_r+0x1ec>
 800949e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094a2:	f04f 0901 	mov.w	r9, #1
 80094a6:	4623      	mov	r3, r4
 80094a8:	469a      	mov	sl, r3
 80094aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ae:	b10a      	cbz	r2, 80094b4 <_svfiprintf_r+0x5c>
 80094b0:	2a25      	cmp	r2, #37	; 0x25
 80094b2:	d1f9      	bne.n	80094a8 <_svfiprintf_r+0x50>
 80094b4:	ebba 0b04 	subs.w	fp, sl, r4
 80094b8:	d00b      	beq.n	80094d2 <_svfiprintf_r+0x7a>
 80094ba:	465b      	mov	r3, fp
 80094bc:	4622      	mov	r2, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff ff6d 	bl	80093a0 <__ssputs_r>
 80094c6:	3001      	adds	r0, #1
 80094c8:	f000 80aa 	beq.w	8009620 <_svfiprintf_r+0x1c8>
 80094cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ce:	445a      	add	r2, fp
 80094d0:	9209      	str	r2, [sp, #36]	; 0x24
 80094d2:	f89a 3000 	ldrb.w	r3, [sl]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80a2 	beq.w	8009620 <_svfiprintf_r+0x1c8>
 80094dc:	2300      	movs	r3, #0
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e6:	f10a 0a01 	add.w	sl, sl, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	9307      	str	r3, [sp, #28]
 80094ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094f2:	931a      	str	r3, [sp, #104]	; 0x68
 80094f4:	4654      	mov	r4, sl
 80094f6:	2205      	movs	r2, #5
 80094f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fc:	4851      	ldr	r0, [pc, #324]	; (8009644 <_svfiprintf_r+0x1ec>)
 80094fe:	f7f6 fef7 	bl	80002f0 <memchr>
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	b9d8      	cbnz	r0, 800953e <_svfiprintf_r+0xe6>
 8009506:	06d0      	lsls	r0, r2, #27
 8009508:	bf44      	itt	mi
 800950a:	2320      	movmi	r3, #32
 800950c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009510:	0711      	lsls	r1, r2, #28
 8009512:	bf44      	itt	mi
 8009514:	232b      	movmi	r3, #43	; 0x2b
 8009516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800951a:	f89a 3000 	ldrb.w	r3, [sl]
 800951e:	2b2a      	cmp	r3, #42	; 0x2a
 8009520:	d015      	beq.n	800954e <_svfiprintf_r+0xf6>
 8009522:	9a07      	ldr	r2, [sp, #28]
 8009524:	4654      	mov	r4, sl
 8009526:	2000      	movs	r0, #0
 8009528:	f04f 0c0a 	mov.w	ip, #10
 800952c:	4621      	mov	r1, r4
 800952e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009532:	3b30      	subs	r3, #48	; 0x30
 8009534:	2b09      	cmp	r3, #9
 8009536:	d94e      	bls.n	80095d6 <_svfiprintf_r+0x17e>
 8009538:	b1b0      	cbz	r0, 8009568 <_svfiprintf_r+0x110>
 800953a:	9207      	str	r2, [sp, #28]
 800953c:	e014      	b.n	8009568 <_svfiprintf_r+0x110>
 800953e:	eba0 0308 	sub.w	r3, r0, r8
 8009542:	fa09 f303 	lsl.w	r3, r9, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	46a2      	mov	sl, r4
 800954c:	e7d2      	b.n	80094f4 <_svfiprintf_r+0x9c>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	1d19      	adds	r1, r3, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	9103      	str	r1, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfbb      	ittet	lt
 800955a:	425b      	neglt	r3, r3
 800955c:	f042 0202 	orrlt.w	r2, r2, #2
 8009560:	9307      	strge	r3, [sp, #28]
 8009562:	9307      	strlt	r3, [sp, #28]
 8009564:	bfb8      	it	lt
 8009566:	9204      	strlt	r2, [sp, #16]
 8009568:	7823      	ldrb	r3, [r4, #0]
 800956a:	2b2e      	cmp	r3, #46	; 0x2e
 800956c:	d10c      	bne.n	8009588 <_svfiprintf_r+0x130>
 800956e:	7863      	ldrb	r3, [r4, #1]
 8009570:	2b2a      	cmp	r3, #42	; 0x2a
 8009572:	d135      	bne.n	80095e0 <_svfiprintf_r+0x188>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	1d1a      	adds	r2, r3, #4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	9203      	str	r2, [sp, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	bfb8      	it	lt
 8009580:	f04f 33ff 	movlt.w	r3, #4294967295
 8009584:	3402      	adds	r4, #2
 8009586:	9305      	str	r3, [sp, #20]
 8009588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009654 <_svfiprintf_r+0x1fc>
 800958c:	7821      	ldrb	r1, [r4, #0]
 800958e:	2203      	movs	r2, #3
 8009590:	4650      	mov	r0, sl
 8009592:	f7f6 fead 	bl	80002f0 <memchr>
 8009596:	b140      	cbz	r0, 80095aa <_svfiprintf_r+0x152>
 8009598:	2340      	movs	r3, #64	; 0x40
 800959a:	eba0 000a 	sub.w	r0, r0, sl
 800959e:	fa03 f000 	lsl.w	r0, r3, r0
 80095a2:	9b04      	ldr	r3, [sp, #16]
 80095a4:	4303      	orrs	r3, r0
 80095a6:	3401      	adds	r4, #1
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ae:	4826      	ldr	r0, [pc, #152]	; (8009648 <_svfiprintf_r+0x1f0>)
 80095b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095b4:	2206      	movs	r2, #6
 80095b6:	f7f6 fe9b 	bl	80002f0 <memchr>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d038      	beq.n	8009630 <_svfiprintf_r+0x1d8>
 80095be:	4b23      	ldr	r3, [pc, #140]	; (800964c <_svfiprintf_r+0x1f4>)
 80095c0:	bb1b      	cbnz	r3, 800960a <_svfiprintf_r+0x1b2>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	3307      	adds	r3, #7
 80095c6:	f023 0307 	bic.w	r3, r3, #7
 80095ca:	3308      	adds	r3, #8
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d0:	4433      	add	r3, r6
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	e767      	b.n	80094a6 <_svfiprintf_r+0x4e>
 80095d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095da:	460c      	mov	r4, r1
 80095dc:	2001      	movs	r0, #1
 80095de:	e7a5      	b.n	800952c <_svfiprintf_r+0xd4>
 80095e0:	2300      	movs	r3, #0
 80095e2:	3401      	adds	r4, #1
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	4619      	mov	r1, r3
 80095e8:	f04f 0c0a 	mov.w	ip, #10
 80095ec:	4620      	mov	r0, r4
 80095ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f2:	3a30      	subs	r2, #48	; 0x30
 80095f4:	2a09      	cmp	r2, #9
 80095f6:	d903      	bls.n	8009600 <_svfiprintf_r+0x1a8>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0c5      	beq.n	8009588 <_svfiprintf_r+0x130>
 80095fc:	9105      	str	r1, [sp, #20]
 80095fe:	e7c3      	b.n	8009588 <_svfiprintf_r+0x130>
 8009600:	fb0c 2101 	mla	r1, ip, r1, r2
 8009604:	4604      	mov	r4, r0
 8009606:	2301      	movs	r3, #1
 8009608:	e7f0      	b.n	80095ec <_svfiprintf_r+0x194>
 800960a:	ab03      	add	r3, sp, #12
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462a      	mov	r2, r5
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <_svfiprintf_r+0x1f8>)
 8009612:	a904      	add	r1, sp, #16
 8009614:	4638      	mov	r0, r7
 8009616:	f3af 8000 	nop.w
 800961a:	1c42      	adds	r2, r0, #1
 800961c:	4606      	mov	r6, r0
 800961e:	d1d6      	bne.n	80095ce <_svfiprintf_r+0x176>
 8009620:	89ab      	ldrh	r3, [r5, #12]
 8009622:	065b      	lsls	r3, r3, #25
 8009624:	f53f af2c 	bmi.w	8009480 <_svfiprintf_r+0x28>
 8009628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800962a:	b01d      	add	sp, #116	; 0x74
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	ab03      	add	r3, sp, #12
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	462a      	mov	r2, r5
 8009636:	4b06      	ldr	r3, [pc, #24]	; (8009650 <_svfiprintf_r+0x1f8>)
 8009638:	a904      	add	r1, sp, #16
 800963a:	4638      	mov	r0, r7
 800963c:	f000 f9d4 	bl	80099e8 <_printf_i>
 8009640:	e7eb      	b.n	800961a <_svfiprintf_r+0x1c2>
 8009642:	bf00      	nop
 8009644:	0800a3e0 	.word	0x0800a3e0
 8009648:	0800a3ea 	.word	0x0800a3ea
 800964c:	00000000 	.word	0x00000000
 8009650:	080093a1 	.word	0x080093a1
 8009654:	0800a3e6 	.word	0x0800a3e6

08009658 <__sfputc_r>:
 8009658:	6893      	ldr	r3, [r2, #8]
 800965a:	3b01      	subs	r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	b410      	push	{r4}
 8009660:	6093      	str	r3, [r2, #8]
 8009662:	da08      	bge.n	8009676 <__sfputc_r+0x1e>
 8009664:	6994      	ldr	r4, [r2, #24]
 8009666:	42a3      	cmp	r3, r4
 8009668:	db01      	blt.n	800966e <__sfputc_r+0x16>
 800966a:	290a      	cmp	r1, #10
 800966c:	d103      	bne.n	8009676 <__sfputc_r+0x1e>
 800966e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009672:	f000 bb33 	b.w	8009cdc <__swbuf_r>
 8009676:	6813      	ldr	r3, [r2, #0]
 8009678:	1c58      	adds	r0, r3, #1
 800967a:	6010      	str	r0, [r2, #0]
 800967c:	7019      	strb	r1, [r3, #0]
 800967e:	4608      	mov	r0, r1
 8009680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009684:	4770      	bx	lr

08009686 <__sfputs_r>:
 8009686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	460f      	mov	r7, r1
 800968c:	4614      	mov	r4, r2
 800968e:	18d5      	adds	r5, r2, r3
 8009690:	42ac      	cmp	r4, r5
 8009692:	d101      	bne.n	8009698 <__sfputs_r+0x12>
 8009694:	2000      	movs	r0, #0
 8009696:	e007      	b.n	80096a8 <__sfputs_r+0x22>
 8009698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969c:	463a      	mov	r2, r7
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ffda 	bl	8009658 <__sfputc_r>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d1f3      	bne.n	8009690 <__sfputs_r+0xa>
 80096a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096ac <_vfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	460d      	mov	r5, r1
 80096b2:	b09d      	sub	sp, #116	; 0x74
 80096b4:	4614      	mov	r4, r2
 80096b6:	4698      	mov	r8, r3
 80096b8:	4606      	mov	r6, r0
 80096ba:	b118      	cbz	r0, 80096c4 <_vfiprintf_r+0x18>
 80096bc:	6983      	ldr	r3, [r0, #24]
 80096be:	b90b      	cbnz	r3, 80096c4 <_vfiprintf_r+0x18>
 80096c0:	f7ff fd74 	bl	80091ac <__sinit>
 80096c4:	4b89      	ldr	r3, [pc, #548]	; (80098ec <_vfiprintf_r+0x240>)
 80096c6:	429d      	cmp	r5, r3
 80096c8:	d11b      	bne.n	8009702 <_vfiprintf_r+0x56>
 80096ca:	6875      	ldr	r5, [r6, #4]
 80096cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ce:	07d9      	lsls	r1, r3, #31
 80096d0:	d405      	bmi.n	80096de <_vfiprintf_r+0x32>
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	059a      	lsls	r2, r3, #22
 80096d6:	d402      	bmi.n	80096de <_vfiprintf_r+0x32>
 80096d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096da:	f7ff fe05 	bl	80092e8 <__retarget_lock_acquire_recursive>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	071b      	lsls	r3, r3, #28
 80096e2:	d501      	bpl.n	80096e8 <_vfiprintf_r+0x3c>
 80096e4:	692b      	ldr	r3, [r5, #16]
 80096e6:	b9eb      	cbnz	r3, 8009724 <_vfiprintf_r+0x78>
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 fb5a 	bl	8009da4 <__swsetup_r>
 80096f0:	b1c0      	cbz	r0, 8009724 <_vfiprintf_r+0x78>
 80096f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f4:	07dc      	lsls	r4, r3, #31
 80096f6:	d50e      	bpl.n	8009716 <_vfiprintf_r+0x6a>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b01d      	add	sp, #116	; 0x74
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	4b7b      	ldr	r3, [pc, #492]	; (80098f0 <_vfiprintf_r+0x244>)
 8009704:	429d      	cmp	r5, r3
 8009706:	d101      	bne.n	800970c <_vfiprintf_r+0x60>
 8009708:	68b5      	ldr	r5, [r6, #8]
 800970a:	e7df      	b.n	80096cc <_vfiprintf_r+0x20>
 800970c:	4b79      	ldr	r3, [pc, #484]	; (80098f4 <_vfiprintf_r+0x248>)
 800970e:	429d      	cmp	r5, r3
 8009710:	bf08      	it	eq
 8009712:	68f5      	ldreq	r5, [r6, #12]
 8009714:	e7da      	b.n	80096cc <_vfiprintf_r+0x20>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	0598      	lsls	r0, r3, #22
 800971a:	d4ed      	bmi.n	80096f8 <_vfiprintf_r+0x4c>
 800971c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971e:	f7ff fde4 	bl	80092ea <__retarget_lock_release_recursive>
 8009722:	e7e9      	b.n	80096f8 <_vfiprintf_r+0x4c>
 8009724:	2300      	movs	r3, #0
 8009726:	9309      	str	r3, [sp, #36]	; 0x24
 8009728:	2320      	movs	r3, #32
 800972a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800972e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009732:	2330      	movs	r3, #48	; 0x30
 8009734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098f8 <_vfiprintf_r+0x24c>
 8009738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973c:	f04f 0901 	mov.w	r9, #1
 8009740:	4623      	mov	r3, r4
 8009742:	469a      	mov	sl, r3
 8009744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009748:	b10a      	cbz	r2, 800974e <_vfiprintf_r+0xa2>
 800974a:	2a25      	cmp	r2, #37	; 0x25
 800974c:	d1f9      	bne.n	8009742 <_vfiprintf_r+0x96>
 800974e:	ebba 0b04 	subs.w	fp, sl, r4
 8009752:	d00b      	beq.n	800976c <_vfiprintf_r+0xc0>
 8009754:	465b      	mov	r3, fp
 8009756:	4622      	mov	r2, r4
 8009758:	4629      	mov	r1, r5
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff93 	bl	8009686 <__sfputs_r>
 8009760:	3001      	adds	r0, #1
 8009762:	f000 80aa 	beq.w	80098ba <_vfiprintf_r+0x20e>
 8009766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009768:	445a      	add	r2, fp
 800976a:	9209      	str	r2, [sp, #36]	; 0x24
 800976c:	f89a 3000 	ldrb.w	r3, [sl]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 80a2 	beq.w	80098ba <_vfiprintf_r+0x20e>
 8009776:	2300      	movs	r3, #0
 8009778:	f04f 32ff 	mov.w	r2, #4294967295
 800977c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009780:	f10a 0a01 	add.w	sl, sl, #1
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978c:	931a      	str	r3, [sp, #104]	; 0x68
 800978e:	4654      	mov	r4, sl
 8009790:	2205      	movs	r2, #5
 8009792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009796:	4858      	ldr	r0, [pc, #352]	; (80098f8 <_vfiprintf_r+0x24c>)
 8009798:	f7f6 fdaa 	bl	80002f0 <memchr>
 800979c:	9a04      	ldr	r2, [sp, #16]
 800979e:	b9d8      	cbnz	r0, 80097d8 <_vfiprintf_r+0x12c>
 80097a0:	06d1      	lsls	r1, r2, #27
 80097a2:	bf44      	itt	mi
 80097a4:	2320      	movmi	r3, #32
 80097a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097aa:	0713      	lsls	r3, r2, #28
 80097ac:	bf44      	itt	mi
 80097ae:	232b      	movmi	r3, #43	; 0x2b
 80097b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b4:	f89a 3000 	ldrb.w	r3, [sl]
 80097b8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ba:	d015      	beq.n	80097e8 <_vfiprintf_r+0x13c>
 80097bc:	9a07      	ldr	r2, [sp, #28]
 80097be:	4654      	mov	r4, sl
 80097c0:	2000      	movs	r0, #0
 80097c2:	f04f 0c0a 	mov.w	ip, #10
 80097c6:	4621      	mov	r1, r4
 80097c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097cc:	3b30      	subs	r3, #48	; 0x30
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	d94e      	bls.n	8009870 <_vfiprintf_r+0x1c4>
 80097d2:	b1b0      	cbz	r0, 8009802 <_vfiprintf_r+0x156>
 80097d4:	9207      	str	r2, [sp, #28]
 80097d6:	e014      	b.n	8009802 <_vfiprintf_r+0x156>
 80097d8:	eba0 0308 	sub.w	r3, r0, r8
 80097dc:	fa09 f303 	lsl.w	r3, r9, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	46a2      	mov	sl, r4
 80097e6:	e7d2      	b.n	800978e <_vfiprintf_r+0xe2>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	1d19      	adds	r1, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9103      	str	r1, [sp, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bfbb      	ittet	lt
 80097f4:	425b      	neglt	r3, r3
 80097f6:	f042 0202 	orrlt.w	r2, r2, #2
 80097fa:	9307      	strge	r3, [sp, #28]
 80097fc:	9307      	strlt	r3, [sp, #28]
 80097fe:	bfb8      	it	lt
 8009800:	9204      	strlt	r2, [sp, #16]
 8009802:	7823      	ldrb	r3, [r4, #0]
 8009804:	2b2e      	cmp	r3, #46	; 0x2e
 8009806:	d10c      	bne.n	8009822 <_vfiprintf_r+0x176>
 8009808:	7863      	ldrb	r3, [r4, #1]
 800980a:	2b2a      	cmp	r3, #42	; 0x2a
 800980c:	d135      	bne.n	800987a <_vfiprintf_r+0x1ce>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	1d1a      	adds	r2, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	9203      	str	r2, [sp, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfb8      	it	lt
 800981a:	f04f 33ff 	movlt.w	r3, #4294967295
 800981e:	3402      	adds	r4, #2
 8009820:	9305      	str	r3, [sp, #20]
 8009822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009908 <_vfiprintf_r+0x25c>
 8009826:	7821      	ldrb	r1, [r4, #0]
 8009828:	2203      	movs	r2, #3
 800982a:	4650      	mov	r0, sl
 800982c:	f7f6 fd60 	bl	80002f0 <memchr>
 8009830:	b140      	cbz	r0, 8009844 <_vfiprintf_r+0x198>
 8009832:	2340      	movs	r3, #64	; 0x40
 8009834:	eba0 000a 	sub.w	r0, r0, sl
 8009838:	fa03 f000 	lsl.w	r0, r3, r0
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	4303      	orrs	r3, r0
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	482c      	ldr	r0, [pc, #176]	; (80098fc <_vfiprintf_r+0x250>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fd4e 	bl	80002f0 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d03f      	beq.n	80098d8 <_vfiprintf_r+0x22c>
 8009858:	4b29      	ldr	r3, [pc, #164]	; (8009900 <_vfiprintf_r+0x254>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_vfiprintf_r+0x1f8>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	443b      	add	r3, r7
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	e767      	b.n	8009740 <_vfiprintf_r+0x94>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a5      	b.n	80097c6 <_vfiprintf_r+0x11a>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	; 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_vfiprintf_r+0x1ee>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c5      	beq.n	8009822 <_vfiprintf_r+0x176>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c3      	b.n	8009822 <_vfiprintf_r+0x176>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_vfiprintf_r+0x1da>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b16      	ldr	r3, [pc, #88]	; (8009904 <_vfiprintf_r+0x258>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f3af 8000 	nop.w
 80098b4:	4607      	mov	r7, r0
 80098b6:	1c78      	adds	r0, r7, #1
 80098b8:	d1d6      	bne.n	8009868 <_vfiprintf_r+0x1bc>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07d9      	lsls	r1, r3, #31
 80098be:	d405      	bmi.n	80098cc <_vfiprintf_r+0x220>
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	059a      	lsls	r2, r3, #22
 80098c4:	d402      	bmi.n	80098cc <_vfiprintf_r+0x220>
 80098c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c8:	f7ff fd0f 	bl	80092ea <__retarget_lock_release_recursive>
 80098cc:	89ab      	ldrh	r3, [r5, #12]
 80098ce:	065b      	lsls	r3, r3, #25
 80098d0:	f53f af12 	bmi.w	80096f8 <_vfiprintf_r+0x4c>
 80098d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098d6:	e711      	b.n	80096fc <_vfiprintf_r+0x50>
 80098d8:	ab03      	add	r3, sp, #12
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	462a      	mov	r2, r5
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <_vfiprintf_r+0x258>)
 80098e0:	a904      	add	r1, sp, #16
 80098e2:	4630      	mov	r0, r6
 80098e4:	f000 f880 	bl	80099e8 <_printf_i>
 80098e8:	e7e4      	b.n	80098b4 <_vfiprintf_r+0x208>
 80098ea:	bf00      	nop
 80098ec:	0800a3a0 	.word	0x0800a3a0
 80098f0:	0800a3c0 	.word	0x0800a3c0
 80098f4:	0800a380 	.word	0x0800a380
 80098f8:	0800a3e0 	.word	0x0800a3e0
 80098fc:	0800a3ea 	.word	0x0800a3ea
 8009900:	00000000 	.word	0x00000000
 8009904:	08009687 	.word	0x08009687
 8009908:	0800a3e6 	.word	0x0800a3e6

0800990c <_printf_common>:
 800990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	4616      	mov	r6, r2
 8009912:	4699      	mov	r9, r3
 8009914:	688a      	ldr	r2, [r1, #8]
 8009916:	690b      	ldr	r3, [r1, #16]
 8009918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800991c:	4293      	cmp	r3, r2
 800991e:	bfb8      	it	lt
 8009920:	4613      	movlt	r3, r2
 8009922:	6033      	str	r3, [r6, #0]
 8009924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009928:	4607      	mov	r7, r0
 800992a:	460c      	mov	r4, r1
 800992c:	b10a      	cbz	r2, 8009932 <_printf_common+0x26>
 800992e:	3301      	adds	r3, #1
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	0699      	lsls	r1, r3, #26
 8009936:	bf42      	ittt	mi
 8009938:	6833      	ldrmi	r3, [r6, #0]
 800993a:	3302      	addmi	r3, #2
 800993c:	6033      	strmi	r3, [r6, #0]
 800993e:	6825      	ldr	r5, [r4, #0]
 8009940:	f015 0506 	ands.w	r5, r5, #6
 8009944:	d106      	bne.n	8009954 <_printf_common+0x48>
 8009946:	f104 0a19 	add.w	sl, r4, #25
 800994a:	68e3      	ldr	r3, [r4, #12]
 800994c:	6832      	ldr	r2, [r6, #0]
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	42ab      	cmp	r3, r5
 8009952:	dc26      	bgt.n	80099a2 <_printf_common+0x96>
 8009954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009958:	1e13      	subs	r3, r2, #0
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	bf18      	it	ne
 800995e:	2301      	movne	r3, #1
 8009960:	0692      	lsls	r2, r2, #26
 8009962:	d42b      	bmi.n	80099bc <_printf_common+0xb0>
 8009964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009968:	4649      	mov	r1, r9
 800996a:	4638      	mov	r0, r7
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d01e      	beq.n	80099b0 <_printf_common+0xa4>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	68e5      	ldr	r5, [r4, #12]
 8009976:	6832      	ldr	r2, [r6, #0]
 8009978:	f003 0306 	and.w	r3, r3, #6
 800997c:	2b04      	cmp	r3, #4
 800997e:	bf08      	it	eq
 8009980:	1aad      	subeq	r5, r5, r2
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	6922      	ldr	r2, [r4, #16]
 8009986:	bf0c      	ite	eq
 8009988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800998c:	2500      	movne	r5, #0
 800998e:	4293      	cmp	r3, r2
 8009990:	bfc4      	itt	gt
 8009992:	1a9b      	subgt	r3, r3, r2
 8009994:	18ed      	addgt	r5, r5, r3
 8009996:	2600      	movs	r6, #0
 8009998:	341a      	adds	r4, #26
 800999a:	42b5      	cmp	r5, r6
 800999c:	d11a      	bne.n	80099d4 <_printf_common+0xc8>
 800999e:	2000      	movs	r0, #0
 80099a0:	e008      	b.n	80099b4 <_printf_common+0xa8>
 80099a2:	2301      	movs	r3, #1
 80099a4:	4652      	mov	r2, sl
 80099a6:	4649      	mov	r1, r9
 80099a8:	4638      	mov	r0, r7
 80099aa:	47c0      	blx	r8
 80099ac:	3001      	adds	r0, #1
 80099ae:	d103      	bne.n	80099b8 <_printf_common+0xac>
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b8:	3501      	adds	r5, #1
 80099ba:	e7c6      	b.n	800994a <_printf_common+0x3e>
 80099bc:	18e1      	adds	r1, r4, r3
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	2030      	movs	r0, #48	; 0x30
 80099c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099c6:	4422      	add	r2, r4
 80099c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d0:	3302      	adds	r3, #2
 80099d2:	e7c7      	b.n	8009964 <_printf_common+0x58>
 80099d4:	2301      	movs	r3, #1
 80099d6:	4622      	mov	r2, r4
 80099d8:	4649      	mov	r1, r9
 80099da:	4638      	mov	r0, r7
 80099dc:	47c0      	blx	r8
 80099de:	3001      	adds	r0, #1
 80099e0:	d0e6      	beq.n	80099b0 <_printf_common+0xa4>
 80099e2:	3601      	adds	r6, #1
 80099e4:	e7d9      	b.n	800999a <_printf_common+0x8e>
	...

080099e8 <_printf_i>:
 80099e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	460c      	mov	r4, r1
 80099ee:	4691      	mov	r9, r2
 80099f0:	7e27      	ldrb	r7, [r4, #24]
 80099f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099f4:	2f78      	cmp	r7, #120	; 0x78
 80099f6:	4680      	mov	r8, r0
 80099f8:	469a      	mov	sl, r3
 80099fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099fe:	d807      	bhi.n	8009a10 <_printf_i+0x28>
 8009a00:	2f62      	cmp	r7, #98	; 0x62
 8009a02:	d80a      	bhi.n	8009a1a <_printf_i+0x32>
 8009a04:	2f00      	cmp	r7, #0
 8009a06:	f000 80d8 	beq.w	8009bba <_printf_i+0x1d2>
 8009a0a:	2f58      	cmp	r7, #88	; 0x58
 8009a0c:	f000 80a3 	beq.w	8009b56 <_printf_i+0x16e>
 8009a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a18:	e03a      	b.n	8009a90 <_printf_i+0xa8>
 8009a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a1e:	2b15      	cmp	r3, #21
 8009a20:	d8f6      	bhi.n	8009a10 <_printf_i+0x28>
 8009a22:	a001      	add	r0, pc, #4	; (adr r0, 8009a28 <_printf_i+0x40>)
 8009a24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a28:	08009a81 	.word	0x08009a81
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009a11 	.word	0x08009a11
 8009a34:	08009a11 	.word	0x08009a11
 8009a38:	08009a11 	.word	0x08009a11
 8009a3c:	08009a11 	.word	0x08009a11
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	08009a11 	.word	0x08009a11
 8009a48:	08009a11 	.word	0x08009a11
 8009a4c:	08009a11 	.word	0x08009a11
 8009a50:	08009a11 	.word	0x08009a11
 8009a54:	08009ba1 	.word	0x08009ba1
 8009a58:	08009ac5 	.word	0x08009ac5
 8009a5c:	08009b83 	.word	0x08009b83
 8009a60:	08009a11 	.word	0x08009a11
 8009a64:	08009a11 	.word	0x08009a11
 8009a68:	08009bc3 	.word	0x08009bc3
 8009a6c:	08009a11 	.word	0x08009a11
 8009a70:	08009ac5 	.word	0x08009ac5
 8009a74:	08009a11 	.word	0x08009a11
 8009a78:	08009a11 	.word	0x08009a11
 8009a7c:	08009b8b 	.word	0x08009b8b
 8009a80:	680b      	ldr	r3, [r1, #0]
 8009a82:	1d1a      	adds	r2, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	600a      	str	r2, [r1, #0]
 8009a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a90:	2301      	movs	r3, #1
 8009a92:	e0a3      	b.n	8009bdc <_printf_i+0x1f4>
 8009a94:	6825      	ldr	r5, [r4, #0]
 8009a96:	6808      	ldr	r0, [r1, #0]
 8009a98:	062e      	lsls	r6, r5, #24
 8009a9a:	f100 0304 	add.w	r3, r0, #4
 8009a9e:	d50a      	bpl.n	8009ab6 <_printf_i+0xce>
 8009aa0:	6805      	ldr	r5, [r0, #0]
 8009aa2:	600b      	str	r3, [r1, #0]
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	da03      	bge.n	8009ab0 <_printf_i+0xc8>
 8009aa8:	232d      	movs	r3, #45	; 0x2d
 8009aaa:	426d      	negs	r5, r5
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab0:	485e      	ldr	r0, [pc, #376]	; (8009c2c <_printf_i+0x244>)
 8009ab2:	230a      	movs	r3, #10
 8009ab4:	e019      	b.n	8009aea <_printf_i+0x102>
 8009ab6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009aba:	6805      	ldr	r5, [r0, #0]
 8009abc:	600b      	str	r3, [r1, #0]
 8009abe:	bf18      	it	ne
 8009ac0:	b22d      	sxthne	r5, r5
 8009ac2:	e7ef      	b.n	8009aa4 <_printf_i+0xbc>
 8009ac4:	680b      	ldr	r3, [r1, #0]
 8009ac6:	6825      	ldr	r5, [r4, #0]
 8009ac8:	1d18      	adds	r0, r3, #4
 8009aca:	6008      	str	r0, [r1, #0]
 8009acc:	0628      	lsls	r0, r5, #24
 8009ace:	d501      	bpl.n	8009ad4 <_printf_i+0xec>
 8009ad0:	681d      	ldr	r5, [r3, #0]
 8009ad2:	e002      	b.n	8009ada <_printf_i+0xf2>
 8009ad4:	0669      	lsls	r1, r5, #25
 8009ad6:	d5fb      	bpl.n	8009ad0 <_printf_i+0xe8>
 8009ad8:	881d      	ldrh	r5, [r3, #0]
 8009ada:	4854      	ldr	r0, [pc, #336]	; (8009c2c <_printf_i+0x244>)
 8009adc:	2f6f      	cmp	r7, #111	; 0x6f
 8009ade:	bf0c      	ite	eq
 8009ae0:	2308      	moveq	r3, #8
 8009ae2:	230a      	movne	r3, #10
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aea:	6866      	ldr	r6, [r4, #4]
 8009aec:	60a6      	str	r6, [r4, #8]
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	bfa2      	ittt	ge
 8009af2:	6821      	ldrge	r1, [r4, #0]
 8009af4:	f021 0104 	bicge.w	r1, r1, #4
 8009af8:	6021      	strge	r1, [r4, #0]
 8009afa:	b90d      	cbnz	r5, 8009b00 <_printf_i+0x118>
 8009afc:	2e00      	cmp	r6, #0
 8009afe:	d04d      	beq.n	8009b9c <_printf_i+0x1b4>
 8009b00:	4616      	mov	r6, r2
 8009b02:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b06:	fb03 5711 	mls	r7, r3, r1, r5
 8009b0a:	5dc7      	ldrb	r7, [r0, r7]
 8009b0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b10:	462f      	mov	r7, r5
 8009b12:	42bb      	cmp	r3, r7
 8009b14:	460d      	mov	r5, r1
 8009b16:	d9f4      	bls.n	8009b02 <_printf_i+0x11a>
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d10b      	bne.n	8009b34 <_printf_i+0x14c>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07df      	lsls	r7, r3, #31
 8009b20:	d508      	bpl.n	8009b34 <_printf_i+0x14c>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6861      	ldr	r1, [r4, #4]
 8009b26:	4299      	cmp	r1, r3
 8009b28:	bfde      	ittt	le
 8009b2a:	2330      	movle	r3, #48	; 0x30
 8009b2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b34:	1b92      	subs	r2, r2, r6
 8009b36:	6122      	str	r2, [r4, #16]
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	aa03      	add	r2, sp, #12
 8009b40:	4621      	mov	r1, r4
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7ff fee2 	bl	800990c <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d14c      	bne.n	8009be6 <_printf_i+0x1fe>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	b004      	add	sp, #16
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	4835      	ldr	r0, [pc, #212]	; (8009c2c <_printf_i+0x244>)
 8009b58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	680e      	ldr	r6, [r1, #0]
 8009b60:	061f      	lsls	r7, r3, #24
 8009b62:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b66:	600e      	str	r6, [r1, #0]
 8009b68:	d514      	bpl.n	8009b94 <_printf_i+0x1ac>
 8009b6a:	07d9      	lsls	r1, r3, #31
 8009b6c:	bf44      	itt	mi
 8009b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b72:	6023      	strmi	r3, [r4, #0]
 8009b74:	b91d      	cbnz	r5, 8009b7e <_printf_i+0x196>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	f023 0320 	bic.w	r3, r3, #32
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	2310      	movs	r3, #16
 8009b80:	e7b0      	b.n	8009ae4 <_printf_i+0xfc>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	f043 0320 	orr.w	r3, r3, #32
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	2378      	movs	r3, #120	; 0x78
 8009b8c:	4828      	ldr	r0, [pc, #160]	; (8009c30 <_printf_i+0x248>)
 8009b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b92:	e7e3      	b.n	8009b5c <_printf_i+0x174>
 8009b94:	065e      	lsls	r6, r3, #25
 8009b96:	bf48      	it	mi
 8009b98:	b2ad      	uxthmi	r5, r5
 8009b9a:	e7e6      	b.n	8009b6a <_printf_i+0x182>
 8009b9c:	4616      	mov	r6, r2
 8009b9e:	e7bb      	b.n	8009b18 <_printf_i+0x130>
 8009ba0:	680b      	ldr	r3, [r1, #0]
 8009ba2:	6826      	ldr	r6, [r4, #0]
 8009ba4:	6960      	ldr	r0, [r4, #20]
 8009ba6:	1d1d      	adds	r5, r3, #4
 8009ba8:	600d      	str	r5, [r1, #0]
 8009baa:	0635      	lsls	r5, r6, #24
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	d501      	bpl.n	8009bb4 <_printf_i+0x1cc>
 8009bb0:	6018      	str	r0, [r3, #0]
 8009bb2:	e002      	b.n	8009bba <_printf_i+0x1d2>
 8009bb4:	0671      	lsls	r1, r6, #25
 8009bb6:	d5fb      	bpl.n	8009bb0 <_printf_i+0x1c8>
 8009bb8:	8018      	strh	r0, [r3, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	4616      	mov	r6, r2
 8009bc0:	e7ba      	b.n	8009b38 <_printf_i+0x150>
 8009bc2:	680b      	ldr	r3, [r1, #0]
 8009bc4:	1d1a      	adds	r2, r3, #4
 8009bc6:	600a      	str	r2, [r1, #0]
 8009bc8:	681e      	ldr	r6, [r3, #0]
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7f6 fb8e 	bl	80002f0 <memchr>
 8009bd4:	b108      	cbz	r0, 8009bda <_printf_i+0x1f2>
 8009bd6:	1b80      	subs	r0, r0, r6
 8009bd8:	6060      	str	r0, [r4, #4]
 8009bda:	6863      	ldr	r3, [r4, #4]
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	2300      	movs	r3, #0
 8009be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be4:	e7a8      	b.n	8009b38 <_printf_i+0x150>
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	4632      	mov	r2, r6
 8009bea:	4649      	mov	r1, r9
 8009bec:	4640      	mov	r0, r8
 8009bee:	47d0      	blx	sl
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d0ab      	beq.n	8009b4c <_printf_i+0x164>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	079b      	lsls	r3, r3, #30
 8009bf8:	d413      	bmi.n	8009c22 <_printf_i+0x23a>
 8009bfa:	68e0      	ldr	r0, [r4, #12]
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	4298      	cmp	r0, r3
 8009c00:	bfb8      	it	lt
 8009c02:	4618      	movlt	r0, r3
 8009c04:	e7a4      	b.n	8009b50 <_printf_i+0x168>
 8009c06:	2301      	movs	r3, #1
 8009c08:	4632      	mov	r2, r6
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	47d0      	blx	sl
 8009c10:	3001      	adds	r0, #1
 8009c12:	d09b      	beq.n	8009b4c <_printf_i+0x164>
 8009c14:	3501      	adds	r5, #1
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	9903      	ldr	r1, [sp, #12]
 8009c1a:	1a5b      	subs	r3, r3, r1
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	dcf2      	bgt.n	8009c06 <_printf_i+0x21e>
 8009c20:	e7eb      	b.n	8009bfa <_printf_i+0x212>
 8009c22:	2500      	movs	r5, #0
 8009c24:	f104 0619 	add.w	r6, r4, #25
 8009c28:	e7f5      	b.n	8009c16 <_printf_i+0x22e>
 8009c2a:	bf00      	nop
 8009c2c:	0800a3f1 	.word	0x0800a3f1
 8009c30:	0800a402 	.word	0x0800a402

08009c34 <_sbrk_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_sbrk_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7f7 f9f2 	bl	8001028 <_sbrk>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_sbrk_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_sbrk_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	2400032c 	.word	0x2400032c

08009c54 <__sread>:
 8009c54:	b510      	push	{r4, lr}
 8009c56:	460c      	mov	r4, r1
 8009c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5c:	f000 faf4 	bl	800a248 <_read_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	bfab      	itete	ge
 8009c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c66:	89a3      	ldrhlt	r3, [r4, #12]
 8009c68:	181b      	addge	r3, r3, r0
 8009c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c6e:	bfac      	ite	ge
 8009c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c72:	81a3      	strhlt	r3, [r4, #12]
 8009c74:	bd10      	pop	{r4, pc}

08009c76 <__swrite>:
 8009c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7a:	461f      	mov	r7, r3
 8009c7c:	898b      	ldrh	r3, [r1, #12]
 8009c7e:	05db      	lsls	r3, r3, #23
 8009c80:	4605      	mov	r5, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	4616      	mov	r6, r2
 8009c86:	d505      	bpl.n	8009c94 <__swrite+0x1e>
 8009c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f000 f9c8 	bl	800a024 <_lseek_r>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	f000 b869 	b.w	8009d80 <_write_r>

08009cae <__sseek>:
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb6:	f000 f9b5 	bl	800a024 <_lseek_r>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	bf15      	itete	ne
 8009cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cca:	81a3      	strheq	r3, [r4, #12]
 8009ccc:	bf18      	it	ne
 8009cce:	81a3      	strhne	r3, [r4, #12]
 8009cd0:	bd10      	pop	{r4, pc}

08009cd2 <__sclose>:
 8009cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd6:	f000 b8d3 	b.w	8009e80 <_close_r>
	...

08009cdc <__swbuf_r>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	460e      	mov	r6, r1
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	b118      	cbz	r0, 8009cee <__swbuf_r+0x12>
 8009ce6:	6983      	ldr	r3, [r0, #24]
 8009ce8:	b90b      	cbnz	r3, 8009cee <__swbuf_r+0x12>
 8009cea:	f7ff fa5f 	bl	80091ac <__sinit>
 8009cee:	4b21      	ldr	r3, [pc, #132]	; (8009d74 <__swbuf_r+0x98>)
 8009cf0:	429c      	cmp	r4, r3
 8009cf2:	d12b      	bne.n	8009d4c <__swbuf_r+0x70>
 8009cf4:	686c      	ldr	r4, [r5, #4]
 8009cf6:	69a3      	ldr	r3, [r4, #24]
 8009cf8:	60a3      	str	r3, [r4, #8]
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	071a      	lsls	r2, r3, #28
 8009cfe:	d52f      	bpl.n	8009d60 <__swbuf_r+0x84>
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	b36b      	cbz	r3, 8009d60 <__swbuf_r+0x84>
 8009d04:	6923      	ldr	r3, [r4, #16]
 8009d06:	6820      	ldr	r0, [r4, #0]
 8009d08:	1ac0      	subs	r0, r0, r3
 8009d0a:	6963      	ldr	r3, [r4, #20]
 8009d0c:	b2f6      	uxtb	r6, r6
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	4637      	mov	r7, r6
 8009d12:	dc04      	bgt.n	8009d1e <__swbuf_r+0x42>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f948 	bl	8009fac <_fflush_r>
 8009d1c:	bb30      	cbnz	r0, 8009d6c <__swbuf_r+0x90>
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	60a3      	str	r3, [r4, #8]
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	701e      	strb	r6, [r3, #0]
 8009d2c:	6963      	ldr	r3, [r4, #20]
 8009d2e:	3001      	adds	r0, #1
 8009d30:	4283      	cmp	r3, r0
 8009d32:	d004      	beq.n	8009d3e <__swbuf_r+0x62>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	07db      	lsls	r3, r3, #31
 8009d38:	d506      	bpl.n	8009d48 <__swbuf_r+0x6c>
 8009d3a:	2e0a      	cmp	r6, #10
 8009d3c:	d104      	bne.n	8009d48 <__swbuf_r+0x6c>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	f000 f933 	bl	8009fac <_fflush_r>
 8009d46:	b988      	cbnz	r0, 8009d6c <__swbuf_r+0x90>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <__swbuf_r+0x9c>)
 8009d4e:	429c      	cmp	r4, r3
 8009d50:	d101      	bne.n	8009d56 <__swbuf_r+0x7a>
 8009d52:	68ac      	ldr	r4, [r5, #8]
 8009d54:	e7cf      	b.n	8009cf6 <__swbuf_r+0x1a>
 8009d56:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <__swbuf_r+0xa0>)
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	bf08      	it	eq
 8009d5c:	68ec      	ldreq	r4, [r5, #12]
 8009d5e:	e7ca      	b.n	8009cf6 <__swbuf_r+0x1a>
 8009d60:	4621      	mov	r1, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	f000 f81e 	bl	8009da4 <__swsetup_r>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	d0cb      	beq.n	8009d04 <__swbuf_r+0x28>
 8009d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8009d70:	e7ea      	b.n	8009d48 <__swbuf_r+0x6c>
 8009d72:	bf00      	nop
 8009d74:	0800a3a0 	.word	0x0800a3a0
 8009d78:	0800a3c0 	.word	0x0800a3c0
 8009d7c:	0800a380 	.word	0x0800a380

08009d80 <_write_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	; (8009da0 <_write_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f6 ffbc 	bl	8000d0c <_write>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_write_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_write_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	2400032c 	.word	0x2400032c

08009da4 <__swsetup_r>:
 8009da4:	4b32      	ldr	r3, [pc, #200]	; (8009e70 <__swsetup_r+0xcc>)
 8009da6:	b570      	push	{r4, r5, r6, lr}
 8009da8:	681d      	ldr	r5, [r3, #0]
 8009daa:	4606      	mov	r6, r0
 8009dac:	460c      	mov	r4, r1
 8009dae:	b125      	cbz	r5, 8009dba <__swsetup_r+0x16>
 8009db0:	69ab      	ldr	r3, [r5, #24]
 8009db2:	b913      	cbnz	r3, 8009dba <__swsetup_r+0x16>
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7ff f9f9 	bl	80091ac <__sinit>
 8009dba:	4b2e      	ldr	r3, [pc, #184]	; (8009e74 <__swsetup_r+0xd0>)
 8009dbc:	429c      	cmp	r4, r3
 8009dbe:	d10f      	bne.n	8009de0 <__swsetup_r+0x3c>
 8009dc0:	686c      	ldr	r4, [r5, #4]
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dc8:	0719      	lsls	r1, r3, #28
 8009dca:	d42c      	bmi.n	8009e26 <__swsetup_r+0x82>
 8009dcc:	06dd      	lsls	r5, r3, #27
 8009dce:	d411      	bmi.n	8009df4 <__swsetup_r+0x50>
 8009dd0:	2309      	movs	r3, #9
 8009dd2:	6033      	str	r3, [r6, #0]
 8009dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	e03e      	b.n	8009e5e <__swsetup_r+0xba>
 8009de0:	4b25      	ldr	r3, [pc, #148]	; (8009e78 <__swsetup_r+0xd4>)
 8009de2:	429c      	cmp	r4, r3
 8009de4:	d101      	bne.n	8009dea <__swsetup_r+0x46>
 8009de6:	68ac      	ldr	r4, [r5, #8]
 8009de8:	e7eb      	b.n	8009dc2 <__swsetup_r+0x1e>
 8009dea:	4b24      	ldr	r3, [pc, #144]	; (8009e7c <__swsetup_r+0xd8>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	bf08      	it	eq
 8009df0:	68ec      	ldreq	r4, [r5, #12]
 8009df2:	e7e6      	b.n	8009dc2 <__swsetup_r+0x1e>
 8009df4:	0758      	lsls	r0, r3, #29
 8009df6:	d512      	bpl.n	8009e1e <__swsetup_r+0x7a>
 8009df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dfa:	b141      	cbz	r1, 8009e0e <__swsetup_r+0x6a>
 8009dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e00:	4299      	cmp	r1, r3
 8009e02:	d002      	beq.n	8009e0a <__swsetup_r+0x66>
 8009e04:	4630      	mov	r0, r6
 8009e06:	f000 f9a9 	bl	800a15c <_free_r>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8009e0e:	89a3      	ldrh	r3, [r4, #12]
 8009e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	2300      	movs	r3, #0
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	6923      	ldr	r3, [r4, #16]
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f043 0308 	orr.w	r3, r3, #8
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	6923      	ldr	r3, [r4, #16]
 8009e28:	b94b      	cbnz	r3, 8009e3e <__swsetup_r+0x9a>
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e34:	d003      	beq.n	8009e3e <__swsetup_r+0x9a>
 8009e36:	4621      	mov	r1, r4
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 f929 	bl	800a090 <__smakebuf_r>
 8009e3e:	89a0      	ldrh	r0, [r4, #12]
 8009e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e44:	f010 0301 	ands.w	r3, r0, #1
 8009e48:	d00a      	beq.n	8009e60 <__swsetup_r+0xbc>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60a3      	str	r3, [r4, #8]
 8009e4e:	6963      	ldr	r3, [r4, #20]
 8009e50:	425b      	negs	r3, r3
 8009e52:	61a3      	str	r3, [r4, #24]
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	b943      	cbnz	r3, 8009e6a <__swsetup_r+0xc6>
 8009e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e5c:	d1ba      	bne.n	8009dd4 <__swsetup_r+0x30>
 8009e5e:	bd70      	pop	{r4, r5, r6, pc}
 8009e60:	0781      	lsls	r1, r0, #30
 8009e62:	bf58      	it	pl
 8009e64:	6963      	ldrpl	r3, [r4, #20]
 8009e66:	60a3      	str	r3, [r4, #8]
 8009e68:	e7f4      	b.n	8009e54 <__swsetup_r+0xb0>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e7f7      	b.n	8009e5e <__swsetup_r+0xba>
 8009e6e:	bf00      	nop
 8009e70:	24000010 	.word	0x24000010
 8009e74:	0800a3a0 	.word	0x0800a3a0
 8009e78:	0800a3c0 	.word	0x0800a3c0
 8009e7c:	0800a380 	.word	0x0800a380

08009e80 <_close_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4d06      	ldr	r5, [pc, #24]	; (8009e9c <_close_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4604      	mov	r4, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	f7f7 f897 	bl	8000fbe <_close>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_close_r+0x1a>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_close_r+0x1a>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	2400032c 	.word	0x2400032c

08009ea0 <__sflush_r>:
 8009ea0:	898a      	ldrh	r2, [r1, #12]
 8009ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	0710      	lsls	r0, r2, #28
 8009eaa:	460c      	mov	r4, r1
 8009eac:	d458      	bmi.n	8009f60 <__sflush_r+0xc0>
 8009eae:	684b      	ldr	r3, [r1, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	dc05      	bgt.n	8009ec0 <__sflush_r+0x20>
 8009eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	dc02      	bgt.n	8009ec0 <__sflush_r+0x20>
 8009eba:	2000      	movs	r0, #0
 8009ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	d0f9      	beq.n	8009eba <__sflush_r+0x1a>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ecc:	682f      	ldr	r7, [r5, #0]
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	d032      	beq.n	8009f38 <__sflush_r+0x98>
 8009ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	075a      	lsls	r2, r3, #29
 8009ed8:	d505      	bpl.n	8009ee6 <__sflush_r+0x46>
 8009eda:	6863      	ldr	r3, [r4, #4]
 8009edc:	1ac0      	subs	r0, r0, r3
 8009ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ee0:	b10b      	cbz	r3, 8009ee6 <__sflush_r+0x46>
 8009ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ee4:	1ac0      	subs	r0, r0, r3
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	4602      	mov	r2, r0
 8009eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eec:	6a21      	ldr	r1, [r4, #32]
 8009eee:	4628      	mov	r0, r5
 8009ef0:	47b0      	blx	r6
 8009ef2:	1c43      	adds	r3, r0, #1
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	d106      	bne.n	8009f06 <__sflush_r+0x66>
 8009ef8:	6829      	ldr	r1, [r5, #0]
 8009efa:	291d      	cmp	r1, #29
 8009efc:	d82c      	bhi.n	8009f58 <__sflush_r+0xb8>
 8009efe:	4a2a      	ldr	r2, [pc, #168]	; (8009fa8 <__sflush_r+0x108>)
 8009f00:	40ca      	lsrs	r2, r1
 8009f02:	07d6      	lsls	r6, r2, #31
 8009f04:	d528      	bpl.n	8009f58 <__sflush_r+0xb8>
 8009f06:	2200      	movs	r2, #0
 8009f08:	6062      	str	r2, [r4, #4]
 8009f0a:	04d9      	lsls	r1, r3, #19
 8009f0c:	6922      	ldr	r2, [r4, #16]
 8009f0e:	6022      	str	r2, [r4, #0]
 8009f10:	d504      	bpl.n	8009f1c <__sflush_r+0x7c>
 8009f12:	1c42      	adds	r2, r0, #1
 8009f14:	d101      	bne.n	8009f1a <__sflush_r+0x7a>
 8009f16:	682b      	ldr	r3, [r5, #0]
 8009f18:	b903      	cbnz	r3, 8009f1c <__sflush_r+0x7c>
 8009f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1e:	602f      	str	r7, [r5, #0]
 8009f20:	2900      	cmp	r1, #0
 8009f22:	d0ca      	beq.n	8009eba <__sflush_r+0x1a>
 8009f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <__sflush_r+0x92>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f000 f915 	bl	800a15c <_free_r>
 8009f32:	2000      	movs	r0, #0
 8009f34:	6360      	str	r0, [r4, #52]	; 0x34
 8009f36:	e7c1      	b.n	8009ebc <__sflush_r+0x1c>
 8009f38:	6a21      	ldr	r1, [r4, #32]
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b0      	blx	r6
 8009f40:	1c41      	adds	r1, r0, #1
 8009f42:	d1c7      	bne.n	8009ed4 <__sflush_r+0x34>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0c4      	beq.n	8009ed4 <__sflush_r+0x34>
 8009f4a:	2b1d      	cmp	r3, #29
 8009f4c:	d001      	beq.n	8009f52 <__sflush_r+0xb2>
 8009f4e:	2b16      	cmp	r3, #22
 8009f50:	d101      	bne.n	8009f56 <__sflush_r+0xb6>
 8009f52:	602f      	str	r7, [r5, #0]
 8009f54:	e7b1      	b.n	8009eba <__sflush_r+0x1a>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5c:	81a3      	strh	r3, [r4, #12]
 8009f5e:	e7ad      	b.n	8009ebc <__sflush_r+0x1c>
 8009f60:	690f      	ldr	r7, [r1, #16]
 8009f62:	2f00      	cmp	r7, #0
 8009f64:	d0a9      	beq.n	8009eba <__sflush_r+0x1a>
 8009f66:	0793      	lsls	r3, r2, #30
 8009f68:	680e      	ldr	r6, [r1, #0]
 8009f6a:	bf08      	it	eq
 8009f6c:	694b      	ldreq	r3, [r1, #20]
 8009f6e:	600f      	str	r7, [r1, #0]
 8009f70:	bf18      	it	ne
 8009f72:	2300      	movne	r3, #0
 8009f74:	eba6 0807 	sub.w	r8, r6, r7
 8009f78:	608b      	str	r3, [r1, #8]
 8009f7a:	f1b8 0f00 	cmp.w	r8, #0
 8009f7e:	dd9c      	ble.n	8009eba <__sflush_r+0x1a>
 8009f80:	6a21      	ldr	r1, [r4, #32]
 8009f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f84:	4643      	mov	r3, r8
 8009f86:	463a      	mov	r2, r7
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b0      	blx	r6
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	dc06      	bgt.n	8009f9e <__sflush_r+0xfe>
 8009f90:	89a3      	ldrh	r3, [r4, #12]
 8009f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f96:	81a3      	strh	r3, [r4, #12]
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	e78e      	b.n	8009ebc <__sflush_r+0x1c>
 8009f9e:	4407      	add	r7, r0
 8009fa0:	eba8 0800 	sub.w	r8, r8, r0
 8009fa4:	e7e9      	b.n	8009f7a <__sflush_r+0xda>
 8009fa6:	bf00      	nop
 8009fa8:	20400001 	.word	0x20400001

08009fac <_fflush_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	690b      	ldr	r3, [r1, #16]
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	b913      	cbnz	r3, 8009fbc <_fflush_r+0x10>
 8009fb6:	2500      	movs	r5, #0
 8009fb8:	4628      	mov	r0, r5
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	b118      	cbz	r0, 8009fc6 <_fflush_r+0x1a>
 8009fbe:	6983      	ldr	r3, [r0, #24]
 8009fc0:	b90b      	cbnz	r3, 8009fc6 <_fflush_r+0x1a>
 8009fc2:	f7ff f8f3 	bl	80091ac <__sinit>
 8009fc6:	4b14      	ldr	r3, [pc, #80]	; (800a018 <_fflush_r+0x6c>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	d11b      	bne.n	800a004 <_fflush_r+0x58>
 8009fcc:	686c      	ldr	r4, [r5, #4]
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0ef      	beq.n	8009fb6 <_fflush_r+0xa>
 8009fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fd8:	07d0      	lsls	r0, r2, #31
 8009fda:	d404      	bmi.n	8009fe6 <_fflush_r+0x3a>
 8009fdc:	0599      	lsls	r1, r3, #22
 8009fde:	d402      	bmi.n	8009fe6 <_fflush_r+0x3a>
 8009fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fe2:	f7ff f981 	bl	80092e8 <__retarget_lock_acquire_recursive>
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	4621      	mov	r1, r4
 8009fea:	f7ff ff59 	bl	8009ea0 <__sflush_r>
 8009fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ff0:	07da      	lsls	r2, r3, #31
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	d4e0      	bmi.n	8009fb8 <_fflush_r+0xc>
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	059b      	lsls	r3, r3, #22
 8009ffa:	d4dd      	bmi.n	8009fb8 <_fflush_r+0xc>
 8009ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ffe:	f7ff f974 	bl	80092ea <__retarget_lock_release_recursive>
 800a002:	e7d9      	b.n	8009fb8 <_fflush_r+0xc>
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <_fflush_r+0x70>)
 800a006:	429c      	cmp	r4, r3
 800a008:	d101      	bne.n	800a00e <_fflush_r+0x62>
 800a00a:	68ac      	ldr	r4, [r5, #8]
 800a00c:	e7df      	b.n	8009fce <_fflush_r+0x22>
 800a00e:	4b04      	ldr	r3, [pc, #16]	; (800a020 <_fflush_r+0x74>)
 800a010:	429c      	cmp	r4, r3
 800a012:	bf08      	it	eq
 800a014:	68ec      	ldreq	r4, [r5, #12]
 800a016:	e7da      	b.n	8009fce <_fflush_r+0x22>
 800a018:	0800a3a0 	.word	0x0800a3a0
 800a01c:	0800a3c0 	.word	0x0800a3c0
 800a020:	0800a380 	.word	0x0800a380

0800a024 <_lseek_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d07      	ldr	r5, [pc, #28]	; (800a044 <_lseek_r+0x20>)
 800a028:	4604      	mov	r4, r0
 800a02a:	4608      	mov	r0, r1
 800a02c:	4611      	mov	r1, r2
 800a02e:	2200      	movs	r2, #0
 800a030:	602a      	str	r2, [r5, #0]
 800a032:	461a      	mov	r2, r3
 800a034:	f7f6 ffea 	bl	800100c <_lseek>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_lseek_r+0x1e>
 800a03c:	682b      	ldr	r3, [r5, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_lseek_r+0x1e>
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	2400032c 	.word	0x2400032c

0800a048 <__swhatbuf_r>:
 800a048:	b570      	push	{r4, r5, r6, lr}
 800a04a:	460e      	mov	r6, r1
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	2900      	cmp	r1, #0
 800a052:	b096      	sub	sp, #88	; 0x58
 800a054:	4614      	mov	r4, r2
 800a056:	461d      	mov	r5, r3
 800a058:	da07      	bge.n	800a06a <__swhatbuf_r+0x22>
 800a05a:	2300      	movs	r3, #0
 800a05c:	602b      	str	r3, [r5, #0]
 800a05e:	89b3      	ldrh	r3, [r6, #12]
 800a060:	061a      	lsls	r2, r3, #24
 800a062:	d410      	bmi.n	800a086 <__swhatbuf_r+0x3e>
 800a064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a068:	e00e      	b.n	800a088 <__swhatbuf_r+0x40>
 800a06a:	466a      	mov	r2, sp
 800a06c:	f000 f8fe 	bl	800a26c <_fstat_r>
 800a070:	2800      	cmp	r0, #0
 800a072:	dbf2      	blt.n	800a05a <__swhatbuf_r+0x12>
 800a074:	9a01      	ldr	r2, [sp, #4]
 800a076:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a07a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a07e:	425a      	negs	r2, r3
 800a080:	415a      	adcs	r2, r3
 800a082:	602a      	str	r2, [r5, #0]
 800a084:	e7ee      	b.n	800a064 <__swhatbuf_r+0x1c>
 800a086:	2340      	movs	r3, #64	; 0x40
 800a088:	2000      	movs	r0, #0
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	b016      	add	sp, #88	; 0x58
 800a08e:	bd70      	pop	{r4, r5, r6, pc}

0800a090 <__smakebuf_r>:
 800a090:	898b      	ldrh	r3, [r1, #12]
 800a092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a094:	079d      	lsls	r5, r3, #30
 800a096:	4606      	mov	r6, r0
 800a098:	460c      	mov	r4, r1
 800a09a:	d507      	bpl.n	800a0ac <__smakebuf_r+0x1c>
 800a09c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0a0:	6023      	str	r3, [r4, #0]
 800a0a2:	6123      	str	r3, [r4, #16]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	6163      	str	r3, [r4, #20]
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	ab01      	add	r3, sp, #4
 800a0ae:	466a      	mov	r2, sp
 800a0b0:	f7ff ffca 	bl	800a048 <__swhatbuf_r>
 800a0b4:	9900      	ldr	r1, [sp, #0]
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7ff f917 	bl	80092ec <_malloc_r>
 800a0be:	b948      	cbnz	r0, 800a0d4 <__smakebuf_r+0x44>
 800a0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0c4:	059a      	lsls	r2, r3, #22
 800a0c6:	d4ef      	bmi.n	800a0a8 <__smakebuf_r+0x18>
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	f043 0302 	orr.w	r3, r3, #2
 800a0d0:	81a3      	strh	r3, [r4, #12]
 800a0d2:	e7e3      	b.n	800a09c <__smakebuf_r+0xc>
 800a0d4:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <__smakebuf_r+0x7c>)
 800a0d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	6020      	str	r0, [r4, #0]
 800a0dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	6163      	str	r3, [r4, #20]
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	6120      	str	r0, [r4, #16]
 800a0ea:	b15b      	cbz	r3, 800a104 <__smakebuf_r+0x74>
 800a0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 f8cd 	bl	800a290 <_isatty_r>
 800a0f6:	b128      	cbz	r0, 800a104 <__smakebuf_r+0x74>
 800a0f8:	89a3      	ldrh	r3, [r4, #12]
 800a0fa:	f023 0303 	bic.w	r3, r3, #3
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	81a3      	strh	r3, [r4, #12]
 800a104:	89a0      	ldrh	r0, [r4, #12]
 800a106:	4305      	orrs	r5, r0
 800a108:	81a5      	strh	r5, [r4, #12]
 800a10a:	e7cd      	b.n	800a0a8 <__smakebuf_r+0x18>
 800a10c:	08009145 	.word	0x08009145

0800a110 <memmove>:
 800a110:	4288      	cmp	r0, r1
 800a112:	b510      	push	{r4, lr}
 800a114:	eb01 0402 	add.w	r4, r1, r2
 800a118:	d902      	bls.n	800a120 <memmove+0x10>
 800a11a:	4284      	cmp	r4, r0
 800a11c:	4623      	mov	r3, r4
 800a11e:	d807      	bhi.n	800a130 <memmove+0x20>
 800a120:	1e43      	subs	r3, r0, #1
 800a122:	42a1      	cmp	r1, r4
 800a124:	d008      	beq.n	800a138 <memmove+0x28>
 800a126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a12e:	e7f8      	b.n	800a122 <memmove+0x12>
 800a130:	4402      	add	r2, r0
 800a132:	4601      	mov	r1, r0
 800a134:	428a      	cmp	r2, r1
 800a136:	d100      	bne.n	800a13a <memmove+0x2a>
 800a138:	bd10      	pop	{r4, pc}
 800a13a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a13e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a142:	e7f7      	b.n	800a134 <memmove+0x24>

0800a144 <__malloc_lock>:
 800a144:	4801      	ldr	r0, [pc, #4]	; (800a14c <__malloc_lock+0x8>)
 800a146:	f7ff b8cf 	b.w	80092e8 <__retarget_lock_acquire_recursive>
 800a14a:	bf00      	nop
 800a14c:	24000324 	.word	0x24000324

0800a150 <__malloc_unlock>:
 800a150:	4801      	ldr	r0, [pc, #4]	; (800a158 <__malloc_unlock+0x8>)
 800a152:	f7ff b8ca 	b.w	80092ea <__retarget_lock_release_recursive>
 800a156:	bf00      	nop
 800a158:	24000324 	.word	0x24000324

0800a15c <_free_r>:
 800a15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a15e:	2900      	cmp	r1, #0
 800a160:	d048      	beq.n	800a1f4 <_free_r+0x98>
 800a162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a166:	9001      	str	r0, [sp, #4]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f1a1 0404 	sub.w	r4, r1, #4
 800a16e:	bfb8      	it	lt
 800a170:	18e4      	addlt	r4, r4, r3
 800a172:	f7ff ffe7 	bl	800a144 <__malloc_lock>
 800a176:	4a20      	ldr	r2, [pc, #128]	; (800a1f8 <_free_r+0x9c>)
 800a178:	9801      	ldr	r0, [sp, #4]
 800a17a:	6813      	ldr	r3, [r2, #0]
 800a17c:	4615      	mov	r5, r2
 800a17e:	b933      	cbnz	r3, 800a18e <_free_r+0x32>
 800a180:	6063      	str	r3, [r4, #4]
 800a182:	6014      	str	r4, [r2, #0]
 800a184:	b003      	add	sp, #12
 800a186:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a18a:	f7ff bfe1 	b.w	800a150 <__malloc_unlock>
 800a18e:	42a3      	cmp	r3, r4
 800a190:	d90b      	bls.n	800a1aa <_free_r+0x4e>
 800a192:	6821      	ldr	r1, [r4, #0]
 800a194:	1862      	adds	r2, r4, r1
 800a196:	4293      	cmp	r3, r2
 800a198:	bf04      	itt	eq
 800a19a:	681a      	ldreq	r2, [r3, #0]
 800a19c:	685b      	ldreq	r3, [r3, #4]
 800a19e:	6063      	str	r3, [r4, #4]
 800a1a0:	bf04      	itt	eq
 800a1a2:	1852      	addeq	r2, r2, r1
 800a1a4:	6022      	streq	r2, [r4, #0]
 800a1a6:	602c      	str	r4, [r5, #0]
 800a1a8:	e7ec      	b.n	800a184 <_free_r+0x28>
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	b10b      	cbz	r3, 800a1b4 <_free_r+0x58>
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d9fa      	bls.n	800a1aa <_free_r+0x4e>
 800a1b4:	6811      	ldr	r1, [r2, #0]
 800a1b6:	1855      	adds	r5, r2, r1
 800a1b8:	42a5      	cmp	r5, r4
 800a1ba:	d10b      	bne.n	800a1d4 <_free_r+0x78>
 800a1bc:	6824      	ldr	r4, [r4, #0]
 800a1be:	4421      	add	r1, r4
 800a1c0:	1854      	adds	r4, r2, r1
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	6011      	str	r1, [r2, #0]
 800a1c6:	d1dd      	bne.n	800a184 <_free_r+0x28>
 800a1c8:	681c      	ldr	r4, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	6053      	str	r3, [r2, #4]
 800a1ce:	4421      	add	r1, r4
 800a1d0:	6011      	str	r1, [r2, #0]
 800a1d2:	e7d7      	b.n	800a184 <_free_r+0x28>
 800a1d4:	d902      	bls.n	800a1dc <_free_r+0x80>
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	6003      	str	r3, [r0, #0]
 800a1da:	e7d3      	b.n	800a184 <_free_r+0x28>
 800a1dc:	6825      	ldr	r5, [r4, #0]
 800a1de:	1961      	adds	r1, r4, r5
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	bf04      	itt	eq
 800a1e4:	6819      	ldreq	r1, [r3, #0]
 800a1e6:	685b      	ldreq	r3, [r3, #4]
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	bf04      	itt	eq
 800a1ec:	1949      	addeq	r1, r1, r5
 800a1ee:	6021      	streq	r1, [r4, #0]
 800a1f0:	6054      	str	r4, [r2, #4]
 800a1f2:	e7c7      	b.n	800a184 <_free_r+0x28>
 800a1f4:	b003      	add	sp, #12
 800a1f6:	bd30      	pop	{r4, r5, pc}
 800a1f8:	240000a4 	.word	0x240000a4

0800a1fc <_realloc_r>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	4607      	mov	r7, r0
 800a200:	4614      	mov	r4, r2
 800a202:	460e      	mov	r6, r1
 800a204:	b921      	cbnz	r1, 800a210 <_realloc_r+0x14>
 800a206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a20a:	4611      	mov	r1, r2
 800a20c:	f7ff b86e 	b.w	80092ec <_malloc_r>
 800a210:	b922      	cbnz	r2, 800a21c <_realloc_r+0x20>
 800a212:	f7ff ffa3 	bl	800a15c <_free_r>
 800a216:	4625      	mov	r5, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21c:	f000 f848 	bl	800a2b0 <_malloc_usable_size_r>
 800a220:	42a0      	cmp	r0, r4
 800a222:	d20f      	bcs.n	800a244 <_realloc_r+0x48>
 800a224:	4621      	mov	r1, r4
 800a226:	4638      	mov	r0, r7
 800a228:	f7ff f860 	bl	80092ec <_malloc_r>
 800a22c:	4605      	mov	r5, r0
 800a22e:	2800      	cmp	r0, #0
 800a230:	d0f2      	beq.n	800a218 <_realloc_r+0x1c>
 800a232:	4631      	mov	r1, r6
 800a234:	4622      	mov	r2, r4
 800a236:	f7fe ff13 	bl	8009060 <memcpy>
 800a23a:	4631      	mov	r1, r6
 800a23c:	4638      	mov	r0, r7
 800a23e:	f7ff ff8d 	bl	800a15c <_free_r>
 800a242:	e7e9      	b.n	800a218 <_realloc_r+0x1c>
 800a244:	4635      	mov	r5, r6
 800a246:	e7e7      	b.n	800a218 <_realloc_r+0x1c>

0800a248 <_read_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d07      	ldr	r5, [pc, #28]	; (800a268 <_read_r+0x20>)
 800a24c:	4604      	mov	r4, r0
 800a24e:	4608      	mov	r0, r1
 800a250:	4611      	mov	r1, r2
 800a252:	2200      	movs	r2, #0
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	f7f6 fe94 	bl	8000f84 <_read>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_read_r+0x1e>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_read_r+0x1e>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	2400032c 	.word	0x2400032c

0800a26c <_fstat_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d07      	ldr	r5, [pc, #28]	; (800a28c <_fstat_r+0x20>)
 800a270:	2300      	movs	r3, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	f7f6 feac 	bl	8000fd6 <_fstat>
 800a27e:	1c43      	adds	r3, r0, #1
 800a280:	d102      	bne.n	800a288 <_fstat_r+0x1c>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	b103      	cbz	r3, 800a288 <_fstat_r+0x1c>
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	bf00      	nop
 800a28c:	2400032c 	.word	0x2400032c

0800a290 <_isatty_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d06      	ldr	r5, [pc, #24]	; (800a2ac <_isatty_r+0x1c>)
 800a294:	2300      	movs	r3, #0
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	602b      	str	r3, [r5, #0]
 800a29c:	f7f6 feab 	bl	8000ff6 <_isatty>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_isatty_r+0x1a>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_isatty_r+0x1a>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	2400032c 	.word	0x2400032c

0800a2b0 <_malloc_usable_size_r>:
 800a2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b4:	1f18      	subs	r0, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfbc      	itt	lt
 800a2ba:	580b      	ldrlt	r3, [r1, r0]
 800a2bc:	18c0      	addlt	r0, r0, r3
 800a2be:	4770      	bx	lr

0800a2c0 <_init>:
 800a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c2:	bf00      	nop
 800a2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2c6:	bc08      	pop	{r3}
 800a2c8:	469e      	mov	lr, r3
 800a2ca:	4770      	bx	lr

0800a2cc <_fini>:
 800a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ce:	bf00      	nop
 800a2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2d2:	bc08      	pop	{r3}
 800a2d4:	469e      	mov	lr, r3
 800a2d6:	4770      	bx	lr
