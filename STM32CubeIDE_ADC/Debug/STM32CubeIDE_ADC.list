
STM32CubeIDE_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a2c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007cdc  08007cdc  00017cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007dc0  08007dc0  00017dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007dc8  08007dc8  00017dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007dcc  08007dcc  00017dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08007dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000134  24000074  08007e44  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001a8  08007e44  000201a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000214cc  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003582  00000000  00000000  0004156e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f58  00000000  00000000  00044af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e50  00000000  00000000  00045a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000327fd  00000000  00000000  00046898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013ff4  00000000  00000000  00079095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00148bf8  00000000  00000000  0008d089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d5c81  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004770  00000000  00000000  001d5cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007cc4 	.word	0x08007cc4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08007cc4 	.word	0x08007cc4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	463b      	mov	r3, r7
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <MX_ADC1_Init+0xe8>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006b2:	4b2e      	ldr	r3, [pc, #184]	; (800076c <MX_ADC1_Init+0xe4>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006be:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_ADC1_Init+0xe4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_ADC1_Init+0xe4>)
 80006c6:	2204      	movs	r2, #4
 80006c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_ADC1_Init+0xe4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_ADC1_Init+0xe4>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_ADC1_Init+0xe4>)
 80006d8:	2201      	movs	r2, #1
 80006da:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_ADC1_Init+0xe4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_ADC1_Init+0xe4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_ADC1_Init+0xe4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ADC1_Init+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_ADC1_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_ADC1_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_ADC1_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	4818      	ldr	r0, [pc, #96]	; (800076c <MX_ADC1_Init+0xe4>)
 800070a:	f000 fe45 	bl	8001398 <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000714:	f000 f982 	bl	8000a1c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	4812      	ldr	r0, [pc, #72]	; (800076c <MX_ADC1_Init+0xe4>)
 8000724:	f001 fd86 	bl	8002234 <HAL_ADCEx_MultiModeConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800072e:	f000 f975 	bl	8000a1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_ADC1_Init+0xec>)
 8000734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000736:	2306      	movs	r3, #6
 8000738:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800073e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000742:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000744:	2304      	movs	r3, #4
 8000746:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_ADC1_Init+0xe4>)
 8000756:	f001 f919 	bl	800198c <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000760:	f000 f95c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	; 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	240000a0 	.word	0x240000a0
 8000770:	40022000 	.word	0x40022000
 8000774:	21800100 	.word	0x21800100

08000778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b0b8      	sub	sp, #224	; 0xe0
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	22b8      	movs	r2, #184	; 0xb8
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f006 fb35 	bl	8006e08 <memset>
  if(adcHandle->Instance==ADC1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a2a      	ldr	r2, [pc, #168]	; (800084c <HAL_ADC_MspInit+0xd4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d14c      	bne.n	8000842 <HAL_ADC_MspInit+0xca>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007ae:	2304      	movs	r3, #4
 80007b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 8;
 80007b2:	2308      	movs	r3, #8
 80007b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 80007b6:	2301      	movs	r3, #1
 80007b8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c2:	23c0      	movs	r3, #192	; 0xc0
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 f845 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80007e4:	f000 f91a 	bl	8000a1c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007ea:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007ee:	4a18      	ldr	r2, [pc, #96]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 80007fa:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80007fe:	f003 0320 	and.w	r3, r3, #32
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080c:	4a10      	ldr	r2, [pc, #64]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_ADC_MspInit+0xd8>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000824:	2320      	movs	r3, #32
 8000826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082a:	2303      	movs	r3, #3
 800082c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_ADC_MspInit+0xdc>)
 800083e:	f001 fe79 	bl	8002534 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000842:	bf00      	nop
 8000844:	37e0      	adds	r7, #224	; 0xe0
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40022000 	.word	0x40022000
 8000850:	58024400 	.word	0x58024400
 8000854:	58020800 	.word	0x58020800

08000858 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_GPIO_Init+0x6c>)
 8000860:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000864:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <MX_GPIO_Init+0x6c>)
 8000866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_GPIO_Init+0x6c>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_GPIO_Init+0x6c>)
 800087e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <MX_GPIO_Init+0x6c>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_GPIO_Init+0x6c>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_GPIO_Init+0x6c>)
 800089c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a0:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <MX_GPIO_Init+0x6c>)
 80008a2:	f043 0308 	orr.w	r3, r3, #8
 80008a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_GPIO_Init+0x6c>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	58024400 	.word	0x58024400

080008c8 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, unsigned char * p, int len){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	230a      	movs	r3, #10
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <_write+0x24>)
 80008de:	f005 f8bd 	bl	8005a5c <HAL_UART_Transmit>
	return len;
 80008e2:	687b      	ldr	r3, [r7, #4]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000104 	.word	0x24000104

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80008f4:	f000 fab8 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f82a 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff ffac 	bl	8000858 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000900:	f7ff fec2 	bl	8000688 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000904:	f000 f9d4 	bl	8000cb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <main+0x50>)
 800090a:	f000 fe9f 	bl	800164c <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <main+0x54>)
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <main+0x50>)
 8000912:	f000 ff55 	bl	80017c0 <HAL_ADC_PollForConversion>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d10c      	bne.n	8000936 <main+0x46>
	      adc_value = HAL_ADC_GetValue(&hadc1);
 800091c:	4808      	ldr	r0, [pc, #32]	; (8000940 <main+0x50>)
 800091e:	f001 f827 	bl	8001970 <HAL_ADC_GetValue>
 8000922:	4603      	mov	r3, r0
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <main+0x58>)
 8000928:	801a      	strh	r2, [r3, #0]
	      printf("adc_value = %d\r\n", (int)adc_value);
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <main+0x58>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	4619      	mov	r1, r3
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <main+0x5c>)
 8000932:	f006 fa71 	bl	8006e18 <iprintf>
	    }
	    HAL_Delay(100);
 8000936:	2064      	movs	r0, #100	; 0x64
 8000938:	f000 fb28 	bl	8000f8c <HAL_Delay>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 800093c:	e7e7      	b.n	800090e <main+0x1e>
 800093e:	bf00      	nop
 8000940:	240000a0 	.word	0x240000a0
 8000944:	000f4240 	.word	0x000f4240
 8000948:	24000090 	.word	0x24000090
 800094c:	08007cdc 	.word	0x08007cdc

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	224c      	movs	r2, #76	; 0x4c
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f006 fa52 	bl	8006e08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2220      	movs	r2, #32
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f006 fa4c 	bl	8006e08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000970:	2004      	movs	r0, #4
 8000972:	f001 ff8f 	bl	8002894 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <SystemClock_Config+0xc4>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <SystemClock_Config+0xc4>)
 8000980:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000984:	6193      	str	r3, [r2, #24]
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <SystemClock_Config+0xc4>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000992:	bf00      	nop
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xc4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a0:	d1f8      	bne.n	8000994 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <SystemClock_Config+0xc8>)
 80009a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a6:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <SystemClock_Config+0xc8>)
 80009a8:	f023 0303 	bic.w	r3, r3, #3
 80009ac:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ae:	2302      	movs	r3, #2
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009be:	2300      	movs	r3, #0
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f001 ffbe 	bl	8002948 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80009d2:	f000 f823 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	233f      	movs	r3, #63	; 0x3f
 80009d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e6:	2340      	movs	r3, #64	; 0x40
 80009e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f4:	2340      	movs	r3, #64	; 0x40
 80009f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2102      	movs	r1, #2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fba7 	bl	8003150 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000a08:	f000 f808 	bl	8000a1c <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3770      	adds	r7, #112	; 0x70
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024800 	.word	0x58024800
 8000a18:	58024400 	.word	0x58024400

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_MspInit+0x30>)
 8000a30:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x30>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x30>)
 8000a40:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	58024400 	.word	0x58024400

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 fa50 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	e00a      	b.n	8000ad8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ac2:	f3af 8000 	nop.w
 8000ac6:	4601      	mov	r1, r0
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	60ba      	str	r2, [r7, #8]
 8000ace:	b2ca      	uxtb	r2, r1
 8000ad0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	697a      	ldr	r2, [r7, #20]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	dbf0      	blt.n	8000ac2 <_read+0x12>
	}

return len;
 8000ae0:	687b      	ldr	r3, [r7, #4]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
	return -1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b12:	605a      	str	r2, [r3, #4]
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_isatty>:

int _isatty(int file)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	return 1;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	return 0;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
	...

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	; (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f006 f916 	bl	8006db4 <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24100000 	.word	0x24100000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	24000094 	.word	0x24000094
 8000bbc:	240001a8 	.word	0x240001a8

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <SystemInit+0xd0>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <SystemInit+0xd0>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <SystemInit+0xd4>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d807      	bhi.n	8000bf0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <SystemInit+0xd4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f023 030f 	bic.w	r3, r3, #15
 8000be8:	4a2a      	ldr	r2, [pc, #168]	; (8000c94 <SystemInit+0xd4>)
 8000bea:	f043 0303 	orr.w	r3, r3, #3
 8000bee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bf0:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <SystemInit+0xd8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a28      	ldr	r2, [pc, #160]	; (8000c98 <SystemInit+0xd8>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bfc:	4b26      	ldr	r3, [pc, #152]	; (8000c98 <SystemInit+0xd8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <SystemInit+0xd8>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4924      	ldr	r1, [pc, #144]	; (8000c98 <SystemInit+0xd8>)
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <SystemInit+0xdc>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <SystemInit+0xd4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c1a:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <SystemInit+0xd4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f023 030f 	bic.w	r3, r3, #15
 8000c22:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <SystemInit+0xd4>)
 8000c24:	f043 0303 	orr.w	r3, r3, #3
 8000c28:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <SystemInit+0xd8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <SystemInit+0xd8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <SystemInit+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <SystemInit+0xd8>)
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <SystemInit+0xe0>)
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <SystemInit+0xd8>)
 8000c44:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <SystemInit+0xe4>)
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <SystemInit+0xd8>)
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <SystemInit+0xe8>)
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <SystemInit+0xd8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SystemInit+0xd8>)
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <SystemInit+0xe8>)
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <SystemInit+0xd8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <SystemInit+0xd8>)
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <SystemInit+0xe8>)
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <SystemInit+0xd8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <SystemInit+0xd8>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <SystemInit+0xd8>)
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c78:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <SystemInit+0xd8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <SystemInit+0xec>)
 8000c80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c84:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	52002000 	.word	0x52002000
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ca0:	02020200 	.word	0x02020200
 8000ca4:	01ff0000 	.word	0x01ff0000
 8000ca8:	01010280 	.word	0x01010280
 8000cac:	52004000 	.word	0x52004000

08000cb0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb4:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cb6:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <MX_USART3_UART_Init+0x94>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cba:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cec:	4b14      	ldr	r3, [pc, #80]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf8:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000cfa:	f004 fe5f 	bl	80059bc <HAL_UART_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d04:	f7ff fe8a 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d0c:	f005 ff88 	bl	8006c20 <HAL_UARTEx_SetTxFifoThreshold>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d16:	f7ff fe81 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d1e:	f005 ffbd 	bl	8006c9c <HAL_UARTEx_SetRxFifoThreshold>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d28:	f7ff fe78 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_USART3_UART_Init+0x90>)
 8000d2e:	f005 ff3e 	bl	8006bae <HAL_UARTEx_DisableFifoMode>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d38:	f7ff fe70 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24000104 	.word	0x24000104
 8000d44:	40004800 	.word	0x40004800

08000d48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0b8      	sub	sp, #224	; 0xe0
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	22b8      	movs	r2, #184	; 0xb8
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f006 f84d 	bl	8006e08 <memset>
  if(uartHandle->Instance==USART3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <HAL_UART_MspInit+0xc0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d142      	bne.n	8000dfe <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4618      	mov	r0, r3
 8000d88:	f002 fd6e 	bl	8003868 <HAL_RCCEx_PeriphCLKConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d92:	f7ff fe43 	bl	8000a1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000d98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000d9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000da8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000db6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000dbc:	f043 0308 	orr.w	r3, r3, #8
 8000dc0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_UART_MspInit+0xc4>)
 8000dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dec:	2307      	movs	r3, #7
 8000dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_UART_MspInit+0xc8>)
 8000dfa:	f001 fb9b 	bl	8002534 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dfe:	bf00      	nop
 8000e00:	37e0      	adds	r7, #224	; 0xe0
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40004800 	.word	0x40004800
 8000e0c:	58024400 	.word	0x58024400
 8000e10:	58020c00 	.word	0x58020c00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e18:	f7ff fed2 	bl	8000bc0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	; (8000e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f005 ffbd 	bl	8006dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fd53 	bl	80008f0 <main>
  bx  lr
 8000e4a:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000e50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e54:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e58:	08007dd0 	.word	0x08007dd0
  ldr r2, =_sbss
 8000e5c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000e60:	240001a8 	.word	0x240001a8

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f001 fb2e 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000e74:	f002 fb22 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_Init+0x68>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	0a1b      	lsrs	r3, r3, #8
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	4913      	ldr	r1, [pc, #76]	; (8000ed4 <HAL_Init+0x6c>)
 8000e86:	5ccb      	ldrb	r3, [r1, r3]
 8000e88:	f003 031f 	and.w	r3, r3, #31
 8000e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e90:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_Init+0x68>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_Init+0x6c>)
 8000e9c:	5cd3      	ldrb	r3, [r2, r3]
 8000e9e:	f003 031f 	and.w	r3, r3, #31
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_Init+0x70>)
 8000eaa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_Init+0x74>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f000 f814 	bl	8000ee0 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e002      	b.n	8000ec8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff fdb1 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	08007cf0 	.word	0x08007cf0
 8000ed8:	24000004 	.word	0x24000004
 8000edc:	24000000 	.word	0x24000000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_InitTick+0x60>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e021      	b.n	8000f38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <HAL_InitTick+0x64>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_InitTick+0x60>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fb05 	bl	800251a <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f001 fadd 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x68>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2400000c 	.word	0x2400000c
 8000f44:	24000000 	.word	0x24000000
 8000f48:	24000008 	.word	0x24000008

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2400000c 	.word	0x2400000c
 8000f70:	24000194 	.word	0x24000194

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	24000194 	.word	0x24000194

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2400000c 	.word	0x2400000c

08000fd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	609a      	str	r2, [r3, #8]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	609a      	str	r2, [r3, #8]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3360      	adds	r3, #96	; 0x60
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	430b      	orrs	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001070:	bf00      	nop
 8001072:	371c      	adds	r7, #28
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	611a      	str	r2, [r3, #16]
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3360      	adds	r3, #96	; 0x60
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	601a      	str	r2, [r3, #0]
  }
}
 80010d8:	bf00      	nop
 80010da:	371c      	adds	r7, #28
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800110a:	b480      	push	{r7}
 800110c:	b087      	sub	sp, #28
 800110e:	af00      	add	r7, sp, #0
 8001110:	60f8      	str	r0, [r7, #12]
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3330      	adds	r3, #48	; 0x30
 800111a:	461a      	mov	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	4413      	add	r3, r2
 8001128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	211f      	movs	r1, #31
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	401a      	ands	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0e9b      	lsrs	r3, r3, #26
 8001142:	f003 011f 	and.w	r1, r3, #31
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	431a      	orrs	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001162:	b480      	push	{r7}
 8001164:	b087      	sub	sp, #28
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3314      	adds	r3, #20
 8001172:	461a      	mov	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0e5b      	lsrs	r3, r3, #25
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	4413      	add	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0d1b      	lsrs	r3, r3, #20
 800118a:	f003 031f 	and.w	r3, r3, #31
 800118e:	2107      	movs	r1, #7
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	0d1b      	lsrs	r3, r3, #20
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0318 	and.w	r3, r3, #24
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80011dc:	40d9      	lsrs	r1, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	400b      	ands	r3, r1
 80011e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011e6:	431a      	orrs	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	000fffff 	.word	0x000fffff

08001200 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 031f 	and.w	r3, r3, #31
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001246:	4013      	ands	r3, r2
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6093      	str	r3, [r2, #8]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	5fffffc0 	.word	0x5fffffc0

0800125c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800126c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001270:	d101      	bne.n	8001276 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001292:	4013      	ands	r3, r2
 8001294:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	6fffffc0 	.word	0x6fffffc0

080012ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80012c0:	d101      	bne.n	80012c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <LL_ADC_Enable+0x24>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	7fffffc0 	.word	0x7fffffc0

080012fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <LL_ADC_IsEnabled+0x18>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <LL_ADC_IsEnabled+0x1a>
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <LL_ADC_REG_StartConversion+0x24>)
 8001332:	4013      	ands	r3, r2
 8001334:	f043 0204 	orr.w	r2, r3, #4
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	7fffffc0 	.word	0x7fffffc0

0800134c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0304 	and.w	r3, r3, #4
 800135c:	2b04      	cmp	r3, #4
 800135e:	d101      	bne.n	8001364 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b08      	cmp	r3, #8
 8001384:	d101      	bne.n	800138a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e138      	b.n	8001624 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff f9d9 	bl	8000778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff3f 	bl	800125c <LL_ADC_IsDeepPowerDownEnabled>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff25 	bl	8001238 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff5a 	bl	80012ac <LL_ADC_IsInternalRegulatorEnabled>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d114      	bne.n	8001428 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff3e 	bl	8001284 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <HAL_ADC_Init+0x294>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	4a88      	ldr	r2, [pc, #544]	; (8001630 <HAL_ADC_Init+0x298>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800141a:	e002      	b.n	8001422 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff3d 	bl	80012ac <LL_ADC_IsInternalRegulatorEnabled>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	f043 0210 	orr.w	r2, r3, #16
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	f043 0201 	orr.w	r2, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff77 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 800145e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 80d2 	bne.w	8001612 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 80ce 	bne.w	8001612 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800147e:	f043 0202 	orr.w	r2, r3, #2
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff36 	bl	80012fc <LL_ADC_IsEnabled>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d110      	bne.n	80014b8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001496:	4867      	ldr	r0, [pc, #412]	; (8001634 <HAL_ADC_Init+0x29c>)
 8001498:	f7ff ff30 	bl	80012fc <LL_ADC_IsEnabled>
 800149c:	4604      	mov	r4, r0
 800149e:	4866      	ldr	r0, [pc, #408]	; (8001638 <HAL_ADC_Init+0x2a0>)
 80014a0:	f7ff ff2c 	bl	80012fc <LL_ADC_IsEnabled>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4323      	orrs	r3, r4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d105      	bne.n	80014b8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4619      	mov	r1, r3
 80014b2:	4862      	ldr	r0, [pc, #392]	; (800163c <HAL_ADC_Init+0x2a4>)
 80014b4:	f7ff fd8e 	bl	8000fd4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7d5b      	ldrb	r3, [r3, #21]
 80014bc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80014c8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7f1b      	ldrb	r3, [r3, #28]
 80014ce:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7f1b      	ldrb	r3, [r3, #28]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	3b01      	subs	r3, #1
 80014e2:	045b      	lsls	r3, r3, #17
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <HAL_ADC_Init+0x2a8>)
 800150e:	4013      	ands	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	69b9      	ldr	r1, [r7, #24]
 8001516:	430b      	orrs	r3, r1
 8001518:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff14 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 8001524:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff21 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 8001530:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d14a      	bne.n	80015ce <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d147      	bne.n	80015ce <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7d1b      	ldrb	r3, [r3, #20]
 8001542:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <HAL_ADC_Init+0x2ac>)
 8001554:	4013      	ands	r3, r2
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	430b      	orrs	r3, r1
 800155e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11b      	bne.n	80015a2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_ADC_Init+0x2b0>)
 8001578:	4013      	ands	r3, r2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800157e:	3a01      	subs	r2, #1
 8001580:	0411      	lsls	r1, r2, #16
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001586:	4311      	orrs	r1, r2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800158c:	4311      	orrs	r1, r2
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001592:	430a      	orrs	r2, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	611a      	str	r2, [r3, #16]
 80015a0:	e007      	b.n	80015b2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fd41 	bl	8002050 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d10c      	bne.n	80015f0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f023 010f 	bic.w	r1, r3, #15
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
 80015ee:	e007      	b.n	8001600 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 020f 	bic.w	r2, r2, #15
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	f023 0303 	bic.w	r3, r3, #3
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
 8001610:	e007      	b.n	8001622 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001616:	f043 0210 	orr.w	r2, r3, #16
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001622:	7ffb      	ldrb	r3, [r7, #31]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3724      	adds	r7, #36	; 0x24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	24000000 	.word	0x24000000
 8001630:	053e2d63 	.word	0x053e2d63
 8001634:	40022000 	.word	0x40022000
 8001638:	40022100 	.word	0x40022100
 800163c:	40022300 	.word	0x40022300
 8001640:	fff0c003 	.word	0xfff0c003
 8001644:	ffffbffc 	.word	0xffffbffc
 8001648:	fc00f81e 	.word	0xfc00f81e

0800164c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001654:	4856      	ldr	r0, [pc, #344]	; (80017b0 <HAL_ADC_Start+0x164>)
 8001656:	f7ff fdd3 	bl	8001200 <LL_ADC_GetMultimode>
 800165a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe73 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	f040 809a 	bne.w	80017a2 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_ADC_Start+0x30>
 8001678:	2302      	movs	r3, #2
 800167a:	e095      	b.n	80017a8 <HAL_ADC_Start+0x15c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fc67 	bl	8001f58 <ADC_Enable>
 800168a:	4603      	mov	r3, r0
 800168c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 8081 	bne.w	8001798 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <HAL_ADC_Start+0x168>)
 800169c:	4013      	ands	r3, r2
 800169e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a43      	ldr	r2, [pc, #268]	; (80017b8 <HAL_ADC_Start+0x16c>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d002      	beq.n	80016b6 <HAL_ADC_Start+0x6a>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_Start+0x6c>
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_ADC_Start+0x170>)
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4293      	cmp	r3, r2
 80016be:	d002      	beq.n	80016c6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	d106      	bne.n	80016ee <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	f023 0206 	bic.w	r2, r3, #6
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	659a      	str	r2, [r3, #88]	; 0x58
 80016ec:	e002      	b.n	80016f4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	221c      	movs	r2, #28
 80016fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2b      	ldr	r2, [pc, #172]	; (80017b8 <HAL_ADC_Start+0x16c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d002      	beq.n	8001714 <HAL_ADC_Start+0xc8>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e000      	b.n	8001716 <HAL_ADC_Start+0xca>
 8001714:	4b29      	ldr	r3, [pc, #164]	; (80017bc <HAL_ADC_Start+0x170>)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	4293      	cmp	r3, r2
 800171c:	d008      	beq.n	8001730 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2b05      	cmp	r3, #5
 8001728:	d002      	beq.n	8001730 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	2b09      	cmp	r3, #9
 800172e:	d114      	bne.n	800175a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001746:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fde6 	bl	8001324 <LL_ADC_REG_StartConversion>
 8001758:	e025      	b.n	80017a6 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_ADC_Start+0x16c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d002      	beq.n	8001776 <HAL_ADC_Start+0x12a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	e000      	b.n	8001778 <HAL_ADC_Start+0x12c>
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_ADC_Start+0x170>)
 8001778:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00f      	beq.n	80017a6 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800178e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
 8001796:	e006      	b.n	80017a6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80017a0:	e001      	b.n	80017a6 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017a2:	2302      	movs	r3, #2
 80017a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40022300 	.word	0x40022300
 80017b4:	fffff0fe 	.word	0xfffff0fe
 80017b8:	40022100 	.word	0x40022100
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017ca:	4866      	ldr	r0, [pc, #408]	; (8001964 <HAL_ADC_PollForConversion+0x1a4>)
 80017cc:	f7ff fd18 	bl	8001200 <LL_ADC_GetMultimode>
 80017d0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d102      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017da:	2308      	movs	r3, #8
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	e02a      	b.n	8001836 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d002      	beq.n	80017f2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b09      	cmp	r3, #9
 80017f0:	d111      	bne.n	8001816 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e0a4      	b.n	800195a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001810:	2304      	movs	r3, #4
 8001812:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001814:	e00f      	b.n	8001836 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001816:	4853      	ldr	r0, [pc, #332]	; (8001964 <HAL_ADC_PollForConversion+0x1a4>)
 8001818:	f7ff fd00 	bl	800121c <LL_ADC_GetMultiDMATransfer>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e093      	b.n	800195a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001832:	2304      	movs	r3, #4
 8001834:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001836:	f7ff fb9d 	bl	8000f74 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800183c:	e021      	b.n	8001882 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d01d      	beq.n	8001882 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001846:	f7ff fb95 	bl	8000f74 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d302      	bcc.n	800185c <HAL_ADC_PollForConversion+0x9c>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d112      	bne.n	8001882 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10b      	bne.n	8001882 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	f043 0204 	orr.w	r2, r3, #4
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e06b      	b.n	800195a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4013      	ands	r3, r2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0d6      	beq.n	800183e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001894:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fc1f 	bl	80010e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7d5b      	ldrb	r3, [r3, #21]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d118      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <HAL_ADC_PollForConversion+0x1a8>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d002      	beq.n	80018f6 <HAL_ADC_PollForConversion+0x136>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	e000      	b.n	80018f8 <HAL_ADC_PollForConversion+0x138>
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <HAL_ADC_PollForConversion+0x1ac>)
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d008      	beq.n	8001912 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d002      	beq.n	8001912 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b09      	cmp	r3, #9
 8001910:	d104      	bne.n	800191c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e00c      	b.n	8001936 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_ADC_PollForConversion+0x1a8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d002      	beq.n	800192c <HAL_ADC_PollForConversion+0x16c>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	e000      	b.n	800192e <HAL_ADC_PollForConversion+0x16e>
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_ADC_PollForConversion+0x1ac>)
 800192e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d104      	bne.n	8001946 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2208      	movs	r2, #8
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e008      	b.n	8001958 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d103      	bne.n	8001958 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	220c      	movs	r2, #12
 8001956:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3720      	adds	r7, #32
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022300 	.word	0x40022300
 8001968:	40022100 	.word	0x40022100
 800196c:	40022000 	.word	0x40022000

08001970 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b0a1      	sub	sp, #132	; 0x84
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4a9a      	ldr	r2, [pc, #616]	; (8001c10 <HAL_ADC_ConfigChannel+0x284>)
 80019a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x2a>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e2bc      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x5a4>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fcc2 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 82a1 	bne.w	8001f12 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x62>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2201      	movs	r2, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	e016      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x90>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019fe:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001a06:	2320      	movs	r3, #32
 8001a08:	e003      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2201      	movs	r2, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	69d1      	ldr	r1, [r2, #28]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6812      	ldr	r2, [r2, #0]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6818      	ldr	r0, [r3, #0]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	6859      	ldr	r1, [r3, #4]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7ff fb67 	bl	800110a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fc83 	bl	800134c <LL_ADC_REG_IsConversionOngoing>
 8001a46:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fc90 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 8001a52:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f040 80a0 	bne.w	8001b9c <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 809c 	bne.w	8001b9c <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	461a      	mov	r2, r3
 8001a72:	f7ff fb76 	bl	8001162 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10b      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x110>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	e00a      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x126>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	695a      	ldr	r2, [r3, #20]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d027      	beq.n	8001b0c <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aca:	f7ff fab7 	bl	800103c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	7e5b      	ldrb	r3, [r3, #25]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x158>
 8001ade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x15a>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f7ff fae1 	bl	80010ae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6919      	ldr	r1, [r3, #16]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	7e1b      	ldrb	r3, [r3, #24]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d102      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x176>
 8001afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b00:	e000      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x178>
 8001b02:	2300      	movs	r3, #0
 8001b04:	461a      	mov	r2, r3
 8001b06:	f7ff fab9 	bl	800107c <LL_ADC_SetDataRightShift>
 8001b0a:	e047      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	069b      	lsls	r3, r3, #26
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	069b      	lsls	r3, r3, #26
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d107      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b76:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	069b      	lsls	r3, r3, #26
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d107      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fbab 	bl	80012fc <LL_ADC_IsEnabled>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 81bb 	bne.w	8001f24 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff fafc 	bl	80011b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_ADC_ConfigChannel+0x284>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	f040 8130 	bne.w	8001e2c <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x268>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	3301      	adds	r3, #1
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b09      	cmp	r3, #9
 8001bea:	bf94      	ite	ls
 8001bec:	2301      	movls	r3, #1
 8001bee:	2300      	movhi	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	e01b      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x2a0>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d103      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	e005      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x290>
 8001c10:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2b09      	cmp	r3, #9
 8001c24:	bf94      	ite	ls
 8001c26:	2301      	movls	r3, #1
 8001c28:	2300      	movhi	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d079      	beq.n	8001d24 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x2c0>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	3301      	adds	r3, #1
 8001c44:	069b      	lsls	r3, r3, #26
 8001c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c4a:	e015      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x2ec>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e003      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6a:	fab3 f383 	clz	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	069b      	lsls	r3, r3, #26
 8001c74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x30c>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0e9b      	lsrs	r3, r3, #26
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	2101      	movs	r1, #1
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	e017      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x33c>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	e003      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f003 031f 	and.w	r3, r3, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc8:	ea42 0103 	orr.w	r1, r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d10a      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x362>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	051b      	lsls	r3, r3, #20
 8001cec:	e018      	b.n	8001d20 <HAL_ADC_ConfigChannel+0x394>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d20:	430b      	orrs	r3, r1
 8001d22:	e07e      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x3b4>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	3301      	adds	r3, #1
 8001d38:	069b      	lsls	r3, r3, #26
 8001d3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3e:	e015      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x3e0>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001d58:	2320      	movs	r3, #32
 8001d5a:	e003      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5e:	fab3 f383 	clz	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3301      	adds	r3, #1
 8001d66:	069b      	lsls	r3, r3, #26
 8001d68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x400>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0e9b      	lsrs	r3, r3, #26
 8001d7e:	3301      	adds	r3, #1
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2101      	movs	r1, #1
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	e017      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x430>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	61bb      	str	r3, [r7, #24]
  return result;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e003      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	ea42 0103 	orr.w	r1, r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x45c>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b1e      	subs	r3, #30
 8001de0:	051b      	lsls	r3, r3, #20
 8001de2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de6:	e01b      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x494>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	60fb      	str	r3, [r7, #12]
  return result;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001e00:	2320      	movs	r3, #32
 8001e02:	e003      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f003 021f 	and.w	r2, r3, #31
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	3b1e      	subs	r3, #30
 8001e1a:	051b      	lsls	r3, r3, #20
 8001e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e20:	430b      	orrs	r3, r1
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	6892      	ldr	r2, [r2, #8]
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7ff f99b 	bl	8001162 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da77      	bge.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e34:	4840      	ldr	r0, [pc, #256]	; (8001f38 <HAL_ADC_ConfigChannel+0x5ac>)
 8001e36:	f7ff f8f3 	bl	8001020 <LL_ADC_GetCommonPathInternalCh>
 8001e3a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e3c:	483f      	ldr	r0, [pc, #252]	; (8001f3c <HAL_ADC_ConfigChannel+0x5b0>)
 8001e3e:	f7ff fa5d 	bl	80012fc <LL_ADC_IsEnabled>
 8001e42:	4604      	mov	r4, r0
 8001e44:	483e      	ldr	r0, [pc, #248]	; (8001f40 <HAL_ADC_ConfigChannel+0x5b4>)
 8001e46:	f7ff fa59 	bl	80012fc <LL_ADC_IsEnabled>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4323      	orrs	r3, r4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d155      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3b      	ldr	r2, [pc, #236]	; (8001f44 <HAL_ADC_ConfigChannel+0x5b8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d122      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x516>
 8001e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d11d      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a35      	ldr	r2, [pc, #212]	; (8001f40 <HAL_ADC_ConfigChannel+0x5b4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d159      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e76:	4619      	mov	r1, r3
 8001e78:	482f      	ldr	r0, [pc, #188]	; (8001f38 <HAL_ADC_ConfigChannel+0x5ac>)
 8001e7a:	f7ff f8be 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e7e:	4b32      	ldr	r3, [pc, #200]	; (8001f48 <HAL_ADC_ConfigChannel+0x5bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <HAL_ADC_ConfigChannel+0x5c0>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	099b      	lsrs	r3, r3, #6
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea0:	e040      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a2a      	ldr	r2, [pc, #168]	; (8001f50 <HAL_ADC_ConfigChannel+0x5c4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d111      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x544>
 8001eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <HAL_ADC_ConfigChannel+0x5b4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d131      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481b      	ldr	r0, [pc, #108]	; (8001f38 <HAL_ADC_ConfigChannel+0x5ac>)
 8001eca:	f7ff f896 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ece:	e029      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1f      	ldr	r2, [pc, #124]	; (8001f54 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d124      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
 8001eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d11f      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_ADC_ConfigChannel+0x5b4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d11a      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <HAL_ADC_ConfigChannel+0x5ac>)
 8001ef8:	f7ff f87f 	bl	8000ffa <LL_ADC_SetCommonPathInternalCh>
 8001efc:	e012      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f02:	f043 0220 	orr.w	r2, r3, #32
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001f10:	e008      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f16:	f043 0220 	orr.w	r2, r3, #32
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3784      	adds	r7, #132	; 0x84
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	40022300 	.word	0x40022300
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40022100 	.word	0x40022100
 8001f44:	cb840000 	.word	0xcb840000
 8001f48:	24000000 	.word	0x24000000
 8001f4c:	053e2d63 	.word	0x053e2d63
 8001f50:	bac04000 	.word	0xbac04000
 8001f54:	cfb80000 	.word	0xcfb80000

08001f58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff f9c9 	bl	80012fc <LL_ADC_IsEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d161      	bne.n	8002034 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <ADC_Enable+0xe8>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00d      	beq.n	8001f9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e04d      	b.n	8002036 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f998 	bl	80012d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001fa4:	f7fe ffe6 	bl	8000f74 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001faa:	4826      	ldr	r0, [pc, #152]	; (8002044 <ADC_Enable+0xec>)
 8001fac:	f7ff f928 	bl	8001200 <LL_ADC_GetMultimode>
 8001fb0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a24      	ldr	r2, [pc, #144]	; (8002048 <ADC_Enable+0xf0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d002      	beq.n	8001fc2 <ADC_Enable+0x6a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e000      	b.n	8001fc4 <ADC_Enable+0x6c>
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <ADC_Enable+0xf4>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d02c      	beq.n	8002026 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d130      	bne.n	8002034 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fd2:	e028      	b.n	8002026 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff f98f 	bl	80012fc <LL_ADC_IsEnabled>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff f973 	bl	80012d4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fee:	f7fe ffc1 	bl	8000f74 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d914      	bls.n	8002026 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d00d      	beq.n	8002026 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0210 	orr.w	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f043 0201 	orr.w	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e007      	b.n	8002036 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d1cf      	bne.n	8001fd4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	8000003f 	.word	0x8000003f
 8002044:	40022300 	.word	0x40022300
 8002048:	40022100 	.word	0x40022100
 800204c:	40022000 	.word	0x40022000

08002050 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002058:	4b5f      	ldr	r3, [pc, #380]	; (80021d8 <ADC_ConfigureBoostMode+0x188>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d01c      	beq.n	800209e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002064:	f001 fba4 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8002068:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002072:	d010      	beq.n	8002096 <ADC_ConfigureBoostMode+0x46>
 8002074:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002078:	d871      	bhi.n	800215e <ADC_ConfigureBoostMode+0x10e>
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207e:	d002      	beq.n	8002086 <ADC_ConfigureBoostMode+0x36>
 8002080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002084:	d16b      	bne.n	800215e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0c1b      	lsrs	r3, r3, #16
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	60fb      	str	r3, [r7, #12]
        break;
 8002094:	e066      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	60fb      	str	r3, [r7, #12]
        break;
 800209c:	e062      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800209e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020a2:	f002 faed 	bl	8004680 <HAL_RCCEx_GetPeriphCLKFreq>
 80020a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80020b0:	d051      	beq.n	8002156 <ADC_ConfigureBoostMode+0x106>
 80020b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80020b6:	d854      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 80020b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80020bc:	d047      	beq.n	800214e <ADC_ConfigureBoostMode+0xfe>
 80020be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80020c2:	d84e      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 80020c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020c8:	d03d      	beq.n	8002146 <ADC_ConfigureBoostMode+0xf6>
 80020ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80020ce:	d848      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 80020d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d4:	d033      	beq.n	800213e <ADC_ConfigureBoostMode+0xee>
 80020d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020da:	d842      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 80020dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020e0:	d029      	beq.n	8002136 <ADC_ConfigureBoostMode+0xe6>
 80020e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80020e6:	d83c      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 80020e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020ec:	d01a      	beq.n	8002124 <ADC_ConfigureBoostMode+0xd4>
 80020ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80020f2:	d836      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 80020f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020f8:	d014      	beq.n	8002124 <ADC_ConfigureBoostMode+0xd4>
 80020fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80020fe:	d830      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 8002100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002104:	d00e      	beq.n	8002124 <ADC_ConfigureBoostMode+0xd4>
 8002106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800210a:	d82a      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 800210c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002110:	d008      	beq.n	8002124 <ADC_ConfigureBoostMode+0xd4>
 8002112:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002116:	d824      	bhi.n	8002162 <ADC_ConfigureBoostMode+0x112>
 8002118:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800211c:	d002      	beq.n	8002124 <ADC_ConfigureBoostMode+0xd4>
 800211e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002122:	d11e      	bne.n	8002162 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
        break;
 8002134:	e016      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	60fb      	str	r3, [r7, #12]
        break;
 800213c:	e012      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	60fb      	str	r3, [r7, #12]
        break;
 8002144:	e00e      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	60fb      	str	r3, [r7, #12]
        break;
 800214c:	e00a      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	09db      	lsrs	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]
        break;
 8002154:	e006      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	60fb      	str	r3, [r7, #12]
        break;
 800215c:	e002      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
        break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002162:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <ADC_ConfigureBoostMode+0x18c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d808      	bhi.n	8002184 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002180:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002182:	e025      	b.n	80021d0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a16      	ldr	r2, [pc, #88]	; (80021e0 <ADC_ConfigureBoostMode+0x190>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d80a      	bhi.n	80021a2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219e:	609a      	str	r2, [r3, #8]
}
 80021a0:	e016      	b.n	80021d0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <ADC_ConfigureBoostMode+0x194>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d80a      	bhi.n	80021c0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	609a      	str	r2, [r3, #8]
}
 80021be:	e007      	b.n	80021d0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80021ce:	609a      	str	r2, [r3, #8]
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40022300 	.word	0x40022300
 80021dc:	005f5e10 	.word	0x005f5e10
 80021e0:	00bebc20 	.word	0x00bebc20
 80021e4:	017d7840 	.word	0x017d7840

080021e8 <LL_ADC_IsEnabled>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <LL_ADC_IsEnabled+0x18>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_ADC_IsEnabled+0x1a>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <LL_ADC_REG_IsConversionOngoing>:
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b04      	cmp	r3, #4
 8002220:	d101      	bne.n	8002226 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b09f      	sub	sp, #124	; 0x7c
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800224e:	2302      	movs	r3, #2
 8002250:	e080      	b.n	8002354 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800225e:	2300      	movs	r3, #0
 8002260:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3d      	ldr	r2, [pc, #244]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d102      	bne.n	8002272 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800226c:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	e001      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e05f      	b.n	8002354 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ffb9 	bl	800220e <LL_ADC_REG_IsConversionOngoing>
 800229c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ffb3 	bl	800220e <LL_ADC_REG_IsConversionOngoing>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d141      	bne.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80022ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d13e      	bne.n	8002332 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80022b4:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80022b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80022c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d2:	4822      	ldr	r0, [pc, #136]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80022d4:	f7ff ff88 	bl	80021e8 <LL_ADC_IsEnabled>
 80022d8:	4604      	mov	r4, r0
 80022da:	4821      	ldr	r0, [pc, #132]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80022dc:	f7ff ff84 	bl	80021e8 <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4323      	orrs	r3, r4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d12e      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	6811      	ldr	r1, [r2, #0]
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	6892      	ldr	r2, [r2, #8]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	431a      	orrs	r2, r3
 80022fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002300:	e021      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800230a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800230e:	4813      	ldr	r0, [pc, #76]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002310:	f7ff ff6a 	bl	80021e8 <LL_ADC_IsEnabled>
 8002314:	4604      	mov	r4, r0
 8002316:	4812      	ldr	r0, [pc, #72]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002318:	f7ff ff66 	bl	80021e8 <LL_ADC_IsEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	4323      	orrs	r3, r4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d110      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800232a:	4013      	ands	r3, r2
 800232c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800232e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002330:	e009      	b.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002344:	e000      	b.n	8002348 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002346:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002350:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002354:	4618      	mov	r0, r3
 8002356:	377c      	adds	r7, #124	; 0x7c
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	40022000 	.word	0x40022000
 8002360:	40022100 	.word	0x40022100
 8002364:	40022300 	.word	0x40022300
 8002368:	fffff0e0 	.word	0xfffff0e0

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <__NVIC_SetPriorityGrouping+0x40>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	4313      	orrs	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x40>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00
 80023b0:	05fa0000 	.word	0x05fa0000

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff47 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff5e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff90 	bl	8002424 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5f 	bl	80023d0 <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff ffb2 	bl	800248c <SysTick_Config>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <HAL_GPIO_Init+0x234>)
 8002544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002546:	e194      	b.n	8002872 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8186 	beq.w	800286c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d005      	beq.n	8002578 <HAL_GPIO_Init+0x44>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d130      	bne.n	80025da <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ae:	2201      	movs	r2, #1
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0201 	and.w	r2, r3, #1
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d017      	beq.n	8002616 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	2203      	movs	r2, #3
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4313      	orrs	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d123      	bne.n	800266a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3208      	adds	r2, #8
 800262a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	08da      	lsrs	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3208      	adds	r2, #8
 8002664:	69b9      	ldr	r1, [r7, #24]
 8002666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 80e0 	beq.w	800286c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_GPIO_Init+0x238>)
 80026ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80026b2:	4a2e      	ldr	r2, [pc, #184]	; (800276c <HAL_GPIO_Init+0x238>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <HAL_GPIO_Init+0x238>)
 80026be:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ca:	4a29      	ldr	r2, [pc, #164]	; (8002770 <HAL_GPIO_Init+0x23c>)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	089b      	lsrs	r3, r3, #2
 80026d0:	3302      	adds	r3, #2
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	220f      	movs	r2, #15
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <HAL_GPIO_Init+0x240>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d052      	beq.n	800279c <HAL_GPIO_Init+0x268>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_GPIO_Init+0x244>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d031      	beq.n	8002762 <HAL_GPIO_Init+0x22e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_GPIO_Init+0x248>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_GPIO_Init+0x22a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_GPIO_Init+0x24c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d025      	beq.n	800275a <HAL_GPIO_Init+0x226>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_GPIO_Init+0x250>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01f      	beq.n	8002756 <HAL_GPIO_Init+0x222>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_GPIO_Init+0x254>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d019      	beq.n	8002752 <HAL_GPIO_Init+0x21e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <HAL_GPIO_Init+0x258>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <HAL_GPIO_Init+0x21a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <HAL_GPIO_Init+0x25c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00d      	beq.n	800274a <HAL_GPIO_Init+0x216>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a18      	ldr	r2, [pc, #96]	; (8002794 <HAL_GPIO_Init+0x260>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x212>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <HAL_GPIO_Init+0x264>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d101      	bne.n	8002742 <HAL_GPIO_Init+0x20e>
 800273e:	2309      	movs	r3, #9
 8002740:	e02d      	b.n	800279e <HAL_GPIO_Init+0x26a>
 8002742:	230a      	movs	r3, #10
 8002744:	e02b      	b.n	800279e <HAL_GPIO_Init+0x26a>
 8002746:	2308      	movs	r3, #8
 8002748:	e029      	b.n	800279e <HAL_GPIO_Init+0x26a>
 800274a:	2307      	movs	r3, #7
 800274c:	e027      	b.n	800279e <HAL_GPIO_Init+0x26a>
 800274e:	2306      	movs	r3, #6
 8002750:	e025      	b.n	800279e <HAL_GPIO_Init+0x26a>
 8002752:	2305      	movs	r3, #5
 8002754:	e023      	b.n	800279e <HAL_GPIO_Init+0x26a>
 8002756:	2304      	movs	r3, #4
 8002758:	e021      	b.n	800279e <HAL_GPIO_Init+0x26a>
 800275a:	2303      	movs	r3, #3
 800275c:	e01f      	b.n	800279e <HAL_GPIO_Init+0x26a>
 800275e:	2302      	movs	r3, #2
 8002760:	e01d      	b.n	800279e <HAL_GPIO_Init+0x26a>
 8002762:	2301      	movs	r3, #1
 8002764:	e01b      	b.n	800279e <HAL_GPIO_Init+0x26a>
 8002766:	bf00      	nop
 8002768:	58000080 	.word	0x58000080
 800276c:	58024400 	.word	0x58024400
 8002770:	58000400 	.word	0x58000400
 8002774:	58020000 	.word	0x58020000
 8002778:	58020400 	.word	0x58020400
 800277c:	58020800 	.word	0x58020800
 8002780:	58020c00 	.word	0x58020c00
 8002784:	58021000 	.word	0x58021000
 8002788:	58021400 	.word	0x58021400
 800278c:	58021800 	.word	0x58021800
 8002790:	58021c00 	.word	0x58021c00
 8002794:	58022000 	.word	0x58022000
 8002798:	58022400 	.word	0x58022400
 800279c:	2300      	movs	r3, #0
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	f002 0203 	and.w	r2, r2, #3
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	4093      	lsls	r3, r2
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ae:	4938      	ldr	r1, [pc, #224]	; (8002890 <HAL_GPIO_Init+0x35c>)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80027e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f ae63 	bne.w	8002548 <HAL_GPIO_Init+0x14>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3724      	adds	r7, #36	; 0x24
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	58000400 	.word	0x58000400

08002894 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_PWREx_ConfigSupply+0xb0>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	2b06      	cmp	r3, #6
 80028a6:	d00a      	beq.n	80028be <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_PWREx_ConfigSupply+0xb0>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e040      	b.n	800293c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e03e      	b.n	800293c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_PWREx_ConfigSupply+0xb0>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80028c6:	491f      	ldr	r1, [pc, #124]	; (8002944 <HAL_PWREx_ConfigSupply+0xb0>)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028ce:	f7fe fb51 	bl	8000f74 <HAL_GetTick>
 80028d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028d4:	e009      	b.n	80028ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028d6:	f7fe fb4d 	bl	8000f74 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028e4:	d901      	bls.n	80028ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e028      	b.n	800293c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f6:	d1ee      	bne.n	80028d6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b1e      	cmp	r3, #30
 80028fc:	d008      	beq.n	8002910 <HAL_PWREx_ConfigSupply+0x7c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b2e      	cmp	r3, #46	; 0x2e
 8002902:	d005      	beq.n	8002910 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b1d      	cmp	r3, #29
 8002908:	d002      	beq.n	8002910 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b2d      	cmp	r3, #45	; 0x2d
 800290e:	d114      	bne.n	800293a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002910:	f7fe fb30 	bl	8000f74 <HAL_GetTick>
 8002914:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002916:	e009      	b.n	800292c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002918:	f7fe fb2c 	bl	8000f74 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002926:	d901      	bls.n	800292c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e007      	b.n	800293c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_PWREx_ConfigSupply+0xb0>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002938:	d1ee      	bne.n	8002918 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	58024800 	.word	0x58024800

08002948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	; 0x30
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e3f3      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80b3 	beq.w	8002ace <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002968:	4b9e      	ldr	r3, [pc, #632]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002972:	4b9c      	ldr	r3, [pc, #624]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	2b10      	cmp	r3, #16
 800297c:	d007      	beq.n	800298e <HAL_RCC_OscConfig+0x46>
 800297e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002980:	2b18      	cmp	r3, #24
 8002982:	d112      	bne.n	80029aa <HAL_RCC_OscConfig+0x62>
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d10d      	bne.n	80029aa <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298e:	4b95      	ldr	r3, [pc, #596]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8098 	beq.w	8002acc <HAL_RCC_OscConfig+0x184>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8093 	bne.w	8002acc <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e3cb      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x7a>
 80029b4:	4b8b      	ldr	r3, [pc, #556]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a8a      	ldr	r2, [pc, #552]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e058      	b.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d112      	bne.n	80029f0 <HAL_RCC_OscConfig+0xa8>
 80029ca:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b83      	ldr	r3, [pc, #524]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a82      	ldr	r2, [pc, #520]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7f      	ldr	r2, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e041      	b.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f8:	d112      	bne.n	8002a20 <HAL_RCC_OscConfig+0xd8>
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a79      	ldr	r2, [pc, #484]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a76      	ldr	r2, [pc, #472]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b74      	ldr	r3, [pc, #464]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e029      	b.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x108>
 8002a2a:	4b6e      	ldr	r3, [pc, #440]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6d      	ldr	r2, [pc, #436]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b6b      	ldr	r3, [pc, #428]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6a      	ldr	r2, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a67      	ldr	r2, [pc, #412]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e011      	b.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 8002a50:	4b64      	ldr	r3, [pc, #400]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a63      	ldr	r2, [pc, #396]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b61      	ldr	r3, [pc, #388]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a60      	ldr	r2, [pc, #384]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5d      	ldr	r2, [pc, #372]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fa7a 	bl	8000f74 <HAL_GetTick>
 8002a80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fa76 	bl	8000f74 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e355      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a96:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0x13c>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe fa66 	bl	8000f74 <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe fa62 	bl	8000f74 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	; 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e341      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002abe:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x164>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 808c 	beq.w	8002bf4 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1ba>
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	2b18      	cmp	r3, #24
 8002af6:	d137      	bne.n	8002b68 <HAL_RCC_OscConfig+0x220>
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d132      	bne.n	8002b68 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b02:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e313      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b1a:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 0219 	bic.w	r2, r3, #25
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	492f      	ldr	r1, [pc, #188]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b2c:	f7fe fa22 	bl	8000f74 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fa1e 	bl	8000f74 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e2fd      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	4920      	ldr	r1, [pc, #128]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b66:	e045      	b.n	8002bf4 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d026      	beq.n	8002bbe <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0219 	bic.w	r2, r3, #25
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4919      	ldr	r1, [pc, #100]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe f9f7 	bl	8000f74 <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe f9f3 	bl	8000f74 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e2d2      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	061b      	lsls	r3, r3, #24
 8002bb6:	490b      	ldr	r1, [pc, #44]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e01a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x29c>)
 8002bc4:	f023 0301 	bic.w	r3, r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe f9d3 	bl	8000f74 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe f9cf 	bl	8000f74 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d903      	bls.n	8002be8 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e2ae      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
 8002be4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be8:	4b99      	ldr	r3, [pc, #612]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1ee      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d06a      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c00:	4b93      	ldr	r3, [pc, #588]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c0a:	4b91      	ldr	r3, [pc, #580]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2de>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	d11b      	bne.n	8002c54 <HAL_RCC_OscConfig+0x30c>
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d116      	bne.n	8002c54 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c26:	4b8a      	ldr	r3, [pc, #552]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2f6>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e281      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c3e:	4b84      	ldr	r3, [pc, #528]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	061b      	lsls	r3, r3, #24
 8002c4c:	4980      	ldr	r1, [pc, #512]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c52:	e040      	b.n	8002cd6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d023      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c5c:	4b7c      	ldr	r3, [pc, #496]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7b      	ldr	r2, [pc, #492]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f984 	bl	8000f74 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c70:	f7fe f980 	bl	8000f74 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e25f      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c82:	4b73      	ldr	r3, [pc, #460]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c8e:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	496c      	ldr	r1, [pc, #432]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
 8002ca2:	e018      	b.n	8002cd6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ca4:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f960 	bl	8000f74 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cb8:	f7fe f95c 	bl	8000f74 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e23b      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cca:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d036      	beq.n	8002d50 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d019      	beq.n	8002d1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf6:	f7fe f93d 	bl	8000f74 <HAL_GetTick>
 8002cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7fe f939 	bl	8000f74 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e218      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x3b6>
 8002d1c:	e018      	b.n	8002d50 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1e:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	4a4b      	ldr	r2, [pc, #300]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe f923 	bl	8000f74 <HAL_GetTick>
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d32:	f7fe f91f 	bl	8000f74 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1fe      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d44:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f0      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d036      	beq.n	8002dca <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d019      	beq.n	8002d98 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d64:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a39      	ldr	r2, [pc, #228]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d70:	f7fe f900 	bl	8000f74 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d78:	f7fe f8fc 	bl	8000f74 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1db      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x430>
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2c      	ldr	r2, [pc, #176]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002da4:	f7fe f8e6 	bl	8000f74 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dac:	f7fe f8e2 	bl	8000f74 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1c1      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002dbe:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80af 	beq.w	8002f36 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_RCC_OscConfig+0x50c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_RCC_OscConfig+0x50c>)
 8002dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002de4:	f7fe f8c6 	bl	8000f74 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dec:	f7fe f8c2 	bl	8000f74 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1a1      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <HAL_RCC_OscConfig+0x50c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4d8>
 8002e12:	4b0f      	ldr	r3, [pc, #60]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	e05b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x590>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d117      	bne.n	8002e58 <HAL_RCC_OscConfig+0x510>
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a08      	ldr	r2, [pc, #32]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a02      	ldr	r2, [pc, #8]	; (8002e50 <HAL_RCC_OscConfig+0x508>)
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4c:	e044      	b.n	8002ed8 <HAL_RCC_OscConfig+0x590>
 8002e4e:	bf00      	nop
 8002e50:	58024400 	.word	0x58024400
 8002e54:	58024800 	.word	0x58024800
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d112      	bne.n	8002e86 <HAL_RCC_OscConfig+0x53e>
 8002e60:	4b95      	ldr	r3, [pc, #596]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a94      	ldr	r2, [pc, #592]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e70:	4a91      	ldr	r2, [pc, #580]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e76:	6713      	str	r3, [r2, #112]	; 0x70
 8002e78:	4b8f      	ldr	r3, [pc, #572]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	4a8e      	ldr	r2, [pc, #568]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	6713      	str	r3, [r2, #112]	; 0x70
 8002e84:	e028      	b.n	8002ed8 <HAL_RCC_OscConfig+0x590>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b85      	cmp	r3, #133	; 0x85
 8002e8c:	d112      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x56c>
 8002e8e:	4b8a      	ldr	r3, [pc, #552]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	4a89      	ldr	r2, [pc, #548]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9a:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a86      	ldr	r2, [pc, #536]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b84      	ldr	r3, [pc, #528]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a83      	ldr	r2, [pc, #524]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e011      	b.n	8002ed8 <HAL_RCC_OscConfig+0x590>
 8002eb4:	4b80      	ldr	r3, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb8:	4a7f      	ldr	r2, [pc, #508]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec0:	4b7d      	ldr	r3, [pc, #500]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a7c      	ldr	r2, [pc, #496]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ec6:	f023 0304 	bic.w	r3, r3, #4
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	4b7a      	ldr	r3, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a79      	ldr	r2, [pc, #484]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fe f848 	bl	8000f74 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fe f844 	bl	8000f74 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e121      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002efe:	4b6e      	ldr	r3, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ee      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x5a0>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe f832 	bl	8000f74 <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fe f82e 	bl	8000f74 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e10b      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ee      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8100 	beq.w	8003140 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f40:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f48:	2b18      	cmp	r3, #24
 8002f4a:	f000 80bb 	beq.w	80030c4 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	f040 8095 	bne.w	8003082 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f58:	4b57      	ldr	r3, [pc, #348]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a56      	ldr	r2, [pc, #344]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe f806 	bl	8000f74 <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fe f802 	bl	8000f74 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0e1      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7e:	4b4e      	ldr	r3, [pc, #312]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f8a:	4b4b      	ldr	r3, [pc, #300]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002f8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	; (80030bc <HAL_RCC_OscConfig+0x774>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	4946      	ldr	r1, [pc, #280]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	628b      	str	r3, [r1, #40]	; 0x28
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	025b      	lsls	r3, r3, #9
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fd4:	4938      	ldr	r1, [pc, #224]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	4a36      	ldr	r2, [pc, #216]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fea:	4b35      	ldr	r3, [pc, #212]	; (80030c0 <HAL_RCC_OscConfig+0x778>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ff2:	00d2      	lsls	r2, r2, #3
 8002ff4:	4930      	ldr	r1, [pc, #192]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ffa:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	f023 020c 	bic.w	r2, r3, #12
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	492c      	ldr	r1, [pc, #176]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003008:	4313      	orrs	r3, r2
 800300a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f023 0202 	bic.w	r2, r3, #2
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	4927      	ldr	r1, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 800301a:	4313      	orrs	r3, r2
 800301c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4a25      	ldr	r2, [pc, #148]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003028:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302a:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fd ff8b 	bl	8000f74 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003062:	f7fd ff87 	bl	8000f74 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e066      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x71a>
 8003080:	e05e      	b.n	8003140 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 8003088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fd ff71 	bl	8000f74 <HAL_GetTick>
 8003092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003096:	f7fd ff6d 	bl	8000f74 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e04c      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <HAL_RCC_OscConfig+0x770>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f0      	bne.n	8003096 <HAL_RCC_OscConfig+0x74e>
 80030b4:	e044      	b.n	8003140 <HAL_RCC_OscConfig+0x7f8>
 80030b6:	bf00      	nop
 80030b8:	58024400 	.word	0x58024400
 80030bc:	fffffc0c 	.word	0xfffffc0c
 80030c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80030c4:	4b21      	ldr	r3, [pc, #132]	; (800314c <HAL_RCC_OscConfig+0x804>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030ca:	4b20      	ldr	r3, [pc, #128]	; (800314c <HAL_RCC_OscConfig+0x804>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d031      	beq.n	800313c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0203 	and.w	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d12a      	bne.n	800313c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d122      	bne.n	800313c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	0a5b      	lsrs	r3, r3, #9
 800310a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003112:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003114:	429a      	cmp	r2, r3
 8003116:	d111      	bne.n	800313c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	0c1b      	lsrs	r3, r3, #16
 800311c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003126:	429a      	cmp	r2, r3
 8003128:	d108      	bne.n	800313c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0e1b      	lsrs	r3, r3, #24
 800312e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3730      	adds	r7, #48	; 0x30
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	58024400 	.word	0x58024400

08003150 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e19c      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b8a      	ldr	r3, [pc, #552]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b87      	ldr	r3, [pc, #540]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4985      	ldr	r1, [pc, #532]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b83      	ldr	r3, [pc, #524]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e184      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d010      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	4b7b      	ldr	r3, [pc, #492]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d908      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b0:	4b78      	ldr	r3, [pc, #480]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4975      	ldr	r1, [pc, #468]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d010      	beq.n	80031f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	4b70      	ldr	r3, [pc, #448]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031da:	429a      	cmp	r2, r3
 80031dc:	d908      	bls.n	80031f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031de:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	496a      	ldr	r1, [pc, #424]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	4b64      	ldr	r3, [pc, #400]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003208:	429a      	cmp	r2, r3
 800320a:	d908      	bls.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800320c:	4b61      	ldr	r3, [pc, #388]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	495e      	ldr	r1, [pc, #376]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800321a:	4313      	orrs	r3, r2
 800321c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d010      	beq.n	800324c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	4b59      	ldr	r3, [pc, #356]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003236:	429a      	cmp	r2, r3
 8003238:	d908      	bls.n	800324c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4953      	ldr	r1, [pc, #332]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003248:	4313      	orrs	r3, r2
 800324a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d010      	beq.n	800327a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4b4d      	ldr	r3, [pc, #308]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	429a      	cmp	r2, r3
 8003266:	d908      	bls.n	800327a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003268:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f023 020f 	bic.w	r2, r3, #15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4947      	ldr	r1, [pc, #284]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003276:	4313      	orrs	r3, r2
 8003278:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d055      	beq.n	8003332 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4940      	ldr	r1, [pc, #256]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003294:	4313      	orrs	r3, r2
 8003296:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032a0:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d121      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0f6      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d115      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0ea      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032d0:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0de      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e0:	4b2c      	ldr	r3, [pc, #176]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0d6      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032f0:	4b28      	ldr	r3, [pc, #160]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4925      	ldr	r1, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fd fe37 	bl	8000f74 <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003308:	e00a      	b.n	8003320 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800330a:	f7fd fe33 	bl	8000f74 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0be      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	429a      	cmp	r2, r3
 8003330:	d1eb      	bne.n	800330a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d010      	beq.n	8003360 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	429a      	cmp	r2, r3
 800334c:	d208      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f023 020f 	bic.w	r2, r3, #15
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_RCC_ClockConfig+0x244>)
 800335c:	4313      	orrs	r3, r2
 800335e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d214      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 020f 	bic.w	r2, r3, #15
 8003376:	4906      	ldr	r1, [pc, #24]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_RCC_ClockConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e086      	b.n	800349e <HAL_RCC_ClockConfig+0x34e>
 8003390:	52002000 	.word	0x52002000
 8003394:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d208      	bcs.n	80033c6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033b4:	4b3c      	ldr	r3, [pc, #240]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4939      	ldr	r1, [pc, #228]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d010      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695a      	ldr	r2, [r3, #20]
 80033d6:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033de:	429a      	cmp	r2, r3
 80033e0:	d208      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	492e      	ldr	r1, [pc, #184]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d010      	beq.n	8003422 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340c:	429a      	cmp	r2, r3
 800340e:	d208      	bcs.n	8003422 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4922      	ldr	r1, [pc, #136]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 800341e:	4313      	orrs	r3, r2
 8003420:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b00      	cmp	r3, #0
 800342c:	d010      	beq.n	8003450 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800343a:	429a      	cmp	r2, r3
 800343c:	d208      	bcs.n	8003450 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4917      	ldr	r1, [pc, #92]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 800344c:	4313      	orrs	r3, r2
 800344e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003450:	f000 f834 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	4912      	ldr	r1, [pc, #72]	; (80034ac <HAL_RCC_ClockConfig+0x35c>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_RCC_ClockConfig+0x358>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <HAL_RCC_ClockConfig+0x35c>)
 8003478:	5cd3      	ldrb	r3, [r2, r3]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_RCC_ClockConfig+0x360>)
 8003486:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <HAL_RCC_ClockConfig+0x364>)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_ClockConfig+0x368>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fd24 	bl	8000ee0 <HAL_InitTick>
 8003498:	4603      	mov	r3, r0
 800349a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800349c:	7bfb      	ldrb	r3, [r7, #15]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	08007cf0 	.word	0x08007cf0
 80034b0:	24000004 	.word	0x24000004
 80034b4:	24000000 	.word	0x24000000
 80034b8:	24000008 	.word	0x24000008

080034bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	; 0x24
 80034c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c2:	4bb3      	ldr	r3, [pc, #716]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ca:	2b18      	cmp	r3, #24
 80034cc:	f200 8155 	bhi.w	800377a <HAL_RCC_GetSysClockFreq+0x2be>
 80034d0:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d6:	bf00      	nop
 80034d8:	0800353d 	.word	0x0800353d
 80034dc:	0800377b 	.word	0x0800377b
 80034e0:	0800377b 	.word	0x0800377b
 80034e4:	0800377b 	.word	0x0800377b
 80034e8:	0800377b 	.word	0x0800377b
 80034ec:	0800377b 	.word	0x0800377b
 80034f0:	0800377b 	.word	0x0800377b
 80034f4:	0800377b 	.word	0x0800377b
 80034f8:	08003563 	.word	0x08003563
 80034fc:	0800377b 	.word	0x0800377b
 8003500:	0800377b 	.word	0x0800377b
 8003504:	0800377b 	.word	0x0800377b
 8003508:	0800377b 	.word	0x0800377b
 800350c:	0800377b 	.word	0x0800377b
 8003510:	0800377b 	.word	0x0800377b
 8003514:	0800377b 	.word	0x0800377b
 8003518:	08003569 	.word	0x08003569
 800351c:	0800377b 	.word	0x0800377b
 8003520:	0800377b 	.word	0x0800377b
 8003524:	0800377b 	.word	0x0800377b
 8003528:	0800377b 	.word	0x0800377b
 800352c:	0800377b 	.word	0x0800377b
 8003530:	0800377b 	.word	0x0800377b
 8003534:	0800377b 	.word	0x0800377b
 8003538:	0800356f 	.word	0x0800356f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800353c:	4b94      	ldr	r3, [pc, #592]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003548:	4b91      	ldr	r3, [pc, #580]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	08db      	lsrs	r3, r3, #3
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	4a90      	ldr	r2, [pc, #576]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
 8003558:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800355a:	e111      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800355c:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800355e:	61bb      	str	r3, [r7, #24]
    break;
 8003560:	e10e      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003562:	4b8d      	ldr	r3, [pc, #564]	; (8003798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003564:	61bb      	str	r3, [r7, #24]
    break;
 8003566:	e10b      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003568:	4b8c      	ldr	r3, [pc, #560]	; (800379c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800356a:	61bb      	str	r3, [r7, #24]
    break;
 800356c:	e108      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800356e:	4b88      	ldr	r3, [pc, #544]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003578:	4b85      	ldr	r3, [pc, #532]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003582:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003584:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800358e:	4b80      	ldr	r3, [pc, #512]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	08db      	lsrs	r3, r3, #3
 8003594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80e1 	beq.w	8003774 <HAL_RCC_GetSysClockFreq+0x2b8>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f000 8083 	beq.w	80036c0 <HAL_RCC_GetSysClockFreq+0x204>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	f200 80a1 	bhi.w	8003704 <HAL_RCC_GetSysClockFreq+0x248>
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x114>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d056      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x1c0>
 80035ce:	e099      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d0:	4b6f      	ldr	r3, [pc, #444]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02d      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035dc:	4b6c      	ldr	r3, [pc, #432]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	4a6b      	ldr	r2, [pc, #428]	; (8003794 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
 80035ec:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	ee07 3a90 	vmov	s15, r3
 80035f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003606:	4b62      	ldr	r3, [pc, #392]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003616:	ed97 6a02 	vldr	s12, [r7, #8]
 800361a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003632:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003636:	e087      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003642:	eddf 6a58 	vldr	s13, [pc, #352]	; 80037a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364a:	4b51      	ldr	r3, [pc, #324]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	ed97 6a02 	vldr	s12, [r7, #8]
 800365e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800366e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800367a:	e065      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	ee07 3a90 	vmov	s15, r3
 8003682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003686:	eddf 6a48 	vldr	s13, [pc, #288]	; 80037a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800368a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369e:	ed97 6a02 	vldr	s12, [r7, #8]
 80036a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036be:	e043      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80037ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80036ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003702:	e021      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800370e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80037a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003716:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003726:	ed97 6a02 	vldr	s12, [r7, #8]
 800372a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80037a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800372e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003746:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	0a5b      	lsrs	r3, r3, #9
 800374e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003752:	3301      	adds	r3, #1
 8003754:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	ee07 3a90 	vmov	s15, r3
 800375c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003760:	edd7 6a07 	vldr	s13, [r7, #28]
 8003764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376c:	ee17 3a90 	vmov	r3, s15
 8003770:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003772:	e005      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
    break;
 8003778:	e002      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800377c:	61bb      	str	r3, [r7, #24]
    break;
 800377e:	bf00      	nop
  }

  return sysclockfreq;
 8003780:	69bb      	ldr	r3, [r7, #24]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3724      	adds	r7, #36	; 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	58024400 	.word	0x58024400
 8003794:	03d09000 	.word	0x03d09000
 8003798:	003d0900 	.word	0x003d0900
 800379c:	016e3600 	.word	0x016e3600
 80037a0:	46000000 	.word	0x46000000
 80037a4:	4c742400 	.word	0x4c742400
 80037a8:	4a742400 	.word	0x4a742400
 80037ac:	4bb71b00 	.word	0x4bb71b00

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80037b6:	f7ff fe81 	bl	80034bc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RCC_GetHCLKFreq+0x50>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	0a1b      	lsrs	r3, r3, #8
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490f      	ldr	r1, [pc, #60]	; (8003804 <HAL_RCC_GetHCLKFreq+0x54>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_RCC_GetHCLKFreq+0x50>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_RCC_GetHCLKFreq+0x54>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	fa22 f303 	lsr.w	r3, r2, r3
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_RCC_GetHCLKFreq+0x58>)
 80037ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ee:	4a07      	ldr	r2, [pc, #28]	; (800380c <HAL_RCC_GetHCLKFreq+0x5c>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <HAL_RCC_GetHCLKFreq+0x58>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	58024400 	.word	0x58024400
 8003804:	08007cf0 	.word	0x08007cf0
 8003808:	24000004 	.word	0x24000004
 800380c:	24000000 	.word	0x24000000

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003814:	f7ff ffcc 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	091b      	lsrs	r3, r3, #4
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	58024400 	.word	0x58024400
 8003838:	08007cf0 	.word	0x08007cf0

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003840:	f7ff ffb6 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4904      	ldr	r1, [pc, #16]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	58024400 	.word	0x58024400
 8003864:	08007cf0 	.word	0x08007cf0

08003868 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003870:	2300      	movs	r3, #0
 8003872:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003874:	2300      	movs	r3, #0
 8003876:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d03f      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800388c:	d02a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800388e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003892:	d824      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003898:	d018      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800389a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389e:	d81e      	bhi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a8:	d007      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038aa:	e018      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ac:	4ba6      	ldr	r3, [pc, #664]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	4aa5      	ldr	r2, [pc, #660]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038b8:	e015      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3304      	adds	r3, #4
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 ff17 	bl	80056f4 <RCCEx_PLL2_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038ca:	e00c      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3324      	adds	r3, #36	; 0x24
 80038d0:	2102      	movs	r1, #2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 ffc0 	bl	8005858 <RCCEx_PLL3_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038dc:	e003      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
      break;
 80038e2:	e000      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d109      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038ec:	4b96      	ldr	r3, [pc, #600]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f8:	4993      	ldr	r1, [pc, #588]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	650b      	str	r3, [r1, #80]	; 0x50
 80038fe:	e001      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d03d      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	2b04      	cmp	r3, #4
 8003916:	d826      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003935 	.word	0x08003935
 8003924:	08003943 	.word	0x08003943
 8003928:	08003955 	.word	0x08003955
 800392c:	0800396d 	.word	0x0800396d
 8003930:	0800396d 	.word	0x0800396d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003934:	4b84      	ldr	r3, [pc, #528]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	4a83      	ldr	r2, [pc, #524]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800393a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003940:	e015      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fed3 	bl	80056f4 <RCCEx_PLL2_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003952:	e00c      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3324      	adds	r3, #36	; 0x24
 8003958:	2100      	movs	r1, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f001 ff7c 	bl	8005858 <RCCEx_PLL3_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003964:	e003      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
      break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800396c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003974:	4b74      	ldr	r3, [pc, #464]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003978:	f023 0207 	bic.w	r2, r3, #7
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	4971      	ldr	r1, [pc, #452]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	650b      	str	r3, [r1, #80]	; 0x50
 8003986:	e001      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	2b00      	cmp	r3, #0
 8003996:	d04a      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039a0:	d031      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80039a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80039a6:	d82b      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ac:	d02d      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80039ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b2:	d825      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039b4:	2bc0      	cmp	r3, #192	; 0xc0
 80039b6:	d02a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80039b8:	2bc0      	cmp	r3, #192	; 0xc0
 80039ba:	d821      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d016      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x186>
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d81d      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x166>
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d007      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80039cc:	e018      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ce:	4b5e      	ldr	r3, [pc, #376]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4a5d      	ldr	r2, [pc, #372]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039da:	e019      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 fe86 	bl	80056f4 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039ec:	e010      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3324      	adds	r3, #36	; 0x24
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 ff2f 	bl	8005858 <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80039fe:	e007      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	e004      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a06:	bf00      	nop
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003a16:	4b4c      	ldr	r3, [pc, #304]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	4949      	ldr	r1, [pc, #292]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	650b      	str	r3, [r1, #80]	; 0x50
 8003a28:	e001      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	7dfb      	ldrb	r3, [r7, #23]
 8003a2c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04f      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a42:	d036      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003a44:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a48:	d830      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d032      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a54:	d82a      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a5a:	d02e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003a5c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a60:	d824      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a66:	d018      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d81e      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a76:	d007      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003a78:	e018      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7a:	4b33      	ldr	r3, [pc, #204]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	4a32      	ldr	r2, [pc, #200]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a86:	e019      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fe30 	bl	80056f4 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003a98:	e010      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3324      	adds	r3, #36	; 0x24
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f001 fed9 	bl	8005858 <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003aaa:	e007      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
      break;
 8003ab0:	e004      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ab2:	bf00      	nop
 8003ab4:	e002      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	491e      	ldr	r1, [pc, #120]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ad4:	e001      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d034      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aea:	2b30      	cmp	r3, #48	; 0x30
 8003aec:	d01c      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003aee:	2b30      	cmp	r3, #48	; 0x30
 8003af0:	d817      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d00c      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d813      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d10f      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b0e:	e00e      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	2102      	movs	r1, #2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fdec 	bl	80056f4 <RCCEx_PLL2_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003b20:	e005      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b40:	4901      	ldr	r1, [pc, #4]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003b48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d047      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b64:	d030      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b6a:	d82a      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b70:	d02c      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b76:	d824      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7c:	d018      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	d81e      	bhi.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8c:	d007      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003b8e:	e018      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b90:	4bb0      	ldr	r3, [pc, #704]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4aaf      	ldr	r2, [pc, #700]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b9c:	e017      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 fda5 	bl	80056f4 <RCCEx_PLL2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bae:	e00e      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3324      	adds	r3, #36	; 0x24
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f001 fe4e 	bl	8005858 <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bc0:	e005      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc6:	e002      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bce:	7dfb      	ldrb	r3, [r7, #23]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bd4:	4b9f      	ldr	r3, [pc, #636]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be0:	499c      	ldr	r1, [pc, #624]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	650b      	str	r3, [r1, #80]	; 0x50
 8003be6:	e001      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	7dfb      	ldrb	r3, [r7, #23]
 8003bea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d049      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c00:	d02e      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c06:	d828      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0c:	d02a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c12:	d822      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c18:	d026      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003c1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1e:	d81c      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c24:	d010      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2a:	d816      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d01d      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c34:	d111      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fd59 	bl	80056f4 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c46:	e012      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3324      	adds	r3, #36	; 0x24
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fe02 	bl	8005858 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c58:	e009      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c5e:	e006      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c60:	bf00      	nop
 8003c62:	e004      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c64:	bf00      	nop
 8003c66:	e002      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c74:	4b77      	ldr	r3, [pc, #476]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c80:	4974      	ldr	r1, [pc, #464]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	650b      	str	r3, [r1, #80]	; 0x50
 8003c86:	e001      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d053      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c9e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ca2:	d034      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ca4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003ca8:	d82e      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cae:	d030      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb4:	d828      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cba:	d02c      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc0:	d822      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cc6:	d028      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003cc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ccc:	d81c      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd8:	d816      	bhi.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01f      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce2:	d111      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f001 fd02 	bl	80056f4 <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e014      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	; 0x24
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fdab 	bl	8005858 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d06:	e00b      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e008      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e006      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d12:	bf00      	nop
 8003d14:	e004      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d16:	bf00      	nop
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e000      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d26:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d34:	4947      	ldr	r1, [pc, #284]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	658b      	str	r3, [r1, #88]	; 0x58
 8003d3a:	e001      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d54:	d00e      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5a:	d814      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d64:	d10f      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d72:	e00c      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fcba 	bl	80056f4 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8a:	e000      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d94:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	492c      	ldr	r1, [pc, #176]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	650b      	str	r3, [r1, #80]	; 0x50
 8003da6:	e001      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d032      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d81b      	bhi.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003dd9 	.word	0x08003dd9
 8003dd0:	08003de7 	.word	0x08003de7
 8003dd4:	08003dff 	.word	0x08003dff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd8:	4b1e      	ldr	r3, [pc, #120]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003de4:	e00c      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	2102      	movs	r1, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 fc81 	bl	80056f4 <RCCEx_PLL2_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003df6:	e003      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dfc:	e000      	b.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d109      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	f023 0203 	bic.w	r2, r3, #3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	4910      	ldr	r1, [pc, #64]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e18:	e001      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 808a 	beq.w	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e38:	f7fd f89c 	bl	8000f74 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3e:	e00d      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd f898 	bl	8000f74 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	; 0x64
 8003e4c:	d906      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	75fb      	strb	r3, [r7, #23]
        break;
 8003e52:	e009      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003e54:	58024400 	.word	0x58024400
 8003e58:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5c:	4bba      	ldr	r3, [pc, #744]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0eb      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d166      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e6e:	4bb7      	ldr	r3, [pc, #732]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e78:	4053      	eors	r3, r2
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d013      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e82:	4bb2      	ldr	r3, [pc, #712]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8c:	4baf      	ldr	r3, [pc, #700]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4aae      	ldr	r2, [pc, #696]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e98:	4bac      	ldr	r3, [pc, #688]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4aab      	ldr	r2, [pc, #684]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ea4:	4aa9      	ldr	r2, [pc, #676]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb4:	d115      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb6:	f7fd f85d 	bl	8000f74 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ebc:	e00b      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd f859 	bl	8000f74 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d902      	bls.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	75fb      	strb	r3, [r7, #23]
            break;
 8003ed4:	e005      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed6:	4b9d      	ldr	r3, [pc, #628]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d126      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef6:	d10d      	bne.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003ef8:	4b94      	ldr	r3, [pc, #592]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f06:	0919      	lsrs	r1, r3, #4
 8003f08:	4b91      	ldr	r3, [pc, #580]	; (8004150 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	498f      	ldr	r1, [pc, #572]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	610b      	str	r3, [r1, #16]
 8003f12:	e005      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003f14:	4b8d      	ldr	r3, [pc, #564]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a8c      	ldr	r2, [pc, #560]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f1e:	6113      	str	r3, [r2, #16]
 8003f20:	4b8a      	ldr	r3, [pc, #552]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2e:	4987      	ldr	r1, [pc, #540]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	670b      	str	r3, [r1, #112]	; 0x70
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
 8003f38:	75bb      	strb	r3, [r7, #22]
 8003f3a:	e001      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d07f      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f52:	2b28      	cmp	r3, #40	; 0x28
 8003f54:	d866      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	0800402b 	.word	0x0800402b
 8003f60:	08004025 	.word	0x08004025
 8003f64:	08004025 	.word	0x08004025
 8003f68:	08004025 	.word	0x08004025
 8003f6c:	08004025 	.word	0x08004025
 8003f70:	08004025 	.word	0x08004025
 8003f74:	08004025 	.word	0x08004025
 8003f78:	08004025 	.word	0x08004025
 8003f7c:	08004001 	.word	0x08004001
 8003f80:	08004025 	.word	0x08004025
 8003f84:	08004025 	.word	0x08004025
 8003f88:	08004025 	.word	0x08004025
 8003f8c:	08004025 	.word	0x08004025
 8003f90:	08004025 	.word	0x08004025
 8003f94:	08004025 	.word	0x08004025
 8003f98:	08004025 	.word	0x08004025
 8003f9c:	08004013 	.word	0x08004013
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	08004025 	.word	0x08004025
 8003fa8:	08004025 	.word	0x08004025
 8003fac:	08004025 	.word	0x08004025
 8003fb0:	08004025 	.word	0x08004025
 8003fb4:	08004025 	.word	0x08004025
 8003fb8:	08004025 	.word	0x08004025
 8003fbc:	0800402b 	.word	0x0800402b
 8003fc0:	08004025 	.word	0x08004025
 8003fc4:	08004025 	.word	0x08004025
 8003fc8:	08004025 	.word	0x08004025
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08004025 	.word	0x08004025
 8003fd4:	08004025 	.word	0x08004025
 8003fd8:	08004025 	.word	0x08004025
 8003fdc:	0800402b 	.word	0x0800402b
 8003fe0:	08004025 	.word	0x08004025
 8003fe4:	08004025 	.word	0x08004025
 8003fe8:	08004025 	.word	0x08004025
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	08004025 	.word	0x08004025
 8003ff4:	08004025 	.word	0x08004025
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800402b 	.word	0x0800402b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2101      	movs	r1, #1
 8004006:	4618      	mov	r0, r3
 8004008:	f001 fb74 	bl	80056f4 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004010:	e00c      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3324      	adds	r3, #36	; 0x24
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f001 fc1d 	bl	8005858 <RCCEx_PLL3_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800402a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10a      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004032:	4b46      	ldr	r3, [pc, #280]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004040:	4942      	ldr	r1, [pc, #264]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004042:	4313      	orrs	r3, r2
 8004044:	654b      	str	r3, [r1, #84]	; 0x54
 8004046:	e001      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
 800404a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d038      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800405c:	2b05      	cmp	r3, #5
 800405e:	d821      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	080040ab 	.word	0x080040ab
 800406c:	08004081 	.word	0x08004081
 8004070:	08004093 	.word	0x08004093
 8004074:	080040ab 	.word	0x080040ab
 8004078:	080040ab 	.word	0x080040ab
 800407c:	080040ab 	.word	0x080040ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fb34 	bl	80056f4 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004090:	e00c      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3324      	adds	r3, #36	; 0x24
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fbdd 	bl	8005858 <RCCEx_PLL3_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	75fb      	strb	r3, [r7, #23]
      break;
 80040a8:	e000      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80040aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040b2:	4b26      	ldr	r3, [pc, #152]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f023 0207 	bic.w	r2, r3, #7
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040be:	4923      	ldr	r1, [pc, #140]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	654b      	str	r3, [r1, #84]	; 0x54
 80040c4:	e001      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	7dfb      	ldrb	r3, [r7, #23]
 80040c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d040      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d821      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	0800412b 	.word	0x0800412b
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004113 	.word	0x08004113
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800412b 	.word	0x0800412b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2101      	movs	r1, #1
 8004106:	4618      	mov	r0, r3
 8004108:	f001 faf4 	bl	80056f4 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004110:	e00c      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f001 fb9d 	bl	8005858 <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004122:	e003      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800412a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f023 0207 	bic.w	r2, r3, #7
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004140:	4902      	ldr	r1, [pc, #8]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	658b      	str	r3, [r1, #88]	; 0x58
 8004146:	e007      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004148:	58024800 	.word	0x58024800
 800414c:	58024400 	.word	0x58024400
 8004150:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004174:	d828      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800417a:	d02a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004180:	d822      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004186:	d026      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800418c:	d81c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800418e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004198:	d816      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01d      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x972>
 800419e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a2:	d111      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 faa2 	bl	80056f4 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041b4:	e012      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f001 fb4b 	bl	8005858 <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80041da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e2:	4bb3      	ldr	r3, [pc, #716]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f0:	49af      	ldr	r1, [pc, #700]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	654b      	str	r3, [r1, #84]	; 0x54
 80041f6:	e001      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7dfb      	ldrb	r3, [r7, #23]
 80041fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04b      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800420e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004212:	d02e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004214:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004218:	d828      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d02a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004224:	d822      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800422a:	d026      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800422c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004230:	d81c      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004236:	d010      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d816      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01d      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004246:	d111      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3304      	adds	r3, #4
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f001 fa50 	bl	80056f4 <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004258:	e012      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f001 faf9 	bl	8005858 <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800426a:	e009      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e006      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800427e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004286:	4b8a      	ldr	r3, [pc, #552]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004294:	4986      	ldr	r1, [pc, #536]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004296:	4313      	orrs	r3, r2
 8004298:	658b      	str	r3, [r1, #88]	; 0x58
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d04b      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042b2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042b6:	d02e      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80042b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042bc:	d828      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d02a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80042c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c8:	d822      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042ca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ce:	d026      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80042d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042d4:	d81c      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042da:	d010      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80042dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042e0:	d816      	bhi.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01d      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d111      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f001 f9fe 	bl	80056f4 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042fc:	e012      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3324      	adds	r3, #36	; 0x24
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f001 faa7 	bl	8005858 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800430e:	e009      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
      break;
 8004314:	e006      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004316:	bf00      	nop
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004324:	7dfb      	ldrb	r3, [r7, #23]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10a      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800432a:	4b61      	ldr	r3, [pc, #388]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800432e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004338:	495d      	ldr	r1, [pc, #372]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800433a:	4313      	orrs	r3, r2
 800433c:	658b      	str	r3, [r1, #88]	; 0x58
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d10a      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3324      	adds	r3, #36	; 0x24
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f001 fa78 	bl	8005858 <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004372:	4b4f      	ldr	r3, [pc, #316]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	494b      	ldr	r1, [pc, #300]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004382:	4313      	orrs	r3, r2
 8004384:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3324      	adds	r3, #36	; 0x24
 80043a2:	2102      	movs	r1, #2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fa57 	bl	8005858 <RCCEx_PLL3_Config>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b4:	4b3e      	ldr	r3, [pc, #248]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c2:	493b      	ldr	r1, [pc, #236]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d034      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043de:	d01d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80043e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e4:	d817      	bhi.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ee:	d009      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80043f0:	e011      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 f97b 	bl	80056f4 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004402:	e00c      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3324      	adds	r3, #36	; 0x24
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fa24 	bl	8005858 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004414:	e003      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
      break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800441c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004424:	4b22      	ldr	r3, [pc, #136]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004432:	491f      	ldr	r1, [pc, #124]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004434:	4313      	orrs	r3, r2
 8004436:	658b      	str	r3, [r1, #88]	; 0x58
 8004438:	e001      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d036      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004450:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004454:	d01c      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004456:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800445a:	d816      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800445c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004460:	d003      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004466:	d007      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004468:	e00f      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004474:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004476:	e00c      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3324      	adds	r3, #36	; 0x24
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f001 f9ea 	bl	8005858 <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
      break;
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10d      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a6:	4902      	ldr	r1, [pc, #8]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	654b      	str	r3, [r1, #84]	; 0x54
 80044ac:	e004      	b.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80044ae:	bf00      	nop
 80044b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d029      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d007      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80044d2:	e00f      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d4:	4b69      	ldr	r3, [pc, #420]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a68      	ldr	r2, [pc, #416]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044e0:	e00b      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3304      	adds	r3, #4
 80044e6:	2102      	movs	r1, #2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 f903 	bl	80056f4 <RCCEx_PLL2_Config>
 80044ee:	4603      	mov	r3, r0
 80044f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044f2:	e002      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	75fb      	strb	r3, [r7, #23]
      break;
 80044f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d109      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004500:	4b5e      	ldr	r3, [pc, #376]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450c:	495b      	ldr	r1, [pc, #364]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800450e:	4313      	orrs	r3, r2
 8004510:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004512:	e001      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	7dfb      	ldrb	r3, [r7, #23]
 8004516:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00a      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3324      	adds	r3, #36	; 0x24
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f994 	bl	8005858 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d032      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004550:	d017      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004556:	d811      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455c:	d013      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800455e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004562:	d80b      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	d106      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	4a42      	ldr	r2, [pc, #264]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800457a:	e007      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
      break;
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004582:	bf00      	nop
 8004584:	e002      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004586:	bf00      	nop
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800458a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10a      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004592:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a0:	4936      	ldr	r1, [pc, #216]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	654b      	str	r3, [r1, #84]	; 0x54
 80045a6:	e001      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045b8:	4b30      	ldr	r3, [pc, #192]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c4:	492d      	ldr	r1, [pc, #180]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d008      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d6:	4b29      	ldr	r3, [pc, #164]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e2:	4926      	ldr	r1, [pc, #152]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	491e      	ldr	r1, [pc, #120]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004602:	4313      	orrs	r3, r2
 8004604:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00d      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004612:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4a19      	ldr	r2, [pc, #100]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004618:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800461c:	6113      	str	r3, [r2, #16]
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004620:	691a      	ldr	r2, [r3, #16]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004628:	4914      	ldr	r1, [pc, #80]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800462a:	4313      	orrs	r3, r2
 800462c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	da08      	bge.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004636:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800463a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	490e      	ldr	r1, [pc, #56]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004644:	4313      	orrs	r3, r2
 8004646:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	4906      	ldr	r1, [pc, #24]	; (800467c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004664:	4313      	orrs	r3, r2
 8004666:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004668:	7dbb      	ldrb	r3, [r7, #22]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	58024400 	.word	0x58024400

08004680 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b090      	sub	sp, #64	; 0x40
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800468e:	f040 8089 	bne.w	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004692:	4ba8      	ldr	r3, [pc, #672]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
 800469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d87d      	bhi.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046bd 	.word	0x080046bd
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	08004705 	.word	0x08004705
 80046b4:	08004799 	.word	0x08004799
 80046b8:	08004729 	.word	0x08004729

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046bc:	4b9d      	ldr	r3, [pc, #628]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c8:	d107      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 febe 	bl	8005450 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046d8:	e3f5      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046de:	e3f2      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046e0:	4b94      	ldr	r3, [pc, #592]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046ec:	d107      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046ee:	f107 0318 	add.w	r3, r7, #24
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fc04 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046fc:	e3e3      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004702:	e3e0      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004704:	4b8b      	ldr	r3, [pc, #556]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800470c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004710:	d107      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004712:	f107 030c 	add.w	r3, r7, #12
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fd46 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004720:	e3d1      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004726:	e3ce      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004728:	4b82      	ldr	r3, [pc, #520]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800472a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004730:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004732:	4b80      	ldr	r3, [pc, #512]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b04      	cmp	r3, #4
 800473c:	d10c      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800473e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	08db      	lsrs	r3, r3, #3
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	4a7a      	ldr	r2, [pc, #488]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004750:	fa22 f303 	lsr.w	r3, r2, r3
 8004754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004756:	e01e      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004764:	d106      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800476c:	d102      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800476e:	4b73      	ldr	r3, [pc, #460]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004772:	e010      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004774:	4b6f      	ldr	r3, [pc, #444]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004780:	d106      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004788:	d102      	bne.n	8004790 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800478a:	4b6d      	ldr	r3, [pc, #436]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478e:	e002      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004794:	e397      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004796:	e396      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004798:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800479c:	e393      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047a2:	e390      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047aa:	f040 8095 	bne.w	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d04d      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047c6:	f200 8084 	bhi.w	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2bc0      	cmp	r3, #192	; 0xc0
 80047ce:	d07d      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2bc0      	cmp	r3, #192	; 0xc0
 80047d4:	d87d      	bhi.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	2b80      	cmp	r3, #128	; 0x80
 80047da:	d02d      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d877      	bhi.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d012      	beq.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 80047ee:	e070      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047fc:	d107      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fe24 	bl	8005450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800480c:	e35b      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004812:	e358      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004814:	4b47      	ldr	r3, [pc, #284]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800481c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004820:	d107      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004822:	f107 0318 	add.w	r3, r7, #24
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fb6a 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004830:	e349      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004836:	e346      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004838:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004844:	d107      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fcac 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004854:	e337      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800485a:	e334      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004864:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004866:	4b33      	ldr	r3, [pc, #204]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d10c      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004878:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	4a2d      	ldr	r2, [pc, #180]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488a:	e01e      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800488c:	4b29      	ldr	r3, [pc, #164]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004898:	d106      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 800489a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048a0:	d102      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a6:	e010      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048a8:	4b22      	ldr	r3, [pc, #136]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048b4:	d106      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80048b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048bc:	d102      	bne.n	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048be:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c2:	e002      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048c4:	2300      	movs	r3, #0
 80048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048c8:	e2fd      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80048ca:	e2fc      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d0:	e2f9      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d6:	e2f6      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048de:	f040 80a7 	bne.w	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048f2:	d05f      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fa:	f200 8096 	bhi.w	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004904:	f000 808e 	beq.w	8004a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8004908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800490e:	f200 808c 	bhi.w	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004918:	d03a      	beq.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	f200 8083 	bhi.w	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00e      	beq.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d01c      	beq.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004932:	e07a      	b.n	8004a2a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004934:	58024400 	.word	0x58024400
 8004938:	03d09000 	.word	0x03d09000
 800493c:	003d0900 	.word	0x003d0900
 8004940:	016e3600 	.word	0x016e3600
 8004944:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004948:	4ba8      	ldr	r3, [pc, #672]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004954:	d107      	bne.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fd78 	bl	8005450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004964:	e2af      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800496a:	e2ac      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800496c:	4b9f      	ldr	r3, [pc, #636]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004978:	d107      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800497a:	f107 0318 	add.w	r3, r7, #24
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fabe 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004988:	e29d      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800498e:	e29a      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004990:	4b96      	ldr	r3, [pc, #600]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800499c:	d107      	bne.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fc00 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049ac:	e28b      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049b2:	e288      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049b4:	4b8d      	ldr	r3, [pc, #564]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049be:	4b8b      	ldr	r3, [pc, #556]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b04      	cmp	r3, #4
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80049ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049d0:	4b86      	ldr	r3, [pc, #536]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	08db      	lsrs	r3, r3, #3
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	4a85      	ldr	r2, [pc, #532]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e2:	e01e      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049e4:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d106      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 80049f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049f8:	d102      	bne.n	8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049fa:	4b7e      	ldr	r3, [pc, #504]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049fe:	e010      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a00:	4b7a      	ldr	r3, [pc, #488]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a0c:	d106      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a14:	d102      	bne.n	8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a16:	4b78      	ldr	r3, [pc, #480]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1a:	e002      	b.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004a20:	e251      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004a22:	e250      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a24:	4b75      	ldr	r3, [pc, #468]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a28:	e24d      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a2e:	e24a      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a36:	f040 809c 	bne.w	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004a3a:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004a42:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4a:	d054      	beq.n	8004af6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a52:	f200 808b 	bhi.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5c:	f000 8083 	beq.w	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a66:	f200 8081 	bhi.w	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d02f      	beq.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a78:	d878      	bhi.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d004      	beq.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a86:	d012      	beq.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004a88:	e070      	b.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a8a:	4b58      	ldr	r3, [pc, #352]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a96:	d107      	bne.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fcd7 	bl	8005450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aa6:	e20e      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004aac:	e20b      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004aae:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aba:	d107      	bne.n	8004acc <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004abc:	f107 0318 	add.w	r3, r7, #24
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fa1d 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aca:	e1fc      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad0:	e1f9      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ad2:	4b46      	ldr	r3, [pc, #280]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ade:	d107      	bne.n	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ae0:	f107 030c 	add.w	r3, r7, #12
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fb5f 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aee:	e1ea      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af4:	e1e7      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004af6:	4b3d      	ldr	r3, [pc, #244]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b00:	4b3a      	ldr	r3, [pc, #232]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d10c      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	08db      	lsrs	r3, r3, #3
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	4a34      	ldr	r2, [pc, #208]	; (8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b24:	e01e      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b26:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b32:	d106      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3a:	d102      	bne.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b3c:	4b2d      	ldr	r3, [pc, #180]	; (8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b40:	e010      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b56:	d102      	bne.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b62:	e1b0      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004b64:	e1af      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6a:	e1ac      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b70:	e1a9      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b78:	d17d      	bne.n	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004b7a:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8a:	d039      	beq.n	8004c00 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b92:	d86d      	bhi.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d004      	beq.n	8004ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	d012      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004ba2:	e065      	b.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ba4:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bb2:	f107 0318 	add.w	r3, r7, #24
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 f9a2 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bc0:	e181      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bc6:	e17e      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bc8:	4b08      	ldr	r3, [pc, #32]	; (8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bd6:	f107 030c 	add.w	r3, r7, #12
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fae4 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004be4:	e16f      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bea:	e16c      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004bec:	58024400 	.word	0x58024400
 8004bf0:	03d09000 	.word	0x03d09000
 8004bf4:	003d0900 	.word	0x003d0900
 8004bf8:	016e3600 	.word	0x016e3600
 8004bfc:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c00:	4ba0      	ldr	r3, [pc, #640]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c0a:	4b9e      	ldr	r3, [pc, #632]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c1c:	4b99      	ldr	r3, [pc, #612]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	08db      	lsrs	r3, r3, #3
 8004c22:	f003 0303 	and.w	r3, r3, #3
 8004c26:	4a98      	ldr	r2, [pc, #608]	; (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c2e:	e01e      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c30:	4b94      	ldr	r3, [pc, #592]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c44:	d102      	bne.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c46:	4b91      	ldr	r3, [pc, #580]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4a:	e010      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c4c:	4b8d      	ldr	r3, [pc, #564]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c58:	d106      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c60:	d102      	bne.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c62:	4b8b      	ldr	r3, [pc, #556]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	e002      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c6c:	e12b      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c6e:	e12a      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c74:	e127      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d133      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c86:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d004      	beq.n	8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d012      	beq.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004c96:	e023      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c98:	4b7a      	ldr	r3, [pc, #488]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fbd0 	bl	8005450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cb4:	e107      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cba:	e104      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cbc:	4b71      	ldr	r3, [pc, #452]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc8:	d107      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cca:	f107 0318 	add.w	r3, r7, #24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f916 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cd8:	e0f5      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cde:	e0f2      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce4:	e0ef      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cec:	f040 8091 	bne.w	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004cf0:	4b64      	ldr	r3, [pc, #400]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004cf8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d00:	f000 8081 	beq.w	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004d0a:	d87f      	bhi.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d12:	d06b      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d1a:	d877      	bhi.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d22:	d056      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d86f      	bhi.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d32:	d03b      	beq.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d3a:	d867      	bhi.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d42:	d021      	beq.n	8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4a:	d85f      	bhi.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d004      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d58:	d004      	beq.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004d5a:	e057      	b.n	8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004d5c:	f000 f8ba 	bl	8004ed4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d60:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004d62:	e0b0      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d64:	4b47      	ldr	r3, [pc, #284]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d70:	d107      	bne.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d72:	f107 0318 	add.w	r3, r7, #24
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f8c2 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d80:	e0a1      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d86:	e09e      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d88:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d94:	d107      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fa04 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004da4:	e08f      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004daa:	e08c      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dac:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d109      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004db8:	4b32      	ldr	r3, [pc, #200]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dca:	e07c      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dd0:	e079      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dde:	d102      	bne.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8004de0:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004de4:	e06f      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004de6:	2300      	movs	r3, #0
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dea:	e06c      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df8:	d102      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8004dfa:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dfe:	e062      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e04:	e05f      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e06:	4b23      	ldr	r3, [pc, #140]	; (8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e0a:	e05c      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e10:	e059      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	d153      	bne.n	8004ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e2a:	d035      	beq.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e32:	d843      	bhi.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d004      	beq.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e40:	d00d      	beq.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8004e42:	e03b      	b.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e44:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e50:	d102      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8004e52:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e56:	e036      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e5c:	e033      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e6a:	d107      	bne.n	8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 faed 	bl	8005450 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e7a:	e024      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e80:	e021      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004e82:	bf00      	nop
 8004e84:	58024400 	.word	0x58024400
 8004e88:	03d09000 	.word	0x03d09000
 8004e8c:	003d0900 	.word	0x003d0900
 8004e90:	016e3600 	.word	0x016e3600
 8004e94:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea4:	d107      	bne.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ea6:	f107 0318 	add.w	r3, r7, #24
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f828 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eb4:	e007      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eba:	e004      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ec0:	e001      	b.n	8004ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3740      	adds	r7, #64	; 0x40
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	58024400 	.word	0x58024400

08004ed4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004ed8:	f7fe fc6a 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 8004edc:	4602      	mov	r2, r0
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	091b      	lsrs	r3, r3, #4
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	4904      	ldr	r1, [pc, #16]	; (8004efc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004eea:	5ccb      	ldrb	r3, [r1, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	08007cf0 	.word	0x08007cf0

08004f00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f08:	4ba1      	ldr	r3, [pc, #644]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004f12:	4b9f      	ldr	r3, [pc, #636]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	0b1b      	lsrs	r3, r3, #12
 8004f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004f1e:	4b9c      	ldr	r3, [pc, #624]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004f2a:	4b99      	ldr	r3, [pc, #612]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8111 	beq.w	8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	f000 8083 	beq.w	800505c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f200 80a1 	bhi.w	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d056      	beq.n	8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f6a:	e099      	b.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f6c:	4b88      	ldr	r3, [pc, #544]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0320 	and.w	r3, r3, #32
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02d      	beq.n	8004fd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f78:	4b85      	ldr	r3, [pc, #532]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	08db      	lsrs	r3, r3, #3
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	4a84      	ldr	r2, [pc, #528]	; (8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	ee07 3a90 	vmov	s15, r3
 8004f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa2:	4b7b      	ldr	r3, [pc, #492]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004fd2:	e087      	b.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	ee07 3a90 	vmov	s15, r3
 8004fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800519c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe6:	4b6a      	ldr	r3, [pc, #424]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ffa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800500a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005016:	e065      	b.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005022:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800502a:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005032:	ee07 3a90 	vmov	s15, r3
 8005036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800503a:	ed97 6a03 	vldr	s12, [r7, #12]
 800503e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800504a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800504e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800505a:	e043      	b.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80051a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800506a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506e:	4b48      	ldr	r3, [pc, #288]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005082:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800508a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800509a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800509e:	e021      	b.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	ee07 3a90 	vmov	s15, r3
 80050a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80051a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b2:	4b37      	ldr	r3, [pc, #220]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	0a5b      	lsrs	r3, r3, #9
 80050ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800510a:	ee17 2a90 	vmov	r2, s15
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005112:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	0c1b      	lsrs	r3, r3, #16
 8005118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005128:	ee37 7a87 	vadd.f32	s14, s15, s14
 800512c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005138:	ee17 2a90 	vmov	r2, s15
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005140:	4b13      	ldr	r3, [pc, #76]	; (8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	0e1b      	lsrs	r3, r3, #24
 8005146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005156:	ee37 7a87 	vadd.f32	s14, s15, s14
 800515a:	edd7 6a07 	vldr	s13, [r7, #28]
 800515e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005162:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005166:	ee17 2a90 	vmov	r2, s15
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800516e:	e008      	b.n	8005182 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
}
 8005182:	bf00      	nop
 8005184:	3724      	adds	r7, #36	; 0x24
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	58024400 	.word	0x58024400
 8005194:	03d09000 	.word	0x03d09000
 8005198:	46000000 	.word	0x46000000
 800519c:	4c742400 	.word	0x4c742400
 80051a0:	4a742400 	.word	0x4a742400
 80051a4:	4bb71b00 	.word	0x4bb71b00

080051a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051b0:	4ba1      	ldr	r3, [pc, #644]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80051ba:	4b9f      	ldr	r3, [pc, #636]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	0d1b      	lsrs	r3, r3, #20
 80051c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80051c6:	4b9c      	ldr	r3, [pc, #624]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	0a1b      	lsrs	r3, r3, #8
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80051d2:	4b99      	ldr	r3, [pc, #612]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	08db      	lsrs	r3, r3, #3
 80051d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8111 	beq.w	8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	f000 8083 	beq.w	8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b02      	cmp	r3, #2
 8005202:	f200 80a1 	bhi.w	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d056      	beq.n	80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005212:	e099      	b.n	8005348 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005214:	4b88      	ldr	r3, [pc, #544]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02d      	beq.n	800527c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005220:	4b85      	ldr	r3, [pc, #532]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	08db      	lsrs	r3, r3, #3
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	4a84      	ldr	r2, [pc, #528]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
 8005230:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524a:	4b7b      	ldr	r3, [pc, #492]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a03 	vldr	s12, [r7, #12]
 800525e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800527a:	e087      	b.n	800538c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800528a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528e:	4b6a      	ldr	r3, [pc, #424]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529e:	ed97 6a03 	vldr	s12, [r7, #12]
 80052a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052be:	e065      	b.n	800538c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80052ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d2:	4b59      	ldr	r3, [pc, #356]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005302:	e043      	b.n	800538c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800544c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005316:	4b48      	ldr	r3, [pc, #288]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005326:	ed97 6a03 	vldr	s12, [r7, #12]
 800532a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800532e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800533a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005346:	e021      	b.n	800538c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005352:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800535a:	4b37      	ldr	r3, [pc, #220]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800536a:	ed97 6a03 	vldr	s12, [r7, #12]
 800536e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800537a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800538a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800538c:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	0a5b      	lsrs	r3, r3, #9
 8005392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80053aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b2:	ee17 2a90 	vmov	r2, s15
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	0c1b      	lsrs	r3, r3, #16
 80053c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053e0:	ee17 2a90 	vmov	r2, s15
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	0e1b      	lsrs	r3, r3, #24
 80053ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005402:	edd7 6a07 	vldr	s13, [r7, #28]
 8005406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800540a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540e:	ee17 2a90 	vmov	r2, s15
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005416:	e008      	b.n	800542a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	609a      	str	r2, [r3, #8]
}
 800542a:	bf00      	nop
 800542c:	3724      	adds	r7, #36	; 0x24
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	58024400 	.word	0x58024400
 800543c:	03d09000 	.word	0x03d09000
 8005440:	46000000 	.word	0x46000000
 8005444:	4c742400 	.word	0x4c742400
 8005448:	4a742400 	.word	0x4a742400
 800544c:	4bb71b00 	.word	0x4bb71b00

08005450 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	; 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005458:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005462:	4b9e      	ldr	r3, [pc, #632]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800546c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800546e:	4b9b      	ldr	r3, [pc, #620]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005478:	4b98      	ldr	r3, [pc, #608]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	fb02 f303 	mul.w	r3, r2, r3
 8005488:	ee07 3a90 	vmov	s15, r3
 800548c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005490:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8111 	beq.w	80056be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	f000 8083 	beq.w	80055aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	f200 80a1 	bhi.w	80055ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d056      	beq.n	8005566 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80054b8:	e099      	b.n	80055ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02d      	beq.n	8005522 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054c6:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	08db      	lsrs	r3, r3, #3
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	4a83      	ldr	r2, [pc, #524]	; (80056e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f0:	4b7a      	ldr	r3, [pc, #488]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005500:	ed97 6a03 	vldr	s12, [r7, #12]
 8005504:	eddf 5a77 	vldr	s11, [pc, #476]	; 80056e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005510:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005520:	e087      	b.n	8005632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80056e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005534:	4b69      	ldr	r3, [pc, #420]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005544:	ed97 6a03 	vldr	s12, [r7, #12]
 8005548:	eddf 5a66 	vldr	s11, [pc, #408]	; 80056e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800554c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005560:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005564:	e065      	b.n	8005632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005570:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80056ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005578:	4b58      	ldr	r3, [pc, #352]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005588:	ed97 6a03 	vldr	s12, [r7, #12]
 800558c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80056e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005598:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055a8:	e043      	b.n	8005632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80056f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80055b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055bc:	4b47      	ldr	r3, [pc, #284]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80055d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80056e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ec:	e021      	b.n	8005632 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	ee07 3a90 	vmov	s15, r3
 80055f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80056e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80055fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005600:	4b36      	ldr	r3, [pc, #216]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005610:	ed97 6a03 	vldr	s12, [r7, #12]
 8005614:	eddf 5a33 	vldr	s11, [pc, #204]	; 80056e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005630:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005632:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	0a5b      	lsrs	r3, r3, #9
 8005638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800564c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005658:	ee17 2a90 	vmov	r2, s15
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005660:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	0c1b      	lsrs	r3, r3, #16
 8005666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800567a:	edd7 6a07 	vldr	s13, [r7, #28]
 800567e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005686:	ee17 2a90 	vmov	r2, s15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	0e1b      	lsrs	r3, r3, #24
 8005694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80056ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b4:	ee17 2a90 	vmov	r2, s15
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80056bc:	e008      	b.n	80056d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	3724      	adds	r7, #36	; 0x24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	58024400 	.word	0x58024400
 80056e0:	03d09000 	.word	0x03d09000
 80056e4:	46000000 	.word	0x46000000
 80056e8:	4c742400 	.word	0x4c742400
 80056ec:	4a742400 	.word	0x4a742400
 80056f0:	4bb71b00 	.word	0x4bb71b00

080056f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005702:	4b53      	ldr	r3, [pc, #332]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d101      	bne.n	8005712 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e099      	b.n	8005846 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005712:	4b4f      	ldr	r3, [pc, #316]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a4e      	ldr	r2, [pc, #312]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005718:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800571c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571e:	f7fb fc29 	bl	8000f74 <HAL_GetTick>
 8005722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005724:	e008      	b.n	8005738 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005726:	f7fb fc25 	bl	8000f74 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e086      	b.n	8005846 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005738:	4b45      	ldr	r3, [pc, #276]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005744:	4b42      	ldr	r3, [pc, #264]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	493f      	ldr	r1, [pc, #252]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	628b      	str	r3, [r1, #40]	; 0x28
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	3b01      	subs	r3, #1
 800575e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	3b01      	subs	r3, #1
 8005768:	025b      	lsls	r3, r3, #9
 800576a:	b29b      	uxth	r3, r3
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	3b01      	subs	r3, #1
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005788:	4931      	ldr	r1, [pc, #196]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800578a:	4313      	orrs	r3, r2
 800578c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800578e:	4b30      	ldr	r3, [pc, #192]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	492d      	ldr	r1, [pc, #180]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	f023 0220 	bic.w	r2, r3, #32
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	4928      	ldr	r1, [pc, #160]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057b2:	4b27      	ldr	r3, [pc, #156]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a26      	ldr	r2, [pc, #152]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	f023 0310 	bic.w	r3, r3, #16
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c2:	4b24      	ldr	r3, [pc, #144]	; (8005854 <RCCEx_PLL2_Config+0x160>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	69d2      	ldr	r2, [r2, #28]
 80057ca:	00d2      	lsls	r2, r2, #3
 80057cc:	4920      	ldr	r1, [pc, #128]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057d2:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057d8:	f043 0310 	orr.w	r3, r3, #16
 80057dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057e4:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a19      	ldr	r2, [pc, #100]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057f0:	e00f      	b.n	8005812 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d106      	bne.n	8005806 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a14      	ldr	r2, [pc, #80]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005804:	e005      	b.n	8005812 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005806:	4b12      	ldr	r3, [pc, #72]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4a11      	ldr	r2, [pc, #68]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800580c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a0e      	ldr	r2, [pc, #56]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800581c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581e:	f7fb fba9 	bl	8000f74 <HAL_GetTick>
 8005822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005824:	e008      	b.n	8005838 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005826:	f7fb fba5 	bl	8000f74 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e006      	b.n	8005846 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	58024400 	.word	0x58024400
 8005854:	ffff0007 	.word	0xffff0007

08005858 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005866:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d101      	bne.n	8005876 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e099      	b.n	80059aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005876:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a4e      	ldr	r2, [pc, #312]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800587c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005882:	f7fb fb77 	bl	8000f74 <HAL_GetTick>
 8005886:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005888:	e008      	b.n	800589c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800588a:	f7fb fb73 	bl	8000f74 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e086      	b.n	80059aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800589c:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058a8:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	493f      	ldr	r1, [pc, #252]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	628b      	str	r3, [r1, #40]	; 0x28
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058ec:	4931      	ldr	r1, [pc, #196]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058f2:	4b30      	ldr	r3, [pc, #192]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	492d      	ldr	r1, [pc, #180]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005904:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	4928      	ldr	r1, [pc, #160]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <RCCEx_PLL3_Config+0x160>)
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	69d2      	ldr	r2, [r2, #28]
 800592e:	00d2      	lsls	r2, r2, #3
 8005930:	4920      	ldr	r1, [pc, #128]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005936:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800593c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005948:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800594e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005954:	e00f      	b.n	8005976 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800595c:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005962:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005968:	e005      	b.n	8005976 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005974:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0e      	ldr	r2, [pc, #56]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800597c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005982:	f7fb faf7 	bl	8000f74 <HAL_GetTick>
 8005986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005988:	e008      	b.n	800599c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800598a:	f7fb faf3 	bl	8000f74 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e006      	b.n	80059aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	58024400 	.word	0x58024400
 80059b8:	ffff0007 	.word	0xffff0007

080059bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e042      	b.n	8005a54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fb f9b1 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2224      	movs	r2, #36	; 0x24
 80059ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8c2 	bl	8005b88 <UART_SetConfig>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e022      	b.n	8005a54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 ff14 	bl	8006844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 ff9b 	bl	8006988 <UART_CheckIdleState>
 8005a52:	4603      	mov	r3, r0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	f040 8083 	bne.w	8005b7e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_UART_Transmit+0x28>
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e07b      	b.n	8005b80 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Transmit+0x3a>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e074      	b.n	8005b80 <HAL_UART_Transmit+0x124>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2221      	movs	r2, #33	; 0x21
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aae:	f7fb fa61 	bl	8000f74 <HAL_GetTick>
 8005ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005acc:	d108      	bne.n	8005ae0 <HAL_UART_Transmit+0x84>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d104      	bne.n	8005ae0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61bb      	str	r3, [r7, #24]
 8005ade:	e003      	b.n	8005ae8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005af0:	e02c      	b.n	8005b4c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 ff8e 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e039      	b.n	8005b80 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10b      	bne.n	8005b2a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	3302      	adds	r3, #2
 8005b26:	61bb      	str	r3, [r7, #24]
 8005b28:	e007      	b.n	8005b3a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1cc      	bne.n	8005af2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2140      	movs	r1, #64	; 0x40
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 ff5b 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e006      	b.n	8005b80 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b88:	b5b0      	push	{r4, r5, r7, lr}
 8005b8a:	b08e      	sub	sp, #56	; 0x38
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4bbf      	ldr	r3, [pc, #764]	; (8005eb4 <UART_SetConfig+0x32c>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4ab5      	ldr	r2, [pc, #724]	; (8005eb8 <UART_SetConfig+0x330>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d004      	beq.n	8005bf2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	4bb0      	ldr	r3, [pc, #704]	; (8005ebc <UART_SetConfig+0x334>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c02:	430b      	orrs	r3, r1
 8005c04:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	f023 010f 	bic.w	r1, r3, #15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4aa7      	ldr	r2, [pc, #668]	; (8005ec0 <UART_SetConfig+0x338>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d176      	bne.n	8005d14 <UART_SetConfig+0x18c>
 8005c26:	4ba7      	ldr	r3, [pc, #668]	; (8005ec4 <UART_SetConfig+0x33c>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c2e:	2b28      	cmp	r3, #40	; 0x28
 8005c30:	d86c      	bhi.n	8005d0c <UART_SetConfig+0x184>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0xb0>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005cdd 	.word	0x08005cdd
 8005c3c:	08005d0d 	.word	0x08005d0d
 8005c40:	08005d0d 	.word	0x08005d0d
 8005c44:	08005d0d 	.word	0x08005d0d
 8005c48:	08005d0d 	.word	0x08005d0d
 8005c4c:	08005d0d 	.word	0x08005d0d
 8005c50:	08005d0d 	.word	0x08005d0d
 8005c54:	08005d0d 	.word	0x08005d0d
 8005c58:	08005ce5 	.word	0x08005ce5
 8005c5c:	08005d0d 	.word	0x08005d0d
 8005c60:	08005d0d 	.word	0x08005d0d
 8005c64:	08005d0d 	.word	0x08005d0d
 8005c68:	08005d0d 	.word	0x08005d0d
 8005c6c:	08005d0d 	.word	0x08005d0d
 8005c70:	08005d0d 	.word	0x08005d0d
 8005c74:	08005d0d 	.word	0x08005d0d
 8005c78:	08005ced 	.word	0x08005ced
 8005c7c:	08005d0d 	.word	0x08005d0d
 8005c80:	08005d0d 	.word	0x08005d0d
 8005c84:	08005d0d 	.word	0x08005d0d
 8005c88:	08005d0d 	.word	0x08005d0d
 8005c8c:	08005d0d 	.word	0x08005d0d
 8005c90:	08005d0d 	.word	0x08005d0d
 8005c94:	08005d0d 	.word	0x08005d0d
 8005c98:	08005cf5 	.word	0x08005cf5
 8005c9c:	08005d0d 	.word	0x08005d0d
 8005ca0:	08005d0d 	.word	0x08005d0d
 8005ca4:	08005d0d 	.word	0x08005d0d
 8005ca8:	08005d0d 	.word	0x08005d0d
 8005cac:	08005d0d 	.word	0x08005d0d
 8005cb0:	08005d0d 	.word	0x08005d0d
 8005cb4:	08005d0d 	.word	0x08005d0d
 8005cb8:	08005cfd 	.word	0x08005cfd
 8005cbc:	08005d0d 	.word	0x08005d0d
 8005cc0:	08005d0d 	.word	0x08005d0d
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005d0d 	.word	0x08005d0d
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005d0d 	.word	0x08005d0d
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e326      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e322      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e31e      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e31a      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	e316      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d04:	2340      	movs	r3, #64	; 0x40
 8005d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0a:	e312      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d0c:	2380      	movs	r3, #128	; 0x80
 8005d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d12:	e30e      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a6b      	ldr	r2, [pc, #428]	; (8005ec8 <UART_SetConfig+0x340>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d130      	bne.n	8005d80 <UART_SetConfig+0x1f8>
 8005d1e:	4b69      	ldr	r3, [pc, #420]	; (8005ec4 <UART_SetConfig+0x33c>)
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d826      	bhi.n	8005d78 <UART_SetConfig+0x1f0>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x1a8>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d49 	.word	0x08005d49
 8005d34:	08005d51 	.word	0x08005d51
 8005d38:	08005d59 	.word	0x08005d59
 8005d3c:	08005d61 	.word	0x08005d61
 8005d40:	08005d69 	.word	0x08005d69
 8005d44:	08005d71 	.word	0x08005d71
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e2f0      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d50:	2304      	movs	r3, #4
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d56:	e2ec      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d58:	2308      	movs	r3, #8
 8005d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5e:	e2e8      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d60:	2310      	movs	r3, #16
 8005d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d66:	e2e4      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d68:	2320      	movs	r3, #32
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e2e0      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d70:	2340      	movs	r3, #64	; 0x40
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e2dc      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d78:	2380      	movs	r3, #128	; 0x80
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e2d8      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a51      	ldr	r2, [pc, #324]	; (8005ecc <UART_SetConfig+0x344>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d130      	bne.n	8005dec <UART_SetConfig+0x264>
 8005d8a:	4b4e      	ldr	r3, [pc, #312]	; (8005ec4 <UART_SetConfig+0x33c>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d826      	bhi.n	8005de4 <UART_SetConfig+0x25c>
 8005d96:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <UART_SetConfig+0x214>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005db5 	.word	0x08005db5
 8005da0:	08005dbd 	.word	0x08005dbd
 8005da4:	08005dc5 	.word	0x08005dc5
 8005da8:	08005dcd 	.word	0x08005dcd
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005ddd 	.word	0x08005ddd
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dba:	e2ba      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc2:	e2b6      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dca:	e2b2      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005dcc:	2310      	movs	r3, #16
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd2:	e2ae      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005dd4:	2320      	movs	r3, #32
 8005dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dda:	e2aa      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005ddc:	2340      	movs	r3, #64	; 0x40
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de2:	e2a6      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dea:	e2a2      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a37      	ldr	r2, [pc, #220]	; (8005ed0 <UART_SetConfig+0x348>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d130      	bne.n	8005e58 <UART_SetConfig+0x2d0>
 8005df6:	4b33      	ldr	r3, [pc, #204]	; (8005ec4 <UART_SetConfig+0x33c>)
 8005df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	d826      	bhi.n	8005e50 <UART_SetConfig+0x2c8>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x280>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e21 	.word	0x08005e21
 8005e0c:	08005e29 	.word	0x08005e29
 8005e10:	08005e31 	.word	0x08005e31
 8005e14:	08005e39 	.word	0x08005e39
 8005e18:	08005e41 	.word	0x08005e41
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e284      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e280      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e27c      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e278      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e274      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e270      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e56:	e26c      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <UART_SetConfig+0x34c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d142      	bne.n	8005ee8 <UART_SetConfig+0x360>
 8005e62:	4b18      	ldr	r3, [pc, #96]	; (8005ec4 <UART_SetConfig+0x33c>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d838      	bhi.n	8005ee0 <UART_SetConfig+0x358>
 8005e6e:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <UART_SetConfig+0x2ec>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005ed9 	.word	0x08005ed9
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e24e      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e24a      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e246      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e242      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e23e      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005eb4:	cfff69f3 	.word	0xcfff69f3
 8005eb8:	58000c00 	.word	0x58000c00
 8005ebc:	11fff4ff 	.word	0x11fff4ff
 8005ec0:	40011000 	.word	0x40011000
 8005ec4:	58024400 	.word	0x58024400
 8005ec8:	40004400 	.word	0x40004400
 8005ecc:	40004800 	.word	0x40004800
 8005ed0:	40004c00 	.word	0x40004c00
 8005ed4:	40005000 	.word	0x40005000
 8005ed8:	2340      	movs	r3, #64	; 0x40
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ede:	e228      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005ee0:	2380      	movs	r3, #128	; 0x80
 8005ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee6:	e224      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4ab1      	ldr	r2, [pc, #708]	; (80061b4 <UART_SetConfig+0x62c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d176      	bne.n	8005fe0 <UART_SetConfig+0x458>
 8005ef2:	4bb1      	ldr	r3, [pc, #708]	; (80061b8 <UART_SetConfig+0x630>)
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005efa:	2b28      	cmp	r3, #40	; 0x28
 8005efc:	d86c      	bhi.n	8005fd8 <UART_SetConfig+0x450>
 8005efe:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <UART_SetConfig+0x37c>)
 8005f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f04:	08005fa9 	.word	0x08005fa9
 8005f08:	08005fd9 	.word	0x08005fd9
 8005f0c:	08005fd9 	.word	0x08005fd9
 8005f10:	08005fd9 	.word	0x08005fd9
 8005f14:	08005fd9 	.word	0x08005fd9
 8005f18:	08005fd9 	.word	0x08005fd9
 8005f1c:	08005fd9 	.word	0x08005fd9
 8005f20:	08005fd9 	.word	0x08005fd9
 8005f24:	08005fb1 	.word	0x08005fb1
 8005f28:	08005fd9 	.word	0x08005fd9
 8005f2c:	08005fd9 	.word	0x08005fd9
 8005f30:	08005fd9 	.word	0x08005fd9
 8005f34:	08005fd9 	.word	0x08005fd9
 8005f38:	08005fd9 	.word	0x08005fd9
 8005f3c:	08005fd9 	.word	0x08005fd9
 8005f40:	08005fd9 	.word	0x08005fd9
 8005f44:	08005fb9 	.word	0x08005fb9
 8005f48:	08005fd9 	.word	0x08005fd9
 8005f4c:	08005fd9 	.word	0x08005fd9
 8005f50:	08005fd9 	.word	0x08005fd9
 8005f54:	08005fd9 	.word	0x08005fd9
 8005f58:	08005fd9 	.word	0x08005fd9
 8005f5c:	08005fd9 	.word	0x08005fd9
 8005f60:	08005fd9 	.word	0x08005fd9
 8005f64:	08005fc1 	.word	0x08005fc1
 8005f68:	08005fd9 	.word	0x08005fd9
 8005f6c:	08005fd9 	.word	0x08005fd9
 8005f70:	08005fd9 	.word	0x08005fd9
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	08005fd9 	.word	0x08005fd9
 8005f7c:	08005fd9 	.word	0x08005fd9
 8005f80:	08005fd9 	.word	0x08005fd9
 8005f84:	08005fc9 	.word	0x08005fc9
 8005f88:	08005fd9 	.word	0x08005fd9
 8005f8c:	08005fd9 	.word	0x08005fd9
 8005f90:	08005fd9 	.word	0x08005fd9
 8005f94:	08005fd9 	.word	0x08005fd9
 8005f98:	08005fd9 	.word	0x08005fd9
 8005f9c:	08005fd9 	.word	0x08005fd9
 8005fa0:	08005fd9 	.word	0x08005fd9
 8005fa4:	08005fd1 	.word	0x08005fd1
 8005fa8:	2301      	movs	r3, #1
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	e1c0      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb6:	e1bc      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fbe:	e1b8      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc6:	e1b4      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fc8:	2320      	movs	r3, #32
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e1b0      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e1ac      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fd8:	2380      	movs	r3, #128	; 0x80
 8005fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fde:	e1a8      	b.n	8006332 <UART_SetConfig+0x7aa>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a75      	ldr	r2, [pc, #468]	; (80061bc <UART_SetConfig+0x634>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d130      	bne.n	800604c <UART_SetConfig+0x4c4>
 8005fea:	4b73      	ldr	r3, [pc, #460]	; (80061b8 <UART_SetConfig+0x630>)
 8005fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d826      	bhi.n	8006044 <UART_SetConfig+0x4bc>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <UART_SetConfig+0x474>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006015 	.word	0x08006015
 8006000:	0800601d 	.word	0x0800601d
 8006004:	08006025 	.word	0x08006025
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	2300      	movs	r3, #0
 8006016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601a:	e18a      	b.n	8006332 <UART_SetConfig+0x7aa>
 800601c:	2304      	movs	r3, #4
 800601e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006022:	e186      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006024:	2308      	movs	r3, #8
 8006026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602a:	e182      	b.n	8006332 <UART_SetConfig+0x7aa>
 800602c:	2310      	movs	r3, #16
 800602e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006032:	e17e      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006034:	2320      	movs	r3, #32
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e17a      	b.n	8006332 <UART_SetConfig+0x7aa>
 800603c:	2340      	movs	r3, #64	; 0x40
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e176      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604a:	e172      	b.n	8006332 <UART_SetConfig+0x7aa>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5b      	ldr	r2, [pc, #364]	; (80061c0 <UART_SetConfig+0x638>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d130      	bne.n	80060b8 <UART_SetConfig+0x530>
 8006056:	4b58      	ldr	r3, [pc, #352]	; (80061b8 <UART_SetConfig+0x630>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	f003 0307 	and.w	r3, r3, #7
 800605e:	2b05      	cmp	r3, #5
 8006060:	d826      	bhi.n	80060b0 <UART_SetConfig+0x528>
 8006062:	a201      	add	r2, pc, #4	; (adr r2, 8006068 <UART_SetConfig+0x4e0>)
 8006064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006068:	08006081 	.word	0x08006081
 800606c:	08006089 	.word	0x08006089
 8006070:	08006091 	.word	0x08006091
 8006074:	08006099 	.word	0x08006099
 8006078:	080060a1 	.word	0x080060a1
 800607c:	080060a9 	.word	0x080060a9
 8006080:	2300      	movs	r3, #0
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e154      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006088:	2304      	movs	r3, #4
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e150      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006090:	2308      	movs	r3, #8
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	e14c      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006098:	2310      	movs	r3, #16
 800609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609e:	e148      	b.n	8006332 <UART_SetConfig+0x7aa>
 80060a0:	2320      	movs	r3, #32
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e144      	b.n	8006332 <UART_SetConfig+0x7aa>
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e140      	b.n	8006332 <UART_SetConfig+0x7aa>
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b6:	e13c      	b.n	8006332 <UART_SetConfig+0x7aa>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a41      	ldr	r2, [pc, #260]	; (80061c4 <UART_SetConfig+0x63c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	f040 8082 	bne.w	80061c8 <UART_SetConfig+0x640>
 80060c4:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <UART_SetConfig+0x630>)
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060cc:	2b28      	cmp	r3, #40	; 0x28
 80060ce:	d86d      	bhi.n	80061ac <UART_SetConfig+0x624>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x550>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	0800617d 	.word	0x0800617d
 80060dc:	080061ad 	.word	0x080061ad
 80060e0:	080061ad 	.word	0x080061ad
 80060e4:	080061ad 	.word	0x080061ad
 80060e8:	080061ad 	.word	0x080061ad
 80060ec:	080061ad 	.word	0x080061ad
 80060f0:	080061ad 	.word	0x080061ad
 80060f4:	080061ad 	.word	0x080061ad
 80060f8:	08006185 	.word	0x08006185
 80060fc:	080061ad 	.word	0x080061ad
 8006100:	080061ad 	.word	0x080061ad
 8006104:	080061ad 	.word	0x080061ad
 8006108:	080061ad 	.word	0x080061ad
 800610c:	080061ad 	.word	0x080061ad
 8006110:	080061ad 	.word	0x080061ad
 8006114:	080061ad 	.word	0x080061ad
 8006118:	0800618d 	.word	0x0800618d
 800611c:	080061ad 	.word	0x080061ad
 8006120:	080061ad 	.word	0x080061ad
 8006124:	080061ad 	.word	0x080061ad
 8006128:	080061ad 	.word	0x080061ad
 800612c:	080061ad 	.word	0x080061ad
 8006130:	080061ad 	.word	0x080061ad
 8006134:	080061ad 	.word	0x080061ad
 8006138:	08006195 	.word	0x08006195
 800613c:	080061ad 	.word	0x080061ad
 8006140:	080061ad 	.word	0x080061ad
 8006144:	080061ad 	.word	0x080061ad
 8006148:	080061ad 	.word	0x080061ad
 800614c:	080061ad 	.word	0x080061ad
 8006150:	080061ad 	.word	0x080061ad
 8006154:	080061ad 	.word	0x080061ad
 8006158:	0800619d 	.word	0x0800619d
 800615c:	080061ad 	.word	0x080061ad
 8006160:	080061ad 	.word	0x080061ad
 8006164:	080061ad 	.word	0x080061ad
 8006168:	080061ad 	.word	0x080061ad
 800616c:	080061ad 	.word	0x080061ad
 8006170:	080061ad 	.word	0x080061ad
 8006174:	080061ad 	.word	0x080061ad
 8006178:	080061a5 	.word	0x080061a5
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e0d6      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006184:	2304      	movs	r3, #4
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e0d2      	b.n	8006332 <UART_SetConfig+0x7aa>
 800618c:	2308      	movs	r3, #8
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	e0ce      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006194:	2310      	movs	r3, #16
 8006196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619a:	e0ca      	b.n	8006332 <UART_SetConfig+0x7aa>
 800619c:	2320      	movs	r3, #32
 800619e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a2:	e0c6      	b.n	8006332 <UART_SetConfig+0x7aa>
 80061a4:	2340      	movs	r3, #64	; 0x40
 80061a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061aa:	e0c2      	b.n	8006332 <UART_SetConfig+0x7aa>
 80061ac:	2380      	movs	r3, #128	; 0x80
 80061ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b2:	e0be      	b.n	8006332 <UART_SetConfig+0x7aa>
 80061b4:	40011400 	.word	0x40011400
 80061b8:	58024400 	.word	0x58024400
 80061bc:	40007800 	.word	0x40007800
 80061c0:	40007c00 	.word	0x40007c00
 80061c4:	40011800 	.word	0x40011800
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4aad      	ldr	r2, [pc, #692]	; (8006484 <UART_SetConfig+0x8fc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d176      	bne.n	80062c0 <UART_SetConfig+0x738>
 80061d2:	4bad      	ldr	r3, [pc, #692]	; (8006488 <UART_SetConfig+0x900>)
 80061d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061da:	2b28      	cmp	r3, #40	; 0x28
 80061dc:	d86c      	bhi.n	80062b8 <UART_SetConfig+0x730>
 80061de:	a201      	add	r2, pc, #4	; (adr r2, 80061e4 <UART_SetConfig+0x65c>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006289 	.word	0x08006289
 80061e8:	080062b9 	.word	0x080062b9
 80061ec:	080062b9 	.word	0x080062b9
 80061f0:	080062b9 	.word	0x080062b9
 80061f4:	080062b9 	.word	0x080062b9
 80061f8:	080062b9 	.word	0x080062b9
 80061fc:	080062b9 	.word	0x080062b9
 8006200:	080062b9 	.word	0x080062b9
 8006204:	08006291 	.word	0x08006291
 8006208:	080062b9 	.word	0x080062b9
 800620c:	080062b9 	.word	0x080062b9
 8006210:	080062b9 	.word	0x080062b9
 8006214:	080062b9 	.word	0x080062b9
 8006218:	080062b9 	.word	0x080062b9
 800621c:	080062b9 	.word	0x080062b9
 8006220:	080062b9 	.word	0x080062b9
 8006224:	08006299 	.word	0x08006299
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062b9 	.word	0x080062b9
 8006230:	080062b9 	.word	0x080062b9
 8006234:	080062b9 	.word	0x080062b9
 8006238:	080062b9 	.word	0x080062b9
 800623c:	080062b9 	.word	0x080062b9
 8006240:	080062b9 	.word	0x080062b9
 8006244:	080062a1 	.word	0x080062a1
 8006248:	080062b9 	.word	0x080062b9
 800624c:	080062b9 	.word	0x080062b9
 8006250:	080062b9 	.word	0x080062b9
 8006254:	080062b9 	.word	0x080062b9
 8006258:	080062b9 	.word	0x080062b9
 800625c:	080062b9 	.word	0x080062b9
 8006260:	080062b9 	.word	0x080062b9
 8006264:	080062a9 	.word	0x080062a9
 8006268:	080062b9 	.word	0x080062b9
 800626c:	080062b9 	.word	0x080062b9
 8006270:	080062b9 	.word	0x080062b9
 8006274:	080062b9 	.word	0x080062b9
 8006278:	080062b9 	.word	0x080062b9
 800627c:	080062b9 	.word	0x080062b9
 8006280:	080062b9 	.word	0x080062b9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	2301      	movs	r3, #1
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e050      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006290:	2304      	movs	r3, #4
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e04c      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006298:	2308      	movs	r3, #8
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e048      	b.n	8006332 <UART_SetConfig+0x7aa>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e044      	b.n	8006332 <UART_SetConfig+0x7aa>
 80062a8:	2320      	movs	r3, #32
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e040      	b.n	8006332 <UART_SetConfig+0x7aa>
 80062b0:	2340      	movs	r3, #64	; 0x40
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e03c      	b.n	8006332 <UART_SetConfig+0x7aa>
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062be:	e038      	b.n	8006332 <UART_SetConfig+0x7aa>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a71      	ldr	r2, [pc, #452]	; (800648c <UART_SetConfig+0x904>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d130      	bne.n	800632c <UART_SetConfig+0x7a4>
 80062ca:	4b6f      	ldr	r3, [pc, #444]	; (8006488 <UART_SetConfig+0x900>)
 80062cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	2b05      	cmp	r3, #5
 80062d4:	d826      	bhi.n	8006324 <UART_SetConfig+0x79c>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0x754>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	080062f5 	.word	0x080062f5
 80062e0:	080062fd 	.word	0x080062fd
 80062e4:	08006305 	.word	0x08006305
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006315 	.word	0x08006315
 80062f0:	0800631d 	.word	0x0800631d
 80062f4:	2302      	movs	r3, #2
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e01a      	b.n	8006332 <UART_SetConfig+0x7aa>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	e016      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630a:	e012      	b.n	8006332 <UART_SetConfig+0x7aa>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e00e      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006314:	2320      	movs	r3, #32
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e00a      	b.n	8006332 <UART_SetConfig+0x7aa>
 800631c:	2340      	movs	r3, #64	; 0x40
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e006      	b.n	8006332 <UART_SetConfig+0x7aa>
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632a:	e002      	b.n	8006332 <UART_SetConfig+0x7aa>
 800632c:	2380      	movs	r3, #128	; 0x80
 800632e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a55      	ldr	r2, [pc, #340]	; (800648c <UART_SetConfig+0x904>)
 8006338:	4293      	cmp	r3, r2
 800633a:	f040 80f0 	bne.w	800651e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800633e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006342:	2b20      	cmp	r3, #32
 8006344:	dc46      	bgt.n	80063d4 <UART_SetConfig+0x84c>
 8006346:	2b02      	cmp	r3, #2
 8006348:	db75      	blt.n	8006436 <UART_SetConfig+0x8ae>
 800634a:	3b02      	subs	r3, #2
 800634c:	2b1e      	cmp	r3, #30
 800634e:	d872      	bhi.n	8006436 <UART_SetConfig+0x8ae>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <UART_SetConfig+0x7d0>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	080063db 	.word	0x080063db
 800635c:	08006437 	.word	0x08006437
 8006360:	080063e3 	.word	0x080063e3
 8006364:	08006437 	.word	0x08006437
 8006368:	08006437 	.word	0x08006437
 800636c:	08006437 	.word	0x08006437
 8006370:	080063f3 	.word	0x080063f3
 8006374:	08006437 	.word	0x08006437
 8006378:	08006437 	.word	0x08006437
 800637c:	08006437 	.word	0x08006437
 8006380:	08006437 	.word	0x08006437
 8006384:	08006437 	.word	0x08006437
 8006388:	08006437 	.word	0x08006437
 800638c:	08006437 	.word	0x08006437
 8006390:	08006403 	.word	0x08006403
 8006394:	08006437 	.word	0x08006437
 8006398:	08006437 	.word	0x08006437
 800639c:	08006437 	.word	0x08006437
 80063a0:	08006437 	.word	0x08006437
 80063a4:	08006437 	.word	0x08006437
 80063a8:	08006437 	.word	0x08006437
 80063ac:	08006437 	.word	0x08006437
 80063b0:	08006437 	.word	0x08006437
 80063b4:	08006437 	.word	0x08006437
 80063b8:	08006437 	.word	0x08006437
 80063bc:	08006437 	.word	0x08006437
 80063c0:	08006437 	.word	0x08006437
 80063c4:	08006437 	.word	0x08006437
 80063c8:	08006437 	.word	0x08006437
 80063cc:	08006437 	.word	0x08006437
 80063d0:	08006429 	.word	0x08006429
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d02a      	beq.n	800642e <UART_SetConfig+0x8a6>
 80063d8:	e02d      	b.n	8006436 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063da:	f7fe fd7b 	bl	8004ed4 <HAL_RCCEx_GetD3PCLK1Freq>
 80063de:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063e0:	e02f      	b.n	8006442 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063e2:	f107 0314 	add.w	r3, r7, #20
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe fd8a 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063f0:	e027      	b.n	8006442 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f2:	f107 0308 	add.w	r3, r7, #8
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fed6 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006400:	e01f      	b.n	8006442 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006402:	4b21      	ldr	r3, [pc, #132]	; (8006488 <UART_SetConfig+0x900>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800640e:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <UART_SetConfig+0x900>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	08db      	lsrs	r3, r3, #3
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <UART_SetConfig+0x908>)
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006420:	e00f      	b.n	8006442 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8006422:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <UART_SetConfig+0x908>)
 8006424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006426:	e00c      	b.n	8006442 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006428:	4b1a      	ldr	r3, [pc, #104]	; (8006494 <UART_SetConfig+0x90c>)
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800642c:	e009      	b.n	8006442 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006434:	e005      	b.n	8006442 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 81e6 	beq.w	8006816 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	4a12      	ldr	r2, [pc, #72]	; (8006498 <UART_SetConfig+0x910>)
 8006450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006454:	461a      	mov	r2, r3
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	fbb3 f3f2 	udiv	r3, r3, r2
 800645c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	6a3a      	ldr	r2, [r7, #32]
 800646a:	429a      	cmp	r2, r3
 800646c:	d305      	bcc.n	800647a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006474:	6a3a      	ldr	r2, [r7, #32]
 8006476:	429a      	cmp	r2, r3
 8006478:	d910      	bls.n	800649c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006480:	e1c9      	b.n	8006816 <UART_SetConfig+0xc8e>
 8006482:	bf00      	nop
 8006484:	40011c00 	.word	0x40011c00
 8006488:	58024400 	.word	0x58024400
 800648c:	58000c00 	.word	0x58000c00
 8006490:	03d09000 	.word	0x03d09000
 8006494:	003d0900 	.word	0x003d0900
 8006498:	08007d00 	.word	0x08007d00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	4618      	mov	r0, r3
 80064a0:	f04f 0100 	mov.w	r1, #0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	4ac1      	ldr	r2, [pc, #772]	; (80067b0 <UART_SetConfig+0xc28>)
 80064aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	f7f9 ff6c 	bl	8000390 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4610      	mov	r0, r2
 80064be:	4619      	mov	r1, r3
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	020b      	lsls	r3, r1, #8
 80064ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ce:	0202      	lsls	r2, r0, #8
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	6849      	ldr	r1, [r1, #4]
 80064d4:	0849      	lsrs	r1, r1, #1
 80064d6:	4608      	mov	r0, r1
 80064d8:	f04f 0100 	mov.w	r1, #0
 80064dc:	1814      	adds	r4, r2, r0
 80064de:	eb43 0501 	adc.w	r5, r3, r1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f04f 0300 	mov.w	r3, #0
 80064ec:	4620      	mov	r0, r4
 80064ee:	4629      	mov	r1, r5
 80064f0:	f7f9 ff4e 	bl	8000390 <__aeabi_uldivmod>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	4613      	mov	r3, r2
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006502:	d308      	bcc.n	8006516 <UART_SetConfig+0x98e>
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650a:	d204      	bcs.n	8006516 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	e17f      	b.n	8006816 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800651c:	e17b      	b.n	8006816 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006526:	f040 80bd 	bne.w	80066a4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800652a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800652e:	2b20      	cmp	r3, #32
 8006530:	dc48      	bgt.n	80065c4 <UART_SetConfig+0xa3c>
 8006532:	2b00      	cmp	r3, #0
 8006534:	db7b      	blt.n	800662e <UART_SetConfig+0xaa6>
 8006536:	2b20      	cmp	r3, #32
 8006538:	d879      	bhi.n	800662e <UART_SetConfig+0xaa6>
 800653a:	a201      	add	r2, pc, #4	; (adr r2, 8006540 <UART_SetConfig+0x9b8>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	080065cb 	.word	0x080065cb
 8006544:	080065d3 	.word	0x080065d3
 8006548:	0800662f 	.word	0x0800662f
 800654c:	0800662f 	.word	0x0800662f
 8006550:	080065db 	.word	0x080065db
 8006554:	0800662f 	.word	0x0800662f
 8006558:	0800662f 	.word	0x0800662f
 800655c:	0800662f 	.word	0x0800662f
 8006560:	080065eb 	.word	0x080065eb
 8006564:	0800662f 	.word	0x0800662f
 8006568:	0800662f 	.word	0x0800662f
 800656c:	0800662f 	.word	0x0800662f
 8006570:	0800662f 	.word	0x0800662f
 8006574:	0800662f 	.word	0x0800662f
 8006578:	0800662f 	.word	0x0800662f
 800657c:	0800662f 	.word	0x0800662f
 8006580:	080065fb 	.word	0x080065fb
 8006584:	0800662f 	.word	0x0800662f
 8006588:	0800662f 	.word	0x0800662f
 800658c:	0800662f 	.word	0x0800662f
 8006590:	0800662f 	.word	0x0800662f
 8006594:	0800662f 	.word	0x0800662f
 8006598:	0800662f 	.word	0x0800662f
 800659c:	0800662f 	.word	0x0800662f
 80065a0:	0800662f 	.word	0x0800662f
 80065a4:	0800662f 	.word	0x0800662f
 80065a8:	0800662f 	.word	0x0800662f
 80065ac:	0800662f 	.word	0x0800662f
 80065b0:	0800662f 	.word	0x0800662f
 80065b4:	0800662f 	.word	0x0800662f
 80065b8:	0800662f 	.word	0x0800662f
 80065bc:	0800662f 	.word	0x0800662f
 80065c0:	08006621 	.word	0x08006621
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d02e      	beq.n	8006626 <UART_SetConfig+0xa9e>
 80065c8:	e031      	b.n	800662e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065ca:	f7fd f921 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80065ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065d0:	e033      	b.n	800663a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d2:	f7fd f933 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 80065d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065d8:	e02f      	b.n	800663a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065da:	f107 0314 	add.w	r3, r7, #20
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fc8e 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e8:	e027      	b.n	800663a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ea:	f107 0308 	add.w	r3, r7, #8
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fe fdda 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065f8:	e01f      	b.n	800663a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065fa:	4b6e      	ldr	r3, [pc, #440]	; (80067b4 <UART_SetConfig+0xc2c>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006606:	4b6b      	ldr	r3, [pc, #428]	; (80067b4 <UART_SetConfig+0xc2c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	08db      	lsrs	r3, r3, #3
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	4a69      	ldr	r2, [pc, #420]	; (80067b8 <UART_SetConfig+0xc30>)
 8006612:	fa22 f303 	lsr.w	r3, r2, r3
 8006616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006618:	e00f      	b.n	800663a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800661a:	4b67      	ldr	r3, [pc, #412]	; (80067b8 <UART_SetConfig+0xc30>)
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800661e:	e00c      	b.n	800663a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006620:	4b66      	ldr	r3, [pc, #408]	; (80067bc <UART_SetConfig+0xc34>)
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006624:	e009      	b.n	800663a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800662c:	e005      	b.n	800663a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006638:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80ea 	beq.w	8006816 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006646:	4a5a      	ldr	r2, [pc, #360]	; (80067b0 <UART_SetConfig+0xc28>)
 8006648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800664c:	461a      	mov	r2, r3
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	fbb3 f3f2 	udiv	r3, r3, r2
 8006654:	005a      	lsls	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	085b      	lsrs	r3, r3, #1
 800665c:	441a      	add	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	fbb2 f3f3 	udiv	r3, r2, r3
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b0f      	cmp	r3, #15
 800666c:	d916      	bls.n	800669c <UART_SetConfig+0xb14>
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d212      	bcs.n	800669c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	b29b      	uxth	r3, r3
 800667a:	f023 030f 	bic.w	r3, r3, #15
 800667e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	b29b      	uxth	r3, r3
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	b29a      	uxth	r2, r3
 800668c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800668e:	4313      	orrs	r3, r2
 8006690:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	e0bc      	b.n	8006816 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80066a2:	e0b8      	b.n	8006816 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	dc4b      	bgt.n	8006744 <UART_SetConfig+0xbbc>
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f2c0 8087 	blt.w	80067c0 <UART_SetConfig+0xc38>
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	f200 8084 	bhi.w	80067c0 <UART_SetConfig+0xc38>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <UART_SetConfig+0xb38>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	0800674b 	.word	0x0800674b
 80066c4:	08006753 	.word	0x08006753
 80066c8:	080067c1 	.word	0x080067c1
 80066cc:	080067c1 	.word	0x080067c1
 80066d0:	0800675b 	.word	0x0800675b
 80066d4:	080067c1 	.word	0x080067c1
 80066d8:	080067c1 	.word	0x080067c1
 80066dc:	080067c1 	.word	0x080067c1
 80066e0:	0800676b 	.word	0x0800676b
 80066e4:	080067c1 	.word	0x080067c1
 80066e8:	080067c1 	.word	0x080067c1
 80066ec:	080067c1 	.word	0x080067c1
 80066f0:	080067c1 	.word	0x080067c1
 80066f4:	080067c1 	.word	0x080067c1
 80066f8:	080067c1 	.word	0x080067c1
 80066fc:	080067c1 	.word	0x080067c1
 8006700:	0800677b 	.word	0x0800677b
 8006704:	080067c1 	.word	0x080067c1
 8006708:	080067c1 	.word	0x080067c1
 800670c:	080067c1 	.word	0x080067c1
 8006710:	080067c1 	.word	0x080067c1
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067c1 	.word	0x080067c1
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067a1 	.word	0x080067a1
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d02e      	beq.n	80067a6 <UART_SetConfig+0xc1e>
 8006748:	e03a      	b.n	80067c0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800674a:	f7fd f861 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 800674e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006750:	e03c      	b.n	80067cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006752:	f7fd f873 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8006756:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006758:	e038      	b.n	80067cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800675a:	f107 0314 	add.w	r3, r7, #20
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fbce 	bl	8004f00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006768:	e030      	b.n	80067cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800676a:	f107 0308 	add.w	r3, r7, #8
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fd1a 	bl	80051a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006778:	e028      	b.n	80067cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800677a:	4b0e      	ldr	r3, [pc, #56]	; (80067b4 <UART_SetConfig+0xc2c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d009      	beq.n	800679a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <UART_SetConfig+0xc2c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	08db      	lsrs	r3, r3, #3
 800678c:	f003 0303 	and.w	r3, r3, #3
 8006790:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <UART_SetConfig+0xc30>)
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006798:	e018      	b.n	80067cc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800679a:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <UART_SetConfig+0xc30>)
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800679e:	e015      	b.n	80067cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <UART_SetConfig+0xc34>)
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a4:	e012      	b.n	80067cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ac:	e00e      	b.n	80067cc <UART_SetConfig+0xc44>
 80067ae:	bf00      	nop
 80067b0:	08007d00 	.word	0x08007d00
 80067b4:	58024400 	.word	0x58024400
 80067b8:	03d09000 	.word	0x03d09000
 80067bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067ca:	bf00      	nop
    }

    if (pclk != 0U)
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d021      	beq.n	8006816 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	4a1a      	ldr	r2, [pc, #104]	; (8006840 <UART_SetConfig+0xcb8>)
 80067d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067dc:	461a      	mov	r2, r3
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	441a      	add	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	2b0f      	cmp	r3, #15
 80067fa:	d909      	bls.n	8006810 <UART_SetConfig+0xc88>
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006802:	d205      	bcs.n	8006810 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	b29a      	uxth	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e002      	b.n	8006816 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006832:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006836:	4618      	mov	r0, r3
 8006838:	3738      	adds	r7, #56	; 0x38
 800683a:	46bd      	mov	sp, r7
 800683c:	bdb0      	pop	{r4, r5, r7, pc}
 800683e:	bf00      	nop
 8006840:	08007d00 	.word	0x08007d00

08006844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	f003 0310 	and.w	r3, r3, #16
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f003 0320 	and.w	r3, r3, #32
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01a      	beq.n	800695a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006942:	d10a      	bne.n	800695a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af02      	add	r7, sp, #8
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006998:	f7fa faec 	bl	8000f74 <HAL_GetTick>
 800699c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0308 	and.w	r3, r3, #8
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d10e      	bne.n	80069ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f82f 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e025      	b.n	8006a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d10e      	bne.n	80069f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f819 	bl	8006a1e <UART_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e00f      	b.n	8006a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b09c      	sub	sp, #112	; 0x70
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	603b      	str	r3, [r7, #0]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2e:	e0a9      	b.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a36:	f000 80a5 	beq.w	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fa fa9b 	bl	8000f74 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d140      	bne.n	8006ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a64:	667b      	str	r3, [r7, #100]	; 0x64
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e6      	bne.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3308      	adds	r3, #8
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	663b      	str	r3, [r7, #96]	; 0x60
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e069      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d051      	beq.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aee:	d149      	bne.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3308      	adds	r3, #8
 8006b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	e853 3f00 	ldrex	r3, [r3]
 8006b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b4c:	623a      	str	r2, [r7, #32]
 8006b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	6a3a      	ldr	r2, [r7, #32]
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e5      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e010      	b.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69da      	ldr	r2, [r3, #28]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	bf0c      	ite	eq
 8006b94:	2301      	moveq	r3, #1
 8006b96:	2300      	movne	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	f43f af46 	beq.w	8006a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3770      	adds	r7, #112	; 0x70
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d101      	bne.n	8006bc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bc0:	2302      	movs	r3, #2
 8006bc2:	e027      	b.n	8006c14 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2224      	movs	r2, #36	; 0x24
 8006bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e02d      	b.n	8006c94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f84f 	bl	8006d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e02d      	b.n	8006d10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2224      	movs	r2, #36	; 0x24
 8006cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0201 	bic.w	r2, r2, #1
 8006cda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f811 	bl	8006d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d108      	bne.n	8006d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d38:	e031      	b.n	8006d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d3a:	2310      	movs	r3, #16
 8006d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d3e:	2310      	movs	r3, #16
 8006d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	0e5b      	lsrs	r3, r3, #25
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	0f5b      	lsrs	r3, r3, #29
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 0307 	and.w	r3, r3, #7
 8006d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	7b3a      	ldrb	r2, [r7, #12]
 8006d66:	4911      	ldr	r1, [pc, #68]	; (8006dac <UARTEx_SetNbDataToProcess+0x94>)
 8006d68:	5c8a      	ldrb	r2, [r1, r2]
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d6e:	7b3a      	ldrb	r2, [r7, #12]
 8006d70:	490f      	ldr	r1, [pc, #60]	; (8006db0 <UARTEx_SetNbDataToProcess+0x98>)
 8006d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	7b7a      	ldrb	r2, [r7, #13]
 8006d84:	4909      	ldr	r1, [pc, #36]	; (8006dac <UARTEx_SetNbDataToProcess+0x94>)
 8006d86:	5c8a      	ldrb	r2, [r1, r2]
 8006d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d8c:	7b7a      	ldrb	r2, [r7, #13]
 8006d8e:	4908      	ldr	r1, [pc, #32]	; (8006db0 <UARTEx_SetNbDataToProcess+0x98>)
 8006d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	08007d18 	.word	0x08007d18
 8006db0:	08007d20 	.word	0x08007d20

08006db4 <__errno>:
 8006db4:	4b01      	ldr	r3, [pc, #4]	; (8006dbc <__errno+0x8>)
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	24000010 	.word	0x24000010

08006dc0 <__libc_init_array>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	4d0d      	ldr	r5, [pc, #52]	; (8006df8 <__libc_init_array+0x38>)
 8006dc4:	4c0d      	ldr	r4, [pc, #52]	; (8006dfc <__libc_init_array+0x3c>)
 8006dc6:	1b64      	subs	r4, r4, r5
 8006dc8:	10a4      	asrs	r4, r4, #2
 8006dca:	2600      	movs	r6, #0
 8006dcc:	42a6      	cmp	r6, r4
 8006dce:	d109      	bne.n	8006de4 <__libc_init_array+0x24>
 8006dd0:	4d0b      	ldr	r5, [pc, #44]	; (8006e00 <__libc_init_array+0x40>)
 8006dd2:	4c0c      	ldr	r4, [pc, #48]	; (8006e04 <__libc_init_array+0x44>)
 8006dd4:	f000 ff76 	bl	8007cc4 <_init>
 8006dd8:	1b64      	subs	r4, r4, r5
 8006dda:	10a4      	asrs	r4, r4, #2
 8006ddc:	2600      	movs	r6, #0
 8006dde:	42a6      	cmp	r6, r4
 8006de0:	d105      	bne.n	8006dee <__libc_init_array+0x2e>
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de8:	4798      	blx	r3
 8006dea:	3601      	adds	r6, #1
 8006dec:	e7ee      	b.n	8006dcc <__libc_init_array+0xc>
 8006dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df2:	4798      	blx	r3
 8006df4:	3601      	adds	r6, #1
 8006df6:	e7f2      	b.n	8006dde <__libc_init_array+0x1e>
 8006df8:	08007dc8 	.word	0x08007dc8
 8006dfc:	08007dc8 	.word	0x08007dc8
 8006e00:	08007dc8 	.word	0x08007dc8
 8006e04:	08007dcc 	.word	0x08007dcc

08006e08 <memset>:
 8006e08:	4402      	add	r2, r0
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d100      	bne.n	8006e12 <memset+0xa>
 8006e10:	4770      	bx	lr
 8006e12:	f803 1b01 	strb.w	r1, [r3], #1
 8006e16:	e7f9      	b.n	8006e0c <memset+0x4>

08006e18 <iprintf>:
 8006e18:	b40f      	push	{r0, r1, r2, r3}
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <iprintf+0x2c>)
 8006e1c:	b513      	push	{r0, r1, r4, lr}
 8006e1e:	681c      	ldr	r4, [r3, #0]
 8006e20:	b124      	cbz	r4, 8006e2c <iprintf+0x14>
 8006e22:	69a3      	ldr	r3, [r4, #24]
 8006e24:	b913      	cbnz	r3, 8006e2c <iprintf+0x14>
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f866 	bl	8006ef8 <__sinit>
 8006e2c:	ab05      	add	r3, sp, #20
 8006e2e:	9a04      	ldr	r2, [sp, #16]
 8006e30:	68a1      	ldr	r1, [r4, #8]
 8006e32:	9301      	str	r3, [sp, #4]
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 f983 	bl	8007140 <_vfiprintf_r>
 8006e3a:	b002      	add	sp, #8
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	b004      	add	sp, #16
 8006e42:	4770      	bx	lr
 8006e44:	24000010 	.word	0x24000010

08006e48 <std>:
 8006e48:	2300      	movs	r3, #0
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e56:	6083      	str	r3, [r0, #8]
 8006e58:	8181      	strh	r1, [r0, #12]
 8006e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e5c:	81c2      	strh	r2, [r0, #14]
 8006e5e:	6183      	str	r3, [r0, #24]
 8006e60:	4619      	mov	r1, r3
 8006e62:	2208      	movs	r2, #8
 8006e64:	305c      	adds	r0, #92	; 0x5c
 8006e66:	f7ff ffcf 	bl	8006e08 <memset>
 8006e6a:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <std+0x38>)
 8006e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <std+0x3c>)
 8006e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e72:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <std+0x40>)
 8006e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <std+0x44>)
 8006e78:	6224      	str	r4, [r4, #32]
 8006e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e7c:	bd10      	pop	{r4, pc}
 8006e7e:	bf00      	nop
 8006e80:	080076e9 	.word	0x080076e9
 8006e84:	0800770b 	.word	0x0800770b
 8006e88:	08007743 	.word	0x08007743
 8006e8c:	08007767 	.word	0x08007767

08006e90 <_cleanup_r>:
 8006e90:	4901      	ldr	r1, [pc, #4]	; (8006e98 <_cleanup_r+0x8>)
 8006e92:	f000 b8af 	b.w	8006ff4 <_fwalk_reent>
 8006e96:	bf00      	nop
 8006e98:	08007a41 	.word	0x08007a41

08006e9c <__sfmoreglue>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	1e4a      	subs	r2, r1, #1
 8006ea0:	2568      	movs	r5, #104	; 0x68
 8006ea2:	4355      	muls	r5, r2
 8006ea4:	460e      	mov	r6, r1
 8006ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eaa:	f000 f8c5 	bl	8007038 <_malloc_r>
 8006eae:	4604      	mov	r4, r0
 8006eb0:	b140      	cbz	r0, 8006ec4 <__sfmoreglue+0x28>
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8006eb8:	300c      	adds	r0, #12
 8006eba:	60a0      	str	r0, [r4, #8]
 8006ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ec0:	f7ff ffa2 	bl	8006e08 <memset>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}

08006ec8 <__sfp_lock_acquire>:
 8006ec8:	4801      	ldr	r0, [pc, #4]	; (8006ed0 <__sfp_lock_acquire+0x8>)
 8006eca:	f000 b8b3 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8006ece:	bf00      	nop
 8006ed0:	240001a0 	.word	0x240001a0

08006ed4 <__sfp_lock_release>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__sfp_lock_release+0x8>)
 8006ed6:	f000 b8ae 	b.w	8007036 <__retarget_lock_release_recursive>
 8006eda:	bf00      	nop
 8006edc:	240001a0 	.word	0x240001a0

08006ee0 <__sinit_lock_acquire>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__sinit_lock_acquire+0x8>)
 8006ee2:	f000 b8a7 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	2400019b 	.word	0x2400019b

08006eec <__sinit_lock_release>:
 8006eec:	4801      	ldr	r0, [pc, #4]	; (8006ef4 <__sinit_lock_release+0x8>)
 8006eee:	f000 b8a2 	b.w	8007036 <__retarget_lock_release_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	2400019b 	.word	0x2400019b

08006ef8 <__sinit>:
 8006ef8:	b510      	push	{r4, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	f7ff fff0 	bl	8006ee0 <__sinit_lock_acquire>
 8006f00:	69a3      	ldr	r3, [r4, #24]
 8006f02:	b11b      	cbz	r3, 8006f0c <__sinit+0x14>
 8006f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f08:	f7ff bff0 	b.w	8006eec <__sinit_lock_release>
 8006f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f10:	6523      	str	r3, [r4, #80]	; 0x50
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <__sinit+0x68>)
 8006f14:	4a13      	ldr	r2, [pc, #76]	; (8006f64 <__sinit+0x6c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f1a:	42a3      	cmp	r3, r4
 8006f1c:	bf04      	itt	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	61a3      	streq	r3, [r4, #24]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f820 	bl	8006f68 <__sfp>
 8006f28:	6060      	str	r0, [r4, #4]
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f81c 	bl	8006f68 <__sfp>
 8006f30:	60a0      	str	r0, [r4, #8]
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 f818 	bl	8006f68 <__sfp>
 8006f38:	2200      	movs	r2, #0
 8006f3a:	60e0      	str	r0, [r4, #12]
 8006f3c:	2104      	movs	r1, #4
 8006f3e:	6860      	ldr	r0, [r4, #4]
 8006f40:	f7ff ff82 	bl	8006e48 <std>
 8006f44:	68a0      	ldr	r0, [r4, #8]
 8006f46:	2201      	movs	r2, #1
 8006f48:	2109      	movs	r1, #9
 8006f4a:	f7ff ff7d 	bl	8006e48 <std>
 8006f4e:	68e0      	ldr	r0, [r4, #12]
 8006f50:	2202      	movs	r2, #2
 8006f52:	2112      	movs	r1, #18
 8006f54:	f7ff ff78 	bl	8006e48 <std>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	61a3      	str	r3, [r4, #24]
 8006f5c:	e7d2      	b.n	8006f04 <__sinit+0xc>
 8006f5e:	bf00      	nop
 8006f60:	08007d28 	.word	0x08007d28
 8006f64:	08006e91 	.word	0x08006e91

08006f68 <__sfp>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	f7ff ffac 	bl	8006ec8 <__sfp_lock_acquire>
 8006f70:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <__sfp+0x84>)
 8006f72:	681e      	ldr	r6, [r3, #0]
 8006f74:	69b3      	ldr	r3, [r6, #24]
 8006f76:	b913      	cbnz	r3, 8006f7e <__sfp+0x16>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f7ff ffbd 	bl	8006ef8 <__sinit>
 8006f7e:	3648      	adds	r6, #72	; 0x48
 8006f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	d503      	bpl.n	8006f90 <__sfp+0x28>
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	b30b      	cbz	r3, 8006fd0 <__sfp+0x68>
 8006f8c:	6836      	ldr	r6, [r6, #0]
 8006f8e:	e7f7      	b.n	8006f80 <__sfp+0x18>
 8006f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f94:	b9d5      	cbnz	r5, 8006fcc <__sfp+0x64>
 8006f96:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <__sfp+0x88>)
 8006f98:	60e3      	str	r3, [r4, #12]
 8006f9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8006fa0:	f000 f847 	bl	8007032 <__retarget_lock_init_recursive>
 8006fa4:	f7ff ff96 	bl	8006ed4 <__sfp_lock_release>
 8006fa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fb0:	6025      	str	r5, [r4, #0]
 8006fb2:	61a5      	str	r5, [r4, #24]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fbc:	f7ff ff24 	bl	8006e08 <memset>
 8006fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fc8:	4620      	mov	r0, r4
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	3468      	adds	r4, #104	; 0x68
 8006fce:	e7d9      	b.n	8006f84 <__sfp+0x1c>
 8006fd0:	2104      	movs	r1, #4
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ff62 	bl	8006e9c <__sfmoreglue>
 8006fd8:	4604      	mov	r4, r0
 8006fda:	6030      	str	r0, [r6, #0]
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d1d5      	bne.n	8006f8c <__sfp+0x24>
 8006fe0:	f7ff ff78 	bl	8006ed4 <__sfp_lock_release>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	e7ee      	b.n	8006fc8 <__sfp+0x60>
 8006fea:	bf00      	nop
 8006fec:	08007d28 	.word	0x08007d28
 8006ff0:	ffff0001 	.word	0xffff0001

08006ff4 <_fwalk_reent>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	4688      	mov	r8, r1
 8006ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007000:	2700      	movs	r7, #0
 8007002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007006:	f1b9 0901 	subs.w	r9, r9, #1
 800700a:	d505      	bpl.n	8007018 <_fwalk_reent+0x24>
 800700c:	6824      	ldr	r4, [r4, #0]
 800700e:	2c00      	cmp	r4, #0
 8007010:	d1f7      	bne.n	8007002 <_fwalk_reent+0xe>
 8007012:	4638      	mov	r0, r7
 8007014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d907      	bls.n	800702e <_fwalk_reent+0x3a>
 800701e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007022:	3301      	adds	r3, #1
 8007024:	d003      	beq.n	800702e <_fwalk_reent+0x3a>
 8007026:	4629      	mov	r1, r5
 8007028:	4630      	mov	r0, r6
 800702a:	47c0      	blx	r8
 800702c:	4307      	orrs	r7, r0
 800702e:	3568      	adds	r5, #104	; 0x68
 8007030:	e7e9      	b.n	8007006 <_fwalk_reent+0x12>

08007032 <__retarget_lock_init_recursive>:
 8007032:	4770      	bx	lr

08007034 <__retarget_lock_acquire_recursive>:
 8007034:	4770      	bx	lr

08007036 <__retarget_lock_release_recursive>:
 8007036:	4770      	bx	lr

08007038 <_malloc_r>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	1ccd      	adds	r5, r1, #3
 800703c:	f025 0503 	bic.w	r5, r5, #3
 8007040:	3508      	adds	r5, #8
 8007042:	2d0c      	cmp	r5, #12
 8007044:	bf38      	it	cc
 8007046:	250c      	movcc	r5, #12
 8007048:	2d00      	cmp	r5, #0
 800704a:	4606      	mov	r6, r0
 800704c:	db01      	blt.n	8007052 <_malloc_r+0x1a>
 800704e:	42a9      	cmp	r1, r5
 8007050:	d903      	bls.n	800705a <_malloc_r+0x22>
 8007052:	230c      	movs	r3, #12
 8007054:	6033      	str	r3, [r6, #0]
 8007056:	2000      	movs	r0, #0
 8007058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800705a:	f000 fda3 	bl	8007ba4 <__malloc_lock>
 800705e:	4921      	ldr	r1, [pc, #132]	; (80070e4 <_malloc_r+0xac>)
 8007060:	680a      	ldr	r2, [r1, #0]
 8007062:	4614      	mov	r4, r2
 8007064:	b99c      	cbnz	r4, 800708e <_malloc_r+0x56>
 8007066:	4f20      	ldr	r7, [pc, #128]	; (80070e8 <_malloc_r+0xb0>)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	b923      	cbnz	r3, 8007076 <_malloc_r+0x3e>
 800706c:	4621      	mov	r1, r4
 800706e:	4630      	mov	r0, r6
 8007070:	f000 fb2a 	bl	80076c8 <_sbrk_r>
 8007074:	6038      	str	r0, [r7, #0]
 8007076:	4629      	mov	r1, r5
 8007078:	4630      	mov	r0, r6
 800707a:	f000 fb25 	bl	80076c8 <_sbrk_r>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d123      	bne.n	80070ca <_malloc_r+0x92>
 8007082:	230c      	movs	r3, #12
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	4630      	mov	r0, r6
 8007088:	f000 fd92 	bl	8007bb0 <__malloc_unlock>
 800708c:	e7e3      	b.n	8007056 <_malloc_r+0x1e>
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	1b5b      	subs	r3, r3, r5
 8007092:	d417      	bmi.n	80070c4 <_malloc_r+0x8c>
 8007094:	2b0b      	cmp	r3, #11
 8007096:	d903      	bls.n	80070a0 <_malloc_r+0x68>
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	441c      	add	r4, r3
 800709c:	6025      	str	r5, [r4, #0]
 800709e:	e004      	b.n	80070aa <_malloc_r+0x72>
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	42a2      	cmp	r2, r4
 80070a4:	bf0c      	ite	eq
 80070a6:	600b      	streq	r3, [r1, #0]
 80070a8:	6053      	strne	r3, [r2, #4]
 80070aa:	4630      	mov	r0, r6
 80070ac:	f000 fd80 	bl	8007bb0 <__malloc_unlock>
 80070b0:	f104 000b 	add.w	r0, r4, #11
 80070b4:	1d23      	adds	r3, r4, #4
 80070b6:	f020 0007 	bic.w	r0, r0, #7
 80070ba:	1ac2      	subs	r2, r0, r3
 80070bc:	d0cc      	beq.n	8007058 <_malloc_r+0x20>
 80070be:	1a1b      	subs	r3, r3, r0
 80070c0:	50a3      	str	r3, [r4, r2]
 80070c2:	e7c9      	b.n	8007058 <_malloc_r+0x20>
 80070c4:	4622      	mov	r2, r4
 80070c6:	6864      	ldr	r4, [r4, #4]
 80070c8:	e7cc      	b.n	8007064 <_malloc_r+0x2c>
 80070ca:	1cc4      	adds	r4, r0, #3
 80070cc:	f024 0403 	bic.w	r4, r4, #3
 80070d0:	42a0      	cmp	r0, r4
 80070d2:	d0e3      	beq.n	800709c <_malloc_r+0x64>
 80070d4:	1a21      	subs	r1, r4, r0
 80070d6:	4630      	mov	r0, r6
 80070d8:	f000 faf6 	bl	80076c8 <_sbrk_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d1dd      	bne.n	800709c <_malloc_r+0x64>
 80070e0:	e7cf      	b.n	8007082 <_malloc_r+0x4a>
 80070e2:	bf00      	nop
 80070e4:	24000098 	.word	0x24000098
 80070e8:	2400009c 	.word	0x2400009c

080070ec <__sfputc_r>:
 80070ec:	6893      	ldr	r3, [r2, #8]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	b410      	push	{r4}
 80070f4:	6093      	str	r3, [r2, #8]
 80070f6:	da08      	bge.n	800710a <__sfputc_r+0x1e>
 80070f8:	6994      	ldr	r4, [r2, #24]
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	db01      	blt.n	8007102 <__sfputc_r+0x16>
 80070fe:	290a      	cmp	r1, #10
 8007100:	d103      	bne.n	800710a <__sfputc_r+0x1e>
 8007102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007106:	f000 bb33 	b.w	8007770 <__swbuf_r>
 800710a:	6813      	ldr	r3, [r2, #0]
 800710c:	1c58      	adds	r0, r3, #1
 800710e:	6010      	str	r0, [r2, #0]
 8007110:	7019      	strb	r1, [r3, #0]
 8007112:	4608      	mov	r0, r1
 8007114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007118:	4770      	bx	lr

0800711a <__sfputs_r>:
 800711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711c:	4606      	mov	r6, r0
 800711e:	460f      	mov	r7, r1
 8007120:	4614      	mov	r4, r2
 8007122:	18d5      	adds	r5, r2, r3
 8007124:	42ac      	cmp	r4, r5
 8007126:	d101      	bne.n	800712c <__sfputs_r+0x12>
 8007128:	2000      	movs	r0, #0
 800712a:	e007      	b.n	800713c <__sfputs_r+0x22>
 800712c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007130:	463a      	mov	r2, r7
 8007132:	4630      	mov	r0, r6
 8007134:	f7ff ffda 	bl	80070ec <__sfputc_r>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d1f3      	bne.n	8007124 <__sfputs_r+0xa>
 800713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007140 <_vfiprintf_r>:
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	460d      	mov	r5, r1
 8007146:	b09d      	sub	sp, #116	; 0x74
 8007148:	4614      	mov	r4, r2
 800714a:	4698      	mov	r8, r3
 800714c:	4606      	mov	r6, r0
 800714e:	b118      	cbz	r0, 8007158 <_vfiprintf_r+0x18>
 8007150:	6983      	ldr	r3, [r0, #24]
 8007152:	b90b      	cbnz	r3, 8007158 <_vfiprintf_r+0x18>
 8007154:	f7ff fed0 	bl	8006ef8 <__sinit>
 8007158:	4b89      	ldr	r3, [pc, #548]	; (8007380 <_vfiprintf_r+0x240>)
 800715a:	429d      	cmp	r5, r3
 800715c:	d11b      	bne.n	8007196 <_vfiprintf_r+0x56>
 800715e:	6875      	ldr	r5, [r6, #4]
 8007160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007162:	07d9      	lsls	r1, r3, #31
 8007164:	d405      	bmi.n	8007172 <_vfiprintf_r+0x32>
 8007166:	89ab      	ldrh	r3, [r5, #12]
 8007168:	059a      	lsls	r2, r3, #22
 800716a:	d402      	bmi.n	8007172 <_vfiprintf_r+0x32>
 800716c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800716e:	f7ff ff61 	bl	8007034 <__retarget_lock_acquire_recursive>
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	071b      	lsls	r3, r3, #28
 8007176:	d501      	bpl.n	800717c <_vfiprintf_r+0x3c>
 8007178:	692b      	ldr	r3, [r5, #16]
 800717a:	b9eb      	cbnz	r3, 80071b8 <_vfiprintf_r+0x78>
 800717c:	4629      	mov	r1, r5
 800717e:	4630      	mov	r0, r6
 8007180:	f000 fb5a 	bl	8007838 <__swsetup_r>
 8007184:	b1c0      	cbz	r0, 80071b8 <_vfiprintf_r+0x78>
 8007186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007188:	07dc      	lsls	r4, r3, #31
 800718a:	d50e      	bpl.n	80071aa <_vfiprintf_r+0x6a>
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	b01d      	add	sp, #116	; 0x74
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	4b7b      	ldr	r3, [pc, #492]	; (8007384 <_vfiprintf_r+0x244>)
 8007198:	429d      	cmp	r5, r3
 800719a:	d101      	bne.n	80071a0 <_vfiprintf_r+0x60>
 800719c:	68b5      	ldr	r5, [r6, #8]
 800719e:	e7df      	b.n	8007160 <_vfiprintf_r+0x20>
 80071a0:	4b79      	ldr	r3, [pc, #484]	; (8007388 <_vfiprintf_r+0x248>)
 80071a2:	429d      	cmp	r5, r3
 80071a4:	bf08      	it	eq
 80071a6:	68f5      	ldreq	r5, [r6, #12]
 80071a8:	e7da      	b.n	8007160 <_vfiprintf_r+0x20>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	0598      	lsls	r0, r3, #22
 80071ae:	d4ed      	bmi.n	800718c <_vfiprintf_r+0x4c>
 80071b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071b2:	f7ff ff40 	bl	8007036 <__retarget_lock_release_recursive>
 80071b6:	e7e9      	b.n	800718c <_vfiprintf_r+0x4c>
 80071b8:	2300      	movs	r3, #0
 80071ba:	9309      	str	r3, [sp, #36]	; 0x24
 80071bc:	2320      	movs	r3, #32
 80071be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80071c6:	2330      	movs	r3, #48	; 0x30
 80071c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800738c <_vfiprintf_r+0x24c>
 80071cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071d0:	f04f 0901 	mov.w	r9, #1
 80071d4:	4623      	mov	r3, r4
 80071d6:	469a      	mov	sl, r3
 80071d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071dc:	b10a      	cbz	r2, 80071e2 <_vfiprintf_r+0xa2>
 80071de:	2a25      	cmp	r2, #37	; 0x25
 80071e0:	d1f9      	bne.n	80071d6 <_vfiprintf_r+0x96>
 80071e2:	ebba 0b04 	subs.w	fp, sl, r4
 80071e6:	d00b      	beq.n	8007200 <_vfiprintf_r+0xc0>
 80071e8:	465b      	mov	r3, fp
 80071ea:	4622      	mov	r2, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ff93 	bl	800711a <__sfputs_r>
 80071f4:	3001      	adds	r0, #1
 80071f6:	f000 80aa 	beq.w	800734e <_vfiprintf_r+0x20e>
 80071fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071fc:	445a      	add	r2, fp
 80071fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007200:	f89a 3000 	ldrb.w	r3, [sl]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 80a2 	beq.w	800734e <_vfiprintf_r+0x20e>
 800720a:	2300      	movs	r3, #0
 800720c:	f04f 32ff 	mov.w	r2, #4294967295
 8007210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007214:	f10a 0a01 	add.w	sl, sl, #1
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	9307      	str	r3, [sp, #28]
 800721c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007220:	931a      	str	r3, [sp, #104]	; 0x68
 8007222:	4654      	mov	r4, sl
 8007224:	2205      	movs	r2, #5
 8007226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722a:	4858      	ldr	r0, [pc, #352]	; (800738c <_vfiprintf_r+0x24c>)
 800722c:	f7f9 f860 	bl	80002f0 <memchr>
 8007230:	9a04      	ldr	r2, [sp, #16]
 8007232:	b9d8      	cbnz	r0, 800726c <_vfiprintf_r+0x12c>
 8007234:	06d1      	lsls	r1, r2, #27
 8007236:	bf44      	itt	mi
 8007238:	2320      	movmi	r3, #32
 800723a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800723e:	0713      	lsls	r3, r2, #28
 8007240:	bf44      	itt	mi
 8007242:	232b      	movmi	r3, #43	; 0x2b
 8007244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007248:	f89a 3000 	ldrb.w	r3, [sl]
 800724c:	2b2a      	cmp	r3, #42	; 0x2a
 800724e:	d015      	beq.n	800727c <_vfiprintf_r+0x13c>
 8007250:	9a07      	ldr	r2, [sp, #28]
 8007252:	4654      	mov	r4, sl
 8007254:	2000      	movs	r0, #0
 8007256:	f04f 0c0a 	mov.w	ip, #10
 800725a:	4621      	mov	r1, r4
 800725c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007260:	3b30      	subs	r3, #48	; 0x30
 8007262:	2b09      	cmp	r3, #9
 8007264:	d94e      	bls.n	8007304 <_vfiprintf_r+0x1c4>
 8007266:	b1b0      	cbz	r0, 8007296 <_vfiprintf_r+0x156>
 8007268:	9207      	str	r2, [sp, #28]
 800726a:	e014      	b.n	8007296 <_vfiprintf_r+0x156>
 800726c:	eba0 0308 	sub.w	r3, r0, r8
 8007270:	fa09 f303 	lsl.w	r3, r9, r3
 8007274:	4313      	orrs	r3, r2
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	46a2      	mov	sl, r4
 800727a:	e7d2      	b.n	8007222 <_vfiprintf_r+0xe2>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	1d19      	adds	r1, r3, #4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	9103      	str	r1, [sp, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	bfbb      	ittet	lt
 8007288:	425b      	neglt	r3, r3
 800728a:	f042 0202 	orrlt.w	r2, r2, #2
 800728e:	9307      	strge	r3, [sp, #28]
 8007290:	9307      	strlt	r3, [sp, #28]
 8007292:	bfb8      	it	lt
 8007294:	9204      	strlt	r2, [sp, #16]
 8007296:	7823      	ldrb	r3, [r4, #0]
 8007298:	2b2e      	cmp	r3, #46	; 0x2e
 800729a:	d10c      	bne.n	80072b6 <_vfiprintf_r+0x176>
 800729c:	7863      	ldrb	r3, [r4, #1]
 800729e:	2b2a      	cmp	r3, #42	; 0x2a
 80072a0:	d135      	bne.n	800730e <_vfiprintf_r+0x1ce>
 80072a2:	9b03      	ldr	r3, [sp, #12]
 80072a4:	1d1a      	adds	r2, r3, #4
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	9203      	str	r2, [sp, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfb8      	it	lt
 80072ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80072b2:	3402      	adds	r4, #2
 80072b4:	9305      	str	r3, [sp, #20]
 80072b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800739c <_vfiprintf_r+0x25c>
 80072ba:	7821      	ldrb	r1, [r4, #0]
 80072bc:	2203      	movs	r2, #3
 80072be:	4650      	mov	r0, sl
 80072c0:	f7f9 f816 	bl	80002f0 <memchr>
 80072c4:	b140      	cbz	r0, 80072d8 <_vfiprintf_r+0x198>
 80072c6:	2340      	movs	r3, #64	; 0x40
 80072c8:	eba0 000a 	sub.w	r0, r0, sl
 80072cc:	fa03 f000 	lsl.w	r0, r3, r0
 80072d0:	9b04      	ldr	r3, [sp, #16]
 80072d2:	4303      	orrs	r3, r0
 80072d4:	3401      	adds	r4, #1
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072dc:	482c      	ldr	r0, [pc, #176]	; (8007390 <_vfiprintf_r+0x250>)
 80072de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072e2:	2206      	movs	r2, #6
 80072e4:	f7f9 f804 	bl	80002f0 <memchr>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d03f      	beq.n	800736c <_vfiprintf_r+0x22c>
 80072ec:	4b29      	ldr	r3, [pc, #164]	; (8007394 <_vfiprintf_r+0x254>)
 80072ee:	bb1b      	cbnz	r3, 8007338 <_vfiprintf_r+0x1f8>
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	3307      	adds	r3, #7
 80072f4:	f023 0307 	bic.w	r3, r3, #7
 80072f8:	3308      	adds	r3, #8
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fe:	443b      	add	r3, r7
 8007300:	9309      	str	r3, [sp, #36]	; 0x24
 8007302:	e767      	b.n	80071d4 <_vfiprintf_r+0x94>
 8007304:	fb0c 3202 	mla	r2, ip, r2, r3
 8007308:	460c      	mov	r4, r1
 800730a:	2001      	movs	r0, #1
 800730c:	e7a5      	b.n	800725a <_vfiprintf_r+0x11a>
 800730e:	2300      	movs	r3, #0
 8007310:	3401      	adds	r4, #1
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	4619      	mov	r1, r3
 8007316:	f04f 0c0a 	mov.w	ip, #10
 800731a:	4620      	mov	r0, r4
 800731c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007320:	3a30      	subs	r2, #48	; 0x30
 8007322:	2a09      	cmp	r2, #9
 8007324:	d903      	bls.n	800732e <_vfiprintf_r+0x1ee>
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0c5      	beq.n	80072b6 <_vfiprintf_r+0x176>
 800732a:	9105      	str	r1, [sp, #20]
 800732c:	e7c3      	b.n	80072b6 <_vfiprintf_r+0x176>
 800732e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007332:	4604      	mov	r4, r0
 8007334:	2301      	movs	r3, #1
 8007336:	e7f0      	b.n	800731a <_vfiprintf_r+0x1da>
 8007338:	ab03      	add	r3, sp, #12
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	462a      	mov	r2, r5
 800733e:	4b16      	ldr	r3, [pc, #88]	; (8007398 <_vfiprintf_r+0x258>)
 8007340:	a904      	add	r1, sp, #16
 8007342:	4630      	mov	r0, r6
 8007344:	f3af 8000 	nop.w
 8007348:	4607      	mov	r7, r0
 800734a:	1c78      	adds	r0, r7, #1
 800734c:	d1d6      	bne.n	80072fc <_vfiprintf_r+0x1bc>
 800734e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007350:	07d9      	lsls	r1, r3, #31
 8007352:	d405      	bmi.n	8007360 <_vfiprintf_r+0x220>
 8007354:	89ab      	ldrh	r3, [r5, #12]
 8007356:	059a      	lsls	r2, r3, #22
 8007358:	d402      	bmi.n	8007360 <_vfiprintf_r+0x220>
 800735a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800735c:	f7ff fe6b 	bl	8007036 <__retarget_lock_release_recursive>
 8007360:	89ab      	ldrh	r3, [r5, #12]
 8007362:	065b      	lsls	r3, r3, #25
 8007364:	f53f af12 	bmi.w	800718c <_vfiprintf_r+0x4c>
 8007368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800736a:	e711      	b.n	8007190 <_vfiprintf_r+0x50>
 800736c:	ab03      	add	r3, sp, #12
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	462a      	mov	r2, r5
 8007372:	4b09      	ldr	r3, [pc, #36]	; (8007398 <_vfiprintf_r+0x258>)
 8007374:	a904      	add	r1, sp, #16
 8007376:	4630      	mov	r0, r6
 8007378:	f000 f880 	bl	800747c <_printf_i>
 800737c:	e7e4      	b.n	8007348 <_vfiprintf_r+0x208>
 800737e:	bf00      	nop
 8007380:	08007d4c 	.word	0x08007d4c
 8007384:	08007d6c 	.word	0x08007d6c
 8007388:	08007d2c 	.word	0x08007d2c
 800738c:	08007d8c 	.word	0x08007d8c
 8007390:	08007d96 	.word	0x08007d96
 8007394:	00000000 	.word	0x00000000
 8007398:	0800711b 	.word	0x0800711b
 800739c:	08007d92 	.word	0x08007d92

080073a0 <_printf_common>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	4616      	mov	r6, r2
 80073a6:	4699      	mov	r9, r3
 80073a8:	688a      	ldr	r2, [r1, #8]
 80073aa:	690b      	ldr	r3, [r1, #16]
 80073ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073b0:	4293      	cmp	r3, r2
 80073b2:	bfb8      	it	lt
 80073b4:	4613      	movlt	r3, r2
 80073b6:	6033      	str	r3, [r6, #0]
 80073b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073bc:	4607      	mov	r7, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b10a      	cbz	r2, 80073c6 <_printf_common+0x26>
 80073c2:	3301      	adds	r3, #1
 80073c4:	6033      	str	r3, [r6, #0]
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	0699      	lsls	r1, r3, #26
 80073ca:	bf42      	ittt	mi
 80073cc:	6833      	ldrmi	r3, [r6, #0]
 80073ce:	3302      	addmi	r3, #2
 80073d0:	6033      	strmi	r3, [r6, #0]
 80073d2:	6825      	ldr	r5, [r4, #0]
 80073d4:	f015 0506 	ands.w	r5, r5, #6
 80073d8:	d106      	bne.n	80073e8 <_printf_common+0x48>
 80073da:	f104 0a19 	add.w	sl, r4, #25
 80073de:	68e3      	ldr	r3, [r4, #12]
 80073e0:	6832      	ldr	r2, [r6, #0]
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	42ab      	cmp	r3, r5
 80073e6:	dc26      	bgt.n	8007436 <_printf_common+0x96>
 80073e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073ec:	1e13      	subs	r3, r2, #0
 80073ee:	6822      	ldr	r2, [r4, #0]
 80073f0:	bf18      	it	ne
 80073f2:	2301      	movne	r3, #1
 80073f4:	0692      	lsls	r2, r2, #26
 80073f6:	d42b      	bmi.n	8007450 <_printf_common+0xb0>
 80073f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073fc:	4649      	mov	r1, r9
 80073fe:	4638      	mov	r0, r7
 8007400:	47c0      	blx	r8
 8007402:	3001      	adds	r0, #1
 8007404:	d01e      	beq.n	8007444 <_printf_common+0xa4>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	68e5      	ldr	r5, [r4, #12]
 800740a:	6832      	ldr	r2, [r6, #0]
 800740c:	f003 0306 	and.w	r3, r3, #6
 8007410:	2b04      	cmp	r3, #4
 8007412:	bf08      	it	eq
 8007414:	1aad      	subeq	r5, r5, r2
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	bf0c      	ite	eq
 800741c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007420:	2500      	movne	r5, #0
 8007422:	4293      	cmp	r3, r2
 8007424:	bfc4      	itt	gt
 8007426:	1a9b      	subgt	r3, r3, r2
 8007428:	18ed      	addgt	r5, r5, r3
 800742a:	2600      	movs	r6, #0
 800742c:	341a      	adds	r4, #26
 800742e:	42b5      	cmp	r5, r6
 8007430:	d11a      	bne.n	8007468 <_printf_common+0xc8>
 8007432:	2000      	movs	r0, #0
 8007434:	e008      	b.n	8007448 <_printf_common+0xa8>
 8007436:	2301      	movs	r3, #1
 8007438:	4652      	mov	r2, sl
 800743a:	4649      	mov	r1, r9
 800743c:	4638      	mov	r0, r7
 800743e:	47c0      	blx	r8
 8007440:	3001      	adds	r0, #1
 8007442:	d103      	bne.n	800744c <_printf_common+0xac>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	3501      	adds	r5, #1
 800744e:	e7c6      	b.n	80073de <_printf_common+0x3e>
 8007450:	18e1      	adds	r1, r4, r3
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	2030      	movs	r0, #48	; 0x30
 8007456:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800745a:	4422      	add	r2, r4
 800745c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007460:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007464:	3302      	adds	r3, #2
 8007466:	e7c7      	b.n	80073f8 <_printf_common+0x58>
 8007468:	2301      	movs	r3, #1
 800746a:	4622      	mov	r2, r4
 800746c:	4649      	mov	r1, r9
 800746e:	4638      	mov	r0, r7
 8007470:	47c0      	blx	r8
 8007472:	3001      	adds	r0, #1
 8007474:	d0e6      	beq.n	8007444 <_printf_common+0xa4>
 8007476:	3601      	adds	r6, #1
 8007478:	e7d9      	b.n	800742e <_printf_common+0x8e>
	...

0800747c <_printf_i>:
 800747c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007480:	460c      	mov	r4, r1
 8007482:	4691      	mov	r9, r2
 8007484:	7e27      	ldrb	r7, [r4, #24]
 8007486:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007488:	2f78      	cmp	r7, #120	; 0x78
 800748a:	4680      	mov	r8, r0
 800748c:	469a      	mov	sl, r3
 800748e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007492:	d807      	bhi.n	80074a4 <_printf_i+0x28>
 8007494:	2f62      	cmp	r7, #98	; 0x62
 8007496:	d80a      	bhi.n	80074ae <_printf_i+0x32>
 8007498:	2f00      	cmp	r7, #0
 800749a:	f000 80d8 	beq.w	800764e <_printf_i+0x1d2>
 800749e:	2f58      	cmp	r7, #88	; 0x58
 80074a0:	f000 80a3 	beq.w	80075ea <_printf_i+0x16e>
 80074a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074ac:	e03a      	b.n	8007524 <_printf_i+0xa8>
 80074ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074b2:	2b15      	cmp	r3, #21
 80074b4:	d8f6      	bhi.n	80074a4 <_printf_i+0x28>
 80074b6:	a001      	add	r0, pc, #4	; (adr r0, 80074bc <_printf_i+0x40>)
 80074b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80074bc:	08007515 	.word	0x08007515
 80074c0:	08007529 	.word	0x08007529
 80074c4:	080074a5 	.word	0x080074a5
 80074c8:	080074a5 	.word	0x080074a5
 80074cc:	080074a5 	.word	0x080074a5
 80074d0:	080074a5 	.word	0x080074a5
 80074d4:	08007529 	.word	0x08007529
 80074d8:	080074a5 	.word	0x080074a5
 80074dc:	080074a5 	.word	0x080074a5
 80074e0:	080074a5 	.word	0x080074a5
 80074e4:	080074a5 	.word	0x080074a5
 80074e8:	08007635 	.word	0x08007635
 80074ec:	08007559 	.word	0x08007559
 80074f0:	08007617 	.word	0x08007617
 80074f4:	080074a5 	.word	0x080074a5
 80074f8:	080074a5 	.word	0x080074a5
 80074fc:	08007657 	.word	0x08007657
 8007500:	080074a5 	.word	0x080074a5
 8007504:	08007559 	.word	0x08007559
 8007508:	080074a5 	.word	0x080074a5
 800750c:	080074a5 	.word	0x080074a5
 8007510:	0800761f 	.word	0x0800761f
 8007514:	680b      	ldr	r3, [r1, #0]
 8007516:	1d1a      	adds	r2, r3, #4
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	600a      	str	r2, [r1, #0]
 800751c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007524:	2301      	movs	r3, #1
 8007526:	e0a3      	b.n	8007670 <_printf_i+0x1f4>
 8007528:	6825      	ldr	r5, [r4, #0]
 800752a:	6808      	ldr	r0, [r1, #0]
 800752c:	062e      	lsls	r6, r5, #24
 800752e:	f100 0304 	add.w	r3, r0, #4
 8007532:	d50a      	bpl.n	800754a <_printf_i+0xce>
 8007534:	6805      	ldr	r5, [r0, #0]
 8007536:	600b      	str	r3, [r1, #0]
 8007538:	2d00      	cmp	r5, #0
 800753a:	da03      	bge.n	8007544 <_printf_i+0xc8>
 800753c:	232d      	movs	r3, #45	; 0x2d
 800753e:	426d      	negs	r5, r5
 8007540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007544:	485e      	ldr	r0, [pc, #376]	; (80076c0 <_printf_i+0x244>)
 8007546:	230a      	movs	r3, #10
 8007548:	e019      	b.n	800757e <_printf_i+0x102>
 800754a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800754e:	6805      	ldr	r5, [r0, #0]
 8007550:	600b      	str	r3, [r1, #0]
 8007552:	bf18      	it	ne
 8007554:	b22d      	sxthne	r5, r5
 8007556:	e7ef      	b.n	8007538 <_printf_i+0xbc>
 8007558:	680b      	ldr	r3, [r1, #0]
 800755a:	6825      	ldr	r5, [r4, #0]
 800755c:	1d18      	adds	r0, r3, #4
 800755e:	6008      	str	r0, [r1, #0]
 8007560:	0628      	lsls	r0, r5, #24
 8007562:	d501      	bpl.n	8007568 <_printf_i+0xec>
 8007564:	681d      	ldr	r5, [r3, #0]
 8007566:	e002      	b.n	800756e <_printf_i+0xf2>
 8007568:	0669      	lsls	r1, r5, #25
 800756a:	d5fb      	bpl.n	8007564 <_printf_i+0xe8>
 800756c:	881d      	ldrh	r5, [r3, #0]
 800756e:	4854      	ldr	r0, [pc, #336]	; (80076c0 <_printf_i+0x244>)
 8007570:	2f6f      	cmp	r7, #111	; 0x6f
 8007572:	bf0c      	ite	eq
 8007574:	2308      	moveq	r3, #8
 8007576:	230a      	movne	r3, #10
 8007578:	2100      	movs	r1, #0
 800757a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800757e:	6866      	ldr	r6, [r4, #4]
 8007580:	60a6      	str	r6, [r4, #8]
 8007582:	2e00      	cmp	r6, #0
 8007584:	bfa2      	ittt	ge
 8007586:	6821      	ldrge	r1, [r4, #0]
 8007588:	f021 0104 	bicge.w	r1, r1, #4
 800758c:	6021      	strge	r1, [r4, #0]
 800758e:	b90d      	cbnz	r5, 8007594 <_printf_i+0x118>
 8007590:	2e00      	cmp	r6, #0
 8007592:	d04d      	beq.n	8007630 <_printf_i+0x1b4>
 8007594:	4616      	mov	r6, r2
 8007596:	fbb5 f1f3 	udiv	r1, r5, r3
 800759a:	fb03 5711 	mls	r7, r3, r1, r5
 800759e:	5dc7      	ldrb	r7, [r0, r7]
 80075a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075a4:	462f      	mov	r7, r5
 80075a6:	42bb      	cmp	r3, r7
 80075a8:	460d      	mov	r5, r1
 80075aa:	d9f4      	bls.n	8007596 <_printf_i+0x11a>
 80075ac:	2b08      	cmp	r3, #8
 80075ae:	d10b      	bne.n	80075c8 <_printf_i+0x14c>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	07df      	lsls	r7, r3, #31
 80075b4:	d508      	bpl.n	80075c8 <_printf_i+0x14c>
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	6861      	ldr	r1, [r4, #4]
 80075ba:	4299      	cmp	r1, r3
 80075bc:	bfde      	ittt	le
 80075be:	2330      	movle	r3, #48	; 0x30
 80075c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075c8:	1b92      	subs	r2, r2, r6
 80075ca:	6122      	str	r2, [r4, #16]
 80075cc:	f8cd a000 	str.w	sl, [sp]
 80075d0:	464b      	mov	r3, r9
 80075d2:	aa03      	add	r2, sp, #12
 80075d4:	4621      	mov	r1, r4
 80075d6:	4640      	mov	r0, r8
 80075d8:	f7ff fee2 	bl	80073a0 <_printf_common>
 80075dc:	3001      	adds	r0, #1
 80075de:	d14c      	bne.n	800767a <_printf_i+0x1fe>
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	b004      	add	sp, #16
 80075e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ea:	4835      	ldr	r0, [pc, #212]	; (80076c0 <_printf_i+0x244>)
 80075ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	680e      	ldr	r6, [r1, #0]
 80075f4:	061f      	lsls	r7, r3, #24
 80075f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80075fa:	600e      	str	r6, [r1, #0]
 80075fc:	d514      	bpl.n	8007628 <_printf_i+0x1ac>
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	bf44      	itt	mi
 8007602:	f043 0320 	orrmi.w	r3, r3, #32
 8007606:	6023      	strmi	r3, [r4, #0]
 8007608:	b91d      	cbnz	r5, 8007612 <_printf_i+0x196>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	f023 0320 	bic.w	r3, r3, #32
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	2310      	movs	r3, #16
 8007614:	e7b0      	b.n	8007578 <_printf_i+0xfc>
 8007616:	6823      	ldr	r3, [r4, #0]
 8007618:	f043 0320 	orr.w	r3, r3, #32
 800761c:	6023      	str	r3, [r4, #0]
 800761e:	2378      	movs	r3, #120	; 0x78
 8007620:	4828      	ldr	r0, [pc, #160]	; (80076c4 <_printf_i+0x248>)
 8007622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007626:	e7e3      	b.n	80075f0 <_printf_i+0x174>
 8007628:	065e      	lsls	r6, r3, #25
 800762a:	bf48      	it	mi
 800762c:	b2ad      	uxthmi	r5, r5
 800762e:	e7e6      	b.n	80075fe <_printf_i+0x182>
 8007630:	4616      	mov	r6, r2
 8007632:	e7bb      	b.n	80075ac <_printf_i+0x130>
 8007634:	680b      	ldr	r3, [r1, #0]
 8007636:	6826      	ldr	r6, [r4, #0]
 8007638:	6960      	ldr	r0, [r4, #20]
 800763a:	1d1d      	adds	r5, r3, #4
 800763c:	600d      	str	r5, [r1, #0]
 800763e:	0635      	lsls	r5, r6, #24
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	d501      	bpl.n	8007648 <_printf_i+0x1cc>
 8007644:	6018      	str	r0, [r3, #0]
 8007646:	e002      	b.n	800764e <_printf_i+0x1d2>
 8007648:	0671      	lsls	r1, r6, #25
 800764a:	d5fb      	bpl.n	8007644 <_printf_i+0x1c8>
 800764c:	8018      	strh	r0, [r3, #0]
 800764e:	2300      	movs	r3, #0
 8007650:	6123      	str	r3, [r4, #16]
 8007652:	4616      	mov	r6, r2
 8007654:	e7ba      	b.n	80075cc <_printf_i+0x150>
 8007656:	680b      	ldr	r3, [r1, #0]
 8007658:	1d1a      	adds	r2, r3, #4
 800765a:	600a      	str	r2, [r1, #0]
 800765c:	681e      	ldr	r6, [r3, #0]
 800765e:	6862      	ldr	r2, [r4, #4]
 8007660:	2100      	movs	r1, #0
 8007662:	4630      	mov	r0, r6
 8007664:	f7f8 fe44 	bl	80002f0 <memchr>
 8007668:	b108      	cbz	r0, 800766e <_printf_i+0x1f2>
 800766a:	1b80      	subs	r0, r0, r6
 800766c:	6060      	str	r0, [r4, #4]
 800766e:	6863      	ldr	r3, [r4, #4]
 8007670:	6123      	str	r3, [r4, #16]
 8007672:	2300      	movs	r3, #0
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007678:	e7a8      	b.n	80075cc <_printf_i+0x150>
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	4632      	mov	r2, r6
 800767e:	4649      	mov	r1, r9
 8007680:	4640      	mov	r0, r8
 8007682:	47d0      	blx	sl
 8007684:	3001      	adds	r0, #1
 8007686:	d0ab      	beq.n	80075e0 <_printf_i+0x164>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	079b      	lsls	r3, r3, #30
 800768c:	d413      	bmi.n	80076b6 <_printf_i+0x23a>
 800768e:	68e0      	ldr	r0, [r4, #12]
 8007690:	9b03      	ldr	r3, [sp, #12]
 8007692:	4298      	cmp	r0, r3
 8007694:	bfb8      	it	lt
 8007696:	4618      	movlt	r0, r3
 8007698:	e7a4      	b.n	80075e4 <_printf_i+0x168>
 800769a:	2301      	movs	r3, #1
 800769c:	4632      	mov	r2, r6
 800769e:	4649      	mov	r1, r9
 80076a0:	4640      	mov	r0, r8
 80076a2:	47d0      	blx	sl
 80076a4:	3001      	adds	r0, #1
 80076a6:	d09b      	beq.n	80075e0 <_printf_i+0x164>
 80076a8:	3501      	adds	r5, #1
 80076aa:	68e3      	ldr	r3, [r4, #12]
 80076ac:	9903      	ldr	r1, [sp, #12]
 80076ae:	1a5b      	subs	r3, r3, r1
 80076b0:	42ab      	cmp	r3, r5
 80076b2:	dcf2      	bgt.n	800769a <_printf_i+0x21e>
 80076b4:	e7eb      	b.n	800768e <_printf_i+0x212>
 80076b6:	2500      	movs	r5, #0
 80076b8:	f104 0619 	add.w	r6, r4, #25
 80076bc:	e7f5      	b.n	80076aa <_printf_i+0x22e>
 80076be:	bf00      	nop
 80076c0:	08007d9d 	.word	0x08007d9d
 80076c4:	08007dae 	.word	0x08007dae

080076c8 <_sbrk_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	4d06      	ldr	r5, [pc, #24]	; (80076e4 <_sbrk_r+0x1c>)
 80076cc:	2300      	movs	r3, #0
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	602b      	str	r3, [r5, #0]
 80076d4:	f7f9 fa3e 	bl	8000b54 <_sbrk>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	d102      	bne.n	80076e2 <_sbrk_r+0x1a>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	b103      	cbz	r3, 80076e2 <_sbrk_r+0x1a>
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	bd38      	pop	{r3, r4, r5, pc}
 80076e4:	240001a4 	.word	0x240001a4

080076e8 <__sread>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	460c      	mov	r4, r1
 80076ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f0:	f000 fab4 	bl	8007c5c <_read_r>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	bfab      	itete	ge
 80076f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076fa:	89a3      	ldrhlt	r3, [r4, #12]
 80076fc:	181b      	addge	r3, r3, r0
 80076fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007702:	bfac      	ite	ge
 8007704:	6563      	strge	r3, [r4, #84]	; 0x54
 8007706:	81a3      	strhlt	r3, [r4, #12]
 8007708:	bd10      	pop	{r4, pc}

0800770a <__swrite>:
 800770a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770e:	461f      	mov	r7, r3
 8007710:	898b      	ldrh	r3, [r1, #12]
 8007712:	05db      	lsls	r3, r3, #23
 8007714:	4605      	mov	r5, r0
 8007716:	460c      	mov	r4, r1
 8007718:	4616      	mov	r6, r2
 800771a:	d505      	bpl.n	8007728 <__swrite+0x1e>
 800771c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007720:	2302      	movs	r3, #2
 8007722:	2200      	movs	r2, #0
 8007724:	f000 f9c8 	bl	8007ab8 <_lseek_r>
 8007728:	89a3      	ldrh	r3, [r4, #12]
 800772a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800772e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	4632      	mov	r2, r6
 8007736:	463b      	mov	r3, r7
 8007738:	4628      	mov	r0, r5
 800773a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800773e:	f000 b869 	b.w	8007814 <_write_r>

08007742 <__sseek>:
 8007742:	b510      	push	{r4, lr}
 8007744:	460c      	mov	r4, r1
 8007746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774a:	f000 f9b5 	bl	8007ab8 <_lseek_r>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	89a3      	ldrh	r3, [r4, #12]
 8007752:	bf15      	itete	ne
 8007754:	6560      	strne	r0, [r4, #84]	; 0x54
 8007756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800775a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800775e:	81a3      	strheq	r3, [r4, #12]
 8007760:	bf18      	it	ne
 8007762:	81a3      	strhne	r3, [r4, #12]
 8007764:	bd10      	pop	{r4, pc}

08007766 <__sclose>:
 8007766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800776a:	f000 b8d3 	b.w	8007914 <_close_r>
	...

08007770 <__swbuf_r>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	460e      	mov	r6, r1
 8007774:	4614      	mov	r4, r2
 8007776:	4605      	mov	r5, r0
 8007778:	b118      	cbz	r0, 8007782 <__swbuf_r+0x12>
 800777a:	6983      	ldr	r3, [r0, #24]
 800777c:	b90b      	cbnz	r3, 8007782 <__swbuf_r+0x12>
 800777e:	f7ff fbbb 	bl	8006ef8 <__sinit>
 8007782:	4b21      	ldr	r3, [pc, #132]	; (8007808 <__swbuf_r+0x98>)
 8007784:	429c      	cmp	r4, r3
 8007786:	d12b      	bne.n	80077e0 <__swbuf_r+0x70>
 8007788:	686c      	ldr	r4, [r5, #4]
 800778a:	69a3      	ldr	r3, [r4, #24]
 800778c:	60a3      	str	r3, [r4, #8]
 800778e:	89a3      	ldrh	r3, [r4, #12]
 8007790:	071a      	lsls	r2, r3, #28
 8007792:	d52f      	bpl.n	80077f4 <__swbuf_r+0x84>
 8007794:	6923      	ldr	r3, [r4, #16]
 8007796:	b36b      	cbz	r3, 80077f4 <__swbuf_r+0x84>
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	6820      	ldr	r0, [r4, #0]
 800779c:	1ac0      	subs	r0, r0, r3
 800779e:	6963      	ldr	r3, [r4, #20]
 80077a0:	b2f6      	uxtb	r6, r6
 80077a2:	4283      	cmp	r3, r0
 80077a4:	4637      	mov	r7, r6
 80077a6:	dc04      	bgt.n	80077b2 <__swbuf_r+0x42>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f948 	bl	8007a40 <_fflush_r>
 80077b0:	bb30      	cbnz	r0, 8007800 <__swbuf_r+0x90>
 80077b2:	68a3      	ldr	r3, [r4, #8]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60a3      	str	r3, [r4, #8]
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	6022      	str	r2, [r4, #0]
 80077be:	701e      	strb	r6, [r3, #0]
 80077c0:	6963      	ldr	r3, [r4, #20]
 80077c2:	3001      	adds	r0, #1
 80077c4:	4283      	cmp	r3, r0
 80077c6:	d004      	beq.n	80077d2 <__swbuf_r+0x62>
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	07db      	lsls	r3, r3, #31
 80077cc:	d506      	bpl.n	80077dc <__swbuf_r+0x6c>
 80077ce:	2e0a      	cmp	r6, #10
 80077d0:	d104      	bne.n	80077dc <__swbuf_r+0x6c>
 80077d2:	4621      	mov	r1, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 f933 	bl	8007a40 <_fflush_r>
 80077da:	b988      	cbnz	r0, 8007800 <__swbuf_r+0x90>
 80077dc:	4638      	mov	r0, r7
 80077de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <__swbuf_r+0x9c>)
 80077e2:	429c      	cmp	r4, r3
 80077e4:	d101      	bne.n	80077ea <__swbuf_r+0x7a>
 80077e6:	68ac      	ldr	r4, [r5, #8]
 80077e8:	e7cf      	b.n	800778a <__swbuf_r+0x1a>
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <__swbuf_r+0xa0>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	bf08      	it	eq
 80077f0:	68ec      	ldreq	r4, [r5, #12]
 80077f2:	e7ca      	b.n	800778a <__swbuf_r+0x1a>
 80077f4:	4621      	mov	r1, r4
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 f81e 	bl	8007838 <__swsetup_r>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d0cb      	beq.n	8007798 <__swbuf_r+0x28>
 8007800:	f04f 37ff 	mov.w	r7, #4294967295
 8007804:	e7ea      	b.n	80077dc <__swbuf_r+0x6c>
 8007806:	bf00      	nop
 8007808:	08007d4c 	.word	0x08007d4c
 800780c:	08007d6c 	.word	0x08007d6c
 8007810:	08007d2c 	.word	0x08007d2c

08007814 <_write_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d07      	ldr	r5, [pc, #28]	; (8007834 <_write_r+0x20>)
 8007818:	4604      	mov	r4, r0
 800781a:	4608      	mov	r0, r1
 800781c:	4611      	mov	r1, r2
 800781e:	2200      	movs	r2, #0
 8007820:	602a      	str	r2, [r5, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	f7f9 f850 	bl	80008c8 <_write>
 8007828:	1c43      	adds	r3, r0, #1
 800782a:	d102      	bne.n	8007832 <_write_r+0x1e>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	b103      	cbz	r3, 8007832 <_write_r+0x1e>
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	240001a4 	.word	0x240001a4

08007838 <__swsetup_r>:
 8007838:	4b32      	ldr	r3, [pc, #200]	; (8007904 <__swsetup_r+0xcc>)
 800783a:	b570      	push	{r4, r5, r6, lr}
 800783c:	681d      	ldr	r5, [r3, #0]
 800783e:	4606      	mov	r6, r0
 8007840:	460c      	mov	r4, r1
 8007842:	b125      	cbz	r5, 800784e <__swsetup_r+0x16>
 8007844:	69ab      	ldr	r3, [r5, #24]
 8007846:	b913      	cbnz	r3, 800784e <__swsetup_r+0x16>
 8007848:	4628      	mov	r0, r5
 800784a:	f7ff fb55 	bl	8006ef8 <__sinit>
 800784e:	4b2e      	ldr	r3, [pc, #184]	; (8007908 <__swsetup_r+0xd0>)
 8007850:	429c      	cmp	r4, r3
 8007852:	d10f      	bne.n	8007874 <__swsetup_r+0x3c>
 8007854:	686c      	ldr	r4, [r5, #4]
 8007856:	89a3      	ldrh	r3, [r4, #12]
 8007858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800785c:	0719      	lsls	r1, r3, #28
 800785e:	d42c      	bmi.n	80078ba <__swsetup_r+0x82>
 8007860:	06dd      	lsls	r5, r3, #27
 8007862:	d411      	bmi.n	8007888 <__swsetup_r+0x50>
 8007864:	2309      	movs	r3, #9
 8007866:	6033      	str	r3, [r6, #0]
 8007868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	f04f 30ff 	mov.w	r0, #4294967295
 8007872:	e03e      	b.n	80078f2 <__swsetup_r+0xba>
 8007874:	4b25      	ldr	r3, [pc, #148]	; (800790c <__swsetup_r+0xd4>)
 8007876:	429c      	cmp	r4, r3
 8007878:	d101      	bne.n	800787e <__swsetup_r+0x46>
 800787a:	68ac      	ldr	r4, [r5, #8]
 800787c:	e7eb      	b.n	8007856 <__swsetup_r+0x1e>
 800787e:	4b24      	ldr	r3, [pc, #144]	; (8007910 <__swsetup_r+0xd8>)
 8007880:	429c      	cmp	r4, r3
 8007882:	bf08      	it	eq
 8007884:	68ec      	ldreq	r4, [r5, #12]
 8007886:	e7e6      	b.n	8007856 <__swsetup_r+0x1e>
 8007888:	0758      	lsls	r0, r3, #29
 800788a:	d512      	bpl.n	80078b2 <__swsetup_r+0x7a>
 800788c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800788e:	b141      	cbz	r1, 80078a2 <__swsetup_r+0x6a>
 8007890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007894:	4299      	cmp	r1, r3
 8007896:	d002      	beq.n	800789e <__swsetup_r+0x66>
 8007898:	4630      	mov	r0, r6
 800789a:	f000 f98f 	bl	8007bbc <_free_r>
 800789e:	2300      	movs	r3, #0
 80078a0:	6363      	str	r3, [r4, #52]	; 0x34
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	2300      	movs	r3, #0
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	f043 0308 	orr.w	r3, r3, #8
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	6923      	ldr	r3, [r4, #16]
 80078bc:	b94b      	cbnz	r3, 80078d2 <__swsetup_r+0x9a>
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c8:	d003      	beq.n	80078d2 <__swsetup_r+0x9a>
 80078ca:	4621      	mov	r1, r4
 80078cc:	4630      	mov	r0, r6
 80078ce:	f000 f929 	bl	8007b24 <__smakebuf_r>
 80078d2:	89a0      	ldrh	r0, [r4, #12]
 80078d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078d8:	f010 0301 	ands.w	r3, r0, #1
 80078dc:	d00a      	beq.n	80078f4 <__swsetup_r+0xbc>
 80078de:	2300      	movs	r3, #0
 80078e0:	60a3      	str	r3, [r4, #8]
 80078e2:	6963      	ldr	r3, [r4, #20]
 80078e4:	425b      	negs	r3, r3
 80078e6:	61a3      	str	r3, [r4, #24]
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	b943      	cbnz	r3, 80078fe <__swsetup_r+0xc6>
 80078ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078f0:	d1ba      	bne.n	8007868 <__swsetup_r+0x30>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	0781      	lsls	r1, r0, #30
 80078f6:	bf58      	it	pl
 80078f8:	6963      	ldrpl	r3, [r4, #20]
 80078fa:	60a3      	str	r3, [r4, #8]
 80078fc:	e7f4      	b.n	80078e8 <__swsetup_r+0xb0>
 80078fe:	2000      	movs	r0, #0
 8007900:	e7f7      	b.n	80078f2 <__swsetup_r+0xba>
 8007902:	bf00      	nop
 8007904:	24000010 	.word	0x24000010
 8007908:	08007d4c 	.word	0x08007d4c
 800790c:	08007d6c 	.word	0x08007d6c
 8007910:	08007d2c 	.word	0x08007d2c

08007914 <_close_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d06      	ldr	r5, [pc, #24]	; (8007930 <_close_r+0x1c>)
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	4608      	mov	r0, r1
 800791e:	602b      	str	r3, [r5, #0]
 8007920:	f7f9 f8e3 	bl	8000aea <_close>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_close_r+0x1a>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_close_r+0x1a>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	240001a4 	.word	0x240001a4

08007934 <__sflush_r>:
 8007934:	898a      	ldrh	r2, [r1, #12]
 8007936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800793a:	4605      	mov	r5, r0
 800793c:	0710      	lsls	r0, r2, #28
 800793e:	460c      	mov	r4, r1
 8007940:	d458      	bmi.n	80079f4 <__sflush_r+0xc0>
 8007942:	684b      	ldr	r3, [r1, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	dc05      	bgt.n	8007954 <__sflush_r+0x20>
 8007948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	dc02      	bgt.n	8007954 <__sflush_r+0x20>
 800794e:	2000      	movs	r0, #0
 8007950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007956:	2e00      	cmp	r6, #0
 8007958:	d0f9      	beq.n	800794e <__sflush_r+0x1a>
 800795a:	2300      	movs	r3, #0
 800795c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007960:	682f      	ldr	r7, [r5, #0]
 8007962:	602b      	str	r3, [r5, #0]
 8007964:	d032      	beq.n	80079cc <__sflush_r+0x98>
 8007966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	075a      	lsls	r2, r3, #29
 800796c:	d505      	bpl.n	800797a <__sflush_r+0x46>
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	1ac0      	subs	r0, r0, r3
 8007972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007974:	b10b      	cbz	r3, 800797a <__sflush_r+0x46>
 8007976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007978:	1ac0      	subs	r0, r0, r3
 800797a:	2300      	movs	r3, #0
 800797c:	4602      	mov	r2, r0
 800797e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007980:	6a21      	ldr	r1, [r4, #32]
 8007982:	4628      	mov	r0, r5
 8007984:	47b0      	blx	r6
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	d106      	bne.n	800799a <__sflush_r+0x66>
 800798c:	6829      	ldr	r1, [r5, #0]
 800798e:	291d      	cmp	r1, #29
 8007990:	d82c      	bhi.n	80079ec <__sflush_r+0xb8>
 8007992:	4a2a      	ldr	r2, [pc, #168]	; (8007a3c <__sflush_r+0x108>)
 8007994:	40ca      	lsrs	r2, r1
 8007996:	07d6      	lsls	r6, r2, #31
 8007998:	d528      	bpl.n	80079ec <__sflush_r+0xb8>
 800799a:	2200      	movs	r2, #0
 800799c:	6062      	str	r2, [r4, #4]
 800799e:	04d9      	lsls	r1, r3, #19
 80079a0:	6922      	ldr	r2, [r4, #16]
 80079a2:	6022      	str	r2, [r4, #0]
 80079a4:	d504      	bpl.n	80079b0 <__sflush_r+0x7c>
 80079a6:	1c42      	adds	r2, r0, #1
 80079a8:	d101      	bne.n	80079ae <__sflush_r+0x7a>
 80079aa:	682b      	ldr	r3, [r5, #0]
 80079ac:	b903      	cbnz	r3, 80079b0 <__sflush_r+0x7c>
 80079ae:	6560      	str	r0, [r4, #84]	; 0x54
 80079b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079b2:	602f      	str	r7, [r5, #0]
 80079b4:	2900      	cmp	r1, #0
 80079b6:	d0ca      	beq.n	800794e <__sflush_r+0x1a>
 80079b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079bc:	4299      	cmp	r1, r3
 80079be:	d002      	beq.n	80079c6 <__sflush_r+0x92>
 80079c0:	4628      	mov	r0, r5
 80079c2:	f000 f8fb 	bl	8007bbc <_free_r>
 80079c6:	2000      	movs	r0, #0
 80079c8:	6360      	str	r0, [r4, #52]	; 0x34
 80079ca:	e7c1      	b.n	8007950 <__sflush_r+0x1c>
 80079cc:	6a21      	ldr	r1, [r4, #32]
 80079ce:	2301      	movs	r3, #1
 80079d0:	4628      	mov	r0, r5
 80079d2:	47b0      	blx	r6
 80079d4:	1c41      	adds	r1, r0, #1
 80079d6:	d1c7      	bne.n	8007968 <__sflush_r+0x34>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0c4      	beq.n	8007968 <__sflush_r+0x34>
 80079de:	2b1d      	cmp	r3, #29
 80079e0:	d001      	beq.n	80079e6 <__sflush_r+0xb2>
 80079e2:	2b16      	cmp	r3, #22
 80079e4:	d101      	bne.n	80079ea <__sflush_r+0xb6>
 80079e6:	602f      	str	r7, [r5, #0]
 80079e8:	e7b1      	b.n	800794e <__sflush_r+0x1a>
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	e7ad      	b.n	8007950 <__sflush_r+0x1c>
 80079f4:	690f      	ldr	r7, [r1, #16]
 80079f6:	2f00      	cmp	r7, #0
 80079f8:	d0a9      	beq.n	800794e <__sflush_r+0x1a>
 80079fa:	0793      	lsls	r3, r2, #30
 80079fc:	680e      	ldr	r6, [r1, #0]
 80079fe:	bf08      	it	eq
 8007a00:	694b      	ldreq	r3, [r1, #20]
 8007a02:	600f      	str	r7, [r1, #0]
 8007a04:	bf18      	it	ne
 8007a06:	2300      	movne	r3, #0
 8007a08:	eba6 0807 	sub.w	r8, r6, r7
 8007a0c:	608b      	str	r3, [r1, #8]
 8007a0e:	f1b8 0f00 	cmp.w	r8, #0
 8007a12:	dd9c      	ble.n	800794e <__sflush_r+0x1a>
 8007a14:	6a21      	ldr	r1, [r4, #32]
 8007a16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a18:	4643      	mov	r3, r8
 8007a1a:	463a      	mov	r2, r7
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b0      	blx	r6
 8007a20:	2800      	cmp	r0, #0
 8007a22:	dc06      	bgt.n	8007a32 <__sflush_r+0xfe>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	e78e      	b.n	8007950 <__sflush_r+0x1c>
 8007a32:	4407      	add	r7, r0
 8007a34:	eba8 0800 	sub.w	r8, r8, r0
 8007a38:	e7e9      	b.n	8007a0e <__sflush_r+0xda>
 8007a3a:	bf00      	nop
 8007a3c:	20400001 	.word	0x20400001

08007a40 <_fflush_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	690b      	ldr	r3, [r1, #16]
 8007a44:	4605      	mov	r5, r0
 8007a46:	460c      	mov	r4, r1
 8007a48:	b913      	cbnz	r3, 8007a50 <_fflush_r+0x10>
 8007a4a:	2500      	movs	r5, #0
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	b118      	cbz	r0, 8007a5a <_fflush_r+0x1a>
 8007a52:	6983      	ldr	r3, [r0, #24]
 8007a54:	b90b      	cbnz	r3, 8007a5a <_fflush_r+0x1a>
 8007a56:	f7ff fa4f 	bl	8006ef8 <__sinit>
 8007a5a:	4b14      	ldr	r3, [pc, #80]	; (8007aac <_fflush_r+0x6c>)
 8007a5c:	429c      	cmp	r4, r3
 8007a5e:	d11b      	bne.n	8007a98 <_fflush_r+0x58>
 8007a60:	686c      	ldr	r4, [r5, #4]
 8007a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ef      	beq.n	8007a4a <_fflush_r+0xa>
 8007a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a6c:	07d0      	lsls	r0, r2, #31
 8007a6e:	d404      	bmi.n	8007a7a <_fflush_r+0x3a>
 8007a70:	0599      	lsls	r1, r3, #22
 8007a72:	d402      	bmi.n	8007a7a <_fflush_r+0x3a>
 8007a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a76:	f7ff fadd 	bl	8007034 <__retarget_lock_acquire_recursive>
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	f7ff ff59 	bl	8007934 <__sflush_r>
 8007a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a84:	07da      	lsls	r2, r3, #31
 8007a86:	4605      	mov	r5, r0
 8007a88:	d4e0      	bmi.n	8007a4c <_fflush_r+0xc>
 8007a8a:	89a3      	ldrh	r3, [r4, #12]
 8007a8c:	059b      	lsls	r3, r3, #22
 8007a8e:	d4dd      	bmi.n	8007a4c <_fflush_r+0xc>
 8007a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a92:	f7ff fad0 	bl	8007036 <__retarget_lock_release_recursive>
 8007a96:	e7d9      	b.n	8007a4c <_fflush_r+0xc>
 8007a98:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <_fflush_r+0x70>)
 8007a9a:	429c      	cmp	r4, r3
 8007a9c:	d101      	bne.n	8007aa2 <_fflush_r+0x62>
 8007a9e:	68ac      	ldr	r4, [r5, #8]
 8007aa0:	e7df      	b.n	8007a62 <_fflush_r+0x22>
 8007aa2:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <_fflush_r+0x74>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	bf08      	it	eq
 8007aa8:	68ec      	ldreq	r4, [r5, #12]
 8007aaa:	e7da      	b.n	8007a62 <_fflush_r+0x22>
 8007aac:	08007d4c 	.word	0x08007d4c
 8007ab0:	08007d6c 	.word	0x08007d6c
 8007ab4:	08007d2c 	.word	0x08007d2c

08007ab8 <_lseek_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	; (8007ad8 <_lseek_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7f9 f836 	bl	8000b38 <_lseek>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_lseek_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_lseek_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	240001a4 	.word	0x240001a4

08007adc <__swhatbuf_r>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	460e      	mov	r6, r1
 8007ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	b096      	sub	sp, #88	; 0x58
 8007ae8:	4614      	mov	r4, r2
 8007aea:	461d      	mov	r5, r3
 8007aec:	da07      	bge.n	8007afe <__swhatbuf_r+0x22>
 8007aee:	2300      	movs	r3, #0
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	89b3      	ldrh	r3, [r6, #12]
 8007af4:	061a      	lsls	r2, r3, #24
 8007af6:	d410      	bmi.n	8007b1a <__swhatbuf_r+0x3e>
 8007af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007afc:	e00e      	b.n	8007b1c <__swhatbuf_r+0x40>
 8007afe:	466a      	mov	r2, sp
 8007b00:	f000 f8be 	bl	8007c80 <_fstat_r>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dbf2      	blt.n	8007aee <__swhatbuf_r+0x12>
 8007b08:	9a01      	ldr	r2, [sp, #4]
 8007b0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b12:	425a      	negs	r2, r3
 8007b14:	415a      	adcs	r2, r3
 8007b16:	602a      	str	r2, [r5, #0]
 8007b18:	e7ee      	b.n	8007af8 <__swhatbuf_r+0x1c>
 8007b1a:	2340      	movs	r3, #64	; 0x40
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	b016      	add	sp, #88	; 0x58
 8007b22:	bd70      	pop	{r4, r5, r6, pc}

08007b24 <__smakebuf_r>:
 8007b24:	898b      	ldrh	r3, [r1, #12]
 8007b26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b28:	079d      	lsls	r5, r3, #30
 8007b2a:	4606      	mov	r6, r0
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	d507      	bpl.n	8007b40 <__smakebuf_r+0x1c>
 8007b30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	2301      	movs	r3, #1
 8007b3a:	6163      	str	r3, [r4, #20]
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	ab01      	add	r3, sp, #4
 8007b42:	466a      	mov	r2, sp
 8007b44:	f7ff ffca 	bl	8007adc <__swhatbuf_r>
 8007b48:	9900      	ldr	r1, [sp, #0]
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff fa73 	bl	8007038 <_malloc_r>
 8007b52:	b948      	cbnz	r0, 8007b68 <__smakebuf_r+0x44>
 8007b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b58:	059a      	lsls	r2, r3, #22
 8007b5a:	d4ef      	bmi.n	8007b3c <__smakebuf_r+0x18>
 8007b5c:	f023 0303 	bic.w	r3, r3, #3
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	e7e3      	b.n	8007b30 <__smakebuf_r+0xc>
 8007b68:	4b0d      	ldr	r3, [pc, #52]	; (8007ba0 <__smakebuf_r+0x7c>)
 8007b6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b6c:	89a3      	ldrh	r3, [r4, #12]
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	6163      	str	r3, [r4, #20]
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	6120      	str	r0, [r4, #16]
 8007b7e:	b15b      	cbz	r3, 8007b98 <__smakebuf_r+0x74>
 8007b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b84:	4630      	mov	r0, r6
 8007b86:	f000 f88d 	bl	8007ca4 <_isatty_r>
 8007b8a:	b128      	cbz	r0, 8007b98 <__smakebuf_r+0x74>
 8007b8c:	89a3      	ldrh	r3, [r4, #12]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	f043 0301 	orr.w	r3, r3, #1
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	89a0      	ldrh	r0, [r4, #12]
 8007b9a:	4305      	orrs	r5, r0
 8007b9c:	81a5      	strh	r5, [r4, #12]
 8007b9e:	e7cd      	b.n	8007b3c <__smakebuf_r+0x18>
 8007ba0:	08006e91 	.word	0x08006e91

08007ba4 <__malloc_lock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__malloc_lock+0x8>)
 8007ba6:	f7ff ba45 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8007baa:	bf00      	nop
 8007bac:	2400019c 	.word	0x2400019c

08007bb0 <__malloc_unlock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__malloc_unlock+0x8>)
 8007bb2:	f7ff ba40 	b.w	8007036 <__retarget_lock_release_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	2400019c 	.word	0x2400019c

08007bbc <_free_r>:
 8007bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d048      	beq.n	8007c54 <_free_r+0x98>
 8007bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f1a1 0404 	sub.w	r4, r1, #4
 8007bce:	bfb8      	it	lt
 8007bd0:	18e4      	addlt	r4, r4, r3
 8007bd2:	f7ff ffe7 	bl	8007ba4 <__malloc_lock>
 8007bd6:	4a20      	ldr	r2, [pc, #128]	; (8007c58 <_free_r+0x9c>)
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	4615      	mov	r5, r2
 8007bde:	b933      	cbnz	r3, 8007bee <_free_r+0x32>
 8007be0:	6063      	str	r3, [r4, #4]
 8007be2:	6014      	str	r4, [r2, #0]
 8007be4:	b003      	add	sp, #12
 8007be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bea:	f7ff bfe1 	b.w	8007bb0 <__malloc_unlock>
 8007bee:	42a3      	cmp	r3, r4
 8007bf0:	d90b      	bls.n	8007c0a <_free_r+0x4e>
 8007bf2:	6821      	ldr	r1, [r4, #0]
 8007bf4:	1862      	adds	r2, r4, r1
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	bf04      	itt	eq
 8007bfa:	681a      	ldreq	r2, [r3, #0]
 8007bfc:	685b      	ldreq	r3, [r3, #4]
 8007bfe:	6063      	str	r3, [r4, #4]
 8007c00:	bf04      	itt	eq
 8007c02:	1852      	addeq	r2, r2, r1
 8007c04:	6022      	streq	r2, [r4, #0]
 8007c06:	602c      	str	r4, [r5, #0]
 8007c08:	e7ec      	b.n	8007be4 <_free_r+0x28>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b10b      	cbz	r3, 8007c14 <_free_r+0x58>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d9fa      	bls.n	8007c0a <_free_r+0x4e>
 8007c14:	6811      	ldr	r1, [r2, #0]
 8007c16:	1855      	adds	r5, r2, r1
 8007c18:	42a5      	cmp	r5, r4
 8007c1a:	d10b      	bne.n	8007c34 <_free_r+0x78>
 8007c1c:	6824      	ldr	r4, [r4, #0]
 8007c1e:	4421      	add	r1, r4
 8007c20:	1854      	adds	r4, r2, r1
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	d1dd      	bne.n	8007be4 <_free_r+0x28>
 8007c28:	681c      	ldr	r4, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	6053      	str	r3, [r2, #4]
 8007c2e:	4421      	add	r1, r4
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	e7d7      	b.n	8007be4 <_free_r+0x28>
 8007c34:	d902      	bls.n	8007c3c <_free_r+0x80>
 8007c36:	230c      	movs	r3, #12
 8007c38:	6003      	str	r3, [r0, #0]
 8007c3a:	e7d3      	b.n	8007be4 <_free_r+0x28>
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf04      	itt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	bf04      	itt	eq
 8007c4c:	1949      	addeq	r1, r1, r5
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	6054      	str	r4, [r2, #4]
 8007c52:	e7c7      	b.n	8007be4 <_free_r+0x28>
 8007c54:	b003      	add	sp, #12
 8007c56:	bd30      	pop	{r4, r5, pc}
 8007c58:	24000098 	.word	0x24000098

08007c5c <_read_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d07      	ldr	r5, [pc, #28]	; (8007c7c <_read_r+0x20>)
 8007c60:	4604      	mov	r4, r0
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7f8 ff20 	bl	8000ab0 <_read>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_read_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_read_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	240001a4 	.word	0x240001a4

08007c80 <_fstat_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	; (8007ca0 <_fstat_r+0x20>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	f7f8 ff38 	bl	8000b02 <_fstat>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d102      	bne.n	8007c9c <_fstat_r+0x1c>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b103      	cbz	r3, 8007c9c <_fstat_r+0x1c>
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	240001a4 	.word	0x240001a4

08007ca4 <_isatty_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	4d06      	ldr	r5, [pc, #24]	; (8007cc0 <_isatty_r+0x1c>)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7f8 ff37 	bl	8000b22 <_isatty>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_isatty_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_isatty_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	240001a4 	.word	0x240001a4

08007cc4 <_init>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	bf00      	nop
 8007cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cca:	bc08      	pop	{r3}
 8007ccc:	469e      	mov	lr, r3
 8007cce:	4770      	bx	lr

08007cd0 <_fini>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	bf00      	nop
 8007cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd6:	bc08      	pop	{r3}
 8007cd8:	469e      	mov	lr, r3
 8007cda:	4770      	bx	lr
