
STM32CubeIDE_4ch_7SEG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008738  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008adc  08008adc  00018adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008ae4  08008ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007b4  24000074  08008b60  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000828  08008b60  00020828  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000399d4  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000052c1  00000000  00000000  00059a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d38  00000000  00000000  0005ed38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ba0  00000000  00000000  00060a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033e45  00000000  00000000  00062610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00023b6b  00000000  00000000  00096455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154a2e  00000000  00000000  000b9fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020e9ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007e0c  00000000  00000000  0020ea44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080089d0 	.word	0x080089d0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	080089d0 	.word	0x080089d0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <PowerOn_7_SEG_D1>:

#include <stdio.h>
#include <math.h>
#include "usart.h"
void PowerOn_7_SEG_D1(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2101      	movs	r1, #1
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <PowerOn_7_SEG_D1+0x14>)
 80005f2:	f002 fd2d 	bl	8003050 <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	58020800 	.word	0x58020800

08000600 <PowerOff_7_SEG_D1>:
void PowerOff_7_SEG_D1(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <PowerOff_7_SEG_D1+0x14>)
 800060a:	f002 fd21 	bl	8003050 <HAL_GPIO_WritePin>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	58020800 	.word	0x58020800

08000618 <PowerOn_7_SEG_D2>:
void PowerOn_7_SEG_D2(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4802      	ldr	r0, [pc, #8]	; (800062c <PowerOn_7_SEG_D2+0x14>)
 8000622:	f002 fd15 	bl	8003050 <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	58020800 	.word	0x58020800

08000630 <PowerOff_7_SEG_D2>:
void PowerOff_7_SEG_D2(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2102      	movs	r1, #2
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <PowerOff_7_SEG_D2+0x14>)
 800063a:	f002 fd09 	bl	8003050 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	58020800 	.word	0x58020800

08000648 <PowerOn_7_SEG_D3>:
void PowerOn_7_SEG_D3(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2104      	movs	r1, #4
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <PowerOn_7_SEG_D3+0x14>)
 8000652:	f002 fcfd 	bl	8003050 <HAL_GPIO_WritePin>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	58020800 	.word	0x58020800

08000660 <PowerOff_7_SEG_D3>:
void PowerOff_7_SEG_D3(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2104      	movs	r1, #4
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <PowerOff_7_SEG_D3+0x14>)
 800066a:	f002 fcf1 	bl	8003050 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	58020800 	.word	0x58020800

08000678 <PowerOn_7_SEG_D4>:
void PowerOn_7_SEG_D4(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2108      	movs	r1, #8
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <PowerOn_7_SEG_D4+0x14>)
 8000682:	f002 fce5 	bl	8003050 <HAL_GPIO_WritePin>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	58020800 	.word	0x58020800

08000690 <PowerOff_7_SEG_D4>:
void PowerOff_7_SEG_D4(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2108      	movs	r1, #8
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <PowerOff_7_SEG_D4+0x14>)
 800069a:	f002 fcd9 	bl	8003050 <HAL_GPIO_WritePin>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	58020800 	.word	0x58020800

080006a8 <Off_7_SEG_AllPin>:
{
On_7_SEG_OnePin (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9);
}
void Off_7_SEG_AllPin(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
Off_7_SEG_OnePin (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 80006ac:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
 80006b0:	f000 f814 	bl	80006dc <Off_7_SEG_OnePin>
| GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9);
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <On_7_SEG_OnePin>:


void On_7_SEG_OnePin(uint16_t pinNum)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
   HAL_GPIO_WritePin(GPIOE,pinNum, RESET);
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	2200      	movs	r2, #0
 80006c6:	4619      	mov	r1, r3
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <On_7_SEG_OnePin+0x20>)
 80006ca:	f002 fcc1 	bl	8003050 <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	58021000 	.word	0x58021000

080006dc <Off_7_SEG_OnePin>:
void Off_7_SEG_OnePin(uint16_t pinNum)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
   HAL_GPIO_WritePin(GPIOE,pinNum, SET);
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4619      	mov	r1, r3
 80006ec:	4803      	ldr	r0, [pc, #12]	; (80006fc <Off_7_SEG_OnePin+0x20>)
 80006ee:	f002 fcaf 	bl	8003050 <HAL_GPIO_WritePin>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58021000 	.word	0x58021000

08000700 <_7_SEG_Num_Test2>:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_7);
        break;
}
}
void _7_SEG_Num_Test2(int num)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  Off_7_SEG_AllPin();
 8000708:	f7ff ffce 	bl	80006a8 <Off_7_SEG_AllPin>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d845      	bhi.n	800079e <_7_SEG_Num_Test2+0x9e>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <_7_SEG_Num_Test2+0x18>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000741 	.word	0x08000741
 800071c:	08000749 	.word	0x08000749
 8000720:	08000751 	.word	0x08000751
 8000724:	0800075b 	.word	0x0800075b
 8000728:	08000765 	.word	0x08000765
 800072c:	0800076f 	.word	0x0800076f
 8000730:	08000779 	.word	0x08000779
 8000734:	08000783 	.word	0x08000783
 8000738:	0800078b 	.word	0x0800078b
 800073c:	08000795 	.word	0x08000795
  switch(num){
        case 0:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000740:	20fc      	movs	r0, #252	; 0xfc
 8000742:	f7ff ffb9 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000746:	e02a      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 1:
        On_7_SEG_OnePin(GPIO_PIN_3|GPIO_PIN_4);
 8000748:	2018      	movs	r0, #24
 800074a:	f7ff ffb5 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 800074e:	e026      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 2:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_6|GPIO_PIN_5);
 8000750:	f44f 70b6 	mov.w	r0, #364	; 0x16c
 8000754:	f7ff ffb0 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000758:	e021      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 3:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5);
 800075a:	f44f 709e 	mov.w	r0, #316	; 0x13c
 800075e:	f7ff ffab 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000762:	e01c      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 4:
        On_7_SEG_OnePin(GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_7);
 8000764:	f44f 70cc 	mov.w	r0, #408	; 0x198
 8000768:	f7ff ffa6 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 800076c:	e017      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 5:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_4|GPIO_PIN_5);
 800076e:	f44f 70da 	mov.w	r0, #436	; 0x1b4
 8000772:	f7ff ffa1 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000776:	e012      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 6:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8);
 8000778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077c:	f7ff ff9c 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000780:	e00d      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 7:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_4);
 8000782:	209c      	movs	r0, #156	; 0x9c
 8000784:	f7ff ff98 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000788:	e009      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 8:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 800078a:	f44f 70fe 	mov.w	r0, #508	; 0x1fc
 800078e:	f7ff ff93 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 8000792:	e004      	b.n	800079e <_7_SEG_Num_Test2+0x9e>
        case 9:
        On_7_SEG_OnePin(GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_7);
 8000794:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 8000798:	f7ff ff8e 	bl	80006b8 <On_7_SEG_OnePin>
        break;
 800079c:	bf00      	nop
}
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop

080007a8 <_7_SEG_1234_Test>:
	On_7_SEG_OnePin(GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6);HAL_Delay(500);Off_7_SEG_AllPin();
	On_7_SEG_OnePin(GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_2);HAL_Delay(500);Off_7_SEG_AllPin();
}

void _7_SEG_1234_Test(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	PowerOn_7_SEG_D1();
 80007ac:	f7ff ff1c 	bl	80005e8 <PowerOn_7_SEG_D1>
	_7_SEG_Num_Test2(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffa5 	bl	8000700 <_7_SEG_Num_Test2>
	HAL_Delay(0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f001 f86e 	bl	8001898 <HAL_Delay>
	PowerOff_7_SEG_D1();
 80007bc:	f7ff ff20 	bl	8000600 <PowerOff_7_SEG_D1>
	PowerOn_7_SEG_D2();
 80007c0:	f7ff ff2a 	bl	8000618 <PowerOn_7_SEG_D2>
	_7_SEG_Num_Test2(2);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f7ff ff9b 	bl	8000700 <_7_SEG_Num_Test2>
	HAL_Delay(0);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 f864 	bl	8001898 <HAL_Delay>
	PowerOff_7_SEG_D2();
 80007d0:	f7ff ff2e 	bl	8000630 <PowerOff_7_SEG_D2>
	PowerOn_7_SEG_D3();
 80007d4:	f7ff ff38 	bl	8000648 <PowerOn_7_SEG_D3>
	_7_SEG_Num_Test2(3);
 80007d8:	2003      	movs	r0, #3
 80007da:	f7ff ff91 	bl	8000700 <_7_SEG_Num_Test2>
	HAL_Delay(0);
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 f85a 	bl	8001898 <HAL_Delay>
	PowerOff_7_SEG_D3();
 80007e4:	f7ff ff3c 	bl	8000660 <PowerOff_7_SEG_D3>
	PowerOn_7_SEG_D4();
 80007e8:	f7ff ff46 	bl	8000678 <PowerOn_7_SEG_D4>
	_7_SEG_Num_Test2(4);
 80007ec:	2004      	movs	r0, #4
 80007ee:	f7ff ff87 	bl	8000700 <_7_SEG_Num_Test2>
	HAL_Delay(0);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 f850 	bl	8001898 <HAL_Delay>
	PowerOff_7_SEG_D4();
 80007f8:	f7ff ff4a 	bl	8000690 <PowerOff_7_SEG_D4>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim3, 0);
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7f1b      	ldrb	r3, [r3, #28]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d17a      	bne.n	8000906 <HAL_TIM_IC_CaptureCallback+0x106>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000810:	4b41      	ldr	r3, [pc, #260]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d11a      	bne.n	800084e <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000818:	2100      	movs	r1, #0
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f005 fe28 	bl	8006470 <HAL_TIM_ReadCapturedValue>
 8000820:	4603      	mov	r3, r0
 8000822:	4a3e      	ldr	r2, [pc, #248]	; (800091c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000824:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	6a1a      	ldr	r2, [r3, #32]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 020a 	bic.w	r2, r2, #10
 800083a:	621a      	str	r2, [r3, #32]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6a1a      	ldr	r2, [r3, #32]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f042 0202 	orr.w	r2, r2, #2
 800084a:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 800084c:	e05b      	b.n	8000906 <HAL_TIM_IC_CaptureCallback+0x106>
		else if (Is_First_Captured==1)   // if the first is already captured
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d157      	bne.n	8000906 <HAL_TIM_IC_CaptureCallback+0x106>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000856:	2100      	movs	r1, #0
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f005 fe09 	bl	8006470 <HAL_TIM_ReadCapturedValue>
 800085e:	4603      	mov	r3, r0
 8000860:	4a2f      	ldr	r2, [pc, #188]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000862:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x120>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b2a      	ldr	r3, [pc, #168]	; (800091c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d907      	bls.n	8000888 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 8000878:	4b29      	ldr	r3, [pc, #164]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x120>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	4a28      	ldr	r2, [pc, #160]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e00f      	b.n	80008a8 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 8000888:	4b24      	ldr	r3, [pc, #144]	; (800091c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x120>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d909      	bls.n	80008a8 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000894:	4b22      	ldr	r3, [pc, #136]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b20      	ldr	r3, [pc, #128]	; (800091c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a2:	4413      	add	r3, r2
 80008a4:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x124>)
 80008a6:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.34/2;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x124>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	ee07 3a90 	vmov	s15, r3
 80008b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008b4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8000910 <HAL_TIM_IC_CaptureCallback+0x110>
 80008b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80008bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80008c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c8:	edc7 7a00 	vstr	s15, [r7]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <HAL_TIM_IC_CaptureCallback+0x128>)
 80008d2:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x118>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	6a1a      	ldr	r2, [r3, #32]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f022 020a 	bic.w	r2, r2, #10
 80008e8:	621a      	str	r2, [r3, #32]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6a12      	ldr	r2, [r2, #32]
 80008f4:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	4b0b      	ldr	r3, [pc, #44]	; (800092c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f022 0202 	bic.w	r2, r2, #2
 8000904:	60da      	str	r2, [r3, #12]
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	5c28f5c3 	.word	0x5c28f5c3
 8000914:	3fd5c28f 	.word	0x3fd5c28f
 8000918:	2400009c 	.word	0x2400009c
 800091c:	24000090 	.word	0x24000090
 8000920:	24000094 	.word	0x24000094
 8000924:	24000098 	.word	0x24000098
 8000928:	2400009d 	.word	0x2400009d
 800092c:	240006fc 	.word	0x240006fc

08000930 <HAL_GPIO_EXTI_Callback>:

			}
		}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
/* Prevent unused argument(s) compilation warning */
	flag = 1;
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_GPIO_EXTI_Callback+0x1c>)
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]
/* NOTE: This function Should not be modified,
when the callback is needed, the HAL_GPIO_EXTI_Callback
could be implemented in the user file
*/
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	2400009e 	.word	0x2400009e

08000950 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000956:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <MX_FDCAN1_Init+0x104>)
 8000958:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 800095c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000960:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000968:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 800096a:	2201      	movs	r2, #1
 800096c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800096e:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000970:	2200      	movs	r2, #0
 8000972:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000976:	2200      	movs	r2, #0
 8000978:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 800097c:	2201      	movs	r2, #1
 800097e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000980:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000982:	2201      	movs	r2, #1
 8000984:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000986:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000988:	2205      	movs	r2, #5
 800098a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800098c:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 800098e:	2202      	movs	r2, #2
 8000990:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000992:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000994:	2201      	movs	r2, #1
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 800099a:	2204      	movs	r2, #4
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009a0:	2205      	movs	r2, #5
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80009a4:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80009b0:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009be:	2201      	movs	r2, #1
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009dc:	2204      	movs	r2, #4
 80009de:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80009fe:	4814      	ldr	r0, [pc, #80]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000a00:	f001 f84e 	bl	8001aa0 <HAL_FDCAN_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000a0a:	f000 fb07 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID; //IdType ?? ?���?? ID ?��?�� ?��?�� ID�?? ?��?��?��?���?? ?���??�?? ?��?��?��?��?�� .
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0; //Filterindex ?�� ?��?�� 개의 ?��?���?? 구성?��?�� 경우?�� ?��?��?��?��?��. 1개의 ?��?���?? ?��?��?���?? ?���?? ?��문에 0?���?? ?��?��?��?��?��.
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK; //FilterType ?? ?��리�? ?��?��?��?�� ?��?�� ?��?��?��?��?��. ?��기서?�� MASK ?��?���?? ?��?��?���?? ?��?��?��?��
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //FilterConfig ?�� ?��?���?? ?��과하?�� 메시�???�� ?��?��?��?�� ?��?�� ?��?��?�� 결정?��?��?��. RX FIFO 0?���?? 보내?���?? ?��?��?��?�� ?��?��?��?��.
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	60da      	str	r2, [r3, #12]

  sFilterConfig.FilterID1 = 0x33; // ID Node2  //?�� MASK ?��?��?�� 경우 ID1( 0x22 )?�� ID�?? ?��?��?���?? ID2( 0x22 )�?? 마스?�� 비트�?? ?��?��?��?��?��.
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a28:	2233      	movs	r2, #51	; 0x33
 8000a2a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a32:	615a      	str	r2, [r3, #20]
  sFilterConfig.RxBufferIndex = 0; //RxBufferIndex ?�� FIFO ???�� RX Buffer�?? ?��?��?�� 경우 ?��?��?���??�?? 0?���?? ?��?��?��?��.
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000a3a:	4907      	ldr	r1, [pc, #28]	; (8000a58 <MX_FDCAN1_Init+0x108>)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_FDCAN1_Init+0x100>)
 8000a3e:	f001 fa11 	bl	8001e64 <HAL_FDCAN_ConfigFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_FDCAN1_Init+0xfc>
  {
    Error_Handler();
 8000a48:	f000 fae8 	bl	800101c <Error_Handler>
  }

  /* USER CODE END FDCAN1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2400054c 	.word	0x2400054c
 8000a54:	4000a000 	.word	0x4000a000
 8000a58:	2400052c 	.word	0x2400052c

08000a5c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0b8      	sub	sp, #224	; 0xe0
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	22b8      	movs	r2, #184	; 0xb8
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f007 ff9f 	bl	80089c0 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <HAL_FDCAN_MspInit+0xd0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d14b      	bne.n	8000b24 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000a92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fc5e 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000aaa:	f000 fab7 	bl	800101c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_FDCAN_MspInit+0xd4>)
 8000ab0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_FDCAN_MspInit+0xd4>)
 8000ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aba:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_FDCAN_MspInit+0xd4>)
 8000ac0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_FDCAN_MspInit+0xd4>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <HAL_FDCAN_MspInit+0xd4>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_FDCAN_MspInit+0xd4>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aea:	2303      	movs	r3, #3
 8000aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b02:	2309      	movs	r3, #9
 8000b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <HAL_FDCAN_MspInit+0xd8>)
 8000b10:	f002 f8ee 	bl	8002cf0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2105      	movs	r1, #5
 8000b18:	2013      	movs	r0, #19
 8000b1a:	f000 ff99 	bl	8001a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000b1e:	2013      	movs	r0, #19
 8000b20:	f000 ffb0 	bl	8001a84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000b24:	bf00      	nop
 8000b26:	37e0      	adds	r7, #224	; 0xe0
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	4000a000 	.word	0x4000a000
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020c00 	.word	0x58020c00

08000b38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4e:	4b61      	ldr	r3, [pc, #388]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b54:	4a5f      	ldr	r2, [pc, #380]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b5e:	4b5d      	ldr	r3, [pc, #372]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b64:	f003 0310 	and.w	r3, r3, #16
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6c:	4b59      	ldr	r3, [pc, #356]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b72:	4a58      	ldr	r2, [pc, #352]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7c:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b90:	4a50      	ldr	r2, [pc, #320]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9a:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000b9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba0:	f003 0304 	and.w	r3, r3, #4
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000baa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bb8:	4b46      	ldr	r3, [pc, #280]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bcc:	4a41      	ldr	r2, [pc, #260]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd6:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	4b3b      	ldr	r3, [pc, #236]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bea:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf4:	4b37      	ldr	r3, [pc, #220]	; (8000cd4 <MX_GPIO_Init+0x19c>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8000c08:	4833      	ldr	r0, [pc, #204]	; (8000cd8 <MX_GPIO_Init+0x1a0>)
 8000c0a:	f002 fa21 	bl	8003050 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	4832      	ldr	r0, [pc, #200]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000c14:	f002 fa1c 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	4830      	ldr	r0, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0x1a8>)
 8000c1e:	f002 fa17 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c28:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c2a:	f002 fa11 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c2e:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8000c32:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4824      	ldr	r0, [pc, #144]	; (8000cd8 <MX_GPIO_Init+0x1a0>)
 8000c48:	f002 f852 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <MX_GPIO_Init+0x1a4>)
 8000c64:	f002 f844 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <MX_GPIO_Init+0x1a8>)
 8000c80:	f002 f836 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8000c84:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000c9e:	f002 f827 	bl	8002cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <MX_GPIO_Init+0x1ac>)
 8000cb8:	f002 f81a 	bl	8002cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2105      	movs	r1, #5
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	f000 fec5 	bl	8001a50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 fedc 	bl	8001a84 <HAL_NVIC_EnableIRQ>

}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58021000 	.word	0x58021000
 8000cdc:	58020800 	.word	0x58020800
 8000ce0:	58020000 	.word	0x58020000
 8000ce4:	58020400 	.word	0x58020400

08000ce8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <MX_I2C1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <MX_I2C1_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d24:	f002 f9c8 	bl	80030b8 <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 f975 	bl	800101c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d36:	f002 fa4f 	bl	80031d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 f96c 	bl	800101c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_I2C1_Init+0x74>)
 8000d48:	f002 fa91 	bl	800326e <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 f963 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	240005ec 	.word	0x240005ec
 8000d60:	40005400 	.word	0x40005400
 8000d64:	00707cbb 	.word	0x00707cbb

08000d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0b8      	sub	sp, #224	; 0xe0
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	22b8      	movs	r2, #184	; 0xb8
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f007 fe19 	bl	80089c0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <HAL_I2C_MspInit+0xbc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d141      	bne.n	8000e1c <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4618      	mov	r0, r3
 8000da8:	f003 fada 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000db2:	f000 f933 	bl	800101c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000db8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dbc:	4a1a      	ldr	r2, [pc, #104]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000dc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd4:	23c0      	movs	r3, #192	; 0xc0
 8000dd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	2312      	movs	r3, #18
 8000ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dec:	2304      	movs	r3, #4
 8000dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <HAL_I2C_MspInit+0xc4>)
 8000dfa:	f001 ff79 	bl	8002cf0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000e00:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000e06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_I2C_MspInit+0xc0>)
 8000e10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	37e0      	adds	r7, #224	; 0xe0
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40005400 	.word	0x40005400
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020400 	.word	0x58020400

08000e30 <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int indx = 1;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	if(FDCAN1 == hfdcan->Instance){
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d10f      	bne.n	8000e64 <HAL_FDCAN_RxFifo0Callback+0x34>
	  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00a      	beq.n	8000e64 <HAL_FDCAN_RxFifo0Callback+0x34>
	  {

	//       HAL_Delay (1000);
	    /* Retreive Rx messages from RX FIFO0 */
	     //?  기서?    ???? ? RX FIFO0?   ?  ?   ?   ???? ?? RxHeader ??????? 복사?   ??????? ?  ?  ?   ??????? RxData 배열 ??????? 복사?  ?  ?  .
	    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_FDCAN_RxFifo0Callback+0x40>)
 8000e50:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f001 f8d3 	bl	8002000 <HAL_FDCAN_GetRxMessage>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_FDCAN_RxFifo0Callback+0x34>
	    {
	    /* Reception Error */
	    Error_Handler();
 8000e60:	f000 f8dc 	bl	800101c <Error_Handler>
////      Error_Handler();
////    }
//    //FDCAN2 콜백�?? ?���?? ?��기서?�� ?��?��?���?? ?��?��?���?? ?��?��?��?��. while 루프?��?�� FDCAN1?�� ?��?�� 매초 ?��?��?���?? ?��?��?���?? ?��문입?��?��.
//
//  }
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	4000a000 	.word	0x4000a000
 8000e70:	2400065c 	.word	0x2400065c
 8000e74:	24000688 	.word	0x24000688

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fcaf 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f84b 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f7ff fe57 	bl	8000b38 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000e8a:	f000 fa0b 	bl	80012a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e8e:	f000 fab5 	bl	80013fc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000e92:	f000 fbc9 	bl	8001628 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 8000e96:	f7ff fd5b 	bl	8000950 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000e9a:	f7ff ff25 	bl	8000ce8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  i2cLcd_CreateHandle(&h_lcd, &hi2c1, i2c_lcd_addr);
//  i2cLcd_Init(&h_lcd);
  /////clcd 코딩
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3,3,0,1);
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	481a      	ldr	r0, [pc, #104]	; (8000f14 <main+0x9c>)
 8000eaa:	f001 f851 	bl	8001f50 <HAL_FDCAN_ConfigGlobalFilter>

       if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000eae:	4819      	ldr	r0, [pc, #100]	; (8000f14 <main+0x9c>)
 8000eb0:	f001 f87b 	bl	8001faa <HAL_FDCAN_Start>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <main+0x46>
         {
           Error_Handler();
 8000eba:	f000 f8af 	bl	800101c <Error_Handler>
         }

       if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <main+0x9c>)
 8000ec4:	f001 fa0a 	bl	80022dc <HAL_FDCAN_ActivateNotification>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <main+0x5a>
         {
           /* Notification Error */
           Error_Handler();
 8000ece:	f000 f8a5 	bl	800101c <Error_Handler>
         }
       TxHeader.Identifier = 0x11;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <main+0xa0>)
 8000ed4:	2211      	movs	r2, #17
 8000ed6:	601a      	str	r2, [r3, #0]
       TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <main+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
       TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <main+0xa0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
       TxHeader.DataLength = FDCAN_DLC_BYTES_8;  //?��?��?�� 길이
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <main+0xa0>)
 8000ee6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000eea:	60da      	str	r2, [r3, #12]
       TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <main+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
       TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <main+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
       TxHeader.FDFormat = FDCAN_FD_CAN;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <main+0xa0>)
 8000efa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000efe:	619a      	str	r2, [r3, #24]
       TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <main+0xa0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
       TxHeader.MessageMarker = 0x0;
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <main+0xa0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
//	   	PowerOff_7_SEG_D3();
//	   	PowerOn_7_SEG_D4();
//	   	_7_SEG_Num_Test(RxData_From_Node3[3]);
//	   	HAL_Delay(0);
//	   	PowerOff_7_SEG_D4();
	  _7_SEG_1234_Test();
 8000f0c:	f7ff fc4c 	bl	80007a8 <_7_SEG_1234_Test>
 8000f10:	e7fc      	b.n	8000f0c <main+0x94>
 8000f12:	bf00      	nop
 8000f14:	2400054c 	.word	0x2400054c
 8000f18:	24000664 	.word	0x24000664

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b09c      	sub	sp, #112	; 0x70
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	224c      	movs	r2, #76	; 0x4c
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f007 fd48 	bl	80089c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2220      	movs	r2, #32
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f007 fd42 	bl	80089c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f3c:	2004      	movs	r0, #4
 8000f3e:	f002 f9e3 	bl	8003308 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <SystemClock_Config+0xd8>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ff4 <SystemClock_Config+0xd8>)
 8000f4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f50:	6193      	str	r3, [r2, #24]
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <SystemClock_Config+0xd8>)
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5e:	bf00      	nop
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <SystemClock_Config+0xd8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f6c:	d1f8      	bne.n	8000f60 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000f86:	2308      	movs	r3, #8
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000f8e:	2320      	movs	r3, #32
 8000f90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f96:	230c      	movs	r3, #12
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fa08 	bl	80033bc <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fb2:	f000 f833 	bl	800101c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	233f      	movs	r3, #63	; 0x3f
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fca:	2340      	movs	r3, #64	; 0x40
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fdf1 	bl	8003bc4 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fe8:	f000 f818 	bl	800101c <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3770      	adds	r7, #112	; 0x70
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024800 	.word	0x58024800

08000ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100a:	f000 fc25 	bl	8001858 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40000800 	.word	0x40000800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_MspInit+0x38>)
 8001030:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_MspInit+0x38>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_MspInit+0x38>)
 8001040:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	210f      	movs	r1, #15
 8001050:	f06f 0001 	mvn.w	r0, #1
 8001054:	f000 fcfc 	bl	8001a50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400

08001064 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b090      	sub	sp, #64	; 0x40
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	d827      	bhi.n	80010c2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0U);
 8001072:	2200      	movs	r2, #0
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	201e      	movs	r0, #30
 8001078:	f000 fcea 	bl	8001a50 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800107c:	201e      	movs	r0, #30
 800107e:	f000 fd01 	bl	8001a84 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <HAL_InitTick+0xc4>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_InitTick+0xc8>)
 800108a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_InitTick+0xc8>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_InitTick+0xc8>)
 800109a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a6:	f107 0210 	add.w	r2, r7, #16
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 f913 	bl	80042dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d106      	bne.n	80010ce <HAL_InitTick+0x6a>
 80010c0:	e001      	b.n	80010c6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e02b      	b.n	800111e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010c6:	f003 f8dd 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80010ca:	63f8      	str	r0, [r7, #60]	; 0x3c
 80010cc:	e004      	b.n	80010d8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ce:	f003 f8d9 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80010d2:	4603      	mov	r3, r0
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_InitTick+0xcc>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0c9b      	lsrs	r3, r3, #18
 80010e2:	3b01      	subs	r3, #1
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_InitTick+0xd0>)
 80010e8:	4a13      	ldr	r2, [pc, #76]	; (8001138 <HAL_InitTick+0xd4>)
 80010ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_InitTick+0xd0>)
 80010ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f2:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_InitTick+0xd0>)
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_InitTick+0xd0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_InitTick+0xd0>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_InitTick+0xd0>)
 8001108:	f004 fc58 	bl	80059bc <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d104      	bne.n	800111c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <HAL_InitTick+0xd0>)
 8001114:	f004 fcaa 	bl	8005a6c <HAL_TIM_Base_Start_IT>
 8001118:	4603      	mov	r3, r0
 800111a:	e000      	b.n	800111e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	3740      	adds	r7, #64	; 0x40
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000008 	.word	0x24000008
 800112c:	58024400 	.word	0x58024400
 8001130:	431bde83 	.word	0x431bde83
 8001134:	240006b0 	.word	0x240006b0
 8001138:	40000800 	.word	0x40000800

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800116c:	2002      	movs	r0, #2
 800116e:	f001 ff88 	bl	8003082 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <FDCAN1_IT0_IRQHandler+0x10>)
 800117e:	f001 f927 	bl	80023d0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2400054c 	.word	0x2400054c

0800118c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <TIM3_IRQHandler+0x10>)
 8001192:	f004 fda5 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	240006fc 	.word	0x240006fc

080011a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM4_IRQHandler+0x10>)
 80011a6:	f004 fd9b 	bl	8005ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	240006b0 	.word	0x240006b0

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <SystemInit+0xd0>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <SystemInit+0xd0>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c8:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <SystemInit+0xd4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d807      	bhi.n	80011e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <SystemInit+0xd4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 030f 	bic.w	r3, r3, #15
 80011dc:	4a2a      	ldr	r2, [pc, #168]	; (8001288 <SystemInit+0xd4>)
 80011de:	f043 0303 	orr.w	r3, r3, #3
 80011e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <SystemInit+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a28      	ldr	r2, [pc, #160]	; (800128c <SystemInit+0xd8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <SystemInit+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <SystemInit+0xd8>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4924      	ldr	r1, [pc, #144]	; (800128c <SystemInit+0xd8>)
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <SystemInit+0xdc>)
 80011fe:	4013      	ands	r3, r2
 8001200:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <SystemInit+0xd4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120e:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <SystemInit+0xd4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 030f 	bic.w	r3, r3, #15
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <SystemInit+0xd4>)
 8001218:	f043 0303 	orr.w	r3, r3, #3
 800121c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <SystemInit+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <SystemInit+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <SystemInit+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <SystemInit+0xd8>)
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <SystemInit+0xe0>)
 8001234:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <SystemInit+0xd8>)
 8001238:	4a17      	ldr	r2, [pc, #92]	; (8001298 <SystemInit+0xe4>)
 800123a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800123c:	4b13      	ldr	r3, [pc, #76]	; (800128c <SystemInit+0xd8>)
 800123e:	4a17      	ldr	r2, [pc, #92]	; (800129c <SystemInit+0xe8>)
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <SystemInit+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <SystemInit+0xd8>)
 800124a:	4a14      	ldr	r2, [pc, #80]	; (800129c <SystemInit+0xe8>)
 800124c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <SystemInit+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <SystemInit+0xd8>)
 8001256:	4a11      	ldr	r2, [pc, #68]	; (800129c <SystemInit+0xe8>)
 8001258:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <SystemInit+0xd8>)
 800125c:	2200      	movs	r2, #0
 800125e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <SystemInit+0xd8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <SystemInit+0xd8>)
 8001266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <SystemInit+0xd8>)
 800126e:	2200      	movs	r2, #0
 8001270:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <SystemInit+0xec>)
 8001274:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001278:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00
 8001288:	52002000 	.word	0x52002000
 800128c:	58024400 	.word	0x58024400
 8001290:	eaf6ed7f 	.word	0xeaf6ed7f
 8001294:	02020200 	.word	0x02020200
 8001298:	01ff0000 	.word	0x01ff0000
 800129c:	01010280 	.word	0x01010280
 80012a0:	52004000 	.word	0x52004000

080012a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b09c      	sub	sp, #112	; 0x70
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
 80012d4:	615a      	str	r2, [r3, #20]
 80012d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2234      	movs	r2, #52	; 0x34
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f007 fb6e 	bl	80089c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <MX_TIM1_Init+0x150>)
 80012e6:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <MX_TIM1_Init+0x154>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62 - 1;
 80012ea:	4b42      	ldr	r3, [pc, #264]	; (80013f4 <MX_TIM1_Init+0x150>)
 80012ec:	223d      	movs	r2, #61	; 0x3d
 80012ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <MX_TIM1_Init+0x150>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <MX_TIM1_Init+0x150>)
 80012f8:	2264      	movs	r2, #100	; 0x64
 80012fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <MX_TIM1_Init+0x150>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001302:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <MX_TIM1_Init+0x150>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <MX_TIM1_Init+0x150>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800130e:	4839      	ldr	r0, [pc, #228]	; (80013f4 <MX_TIM1_Init+0x150>)
 8001310:	f004 fb54 	bl	80059bc <HAL_TIM_Base_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800131a:	f7ff fe7f 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001322:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001324:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001328:	4619      	mov	r1, r3
 800132a:	4832      	ldr	r0, [pc, #200]	; (80013f4 <MX_TIM1_Init+0x150>)
 800132c:	f004 ffa8 	bl	8006280 <HAL_TIM_ConfigClockSource>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001336:	f7ff fe71 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133a:	482e      	ldr	r0, [pc, #184]	; (80013f4 <MX_TIM1_Init+0x150>)
 800133c:	f004 fc0e 	bl	8005b5c <HAL_TIM_PWM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001346:	f7ff fe69 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001356:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800135a:	4619      	mov	r1, r3
 800135c:	4825      	ldr	r0, [pc, #148]	; (80013f4 <MX_TIM1_Init+0x150>)
 800135e:	f005 fe21 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001368:	f7ff fe58 	bl	800101c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 50;
 8001370:	2332      	movs	r3, #50	; 0x32
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	4818      	ldr	r0, [pc, #96]	; (80013f4 <MX_TIM1_Init+0x150>)
 8001392:	f004 fe61 	bl	8006058 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 800139c:	f7ff fe3e 	bl	800101c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_TIM1_Init+0x150>)
 80013d6:	f005 fe73 	bl	80070c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80013e0:	f7ff fe1c 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <MX_TIM1_Init+0x150>)
 80013e6:	f000 f8e3 	bl	80015b0 <HAL_TIM_MspPostInit>

}
 80013ea:	bf00      	nop
 80013ec:	3770      	adds	r7, #112	; 0x70
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	24000748 	.word	0x24000748
 80013f8:	40010000 	.word	0x40010000

080013fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08c      	sub	sp, #48	; 0x30
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <MX_TIM3_Init+0xdc>)
 800142a:	4a2c      	ldr	r2, [pc, #176]	; (80014dc <MX_TIM3_Init+0xe0>)
 800142c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90 - 1;
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_TIM3_Init+0xdc>)
 8001430:	2259      	movs	r2, #89	; 0x59
 8001432:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_TIM3_Init+0xdc>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff - 1;
 800143a:	4b27      	ldr	r3, [pc, #156]	; (80014d8 <MX_TIM3_Init+0xdc>)
 800143c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001440:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_TIM3_Init+0xdc>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <MX_TIM3_Init+0xdc>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144e:	4822      	ldr	r0, [pc, #136]	; (80014d8 <MX_TIM3_Init+0xdc>)
 8001450:	f004 fab4 	bl	80059bc <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800145a:	f7ff fddf 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001462:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001464:	f107 0320 	add.w	r3, r7, #32
 8001468:	4619      	mov	r1, r3
 800146a:	481b      	ldr	r0, [pc, #108]	; (80014d8 <MX_TIM3_Init+0xdc>)
 800146c:	f004 ff08 	bl	8006280 <HAL_TIM_ConfigClockSource>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001476:	f7ff fdd1 	bl	800101c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <MX_TIM3_Init+0xdc>)
 800147c:	f004 fbcf 	bl	8005c1e <HAL_TIM_IC_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001486:	f7ff fdc9 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	480f      	ldr	r0, [pc, #60]	; (80014d8 <MX_TIM3_Init+0xdc>)
 800149a:	f005 fd83 	bl	8006fa4 <HAL_TIMEx_MasterConfigSynchronization>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80014a4:	f7ff fdba 	bl	800101c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ac:	2301      	movs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	; (80014d8 <MX_TIM3_Init+0xdc>)
 80014c0:	f004 fd2d 	bl	8005f1e <HAL_TIM_IC_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 80014ca:	f7ff fda7 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3730      	adds	r7, #48	; 0x30
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	240006fc 	.word	0x240006fc
 80014dc:	40000400 	.word	0x40000400

080014e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_TIM_Base_MspInit+0xc0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10f      	bne.n	8001522 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 8001504:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 8001514:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001520:	e03a      	b.n	8001598 <HAL_TIM_Base_MspInit+0xb8>
  else if(tim_baseHandle->Instance==TIM3)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a20      	ldr	r2, [pc, #128]	; (80015a8 <HAL_TIM_Base_MspInit+0xc8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d135      	bne.n	8001598 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 800152e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 800153e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 800154c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_TIM_Base_MspInit+0xc4>)
 800155c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001578:	2302      	movs	r3, #2
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	4619      	mov	r1, r3
 8001582:	480a      	ldr	r0, [pc, #40]	; (80015ac <HAL_TIM_Base_MspInit+0xcc>)
 8001584:	f001 fbb4 	bl	8002cf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2105      	movs	r1, #5
 800158c:	201d      	movs	r0, #29
 800158e:	f000 fa5f 	bl	8001a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001592:	201d      	movs	r0, #29
 8001594:	f000 fa76 	bl	8001a84 <HAL_NVIC_EnableIRQ>
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010000 	.word	0x40010000
 80015a4:	58024400 	.word	0x58024400
 80015a8:	40000400 	.word	0x40000400
 80015ac:	58020000 	.word	0x58020000

080015b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a13      	ldr	r2, [pc, #76]	; (800161c <HAL_TIM_MspPostInit+0x6c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d11f      	bne.n	8001612 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_TIM_MspPostInit+0x70>)
 80015d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d8:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_TIM_MspPostInit+0x70>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_TIM_MspPostInit+0x70>)
 80015e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001602:	2301      	movs	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_TIM_MspPostInit+0x74>)
 800160e:	f001 fb6f 	bl	8002cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40010000 	.word	0x40010000
 8001620:	58024400 	.word	0x58024400
 8001624:	58021000 	.word	0x58021000

08001628 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 800162e:	4a23      	ldr	r2, [pc, #140]	; (80016bc <MX_USART3_UART_Init+0x94>)
 8001630:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001638:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 800164e:	220c      	movs	r2, #12
 8001650:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001652:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001672:	f005 fde3 	bl	800723c <HAL_UART_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800167c:	f7ff fcce 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001680:	2100      	movs	r1, #0
 8001682:	480d      	ldr	r0, [pc, #52]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001684:	f006 fe76 	bl	8008374 <HAL_UARTEx_SetTxFifoThreshold>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800168e:	f7ff fcc5 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001692:	2100      	movs	r1, #0
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 8001696:	f006 feab 	bl	80083f0 <HAL_UARTEx_SetRxFifoThreshold>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016a0:	f7ff fcbc 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_USART3_UART_Init+0x90>)
 80016a6:	f006 fe2c 	bl	8008302 <HAL_UARTEx_DisableFifoMode>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016b0:	f7ff fcb4 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	24000794 	.word	0x24000794
 80016bc:	40004800 	.word	0x40004800

080016c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0b8      	sub	sp, #224	; 0xe0
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	22b8      	movs	r2, #184	; 0xb8
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f007 f96d 	bl	80089c0 <memset>
  if(uartHandle->Instance==USART3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_UART_MspInit+0xc0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d142      	bne.n	8001776 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016f0:	2302      	movs	r3, #2
 80016f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 fe2e 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800170a:	f7ff fc87 	bl	800101c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001710:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001720:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0xc4>)
 800172e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0xc4>)
 800173e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800174a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800174e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001764:	2307      	movs	r3, #7
 8001766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0xc8>)
 8001772:	f001 fabd 	bl	8002cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001776:	bf00      	nop
 8001778:	37e0      	adds	r7, #224	; 0xe0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40004800 	.word	0x40004800
 8001784:	58024400 	.word	0x58024400
 8001788:	58020c00 	.word	0x58020c00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001790:	f7ff fd10 	bl	80011b4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f007 f8cf 	bl	800895c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fb5b 	bl	8000e78 <main>
  bx  lr
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80017c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017cc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80017d0:	08008aec 	.word	0x08008aec
  ldr r2, =_sbss
 80017d4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80017d8:	24000828 	.word	0x24000828

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e6:	2003      	movs	r0, #3
 80017e8:	f000 f927 	bl	8001a3a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80017ec:	f002 fba0 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_Init+0x68>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	0a1b      	lsrs	r3, r3, #8
 80017f8:	f003 030f 	and.w	r3, r3, #15
 80017fc:	4913      	ldr	r1, [pc, #76]	; (800184c <HAL_Init+0x6c>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	f003 031f 	and.w	r3, r3, #31
 8001804:	fa22 f303 	lsr.w	r3, r2, r3
 8001808:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_Init+0x68>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a0e      	ldr	r2, [pc, #56]	; (800184c <HAL_Init+0x6c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <HAL_Init+0x70>)
 8001822:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_Init+0x74>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182a:	200f      	movs	r0, #15
 800182c:	f7ff fc1a 	bl	8001064 <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e002      	b.n	8001840 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800183a:	f7ff fbf5 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	58024400 	.word	0x58024400
 800184c:	08008a34 	.word	0x08008a34
 8001850:	24000004 	.word	0x24000004
 8001854:	24000000 	.word	0x24000000

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2400000c 	.word	0x2400000c
 800187c:	24000824 	.word	0x24000824

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	24000824 	.word	0x24000824

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	2400000c 	.word	0x2400000c

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	4313      	orrs	r3, r2
 800190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <__NVIC_SetPriorityGrouping+0x40>)
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	60d3      	str	r3, [r2, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000ed00 	.word	0xe000ed00
 8001924:	05fa0000 	.word	0x05fa0000

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff4c 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a5e:	f7ff ff63 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001a62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	6978      	ldr	r0, [r7, #20]
 8001a6a:	f7ff ffb3 	bl	80019d4 <NVIC_EncodePriority>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ff82 	bl	8001980 <__NVIC_SetPriority>
}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff56 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b098      	sub	sp, #96	; 0x60
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001aa8:	4a84      	ldr	r2, [pc, #528]	; (8001cbc <HAL_FDCAN_Init+0x21c>)
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4611      	mov	r1, r2
 8001ab0:	224c      	movs	r2, #76	; 0x4c
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f006 ff76 	bl	80089a4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e1ca      	b.n	8001e58 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7e      	ldr	r2, [pc, #504]	; (8001cc0 <HAL_FDCAN_Init+0x220>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d106      	bne.n	8001ada <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe ffb4 	bl	8000a5c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699a      	ldr	r2, [r3, #24]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0210 	bic.w	r2, r2, #16
 8001b02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff febc 	bl	8001880 <HAL_GetTick>
 8001b08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b0a:	e014      	b.n	8001b36 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b0c:	f7ff feb8 	bl	8001880 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d90d      	bls.n	8001b36 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e190      	b.n	8001e58 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d0e3      	beq.n	8001b0c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b54:	f7ff fe94 	bl	8001880 <HAL_GetTick>
 8001b58:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b5a:	e014      	b.n	8001b86 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001b5c:	f7ff fe90 	bl	8001880 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b0a      	cmp	r3, #10
 8001b68:	d90d      	bls.n	8001b86 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e168      	b.n	8001e58 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0e3      	beq.n	8001b5c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0202 	orr.w	r2, r2, #2
 8001ba2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7c1b      	ldrb	r3, [r3, #16]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	e007      	b.n	8001bce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bcc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7c5b      	ldrb	r3, [r3, #17]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699a      	ldr	r2, [r3, #24]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001be4:	619a      	str	r2, [r3, #24]
 8001be6:	e007      	b.n	8001bf8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bf6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7c9b      	ldrb	r3, [r3, #18]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	e007      	b.n	8001c22 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c20:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001c46:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0210 	bic.w	r2, r2, #16
 8001c56:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d108      	bne.n	8001c72 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0204 	orr.w	r2, r2, #4
 8001c6e:	619a      	str	r2, [r3, #24]
 8001c70:	e030      	b.n	8001cd4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d02c      	beq.n	8001cd4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d020      	beq.n	8001cc4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c90:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0210 	orr.w	r2, r2, #16
 8001ca0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d114      	bne.n	8001cd4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	699a      	ldr	r2, [r3, #24]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	619a      	str	r2, [r3, #24]
 8001cba:	e00b      	b.n	8001cd4 <HAL_FDCAN_Init+0x234>
 8001cbc:	080089e8 	.word	0x080089e8
 8001cc0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ce4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001cec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001cfc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001cfe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d08:	d115      	bne.n	8001d36 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	3b01      	subs	r3, #1
 8001d16:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d18:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001d22:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001d32:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001d34:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d012      	beq.n	8001d88 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001d6a:	f023 0107 	bic.w	r1, r3, #7
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001d78:	4413      	add	r3, r2
 8001d7a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d012      	beq.n	8001db6 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001d98:	f023 0107 	bic.w	r1, r3, #7
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001da6:	4413      	add	r3, r2
 8001da8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d013      	beq.n	8001de6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001dc6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001dda:	011a      	lsls	r2, r3, #4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d013      	beq.n	8001e16 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001df6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e04:	4413      	add	r3, r2
 8001e06:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001e0a:	021a      	lsls	r2, r3, #8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <HAL_FDCAN_Init+0x3c0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d107      	bne.n	8001e30 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f022 0203 	bic.w	r2, r2, #3
 8001e2e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fdcb 	bl	80029e4 <FDCAN_CalcultateRamBlockAddresses>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001e54:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3760      	adds	r7, #96	; 0x60
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	4000a000 	.word	0x4000a000

08001e64 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e74:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d002      	beq.n	8001e82 <HAL_FDCAN_ConfigFilter+0x1e>
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d157      	bne.n	8001f32 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d12b      	bne.n	8001ee2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b07      	cmp	r3, #7
 8001e90:	d10d      	bne.n	8001eae <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001e9e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001ea4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001ea6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e00e      	b.n	8001ecc <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001eba:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001ec2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e025      	b.n	8001f2e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	075a      	lsls	r2, r3, #29
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	d103      	bne.n	8001f00 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e006      	b.n	8001f0e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	079a      	lsls	r2, r3, #30
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3304      	adds	r3, #4
 8001f26:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e008      	b.n	8001f44 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f38:	f043 0202 	orr.w	r2, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
  }
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	371c      	adds	r7, #28
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d110      	bne.n	8001f8c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001f72:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001f78:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e008      	b.n	8001f9e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d111      	bne.n	8001fe2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e008      	b.n	8001ff4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fe8:	f043 0204 	orr.w	r2, r3, #4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
  }
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002000:	b480      	push	{r7}
 8002002:	b08b      	sub	sp, #44	; 0x2c
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002018:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800201a:	7efb      	ldrb	r3, [r7, #27]
 800201c:	2b02      	cmp	r3, #2
 800201e:	f040 814b 	bne.w	80022b8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d14d      	bne.n	80020c4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002030:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e13e      	b.n	80022ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e12c      	b.n	80022ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002078:	0e1b      	lsrs	r3, r3, #24
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10b      	bne.n	800209a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800208a:	0fdb      	lsrs	r3, r3, #31
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002094:	d101      	bne.n	800209a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002096:	2301      	movs	r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	69f9      	ldr	r1, [r7, #28]
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e069      	b.n	8002198 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	2b41      	cmp	r3, #65	; 0x41
 80020c8:	d14d      	bne.n	8002166 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80020d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020e0:	f043 0220 	orr.w	r2, r3, #32
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e0ed      	b.n	80022ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80020f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002104:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0db      	b.n	80022ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800211a:	0e1b      	lsrs	r3, r3, #24
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10b      	bne.n	800213c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800212c:	0fdb      	lsrs	r3, r3, #31
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002136:	d101      	bne.n	800213c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002138:	2301      	movs	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002158:	69f9      	ldr	r1, [r7, #28]
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
 8002164:	e018      	b.n	8002198 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	d309      	bcc.n	8002184 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002176:	f043 0220 	orr.w	r2, r3, #32
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0a2      	b.n	80022ca <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0c9b      	lsrs	r3, r3, #18
 80021b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e005      	b.n	80021c8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	3304      	adds	r3, #4
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e1b      	lsrs	r3, r3, #24
 800221a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	0fda      	lsrs	r2, r3, #31
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	3304      	adds	r3, #4
 8002230:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002236:	2300      	movs	r3, #0
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	e00a      	b.n	8002252 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	441a      	add	r2, r3
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	440b      	add	r3, r1
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	3301      	adds	r3, #1
 8002250:	623b      	str	r3, [r7, #32]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	4a1f      	ldr	r2, [pc, #124]	; (80022d8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	461a      	mov	r2, r3
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	4293      	cmp	r3, r2
 8002262:	d3eb      	bcc.n	800223c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d105      	bne.n	8002276 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002274:	e01e      	b.n	80022b4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b41      	cmp	r3, #65	; 0x41
 800227a:	d105      	bne.n	8002288 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69fa      	ldr	r2, [r7, #28]
 8002282:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002286:	e015      	b.n	80022b4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b1f      	cmp	r3, #31
 800228c:	d808      	bhi.n	80022a0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	fa01 f202 	lsl.w	r2, r1, r2
 800229a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800229e:	e009      	b.n	80022b4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f003 021f 	and.w	r2, r3, #31
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e008      	b.n	80022ca <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022be:	f043 0208 	orr.w	r2, r3, #8
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
  }
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	372c      	adds	r7, #44	; 0x2c
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	08008a44 	.word	0x08008a44

080022dc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022ee:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80022f0:	7dfb      	ldrb	r3, [r7, #23]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d002      	beq.n	80022fc <HAL_FDCAN_ActivateNotification+0x20>
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d155      	bne.n	80023a8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d108      	bne.n	800231c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	65da      	str	r2, [r3, #92]	; 0x5c
 800231a:	e014      	b.n	8002346 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d108      	bne.n	800233e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0202 	orr.w	r2, r2, #2
 800233a:	65da      	str	r2, [r3, #92]	; 0x5c
 800233c:	e003      	b.n	8002346 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2203      	movs	r2, #3
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	430a      	orrs	r2, r1
 8002360:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d009      	beq.n	8002382 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	430a      	orrs	r2, r1
 800237e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <HAL_FDCAN_ActivateNotification+0xec>)
 800238c:	4013      	ands	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	430b      	orrs	r3, r1
 8002394:	6553      	str	r3, [r2, #84]	; 0x54
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_FDCAN_ActivateNotification+0xf0>)
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	0f9b      	lsrs	r3, r3, #30
 800239e:	490b      	ldr	r1, [pc, #44]	; (80023cc <HAL_FDCAN_ActivateNotification+0xf0>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e008      	b.n	80023ba <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
  }
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	3fcfffff 	.word	0x3fcfffff
 80023cc:	4000a800 	.word	0x4000a800

080023d0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b092      	sub	sp, #72	; 0x48
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80023d8:	4b90      	ldr	r3, [pc, #576]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	079b      	lsls	r3, r3, #30
 80023de:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80023e0:	4b8e      	ldr	r3, [pc, #568]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	079b      	lsls	r3, r3, #30
 80023e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023e8:	4013      	ands	r3, r2
 80023ea:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80023f6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002400:	4013      	ands	r3, r2
 8002402:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002418:	4013      	ands	r3, r2
 800241a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002426:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002430:	4013      	ands	r3, r2
 8002432:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800243e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002448:	4013      	ands	r3, r2
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002452:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002460:	4013      	ands	r3, r2
 8002462:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d011      	beq.n	8002496 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002488:	651a      	str	r2, [r3, #80]	; 0x50
 800248a:	4b64      	ldr	r3, [pc, #400]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa5a 	bl	800294a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01e      	beq.n	80024e2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d017      	beq.n	80024e2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	4013      	ands	r3, r2
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d2:	651a      	str	r2, [r3, #80]	; 0x50
 80024d4:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80024da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fa0b 	bl	80028f8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80024e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00d      	beq.n	8002504 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_FDCAN_IRQHandler+0x250>)
 80024f0:	400b      	ands	r3, r1
 80024f2:	6513      	str	r3, [r2, #80]	; 0x50
 80024f4:	4a49      	ldr	r2, [pc, #292]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	0f9b      	lsrs	r3, r3, #30
 80024fa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80024fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9c4 	bl	800288c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002510:	4b43      	ldr	r3, [pc, #268]	; (8002620 <HAL_FDCAN_IRQHandler+0x250>)
 8002512:	400b      	ands	r3, r1
 8002514:	6513      	str	r3, [r2, #80]	; 0x50
 8002516:	4a41      	ldr	r2, [pc, #260]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 8002518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251a:	0f9b      	lsrs	r3, r3, #30
 800251c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800251e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f9be 	bl	80028a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_FDCAN_IRQHandler+0x250>)
 8002534:	400b      	ands	r3, r1
 8002536:	6513      	str	r3, [r2, #80]	; 0x50
 8002538:	4a38      	ldr	r2, [pc, #224]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 800253a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253c:	0f9b      	lsrs	r3, r3, #30
 800253e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fc74 	bl	8000e30 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002554:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HAL_FDCAN_IRQHandler+0x250>)
 8002556:	400b      	ands	r3, r1
 8002558:	6513      	str	r3, [r2, #80]	; 0x50
 800255a:	4a30      	ldr	r2, [pc, #192]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	0f9b      	lsrs	r3, r3, #30
 8002560:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002562:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f9a7 	bl	80028b8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002574:	2b00      	cmp	r3, #0
 8002576:	d011      	beq.n	800259c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800258e:	651a      	str	r2, [r3, #80]	; 0x50
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 8002592:	2200      	movs	r2, #0
 8002594:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f999 	bl	80028ce <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01e      	beq.n	80025e8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d017      	beq.n	80025e8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025cc:	4013      	ands	r3, r2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d8:	651a      	str	r2, [r3, #80]	; 0x50
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80025e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f97d 	bl	80028e2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00f      	beq.n	8002624 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800260c:	651a      	str	r2, [r3, #80]	; 0x50
 800260e:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_FDCAN_IRQHandler+0x24c>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f97a 	bl	800290e <HAL_FDCAN_RxBufferNewMessageCallback>
 800261a:	e003      	b.n	8002624 <HAL_FDCAN_IRQHandler+0x254>
 800261c:	4000a800 	.word	0x4000a800
 8002620:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d011      	beq.n	8002656 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002648:	651a      	str	r2, [r3, #80]	; 0x50
 800264a:	4b8d      	ldr	r3, [pc, #564]	; (8002880 <HAL_FDCAN_IRQHandler+0x4b0>)
 800264c:	2200      	movs	r2, #0
 800264e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f966 	bl	8002922 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d011      	beq.n	8002688 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800267a:	651a      	str	r2, [r3, #80]	; 0x50
 800267c:	4b80      	ldr	r3, [pc, #512]	; (8002880 <HAL_FDCAN_IRQHandler+0x4b0>)
 800267e:	2200      	movs	r2, #0
 8002680:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f957 	bl	8002936 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d016      	beq.n	80026c4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00f      	beq.n	80026c4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50
 80026ae:	4b74      	ldr	r3, [pc, #464]	; (8002880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026d0:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <HAL_FDCAN_IRQHandler+0x4b4>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	6513      	str	r3, [r2, #80]	; 0x50
 80026d6:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80026d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026da:	0f9b      	lsrs	r3, r3, #30
 80026dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80026de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f946 	bl	8002972 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d011      	beq.n	8002710 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026f2:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_FDCAN_IRQHandler+0x4b4>)
 80026f4:	400b      	ands	r3, r1
 80026f6:	6513      	str	r3, [r2, #80]	; 0x50
 80026f8:	4a61      	ldr	r2, [pc, #388]	; (8002880 <HAL_FDCAN_IRQHandler+0x4b0>)
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	0f9b      	lsrs	r3, r3, #30
 80026fe:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a5c      	ldr	r2, [pc, #368]	; (8002888 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	f040 80a6 	bne.w	8002868 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 809e 	beq.w	8002868 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	4013      	ands	r3, r2
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800274e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	6a3a      	ldr	r2, [r7, #32]
 8002758:	4013      	ands	r3, r2
 800275a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002766:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	4013      	ands	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800277e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8002796:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4013      	ands	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80027b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f8e7 	bl	8002988 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8e7 	bl	800299e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01b      	beq.n	8002816 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d014      	beq.n	8002816 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002802:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	6939      	ldr	r1, [r7, #16]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f8cf 	bl	80029b4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d007      	beq.n	800282c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002824:	69f9      	ldr	r1, [r7, #28]
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8d0 	bl	80029cc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f873 	bl	800295e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002878:	bf00      	nop
 800287a:	3748      	adds	r7, #72	; 0x48
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	4000a800 	.word	0x4000a800
 8002884:	3fcfffff 	.word	0x3fcfffff
 8002888:	4000a000 	.word	0x4000a000

0800288c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80029fa:	4ba7      	ldr	r3, [pc, #668]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	0091      	lsls	r1, r2, #2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	430b      	orrs	r3, r1
 8002a08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a14:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	4413      	add	r3, r2
 8002a30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a3a:	4b97      	ldr	r3, [pc, #604]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	0091      	lsls	r1, r2, #2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6812      	ldr	r2, [r2, #0]
 8002a46:	430b      	orrs	r3, r1
 8002a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a54:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	4413      	add	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002a7c:	4b86      	ldr	r3, [pc, #536]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	0091      	lsls	r1, r2, #2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a96:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	041a      	lsls	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ac4:	4b74      	ldr	r3, [pc, #464]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	0091      	lsls	r1, r2, #2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ade:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae6:	041a      	lsls	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	4413      	add	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002b0c:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	0091      	lsls	r1, r2, #2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002b38:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	0091      	lsls	r1, r2, #2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b52:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	041a      	lsls	r2, r3, #16
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b7a:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	0091      	lsls	r1, r2, #2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	430b      	orrs	r3, r1
 8002b88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b94:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bb0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb8:	061a      	lsls	r2, r3, #24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	009a      	lsls	r2, r3, #2
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	441a      	add	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	441a      	add	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d915      	bls.n	8002cc0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002c94:	e006      	b.n	8002ca4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002c96:	bf00      	nop
 8002c98:	ffff0003 	.word	0xffff0003
 8002c9c:	10002b00 	.word	0x10002b00
 8002ca0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e010      	b.n	8002ce2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e005      	b.n	8002cd4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d3f3      	bcc.n	8002cc8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop

08002cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002cfe:	4b89      	ldr	r3, [pc, #548]	; (8002f24 <HAL_GPIO_Init+0x234>)
 8002d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d02:	e194      	b.n	800302e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8186 	beq.w	8003028 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d005      	beq.n	8002d34 <HAL_GPIO_Init+0x44>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d130      	bne.n	8002d96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0201 	and.w	r2, r3, #1
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b03      	cmp	r3, #3
 8002da0:	d017      	beq.n	8002dd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	2203      	movs	r2, #3
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d123      	bne.n	8002e26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	08da      	lsrs	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3208      	adds	r2, #8
 8002de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	69b9      	ldr	r1, [r7, #24]
 8002e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	2203      	movs	r2, #3
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f003 0203 	and.w	r2, r3, #3
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80e0 	beq.w	8003028 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_GPIO_Init+0x238>)
 8002e6a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e6e:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_GPIO_Init+0x238>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002e78:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_GPIO_Init+0x238>)
 8002e7a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e86:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <HAL_GPIO_Init+0x23c>)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	089b      	lsrs	r3, r3, #2
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	220f      	movs	r2, #15
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <HAL_GPIO_Init+0x240>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d052      	beq.n	8002f58 <HAL_GPIO_Init+0x268>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_GPIO_Init+0x244>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d031      	beq.n	8002f1e <HAL_GPIO_Init+0x22e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <HAL_GPIO_Init+0x248>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d02b      	beq.n	8002f1a <HAL_GPIO_Init+0x22a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_GPIO_Init+0x24c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x226>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_GPIO_Init+0x250>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x222>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	; (8002f44 <HAL_GPIO_Init+0x254>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x21e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_GPIO_Init+0x258>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x21a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_GPIO_Init+0x25c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x216>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a18      	ldr	r2, [pc, #96]	; (8002f50 <HAL_GPIO_Init+0x260>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x212>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_GPIO_Init+0x264>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x20e>
 8002efa:	2309      	movs	r3, #9
 8002efc:	e02d      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002efe:	230a      	movs	r3, #10
 8002f00:	e02b      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f02:	2308      	movs	r3, #8
 8002f04:	e029      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f06:	2307      	movs	r3, #7
 8002f08:	e027      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f0a:	2306      	movs	r3, #6
 8002f0c:	e025      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f0e:	2305      	movs	r3, #5
 8002f10:	e023      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f12:	2304      	movs	r3, #4
 8002f14:	e021      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f16:	2303      	movs	r3, #3
 8002f18:	e01f      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e01d      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01b      	b.n	8002f5a <HAL_GPIO_Init+0x26a>
 8002f22:	bf00      	nop
 8002f24:	58000080 	.word	0x58000080
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	58000400 	.word	0x58000400
 8002f30:	58020000 	.word	0x58020000
 8002f34:	58020400 	.word	0x58020400
 8002f38:	58020800 	.word	0x58020800
 8002f3c:	58020c00 	.word	0x58020c00
 8002f40:	58021000 	.word	0x58021000
 8002f44:	58021400 	.word	0x58021400
 8002f48:	58021800 	.word	0x58021800
 8002f4c:	58021c00 	.word	0x58021c00
 8002f50:	58022000 	.word	0x58022000
 8002f54:	58022400 	.word	0x58022400
 8002f58:	2300      	movs	r3, #0
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	f002 0203 	and.w	r2, r2, #3
 8002f60:	0092      	lsls	r2, r2, #2
 8002f62:	4093      	lsls	r3, r2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f6a:	4938      	ldr	r1, [pc, #224]	; (800304c <HAL_GPIO_Init+0x35c>)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	3302      	adds	r3, #2
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	3301      	adds	r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	f47f ae63 	bne.w	8002d04 <HAL_GPIO_Init+0x14>
  }
}
 800303e:	bf00      	nop
 8003040:	bf00      	nop
 8003042:	3724      	adds	r7, #36	; 0x24
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	58000400 	.word	0x58000400

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800306c:	e003      	b.n	8003076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800306e:	887b      	ldrh	r3, [r7, #2]
 8003070:	041a      	lsls	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	619a      	str	r2, [r3, #24]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	4603      	mov	r3, r0
 800308a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800309c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fc41 	bl	8000930 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e07f      	b.n	80031ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fe42 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	; 0x24
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d107      	bne.n	8003132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	e006      	b.n	8003140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800313e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d104      	bne.n	8003152 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_I2C_Init+0x11c>)
 800315e:	430b      	orrs	r3, r1
 8003160:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003170:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69d9      	ldr	r1, [r3, #28]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	02008000 	.word	0x02008000

080031d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d138      	bne.n	8003260 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e032      	b.n	8003262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800322a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e000      	b.n	8003262 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003260:	2302      	movs	r3, #2
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b20      	cmp	r3, #32
 8003282:	d139      	bne.n	80032f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800328e:	2302      	movs	r3, #2
 8003290:	e033      	b.n	80032fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2224      	movs	r2, #36	; 0x24
 800329e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	2b06      	cmp	r3, #6
 800331a:	d00a      	beq.n	8003332 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e040      	b.n	80033b0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	e03e      	b.n	80033b0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003332:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800333a:	491f      	ldr	r1, [pc, #124]	; (80033b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4313      	orrs	r3, r2
 8003340:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003342:	f7fe fa9d 	bl	8001880 <HAL_GetTick>
 8003346:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003348:	e009      	b.n	800335e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800334a:	f7fe fa99 	bl	8001880 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003358:	d901      	bls.n	800335e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e028      	b.n	80033b0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336a:	d1ee      	bne.n	800334a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b1e      	cmp	r3, #30
 8003370:	d008      	beq.n	8003384 <HAL_PWREx_ConfigSupply+0x7c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b2e      	cmp	r3, #46	; 0x2e
 8003376:	d005      	beq.n	8003384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b1d      	cmp	r3, #29
 800337c:	d002      	beq.n	8003384 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b2d      	cmp	r3, #45	; 0x2d
 8003382:	d114      	bne.n	80033ae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003384:	f7fe fa7c 	bl	8001880 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800338a:	e009      	b.n	80033a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800338c:	f7fe fa78 	bl	8001880 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339a:	d901      	bls.n	80033a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d1ee      	bne.n	800338c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	58024800 	.word	0x58024800

080033bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08c      	sub	sp, #48	; 0x30
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e3f3      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80b3 	beq.w	8003542 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033dc:	4b9e      	ldr	r3, [pc, #632]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033e6:	4b9c      	ldr	r3, [pc, #624]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d007      	beq.n	8003402 <HAL_RCC_OscConfig+0x46>
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	2b18      	cmp	r3, #24
 80033f6:	d112      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d10d      	bne.n	800341e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003402:	4b95      	ldr	r3, [pc, #596]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8098 	beq.w	8003540 <HAL_RCC_OscConfig+0x184>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8093 	bne.w	8003540 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e3cb      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003426:	d106      	bne.n	8003436 <HAL_RCC_OscConfig+0x7a>
 8003428:	4b8b      	ldr	r3, [pc, #556]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a8a      	ldr	r2, [pc, #552]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800342e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e058      	b.n	80034e8 <HAL_RCC_OscConfig+0x12c>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d112      	bne.n	8003464 <HAL_RCC_OscConfig+0xa8>
 800343e:	4b86      	ldr	r3, [pc, #536]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a85      	ldr	r2, [pc, #532]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	4b83      	ldr	r3, [pc, #524]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a82      	ldr	r2, [pc, #520]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003450:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b80      	ldr	r3, [pc, #512]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7f      	ldr	r2, [pc, #508]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800345c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e041      	b.n	80034e8 <HAL_RCC_OscConfig+0x12c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346c:	d112      	bne.n	8003494 <HAL_RCC_OscConfig+0xd8>
 800346e:	4b7a      	ldr	r3, [pc, #488]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a79      	ldr	r2, [pc, #484]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b77      	ldr	r3, [pc, #476]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a76      	ldr	r2, [pc, #472]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003480:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b74      	ldr	r3, [pc, #464]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a73      	ldr	r2, [pc, #460]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e029      	b.n	80034e8 <HAL_RCC_OscConfig+0x12c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800349c:	d112      	bne.n	80034c4 <HAL_RCC_OscConfig+0x108>
 800349e:	4b6e      	ldr	r3, [pc, #440]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a6d      	ldr	r2, [pc, #436]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	4b6b      	ldr	r3, [pc, #428]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a6a      	ldr	r2, [pc, #424]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b68      	ldr	r3, [pc, #416]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a67      	ldr	r2, [pc, #412]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e011      	b.n	80034e8 <HAL_RCC_OscConfig+0x12c>
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a60      	ldr	r2, [pc, #384]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80034e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7fe f9c6 	bl	8001880 <HAL_GetTick>
 80034f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f8:	f7fe f9c2 	bl	8001880 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e355      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800350a:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0x13c>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f9b2 	bl	8001880 <HAL_GetTick>
 800351c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003520:	f7fe f9ae 	bl	8001880 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e341      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003532:	4b49      	ldr	r3, [pc, #292]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x164>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 808c 	beq.w	8003668 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003550:	4b41      	ldr	r3, [pc, #260]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003558:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_RCC_OscConfig+0x1ba>
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2b18      	cmp	r3, #24
 800356a:	d137      	bne.n	80035dc <HAL_RCC_OscConfig+0x220>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d132      	bne.n	80035dc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_RCC_OscConfig+0x1d2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e313      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 0219 	bic.w	r2, r3, #25
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	492f      	ldr	r1, [pc, #188]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a0:	f7fe f96e 	bl	8001880 <HAL_GetTick>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe f96a 	bl	8001880 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e2fd      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035ba:	4b27      	ldr	r3, [pc, #156]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	4920      	ldr	r1, [pc, #128]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035da:	e045      	b.n	8003668 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d026      	beq.n	8003632 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 0219 	bic.w	r2, r3, #25
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4919      	ldr	r1, [pc, #100]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe f943 	bl	8001880 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fe f93f 	bl	8001880 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e2d2      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003610:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0f0      	beq.n	80035fe <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361c:	4b0e      	ldr	r3, [pc, #56]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	490b      	ldr	r1, [pc, #44]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 800362c:	4313      	orrs	r3, r2
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	e01a      	b.n	8003668 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a08      	ldr	r2, [pc, #32]	; (8003658 <HAL_RCC_OscConfig+0x29c>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fe f91f 	bl	8001880 <HAL_GetTick>
 8003642:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003646:	f7fe f91b 	bl	8001880 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d903      	bls.n	800365c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e2ae      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
 8003658:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800365c:	4b99      	ldr	r3, [pc, #612]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1ee      	bne.n	8003646 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d06a      	beq.n	800374a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003674:	4b93      	ldr	r3, [pc, #588]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800367c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800367e:	4b91      	ldr	r3, [pc, #580]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b08      	cmp	r3, #8
 8003688:	d007      	beq.n	800369a <HAL_RCC_OscConfig+0x2de>
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b18      	cmp	r3, #24
 800368e:	d11b      	bne.n	80036c8 <HAL_RCC_OscConfig+0x30c>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d116      	bne.n	80036c8 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800369a:	4b8a      	ldr	r3, [pc, #552]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2f6>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d001      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e281      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b2:	4b84      	ldr	r3, [pc, #528]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	061b      	lsls	r3, r3, #24
 80036c0:	4980      	ldr	r1, [pc, #512]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036c6:	e040      	b.n	800374a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d023      	beq.n	8003718 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036d0:	4b7c      	ldr	r3, [pc, #496]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a7b      	ldr	r2, [pc, #492]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80036d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe f8d0 	bl	8001880 <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036e4:	f7fe f8cc 	bl	8001880 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e25f      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036f6:	4b73      	ldr	r3, [pc, #460]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003702:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	061b      	lsls	r3, r3, #24
 8003710:	496c      	ldr	r1, [pc, #432]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003712:	4313      	orrs	r3, r2
 8003714:	60cb      	str	r3, [r1, #12]
 8003716:	e018      	b.n	800374a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003718:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a69      	ldr	r2, [pc, #420]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800371e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe f8ac 	bl	8001880 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800372c:	f7fe f8a8 	bl	8001880 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e23b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800373e:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d036      	beq.n	80037c4 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d019      	beq.n	8003792 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375e:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003762:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe f889 	bl	8001880 <HAL_GetTick>
 800376e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003772:	f7fe f885 	bl	8001880 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e218      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x3b6>
 8003790:	e018      	b.n	80037c4 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003792:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	4a4b      	ldr	r2, [pc, #300]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379e:	f7fe f86f 	bl	8001880 <HAL_GetTick>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a6:	f7fe f86b 	bl	8001880 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e1fe      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037b8:	4b42      	ldr	r3, [pc, #264]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80037ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f0      	bne.n	80037a6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d036      	beq.n	800383e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d019      	beq.n	800380c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037d8:	4b3a      	ldr	r3, [pc, #232]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a39      	ldr	r2, [pc, #228]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80037de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037e4:	f7fe f84c 	bl	8001880 <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80037ec:	f7fe f848 	bl	8001880 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1db      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037fe:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0x430>
 800380a:	e018      	b.n	800383e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800380c:	4b2d      	ldr	r3, [pc, #180]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003818:	f7fe f832 	bl	8001880 <HAL_GetTick>
 800381c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003820:	f7fe f82e 	bl	8001880 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1c1      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80af 	beq.w	80039aa <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800384c:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_RCC_OscConfig+0x50c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <HAL_RCC_OscConfig+0x50c>)
 8003852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003858:	f7fe f812 	bl	8001880 <HAL_GetTick>
 800385c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003860:	f7fe f80e 	bl	8001880 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e1a1      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <HAL_RCC_OscConfig+0x50c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d106      	bne.n	8003894 <HAL_RCC_OscConfig+0x4d8>
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	6713      	str	r3, [r2, #112]	; 0x70
 8003892:	e05b      	b.n	800394c <HAL_RCC_OscConfig+0x590>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d117      	bne.n	80038cc <HAL_RCC_OscConfig+0x510>
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a08      	ldr	r2, [pc, #32]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80038ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80038b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b8:	4a02      	ldr	r2, [pc, #8]	; (80038c4 <HAL_RCC_OscConfig+0x508>)
 80038ba:	f023 0304 	bic.w	r3, r3, #4
 80038be:	6713      	str	r3, [r2, #112]	; 0x70
 80038c0:	e044      	b.n	800394c <HAL_RCC_OscConfig+0x590>
 80038c2:	bf00      	nop
 80038c4:	58024400 	.word	0x58024400
 80038c8:	58024800 	.word	0x58024800
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b05      	cmp	r3, #5
 80038d2:	d112      	bne.n	80038fa <HAL_RCC_OscConfig+0x53e>
 80038d4:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d8:	4a94      	ldr	r2, [pc, #592]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80038da:	f043 0304 	orr.w	r3, r3, #4
 80038de:	6713      	str	r3, [r2, #112]	; 0x70
 80038e0:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a91      	ldr	r2, [pc, #580]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80038e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	4b8f      	ldr	r3, [pc, #572]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a8e      	ldr	r2, [pc, #568]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	e028      	b.n	800394c <HAL_RCC_OscConfig+0x590>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b85      	cmp	r3, #133	; 0x85
 8003900:	d112      	bne.n	8003928 <HAL_RCC_OscConfig+0x56c>
 8003902:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a89      	ldr	r2, [pc, #548]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003908:	f043 0304 	orr.w	r3, r3, #4
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	4a86      	ldr	r2, [pc, #536]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003918:	6713      	str	r3, [r2, #112]	; 0x70
 800391a:	4b84      	ldr	r3, [pc, #528]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a83      	ldr	r2, [pc, #524]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	e011      	b.n	800394c <HAL_RCC_OscConfig+0x590>
 8003928:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a7f      	ldr	r2, [pc, #508]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	4b7d      	ldr	r3, [pc, #500]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	4a7c      	ldr	r2, [pc, #496]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 800393a:	f023 0304 	bic.w	r3, r3, #4
 800393e:	6713      	str	r3, [r2, #112]	; 0x70
 8003940:	4b7a      	ldr	r3, [pc, #488]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a79      	ldr	r2, [pc, #484]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003954:	f7fd ff94 	bl	8001880 <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fd ff90 	bl	8001880 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e121      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003972:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0ee      	beq.n	800395c <HAL_RCC_OscConfig+0x5a0>
 800397e:	e014      	b.n	80039aa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd ff7e 	bl	8001880 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003986:	e00a      	b.n	800399e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003988:	f7fd ff7a 	bl	8001880 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f241 3288 	movw	r2, #5000	; 0x1388
 8003996:	4293      	cmp	r3, r2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e10b      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80039a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8100 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039b4:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039bc:	2b18      	cmp	r3, #24
 80039be:	f000 80bb 	beq.w	8003b38 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	f040 8095 	bne.w	8003af6 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039cc:	4b57      	ldr	r3, [pc, #348]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a56      	ldr	r2, [pc, #344]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80039d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd ff52 	bl	8001880 <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fd ff4e 	bl	8001880 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0e1      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039f2:	4b4e      	ldr	r3, [pc, #312]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fe:	4b4b      	ldr	r3, [pc, #300]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <HAL_RCC_OscConfig+0x774>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003a0e:	0112      	lsls	r2, r2, #4
 8003a10:	430a      	orrs	r2, r1
 8003a12:	4946      	ldr	r1, [pc, #280]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	628b      	str	r3, [r1, #40]	; 0x28
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a26:	3b01      	subs	r3, #1
 8003a28:	025b      	lsls	r3, r3, #9
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	3b01      	subs	r3, #1
 8003a34:	041b      	lsls	r3, r3, #16
 8003a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	3b01      	subs	r3, #1
 8003a42:	061b      	lsls	r3, r3, #24
 8003a44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a48:	4938      	ldr	r1, [pc, #224]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	4a36      	ldr	r2, [pc, #216]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a5a:	4b34      	ldr	r3, [pc, #208]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5e:	4b35      	ldr	r3, [pc, #212]	; (8003b34 <HAL_RCC_OscConfig+0x778>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a66:	00d2      	lsls	r2, r2, #3
 8003a68:	4930      	ldr	r1, [pc, #192]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a6e:	4b2f      	ldr	r3, [pc, #188]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f023 020c 	bic.w	r2, r3, #12
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	492c      	ldr	r1, [pc, #176]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a80:	4b2a      	ldr	r3, [pc, #168]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f023 0202 	bic.w	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	4927      	ldr	r1, [pc, #156]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a92:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	4a25      	ldr	r2, [pc, #148]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	4a22      	ldr	r2, [pc, #136]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	4a1f      	ldr	r2, [pc, #124]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a19      	ldr	r2, [pc, #100]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fd fed7 	bl	8001880 <HAL_GetTick>
 8003ad2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd fed3 	bl	8001880 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e066      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x71a>
 8003af4:	e05e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fd febd 	bl	8001880 <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fd feb9 	bl	8001880 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e04c      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_OscConfig+0x770>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f0      	bne.n	8003b0a <HAL_RCC_OscConfig+0x74e>
 8003b28:	e044      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7f8>
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
 8003b30:	fffffc0c 	.word	0xfffffc0c
 8003b34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b38:	4b21      	ldr	r3, [pc, #132]	; (8003bc0 <HAL_RCC_OscConfig+0x804>)
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b3e:	4b20      	ldr	r3, [pc, #128]	; (8003bc0 <HAL_RCC_OscConfig+0x804>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d031      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d12a      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d122      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d11a      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	0a5b      	lsrs	r3, r3, #9
 8003b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d111      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d108      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0e1b      	lsrs	r3, r3, #24
 8003ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3730      	adds	r7, #48	; 0x30
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	58024400 	.word	0x58024400

08003bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e19c      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd8:	4b8a      	ldr	r3, [pc, #552]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d910      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be6:	4b87      	ldr	r3, [pc, #540]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f023 020f 	bic.w	r2, r3, #15
 8003bee:	4985      	ldr	r1, [pc, #532]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b83      	ldr	r3, [pc, #524]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e184      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d010      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d908      	bls.n	8003c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c24:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	4975      	ldr	r1, [pc, #468]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d010      	beq.n	8003c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d908      	bls.n	8003c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c52:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	496a      	ldr	r1, [pc, #424]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	4b64      	ldr	r3, [pc, #400]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	69db      	ldr	r3, [r3, #28]
 8003c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d908      	bls.n	8003c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c80:	4b61      	ldr	r3, [pc, #388]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	495e      	ldr	r1, [pc, #376]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d010      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d908      	bls.n	8003cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003cae:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	4953      	ldr	r1, [pc, #332]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d908      	bls.n	8003cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f023 020f 	bic.w	r2, r3, #15
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4947      	ldr	r1, [pc, #284]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d055      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4940      	ldr	r1, [pc, #256]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d107      	bne.n	8003d24 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d14:	4b3c      	ldr	r3, [pc, #240]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d121      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0f6      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d2c:	4b36      	ldr	r3, [pc, #216]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d115      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0ea      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d44:	4b30      	ldr	r3, [pc, #192]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0de      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d54:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d6      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	f023 0207 	bic.w	r2, r3, #7
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4925      	ldr	r1, [pc, #148]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d76:	f7fd fd83 	bl	8001880 <HAL_GetTick>
 8003d7a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7e:	f7fd fd7f 	bl	8001880 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e0be      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d94:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d1eb      	bne.n	8003d7e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d010      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d208      	bcs.n	8003dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc2:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f023 020f 	bic.w	r2, r3, #15
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	490e      	ldr	r1, [pc, #56]	; (8003e08 <HAL_RCC_ClockConfig+0x244>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d214      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 020f 	bic.w	r2, r3, #15
 8003dea:	4906      	ldr	r1, [pc, #24]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <HAL_RCC_ClockConfig+0x240>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e086      	b.n	8003f12 <HAL_RCC_ClockConfig+0x34e>
 8003e04:	52002000 	.word	0x52002000
 8003e08:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d010      	beq.n	8003e3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d208      	bcs.n	8003e3a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e28:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	4939      	ldr	r1, [pc, #228]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d010      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d208      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	492e      	ldr	r1, [pc, #184]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d208      	bcs.n	8003e96 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4922      	ldr	r1, [pc, #136]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d010      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69da      	ldr	r2, [r3, #28]
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d208      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003eb2:	4b1a      	ldr	r3, [pc, #104]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4917      	ldr	r1, [pc, #92]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003ec4:	f000 f834 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 030f 	and.w	r3, r3, #15
 8003ed4:	4912      	ldr	r1, [pc, #72]	; (8003f20 <HAL_RCC_ClockConfig+0x35c>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003ee2:	4b0e      	ldr	r3, [pc, #56]	; (8003f1c <HAL_RCC_ClockConfig+0x358>)
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <HAL_RCC_ClockConfig+0x35c>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <HAL_RCC_ClockConfig+0x360>)
 8003efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003efc:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_RCC_ClockConfig+0x364>)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_RCC_ClockConfig+0x368>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fd f8ac 	bl	8001064 <HAL_InitTick>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
 8003f20:	08008a34 	.word	0x08008a34
 8003f24:	24000004 	.word	0x24000004
 8003f28:	24000000 	.word	0x24000000
 8003f2c:	24000008 	.word	0x24000008

08003f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b089      	sub	sp, #36	; 0x24
 8003f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f36:	4bb3      	ldr	r3, [pc, #716]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f3e:	2b18      	cmp	r3, #24
 8003f40:	f200 8155 	bhi.w	80041ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	080041ef 	.word	0x080041ef
 8003f54:	080041ef 	.word	0x080041ef
 8003f58:	080041ef 	.word	0x080041ef
 8003f5c:	080041ef 	.word	0x080041ef
 8003f60:	080041ef 	.word	0x080041ef
 8003f64:	080041ef 	.word	0x080041ef
 8003f68:	080041ef 	.word	0x080041ef
 8003f6c:	08003fd7 	.word	0x08003fd7
 8003f70:	080041ef 	.word	0x080041ef
 8003f74:	080041ef 	.word	0x080041ef
 8003f78:	080041ef 	.word	0x080041ef
 8003f7c:	080041ef 	.word	0x080041ef
 8003f80:	080041ef 	.word	0x080041ef
 8003f84:	080041ef 	.word	0x080041ef
 8003f88:	080041ef 	.word	0x080041ef
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	080041ef 	.word	0x080041ef
 8003f94:	080041ef 	.word	0x080041ef
 8003f98:	080041ef 	.word	0x080041ef
 8003f9c:	080041ef 	.word	0x080041ef
 8003fa0:	080041ef 	.word	0x080041ef
 8003fa4:	080041ef 	.word	0x080041ef
 8003fa8:	080041ef 	.word	0x080041ef
 8003fac:	08003fe3 	.word	0x08003fe3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fb0:	4b94      	ldr	r3, [pc, #592]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fbc:	4b91      	ldr	r3, [pc, #580]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	08db      	lsrs	r3, r3, #3
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	4a90      	ldr	r2, [pc, #576]	; (8004208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fce:	e111      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fd0:	4b8d      	ldr	r3, [pc, #564]	; (8004208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fd2:	61bb      	str	r3, [r7, #24]
    break;
 8003fd4:	e10e      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	; (800420c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fd8:	61bb      	str	r3, [r7, #24]
    break;
 8003fda:	e10b      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fdc:	4b8c      	ldr	r3, [pc, #560]	; (8004210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fde:	61bb      	str	r3, [r7, #24]
    break;
 8003fe0:	e108      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fe2:	4b88      	ldr	r3, [pc, #544]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fec:	4b85      	ldr	r3, [pc, #532]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ff8:	4b82      	ldr	r3, [pc, #520]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004002:	4b80      	ldr	r3, [pc, #512]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004006:	08db      	lsrs	r3, r3, #3
 8004008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80e1 	beq.w	80041e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b02      	cmp	r3, #2
 800402a:	f000 8083 	beq.w	8004134 <HAL_RCC_GetSysClockFreq+0x204>
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b02      	cmp	r3, #2
 8004032:	f200 80a1 	bhi.w	8004178 <HAL_RCC_GetSysClockFreq+0x248>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x114>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d056      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004042:	e099      	b.n	8004178 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004044:	4b6f      	ldr	r3, [pc, #444]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02d      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004050:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	08db      	lsrs	r3, r3, #3
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800405c:	fa22 f303 	lsr.w	r3, r2, r3
 8004060:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407a:	4b62      	ldr	r3, [pc, #392]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408a:	ed97 6a02 	vldr	s12, [r7, #8]
 800408e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80040aa:	e087      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040be:	4b51      	ldr	r3, [pc, #324]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ee:	e065      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	ee07 3a90 	vmov	s15, r3
 80040f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800421c <HAL_RCC_GetSysClockFreq+0x2ec>
 80040fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004102:	4b40      	ldr	r3, [pc, #256]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004112:	ed97 6a02 	vldr	s12, [r7, #8]
 8004116:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800411a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004132:	e043      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	ee07 3a90 	vmov	s15, r3
 800413a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004146:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004156:	ed97 6a02 	vldr	s12, [r7, #8]
 800415a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800415e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800416a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004176:	e021      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	ee07 3a90 	vmov	s15, r3
 800417e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004182:	eddf 6a26 	vldr	s13, [pc, #152]	; 800421c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418a:	4b1e      	ldr	r3, [pc, #120]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419a:	ed97 6a02 	vldr	s12, [r7, #8]
 800419e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041bc:	4b11      	ldr	r3, [pc, #68]	; (8004204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	0a5b      	lsrs	r3, r3, #9
 80041c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c6:	3301      	adds	r3, #1
 80041c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	ee07 3a90 	vmov	s15, r3
 80041d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e0:	ee17 3a90 	vmov	r3, s15
 80041e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041e6:	e005      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
    break;
 80041ec:	e002      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041ee:	4b07      	ldr	r3, [pc, #28]	; (800420c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041f0:	61bb      	str	r3, [r7, #24]
    break;
 80041f2:	bf00      	nop
  }

  return sysclockfreq;
 80041f4:	69bb      	ldr	r3, [r7, #24]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	58024400 	.word	0x58024400
 8004208:	03d09000 	.word	0x03d09000
 800420c:	003d0900 	.word	0x003d0900
 8004210:	016e3600 	.word	0x016e3600
 8004214:	46000000 	.word	0x46000000
 8004218:	4c742400 	.word	0x4c742400
 800421c:	4a742400 	.word	0x4a742400
 8004220:	4bb71b00 	.word	0x4bb71b00

08004224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800422a:	f7ff fe81 	bl	8003f30 <HAL_RCC_GetSysClockFreq>
 800422e:	4602      	mov	r2, r0
 8004230:	4b10      	ldr	r3, [pc, #64]	; (8004274 <HAL_RCC_GetHCLKFreq+0x50>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	0a1b      	lsrs	r3, r3, #8
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	490f      	ldr	r1, [pc, #60]	; (8004278 <HAL_RCC_GetHCLKFreq+0x54>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <HAL_RCC_GetHCLKFreq+0x50>)
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 030f 	and.w	r3, r3, #15
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <HAL_RCC_GetHCLKFreq+0x54>)
 8004252:	5cd3      	ldrb	r3, [r2, r3]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <HAL_RCC_GetHCLKFreq+0x58>)
 8004260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004262:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <HAL_RCC_GetHCLKFreq+0x58>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	58024400 	.word	0x58024400
 8004278:	08008a34 	.word	0x08008a34
 800427c:	24000004 	.word	0x24000004
 8004280:	24000000 	.word	0x24000000

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004288:	f7ff ffcc 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	091b      	lsrs	r3, r3, #4
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	58024400 	.word	0x58024400
 80042ac:	08008a34 	.word	0x08008a34

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80042b4:	f7ff ffb6 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	58024400 	.word	0x58024400
 80042d8:	08008a34 	.word	0x08008a34

080042dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	223f      	movs	r2, #63	; 0x3f
 80042ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0207 	and.w	r2, r3, #7
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 020f 	and.w	r2, r3, #15
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_GetClockConfig+0x7c>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_GetClockConfig+0x80>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	601a      	str	r2, [r3, #0]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	58024400 	.word	0x58024400
 800435c:	52002000 	.word	0x52002000

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004368:	2300      	movs	r3, #0
 800436a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800436c:	2300      	movs	r3, #0
 800436e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004380:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004384:	d02a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004386:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800438a:	d824      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800438c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004390:	d018      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004396:	d81e      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800439c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a0:	d007      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043a2:	e018      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a4:	4ba6      	ldr	r3, [pc, #664]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	4aa5      	ldr	r2, [pc, #660]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043b0:	e015      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2102      	movs	r1, #2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f001 f99b 	bl	80056f4 <RCCEx_PLL2_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043c2:	e00c      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	3324      	adds	r3, #36	; 0x24
 80043c8:	2102      	movs	r1, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fa44 	bl	8005858 <RCCEx_PLL3_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
      break;
 80043da:	e000      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d109      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80043e4:	4b96      	ldr	r3, [pc, #600]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043f0:	4993      	ldr	r1, [pc, #588]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	650b      	str	r3, [r1, #80]	; 0x50
 80043f6:	e001      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d03d      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	2b04      	cmp	r3, #4
 800440e:	d826      	bhi.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004410:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800442d 	.word	0x0800442d
 800441c:	0800443b 	.word	0x0800443b
 8004420:	0800444d 	.word	0x0800444d
 8004424:	08004465 	.word	0x08004465
 8004428:	08004465 	.word	0x08004465
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442c:	4b84      	ldr	r3, [pc, #528]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4a83      	ldr	r2, [pc, #524]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004438:	e015      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f957 	bl	80056f4 <RCCEx_PLL2_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800444a:	e00c      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3324      	adds	r3, #36	; 0x24
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f001 fa00 	bl	8005858 <RCCEx_PLL3_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800445c:	e003      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
      break;
 8004462:	e000      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800446c:	4b74      	ldr	r3, [pc, #464]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	f023 0207 	bic.w	r2, r3, #7
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	4971      	ldr	r1, [pc, #452]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800447a:	4313      	orrs	r3, r2
 800447c:	650b      	str	r3, [r1, #80]	; 0x50
 800447e:	e001      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800448c:	2b00      	cmp	r3, #0
 800448e:	d04a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004498:	d031      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800449a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800449e:	d82b      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a4:	d02d      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d825      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044ac:	2bc0      	cmp	r3, #192	; 0xc0
 80044ae:	d02a      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80044b0:	2bc0      	cmp	r3, #192	; 0xc0
 80044b2:	d821      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044b4:	2b80      	cmp	r3, #128	; 0x80
 80044b6:	d016      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d81d      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d007      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80044c4:	e018      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c6:	4b5e      	ldr	r3, [pc, #376]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4a5d      	ldr	r2, [pc, #372]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80044d2:	e019      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f90a 	bl	80056f4 <RCCEx_PLL2_Config>
 80044e0:	4603      	mov	r3, r0
 80044e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80044e4:	e010      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3324      	adds	r3, #36	; 0x24
 80044ea:	2100      	movs	r1, #0
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f9b3 	bl	8005858 <RCCEx_PLL3_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80044f6:	e007      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75fb      	strb	r3, [r7, #23]
      break;
 80044fc:	e004      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80044fe:	bf00      	nop
 8004500:	e002      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004502:	bf00      	nop
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800450e:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	4949      	ldr	r1, [pc, #292]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	650b      	str	r3, [r1, #80]	; 0x50
 8004520:	e001      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452e:	2b00      	cmp	r3, #0
 8004530:	d04f      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800453a:	d036      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800453c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004540:	d830      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004546:	d032      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800454c:	d82a      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800454e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004552:	d02e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004554:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004558:	d824      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800455a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800455e:	d018      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d81e      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800456a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456e:	d007      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004570:	e018      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004572:	4b33      	ldr	r3, [pc, #204]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	4a32      	ldr	r2, [pc, #200]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800457c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800457e:	e019      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3304      	adds	r3, #4
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f8b4 	bl	80056f4 <RCCEx_PLL2_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004590:	e010      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3324      	adds	r3, #36	; 0x24
 8004596:	2100      	movs	r1, #0
 8004598:	4618      	mov	r0, r3
 800459a:	f001 f95d 	bl	8005858 <RCCEx_PLL3_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80045a2:	e007      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	75fb      	strb	r3, [r7, #23]
      break;
 80045a8:	e004      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80045aa:	bf00      	nop
 80045ac:	e002      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80045ae:	bf00      	nop
 80045b0:	e000      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80045b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b4:	7dfb      	ldrb	r3, [r7, #23]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80045bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045be:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	491e      	ldr	r1, [pc, #120]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	650b      	str	r3, [r1, #80]	; 0x50
 80045cc:	e001      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d034      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d01c      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80045e6:	2b30      	cmp	r3, #48	; 0x30
 80045e8:	d817      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d00c      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d813      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d016      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d10f      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	4a10      	ldr	r2, [pc, #64]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004604:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004606:	e00e      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	2102      	movs	r1, #2
 800460e:	4618      	mov	r0, r3
 8004610:	f001 f870 	bl	80056f4 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004618:	e005      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004620:	bf00      	nop
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8004624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004626:	7dfb      	ldrb	r3, [r7, #23]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800462c:	4b04      	ldr	r3, [pc, #16]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004638:	4901      	ldr	r1, [pc, #4]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800463e:	e003      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004640:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d047      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465c:	d030      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004662:	d82a      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004668:	d02c      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800466a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800466e:	d824      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004674:	d018      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467a:	d81e      	bhi.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d007      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8004686:	e018      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004688:	4bb0      	ldr	r3, [pc, #704]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4aaf      	ldr	r2, [pc, #700]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800468e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004694:	e017      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	3304      	adds	r3, #4
 800469a:	2100      	movs	r1, #0
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f829 	bl	80056f4 <RCCEx_PLL2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046a6:	e00e      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3324      	adds	r3, #36	; 0x24
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f8d2 	bl	8005858 <RCCEx_PLL3_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046b8:	e005      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	75fb      	strb	r3, [r7, #23]
      break;
 80046be:	e002      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80046c0:	bf00      	nop
 80046c2:	e000      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80046c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046cc:	4b9f      	ldr	r3, [pc, #636]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d8:	499c      	ldr	r1, [pc, #624]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	650b      	str	r3, [r1, #80]	; 0x50
 80046de:	e001      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d049      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046f8:	d02e      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80046fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046fe:	d828      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004700:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004704:	d02a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004706:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800470a:	d822      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800470c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004710:	d026      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004712:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004716:	d81c      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800471c:	d010      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800471e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004722:	d816      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01d      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d111      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 ffdd 	bl	80056f4 <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800473e:	e012      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f001 f886 	bl	8005858 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004750:	e009      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
      break;
 8004756:	e006      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004758:	bf00      	nop
 800475a:	e004      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d109      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800476c:	4b77      	ldr	r3, [pc, #476]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004778:	4974      	ldr	r1, [pc, #464]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800477a:	4313      	orrs	r3, r2
 800477c:	650b      	str	r3, [r1, #80]	; 0x50
 800477e:	e001      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d053      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004796:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800479a:	d034      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800479c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80047a0:	d82e      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80047a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047a6:	d030      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80047a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ac:	d828      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80047ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b2:	d02c      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80047b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b8:	d822      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80047ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047be:	d028      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80047c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047c4:	d81c      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80047c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ca:	d010      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80047cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d0:	d816      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01f      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80047d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047da:	d111      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 ff86 	bl	80056f4 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047ec:	e014      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3324      	adds	r3, #36	; 0x24
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f82f 	bl	8005858 <RCCEx_PLL3_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047fe:	e00b      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004806:	bf00      	nop
 8004808:	e006      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800480a:	bf00      	nop
 800480c:	e004      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8004816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800481e:	4b4b      	ldr	r3, [pc, #300]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800482c:	4947      	ldr	r1, [pc, #284]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	658b      	str	r3, [r1, #88]	; 0x58
 8004832:	e001      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d02f      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484c:	d00e      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800484e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004852:	d814      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d015      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800485c:	d10f      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485e:	4b3b      	ldr	r3, [pc, #236]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	4a3a      	ldr	r2, [pc, #232]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800486a:	e00c      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3304      	adds	r3, #4
 8004870:	2101      	movs	r1, #1
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff3e 	bl	80056f4 <RCCEx_PLL2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800487c:	e003      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	75fb      	strb	r3, [r7, #23]
      break;
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d109      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800488c:	4b2f      	ldr	r3, [pc, #188]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004898:	492c      	ldr	r1, [pc, #176]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800489a:	4313      	orrs	r3, r2
 800489c:	650b      	str	r3, [r1, #80]	; 0x50
 800489e:	e001      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d032      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d81b      	bhi.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048d1 	.word	0x080048d1
 80048c8:	080048df 	.word	0x080048df
 80048cc:	080048f7 	.word	0x080048f7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b1e      	ldr	r3, [pc, #120]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048dc:	e00c      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2102      	movs	r1, #2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 ff05 	bl	80056f4 <RCCEx_PLL2_Config>
 80048ea:	4603      	mov	r3, r0
 80048ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048ee:	e003      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
      break;
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80048f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80048fe:	4b13      	ldr	r3, [pc, #76]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8004900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004902:	f023 0203 	bic.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	4910      	ldr	r1, [pc, #64]	; (800494c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800490c:	4313      	orrs	r3, r2
 800490e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004910:	e001      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 808a 	beq.w	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800492a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800492e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004930:	f7fc ffa6 	bl	8001880 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004936:	e00d      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004938:	f7fc ffa2 	bl	8001880 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b64      	cmp	r3, #100	; 0x64
 8004944:	d906      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	75fb      	strb	r3, [r7, #23]
        break;
 800494a:	e009      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x600>
 800494c:	58024400 	.word	0x58024400
 8004950:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004954:	4bba      	ldr	r3, [pc, #744]	; (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0eb      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8004960:	7dfb      	ldrb	r3, [r7, #23]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d166      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004966:	4bb7      	ldr	r3, [pc, #732]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004968:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004970:	4053      	eors	r3, r2
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d013      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800497a:	4bb2      	ldr	r3, [pc, #712]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004982:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004984:	4baf      	ldr	r3, [pc, #700]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4aae      	ldr	r2, [pc, #696]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800498a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004990:	4bac      	ldr	r3, [pc, #688]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4aab      	ldr	r2, [pc, #684]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800499c:	4aa9      	ldr	r2, [pc, #676]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ac:	d115      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fc ff67 	bl	8001880 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049b4:	e00b      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fc ff63 	bl	8001880 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d902      	bls.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	75fb      	strb	r3, [r7, #23]
            break;
 80049cc:	e005      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049ce:	4b9d      	ldr	r3, [pc, #628]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0ed      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80049da:	7dfb      	ldrb	r3, [r7, #23]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d126      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ee:	d10d      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80049f0:	4b94      	ldr	r3, [pc, #592]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049fe:	0919      	lsrs	r1, r3, #4
 8004a00:	4b91      	ldr	r3, [pc, #580]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004a02:	400b      	ands	r3, r1
 8004a04:	498f      	ldr	r1, [pc, #572]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	610b      	str	r3, [r1, #16]
 8004a0a:	e005      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004a0c:	4b8d      	ldr	r3, [pc, #564]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	4a8c      	ldr	r2, [pc, #560]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a16:	6113      	str	r3, [r2, #16]
 8004a18:	4b8a      	ldr	r3, [pc, #552]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a26:	4987      	ldr	r1, [pc, #540]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	670b      	str	r3, [r1, #112]	; 0x70
 8004a2c:	e004      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a2e:	7dfb      	ldrb	r3, [r7, #23]
 8004a30:	75bb      	strb	r3, [r7, #22]
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d07f      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	2b28      	cmp	r3, #40	; 0x28
 8004a4c:	d866      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004a4e:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004b23 	.word	0x08004b23
 8004a58:	08004b1d 	.word	0x08004b1d
 8004a5c:	08004b1d 	.word	0x08004b1d
 8004a60:	08004b1d 	.word	0x08004b1d
 8004a64:	08004b1d 	.word	0x08004b1d
 8004a68:	08004b1d 	.word	0x08004b1d
 8004a6c:	08004b1d 	.word	0x08004b1d
 8004a70:	08004b1d 	.word	0x08004b1d
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004b1d 	.word	0x08004b1d
 8004a7c:	08004b1d 	.word	0x08004b1d
 8004a80:	08004b1d 	.word	0x08004b1d
 8004a84:	08004b1d 	.word	0x08004b1d
 8004a88:	08004b1d 	.word	0x08004b1d
 8004a8c:	08004b1d 	.word	0x08004b1d
 8004a90:	08004b1d 	.word	0x08004b1d
 8004a94:	08004b0b 	.word	0x08004b0b
 8004a98:	08004b1d 	.word	0x08004b1d
 8004a9c:	08004b1d 	.word	0x08004b1d
 8004aa0:	08004b1d 	.word	0x08004b1d
 8004aa4:	08004b1d 	.word	0x08004b1d
 8004aa8:	08004b1d 	.word	0x08004b1d
 8004aac:	08004b1d 	.word	0x08004b1d
 8004ab0:	08004b1d 	.word	0x08004b1d
 8004ab4:	08004b23 	.word	0x08004b23
 8004ab8:	08004b1d 	.word	0x08004b1d
 8004abc:	08004b1d 	.word	0x08004b1d
 8004ac0:	08004b1d 	.word	0x08004b1d
 8004ac4:	08004b1d 	.word	0x08004b1d
 8004ac8:	08004b1d 	.word	0x08004b1d
 8004acc:	08004b1d 	.word	0x08004b1d
 8004ad0:	08004b1d 	.word	0x08004b1d
 8004ad4:	08004b23 	.word	0x08004b23
 8004ad8:	08004b1d 	.word	0x08004b1d
 8004adc:	08004b1d 	.word	0x08004b1d
 8004ae0:	08004b1d 	.word	0x08004b1d
 8004ae4:	08004b1d 	.word	0x08004b1d
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b1d 	.word	0x08004b1d
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b23 	.word	0x08004b23
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	2101      	movs	r1, #1
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fdf8 	bl	80056f4 <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3324      	adds	r3, #36	; 0x24
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fea1 	bl	8005858 <RCCEx_PLL3_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b24:	7dfb      	ldrb	r3, [r7, #23]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b2a:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b38:	4942      	ldr	r1, [pc, #264]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	654b      	str	r3, [r1, #84]	; 0x54
 8004b3e:	e001      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
 8004b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d038      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b54:	2b05      	cmp	r3, #5
 8004b56:	d821      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004b58:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5e:	bf00      	nop
 8004b60:	08004ba3 	.word	0x08004ba3
 8004b64:	08004b79 	.word	0x08004b79
 8004b68:	08004b8b 	.word	0x08004b8b
 8004b6c:	08004ba3 	.word	0x08004ba3
 8004b70:	08004ba3 	.word	0x08004ba3
 8004b74:	08004ba3 	.word	0x08004ba3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fdb8 	bl	80056f4 <RCCEx_PLL2_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b88:	e00c      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3324      	adds	r3, #36	; 0x24
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fe61 	bl	8005858 <RCCEx_PLL3_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8004ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004baa:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f023 0207 	bic.w	r2, r3, #7
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bb6:	4923      	ldr	r1, [pc, #140]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	654b      	str	r3, [r1, #84]	; 0x54
 8004bbc:	e001      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d040      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d821      	bhi.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c23 	.word	0x08004c23
 8004be4:	08004bf9 	.word	0x08004bf9
 8004be8:	08004c0b 	.word	0x08004c0b
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c23 	.word	0x08004c23
 8004bf4:	08004c23 	.word	0x08004c23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fd78 	bl	80056f4 <RCCEx_PLL2_Config>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c08:	e00c      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fe21 	bl	8005858 <RCCEx_PLL3_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c1a:	e003      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8004c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d110      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	f023 0207 	bic.w	r2, r3, #7
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c38:	4902      	ldr	r1, [pc, #8]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8004c3e:	e007      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8004c40:	58024800 	.word	0x58024800
 8004c44:	58024400 	.word	0x58024400
 8004c48:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d04b      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c66:	d02e      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c6c:	d828      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c72:	d02a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d822      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004c7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c7e:	d026      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c84:	d81c      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8a:	d010      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c90:	d816      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01d      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004c96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9a:	d111      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fd26 	bl	80056f4 <RCCEx_PLL2_Config>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cac:	e012      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3324      	adds	r3, #36	; 0x24
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fdcf 	bl	8005858 <RCCEx_PLL3_Config>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cc4:	e006      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004cca:	bf00      	nop
 8004ccc:	e002      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e000      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8004cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cda:	4bb3      	ldr	r3, [pc, #716]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce8:	49af      	ldr	r1, [pc, #700]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	654b      	str	r3, [r1, #84]	; 0x54
 8004cee:	e001      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
 8004cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d04b      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d0a:	d02e      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004d0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d10:	d828      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d16:	d02a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1c:	d822      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d22:	d026      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d28:	d81c      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d010      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8004d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d34:	d816      	bhi.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01d      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3e:	d111      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3304      	adds	r3, #4
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fcd4 	bl	80056f4 <RCCEx_PLL2_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d50:	e012      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3324      	adds	r3, #36	; 0x24
 8004d56:	2102      	movs	r1, #2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fd7d 	bl	8005858 <RCCEx_PLL3_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d62:	e009      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
      break;
 8004d68:	e006      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e004      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d7e:	4b8a      	ldr	r3, [pc, #552]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d8c:	4986      	ldr	r1, [pc, #536]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	658b      	str	r3, [r1, #88]	; 0x58
 8004d92:	e001      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d04b      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004daa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dae:	d02e      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004db0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004db4:	d828      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dba:	d02a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc0:	d822      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004dc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dc6:	d026      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004dc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dcc:	d81c      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd2:	d010      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004dd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dd8:	d816      	bhi.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01d      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	d111      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3304      	adds	r3, #4
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fc82 	bl	80056f4 <RCCEx_PLL2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004df4:	e012      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3324      	adds	r3, #36	; 0x24
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fd2b 	bl	8005858 <RCCEx_PLL3_Config>
 8004e02:	4603      	mov	r3, r0
 8004e04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e06:	e009      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e004      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e22:	4b61      	ldr	r3, [pc, #388]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e30:	495d      	ldr	r1, [pc, #372]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	658b      	str	r3, [r1, #88]	; 0x58
 8004e36:	e001      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	7dfb      	ldrb	r3, [r7, #23]
 8004e3a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01a      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e52:	d10a      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3324      	adds	r3, #36	; 0x24
 8004e58:	2102      	movs	r1, #2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fcfc 	bl	8005858 <RCCEx_PLL3_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e6a:	4b4f      	ldr	r3, [pc, #316]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	494b      	ldr	r1, [pc, #300]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d01a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e94:	d10a      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3324      	adds	r3, #36	; 0x24
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fcdb 	bl	8005858 <RCCEx_PLL3_Config>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004eba:	493b      	ldr	r1, [pc, #236]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d034      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed6:	d01d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004edc:	d817      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8004ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee6:	d009      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004ee8:	e011      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fbff 	bl	80056f4 <RCCEx_PLL2_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004efa:	e00c      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3324      	adds	r3, #36	; 0x24
 8004f00:	2102      	movs	r1, #2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fca8 	bl	8005858 <RCCEx_PLL3_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
      break;
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f16:	7dfb      	ldrb	r3, [r7, #23]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f1c:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f2a:	491f      	ldr	r1, [pc, #124]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	658b      	str	r3, [r1, #88]	; 0x58
 8004f30:	e001      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d036      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f4c:	d01c      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004f4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f52:	d816      	bhi.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f58:	d003      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5e:	d007      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004f60:	e00f      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f6e:	e00c      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3324      	adds	r3, #36	; 0x24
 8004f74:	2101      	movs	r1, #1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fc6e 	bl	8005858 <RCCEx_PLL3_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f80:	e003      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	75fb      	strb	r3, [r7, #23]
      break;
 8004f86:	e000      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9e:	4902      	ldr	r1, [pc, #8]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	654b      	str	r3, [r1, #84]	; 0x54
 8004fa4:	e004      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d029      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc8:	d007      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8004fca:	e00f      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fcc:	4b69      	ldr	r3, [pc, #420]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	4a68      	ldr	r2, [pc, #416]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	2102      	movs	r1, #2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fb87 	bl	80056f4 <RCCEx_PLL2_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004fea:	e002      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d109      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ff8:	4b5e      	ldr	r3, [pc, #376]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005004:	495b      	ldr	r1, [pc, #364]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005006:	4313      	orrs	r3, r2
 8005008:	64cb      	str	r3, [r1, #76]	; 0x4c
 800500a:	e001      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500c:	7dfb      	ldrb	r3, [r7, #23]
 800500e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	2102      	movs	r1, #2
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fc18 	bl	8005858 <RCCEx_PLL3_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d032      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005048:	d017      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800504a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504e:	d811      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005054:	d013      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8005056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505a:	d80b      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8005060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005064:	d106      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005066:	4b43      	ldr	r3, [pc, #268]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	4a42      	ldr	r2, [pc, #264]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800506c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005070:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005072:	e007      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	75fb      	strb	r3, [r7, #23]
      break;
 8005078:	e004      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800507a:	bf00      	nop
 800507c:	e002      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800507e:	bf00      	nop
 8005080:	e000      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8005082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005084:	7dfb      	ldrb	r3, [r7, #23]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800508a:	4b3a      	ldr	r3, [pc, #232]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	4936      	ldr	r1, [pc, #216]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800509a:	4313      	orrs	r3, r2
 800509c:	654b      	str	r3, [r1, #84]	; 0x54
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050b0:	4b30      	ldr	r3, [pc, #192]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80050b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050bc:	492d      	ldr	r1, [pc, #180]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d008      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050da:	4926      	ldr	r1, [pc, #152]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d008      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80050ec:	4b21      	ldr	r3, [pc, #132]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f8:	491e      	ldr	r1, [pc, #120]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4a19      	ldr	r2, [pc, #100]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005110:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005114:	6113      	str	r3, [r2, #16]
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005120:	4914      	ldr	r1, [pc, #80]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005122:	4313      	orrs	r3, r2
 8005124:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	da08      	bge.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800512e:	4b11      	ldr	r3, [pc, #68]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005132:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	490e      	ldr	r1, [pc, #56]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800513c:	4313      	orrs	r3, r2
 800513e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	4906      	ldr	r1, [pc, #24]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800515c:	4313      	orrs	r3, r2
 800515e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005160:	7dbb      	ldrb	r3, [r7, #22]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	58024400 	.word	0x58024400

08005178 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800517c:	f7ff f852 	bl	8004224 <HAL_RCC_GetHCLKFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	4904      	ldr	r1, [pc, #16]	; (80051a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005198:	4618      	mov	r0, r3
 800519a:	bd80      	pop	{r7, pc}
 800519c:	58024400 	.word	0x58024400
 80051a0:	08008a34 	.word	0x08008a34

080051a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ac:	4ba1      	ldr	r3, [pc, #644]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80051b6:	4b9f      	ldr	r3, [pc, #636]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	0b1b      	lsrs	r3, r3, #12
 80051bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80051c2:	4b9c      	ldr	r3, [pc, #624]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	091b      	lsrs	r3, r3, #4
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80051ce:	4b99      	ldr	r3, [pc, #612]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	08db      	lsrs	r3, r3, #3
 80051d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8111 	beq.w	8005414 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	f000 8083 	beq.w	8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	f200 80a1 	bhi.w	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d056      	beq.n	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800520e:	e099      	b.n	8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005210:	4b88      	ldr	r3, [pc, #544]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d02d      	beq.n	8005278 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800521c:	4b85      	ldr	r3, [pc, #532]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	08db      	lsrs	r3, r3, #3
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	4a84      	ldr	r2, [pc, #528]	; (8005438 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
 800522c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	4b7b      	ldr	r3, [pc, #492]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a03 	vldr	s12, [r7, #12]
 800525a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005276:	e087      	b.n	8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005440 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a03 	vldr	s12, [r7, #12]
 800529e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ba:	e065      	b.n	8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b59      	ldr	r3, [pc, #356]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052fe:	e043      	b.n	8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005448 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b48      	ldr	r3, [pc, #288]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a03 	vldr	s12, [r7, #12]
 8005326:	eddf 5a45 	vldr	s11, [pc, #276]	; 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005342:	e021      	b.n	8005388 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005444 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005356:	4b37      	ldr	r3, [pc, #220]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005366:	ed97 6a03 	vldr	s12, [r7, #12]
 800536a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800543c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800536e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800537a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800537e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005386:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005388:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	0a5b      	lsrs	r3, r3, #9
 800538e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80053a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ae:	ee17 2a90 	vmov	r2, s15
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80053b6:	4b1f      	ldr	r3, [pc, #124]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	0c1b      	lsrs	r3, r3, #16
 80053bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053dc:	ee17 2a90 	vmov	r2, s15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	0e1b      	lsrs	r3, r3, #24
 80053ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540a:	ee17 2a90 	vmov	r2, s15
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005412:	e008      	b.n	8005426 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	609a      	str	r2, [r3, #8]
}
 8005426:	bf00      	nop
 8005428:	3724      	adds	r7, #36	; 0x24
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	58024400 	.word	0x58024400
 8005438:	03d09000 	.word	0x03d09000
 800543c:	46000000 	.word	0x46000000
 8005440:	4c742400 	.word	0x4c742400
 8005444:	4a742400 	.word	0x4a742400
 8005448:	4bb71b00 	.word	0x4bb71b00

0800544c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005454:	4ba1      	ldr	r3, [pc, #644]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800545e:	4b9f      	ldr	r3, [pc, #636]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	0d1b      	lsrs	r3, r3, #20
 8005464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005468:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800546a:	4b9c      	ldr	r3, [pc, #624]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005476:	4b99      	ldr	r3, [pc, #612]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	08db      	lsrs	r3, r3, #3
 800547c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8111 	beq.w	80056bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b02      	cmp	r3, #2
 800549e:	f000 8083 	beq.w	80055a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	f200 80a1 	bhi.w	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d056      	beq.n	8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80054b6:	e099      	b.n	80055ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b8:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02d      	beq.n	8005520 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054c4:	4b85      	ldr	r3, [pc, #532]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	08db      	lsrs	r3, r3, #3
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	4a84      	ldr	r2, [pc, #528]	; (80056e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
 80054d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ee:	4b7b      	ldr	r3, [pc, #492]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005502:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800551e:	e087      	b.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800552e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005532:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005542:	ed97 6a03 	vldr	s12, [r7, #12]
 8005546:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800554a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800555a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005562:	e065      	b.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	ee07 3a90 	vmov	s15, r3
 800556a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005576:	4b59      	ldr	r3, [pc, #356]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	ed97 6a03 	vldr	s12, [r7, #12]
 800558a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800558e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800559a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055a6:	e043      	b.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80055b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ba:	4b48      	ldr	r3, [pc, #288]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	ee07 3a90 	vmov	s15, r3
 80055c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80055d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055ea:	e021      	b.n	8005630 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80056ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80055fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005606:	ee07 3a90 	vmov	s15, r3
 800560a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800560e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005612:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800561a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800561e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800562a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800562e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	0a5b      	lsrs	r3, r3, #9
 8005636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800564a:	edd7 6a07 	vldr	s13, [r7, #28]
 800564e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005656:	ee17 2a90 	vmov	r2, s15
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800565e:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005678:	edd7 6a07 	vldr	s13, [r7, #28]
 800567c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005684:	ee17 2a90 	vmov	r2, s15
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	0e1b      	lsrs	r3, r3, #24
 8005692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80056aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056b2:	ee17 2a90 	vmov	r2, s15
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80056ba:	e008      	b.n	80056ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
}
 80056ce:	bf00      	nop
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	58024400 	.word	0x58024400
 80056e0:	03d09000 	.word	0x03d09000
 80056e4:	46000000 	.word	0x46000000
 80056e8:	4c742400 	.word	0x4c742400
 80056ec:	4a742400 	.word	0x4a742400
 80056f0:	4bb71b00 	.word	0x4bb71b00

080056f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005702:	4b53      	ldr	r3, [pc, #332]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d101      	bne.n	8005712 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e099      	b.n	8005846 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005712:	4b4f      	ldr	r3, [pc, #316]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a4e      	ldr	r2, [pc, #312]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005718:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800571c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571e:	f7fc f8af 	bl	8001880 <HAL_GetTick>
 8005722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005724:	e008      	b.n	8005738 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005726:	f7fc f8ab 	bl	8001880 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e086      	b.n	8005846 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005738:	4b45      	ldr	r3, [pc, #276]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005744:	4b42      	ldr	r3, [pc, #264]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	493f      	ldr	r1, [pc, #252]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	628b      	str	r3, [r1, #40]	; 0x28
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	3b01      	subs	r3, #1
 800575e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	3b01      	subs	r3, #1
 8005768:	025b      	lsls	r3, r3, #9
 800576a:	b29b      	uxth	r3, r3
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	3b01      	subs	r3, #1
 8005774:	041b      	lsls	r3, r3, #16
 8005776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	3b01      	subs	r3, #1
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005788:	4931      	ldr	r1, [pc, #196]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800578a:	4313      	orrs	r3, r2
 800578c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800578e:	4b30      	ldr	r3, [pc, #192]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	492d      	ldr	r1, [pc, #180]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	f023 0220 	bic.w	r2, r3, #32
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	4928      	ldr	r1, [pc, #160]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80057b2:	4b27      	ldr	r3, [pc, #156]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	4a26      	ldr	r2, [pc, #152]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	f023 0310 	bic.w	r3, r3, #16
 80057bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c2:	4b24      	ldr	r3, [pc, #144]	; (8005854 <RCCEx_PLL2_Config+0x160>)
 80057c4:	4013      	ands	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	69d2      	ldr	r2, [r2, #28]
 80057ca:	00d2      	lsls	r2, r2, #3
 80057cc:	4920      	ldr	r1, [pc, #128]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80057d2:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	4a1e      	ldr	r2, [pc, #120]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057d8:	f043 0310 	orr.w	r3, r3, #16
 80057dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80057e4:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e8:	4a19      	ldr	r2, [pc, #100]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80057f0:	e00f      	b.n	8005812 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d106      	bne.n	8005806 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80057f8:	4b15      	ldr	r3, [pc, #84]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	4a14      	ldr	r2, [pc, #80]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 80057fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005804:	e005      	b.n	8005812 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005806:	4b12      	ldr	r3, [pc, #72]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4a11      	ldr	r2, [pc, #68]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800580c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005812:	4b0f      	ldr	r3, [pc, #60]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a0e      	ldr	r2, [pc, #56]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 8005818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800581c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581e:	f7fc f82f 	bl	8001880 <HAL_GetTick>
 8005822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005824:	e008      	b.n	8005838 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005826:	f7fc f82b 	bl	8001880 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e006      	b.n	8005846 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <RCCEx_PLL2_Config+0x15c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0f0      	beq.n	8005826 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	58024400 	.word	0x58024400
 8005854:	ffff0007 	.word	0xffff0007

08005858 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005866:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b03      	cmp	r3, #3
 8005870:	d101      	bne.n	8005876 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e099      	b.n	80059aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005876:	4b4f      	ldr	r3, [pc, #316]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a4e      	ldr	r2, [pc, #312]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800587c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005880:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005882:	f7fb fffd 	bl	8001880 <HAL_GetTick>
 8005886:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005888:	e008      	b.n	800589c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800588a:	f7fb fff9 	bl	8001880 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e086      	b.n	80059aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800589c:	4b45      	ldr	r3, [pc, #276]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80058a8:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	051b      	lsls	r3, r3, #20
 80058b6:	493f      	ldr	r1, [pc, #252]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	628b      	str	r3, [r1, #40]	; 0x28
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	041b      	lsls	r3, r3, #16
 80058da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058ec:	4931      	ldr	r1, [pc, #196]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80058f2:	4b30      	ldr	r3, [pc, #192]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	492d      	ldr	r1, [pc, #180]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005900:	4313      	orrs	r3, r2
 8005902:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005904:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	4928      	ldr	r1, [pc, #160]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005912:	4313      	orrs	r3, r2
 8005914:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591a:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800591c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005920:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <RCCEx_PLL3_Config+0x160>)
 8005928:	4013      	ands	r3, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	69d2      	ldr	r2, [r2, #28]
 800592e:	00d2      	lsls	r2, r2, #3
 8005930:	4920      	ldr	r1, [pc, #128]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005936:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800593c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d106      	bne.n	8005956 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005948:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800594e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005954:	e00f      	b.n	8005976 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d106      	bne.n	800596a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800595c:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a14      	ldr	r2, [pc, #80]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005962:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005966:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005968:	e005      	b.n	8005976 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800596c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596e:	4a11      	ldr	r2, [pc, #68]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005970:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005974:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a0e      	ldr	r2, [pc, #56]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800597c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005982:	f7fb ff7d 	bl	8001880 <HAL_GetTick>
 8005986:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005988:	e008      	b.n	800599c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800598a:	f7fb ff79 	bl	8001880 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e006      	b.n	80059aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <RCCEx_PLL3_Config+0x15c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0f0      	beq.n	800598a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	58024400 	.word	0x58024400
 80059b8:	ffff0007 	.word	0xffff0007

080059bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e049      	b.n	8005a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fd7c 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f000 fd9a 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d001      	beq.n	8005a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e054      	b.n	8005b2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <HAL_TIM_Base_Start_IT+0xd0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aae:	d01d      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <HAL_TIM_Base_Start_IT+0xdc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	; (8005b4c <HAL_TIM_Base_Start_IT+0xe0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a1c      	ldr	r2, [pc, #112]	; (8005b50 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x80>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a1b      	ldr	r2, [pc, #108]	; (8005b54 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d115      	bne.n	8005b18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <HAL_TIM_Base_Start_IT+0xec>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d015      	beq.n	8005b2a <HAL_TIM_Base_Start_IT+0xbe>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b04:	d011      	beq.n	8005b2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b16:	e008      	b.n	8005b2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e000      	b.n	8005b2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40010400 	.word	0x40010400
 8005b50:	40001800 	.word	0x40001800
 8005b54:	40014000 	.word	0x40014000
 8005b58:	00010007 	.word	0x00010007

08005b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e049      	b.n	8005c02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f841 	bl	8005c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 fcca 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b082      	sub	sp, #8
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e049      	b.n	8005cc4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f841 	bl	8005ccc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	f000 fc69 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0202 	mvn.w	r2, #2
 8005d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7fa fd6c 	bl	8000800 <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fbe4 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fbeb 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0204 	mvn.w	r2, #4
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2202      	movs	r2, #2
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fa fd42 	bl	8000800 <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fbba 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fbc1 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d122      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d11b      	bne.n	8005de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0208 	mvn.w	r2, #8
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2204      	movs	r2, #4
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fa fd18 	bl	8000800 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb90 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fb97 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d122      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d11b      	bne.n	8005e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0210 	mvn.w	r2, #16
 8005e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2208      	movs	r2, #8
 8005e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fa fcee 	bl	8000800 <HAL_TIM_IC_CaptureCallback>
 8005e24:	e005      	b.n	8005e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fb66 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb6d 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d10e      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d107      	bne.n	8005e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f06f 0201 	mvn.w	r2, #1
 8005e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb f8ca 	bl	8000ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	d10e      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d107      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 f9c2 	bl	8007214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9e:	d10e      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b80      	cmp	r3, #128	; 0x80
 8005eac:	d107      	bne.n	8005ebe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 f9b5 	bl	8007228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d10e      	bne.n	8005eea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d107      	bne.n	8005eea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fb1b 	bl	8006520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d10e      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d107      	bne.n	8005f16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f06f 0220 	mvn.w	r2, #32
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f001 f975 	bl	8007200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	60f8      	str	r0, [r7, #12]
 8005f26:	60b9      	str	r1, [r7, #8]
 8005f28:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e088      	b.n	800604e <HAL_TIM_IC_ConfigChannel+0x130>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d11b      	bne.n	8005f82 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f000 fe5b 	bl	8006c14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 020c 	bic.w	r2, r2, #12
 8005f6c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6999      	ldr	r1, [r3, #24]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	619a      	str	r2, [r3, #24]
 8005f80:	e060      	b.n	8006044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d11c      	bne.n	8005fc2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6818      	ldr	r0, [r3, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f000 fedf 	bl	8006d5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005faa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6999      	ldr	r1, [r3, #24]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	021a      	lsls	r2, r3, #8
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	619a      	str	r2, [r3, #24]
 8005fc0:	e040      	b.n	8006044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f000 ff2c 	bl	8006e34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	69da      	ldr	r2, [r3, #28]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 020c 	bic.w	r2, r2, #12
 8005fea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69d9      	ldr	r1, [r3, #28]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	61da      	str	r2, [r3, #28]
 8005ffe:	e021      	b.n	8006044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b0c      	cmp	r3, #12
 8006004:	d11c      	bne.n	8006040 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6819      	ldr	r1, [r3, #0]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f000 ff49 	bl	8006eac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006028:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69d9      	ldr	r1, [r3, #28]
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	021a      	lsls	r2, r3, #8
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	61da      	str	r2, [r3, #28]
 800603e:	e001      	b.n	8006044 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006072:	2302      	movs	r3, #2
 8006074:	e0ff      	b.n	8006276 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b14      	cmp	r3, #20
 8006082:	f200 80f0 	bhi.w	8006266 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006086:	a201      	add	r2, pc, #4	; (adr r2, 800608c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060e1 	.word	0x080060e1
 8006090:	08006267 	.word	0x08006267
 8006094:	08006267 	.word	0x08006267
 8006098:	08006267 	.word	0x08006267
 800609c:	08006121 	.word	0x08006121
 80060a0:	08006267 	.word	0x08006267
 80060a4:	08006267 	.word	0x08006267
 80060a8:	08006267 	.word	0x08006267
 80060ac:	08006163 	.word	0x08006163
 80060b0:	08006267 	.word	0x08006267
 80060b4:	08006267 	.word	0x08006267
 80060b8:	08006267 	.word	0x08006267
 80060bc:	080061a3 	.word	0x080061a3
 80060c0:	08006267 	.word	0x08006267
 80060c4:	08006267 	.word	0x08006267
 80060c8:	08006267 	.word	0x08006267
 80060cc:	080061e5 	.word	0x080061e5
 80060d0:	08006267 	.word	0x08006267
 80060d4:	08006267 	.word	0x08006267
 80060d8:	08006267 	.word	0x08006267
 80060dc:	08006225 	.word	0x08006225
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fabe 	bl	8006668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0208 	orr.w	r2, r2, #8
 80060fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0204 	bic.w	r2, r2, #4
 800610a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6999      	ldr	r1, [r3, #24]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	430a      	orrs	r2, r1
 800611c:	619a      	str	r2, [r3, #24]
      break;
 800611e:	e0a5      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fb2e 	bl	8006788 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6999      	ldr	r1, [r3, #24]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	021a      	lsls	r2, r3, #8
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	619a      	str	r2, [r3, #24]
      break;
 8006160:	e084      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fb97 	bl	800689c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f042 0208 	orr.w	r2, r2, #8
 800617c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0204 	bic.w	r2, r2, #4
 800618c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69d9      	ldr	r1, [r3, #28]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	61da      	str	r2, [r3, #28]
      break;
 80061a0:	e064      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fbff 	bl	80069ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69d9      	ldr	r1, [r3, #28]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	021a      	lsls	r2, r3, #8
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	61da      	str	r2, [r3, #28]
      break;
 80061e2:	e043      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fc48 	bl	8006a80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0208 	orr.w	r2, r2, #8
 80061fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0204 	bic.w	r2, r2, #4
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006222:	e023      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fc8c 	bl	8006b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800623e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	021a      	lsls	r2, r3, #8
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006264:	e002      	b.n	800626c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
      break;
 800626a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006274:	7dfb      	ldrb	r3, [r7, #23]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop

08006280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_TIM_ConfigClockSource+0x1c>
 8006298:	2302      	movs	r3, #2
 800629a:	e0dc      	b.n	8006456 <HAL_TIM_ConfigClockSource+0x1d6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	4b6a      	ldr	r3, [pc, #424]	; (8006460 <HAL_TIM_ConfigClockSource+0x1e0>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a64      	ldr	r2, [pc, #400]	; (8006464 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	f000 80a9 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 80062d8:	4a62      	ldr	r2, [pc, #392]	; (8006464 <HAL_TIM_ConfigClockSource+0x1e4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	f200 80ae 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 80062e0:	4a61      	ldr	r2, [pc, #388]	; (8006468 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	f000 80a1 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 80062e8:	4a5f      	ldr	r2, [pc, #380]	; (8006468 <HAL_TIM_ConfigClockSource+0x1e8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	f200 80a6 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 80062f0:	4a5e      	ldr	r2, [pc, #376]	; (800646c <HAL_TIM_ConfigClockSource+0x1ec>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	f000 8099 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 80062f8:	4a5c      	ldr	r2, [pc, #368]	; (800646c <HAL_TIM_ConfigClockSource+0x1ec>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	f200 809e 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 8006300:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006304:	f000 8091 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 8006308:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800630c:	f200 8096 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 8006310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006314:	f000 8089 	beq.w	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 8006318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631c:	f200 808e 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 8006320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006324:	d03e      	beq.n	80063a4 <HAL_TIM_ConfigClockSource+0x124>
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632a:	f200 8087 	bhi.w	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006332:	f000 8086 	beq.w	8006442 <HAL_TIM_ConfigClockSource+0x1c2>
 8006336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633a:	d87f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 800633c:	2b70      	cmp	r3, #112	; 0x70
 800633e:	d01a      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0xf6>
 8006340:	2b70      	cmp	r3, #112	; 0x70
 8006342:	d87b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d050      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0x16a>
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d877      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 800634c:	2b50      	cmp	r3, #80	; 0x50
 800634e:	d03c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x14a>
 8006350:	2b50      	cmp	r3, #80	; 0x50
 8006352:	d873      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d058      	beq.n	800640a <HAL_TIM_ConfigClockSource+0x18a>
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d86f      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 800635c:	2b30      	cmp	r3, #48	; 0x30
 800635e:	d064      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d86b      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d060      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d867      	bhi.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d05c      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 8006370:	2b10      	cmp	r3, #16
 8006372:	d05a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0x1aa>
 8006374:	e062      	b.n	800643c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6899      	ldr	r1, [r3, #8]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f000 fded 	bl	8006f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	609a      	str	r2, [r3, #8]
      break;
 80063a2:	e04f      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6899      	ldr	r1, [r3, #8]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f000 fdd6 	bl	8006f64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063c6:	609a      	str	r2, [r3, #8]
      break;
 80063c8:	e03c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	6859      	ldr	r1, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f000 fc90 	bl	8006cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2150      	movs	r1, #80	; 0x50
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fda0 	bl	8006f28 <TIM_ITRx_SetConfig>
      break;
 80063e8:	e02c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6818      	ldr	r0, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6859      	ldr	r1, [r3, #4]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	461a      	mov	r2, r3
 80063f8:	f000 fcec 	bl	8006dd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2160      	movs	r1, #96	; 0x60
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fd90 	bl	8006f28 <TIM_ITRx_SetConfig>
      break;
 8006408:	e01c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	6859      	ldr	r1, [r3, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	461a      	mov	r2, r3
 8006418:	f000 fc70 	bl	8006cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd80 	bl	8006f28 <TIM_ITRx_SetConfig>
      break;
 8006428:	e00c      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 fd77 	bl	8006f28 <TIM_ITRx_SetConfig>
      break;
 800643a:	e003      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	73fb      	strb	r3, [r7, #15]
      break;
 8006440:	e000      	b.n	8006444 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	ffceff88 	.word	0xffceff88
 8006464:	00100040 	.word	0x00100040
 8006468:	00100030 	.word	0x00100030
 800646c:	00100020 	.word	0x00100020

08006470 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b0c      	cmp	r3, #12
 8006482:	d831      	bhi.n	80064e8 <HAL_TIM_ReadCapturedValue+0x78>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	080064c1 	.word	0x080064c1
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064e9 	.word	0x080064e9
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080064cb 	.word	0x080064cb
 80064a0:	080064e9 	.word	0x080064e9
 80064a4:	080064e9 	.word	0x080064e9
 80064a8:	080064e9 	.word	0x080064e9
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064e9 	.word	0x080064e9
 80064b4:	080064e9 	.word	0x080064e9
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	080064df 	.word	0x080064df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064c6:	60fb      	str	r3, [r7, #12]

      break;
 80064c8:	e00f      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d0:	60fb      	str	r3, [r7, #12]

      break;
 80064d2:	e00a      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	60fb      	str	r3, [r7, #12]

      break;
 80064dc:	e005      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e4:	60fb      	str	r3, [r7, #12]

      break;
 80064e6:	e000      	b.n	80064ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80064e8:	bf00      	nop
  }

  return tmpreg;
 80064ea:	68fb      	ldr	r3, [r7, #12]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a40      	ldr	r2, [pc, #256]	; (8006648 <TIM_Base_SetConfig+0x114>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d00f      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3d      	ldr	r2, [pc, #244]	; (800664c <TIM_Base_SetConfig+0x118>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00b      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3c      	ldr	r2, [pc, #240]	; (8006650 <TIM_Base_SetConfig+0x11c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a3b      	ldr	r2, [pc, #236]	; (8006654 <TIM_Base_SetConfig+0x120>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3a      	ldr	r2, [pc, #232]	; (8006658 <TIM_Base_SetConfig+0x124>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d108      	bne.n	8006586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <TIM_Base_SetConfig+0x114>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01f      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006594:	d01b      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <TIM_Base_SetConfig+0x118>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d017      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2b      	ldr	r2, [pc, #172]	; (8006650 <TIM_Base_SetConfig+0x11c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2a      	ldr	r2, [pc, #168]	; (8006654 <TIM_Base_SetConfig+0x120>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00f      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a29      	ldr	r2, [pc, #164]	; (8006658 <TIM_Base_SetConfig+0x124>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00b      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a28      	ldr	r2, [pc, #160]	; (800665c <TIM_Base_SetConfig+0x128>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a27      	ldr	r2, [pc, #156]	; (8006660 <TIM_Base_SetConfig+0x12c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0x9a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <TIM_Base_SetConfig+0x130>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a10      	ldr	r2, [pc, #64]	; (8006648 <TIM_Base_SetConfig+0x114>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_Base_SetConfig+0xf8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a12      	ldr	r2, [pc, #72]	; (8006658 <TIM_Base_SetConfig+0x124>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_Base_SetConfig+0xf8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a11      	ldr	r2, [pc, #68]	; (800665c <TIM_Base_SetConfig+0x128>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_Base_SetConfig+0xf8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a10      	ldr	r2, [pc, #64]	; (8006660 <TIM_Base_SetConfig+0x12c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0xf8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <TIM_Base_SetConfig+0x130>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d103      	bne.n	8006634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	615a      	str	r2, [r3, #20]
}
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40010000 	.word	0x40010000
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40010400 	.word	0x40010400
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800

08006668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006668:	b480      	push	{r7}
 800666a:	b087      	sub	sp, #28
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4b37      	ldr	r3, [pc, #220]	; (8006770 <TIM_OC1_SetConfig+0x108>)
 8006694:	4013      	ands	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0302 	bic.w	r3, r3, #2
 80066b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <TIM_OC1_SetConfig+0x10c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00f      	beq.n	80066e4 <TIM_OC1_SetConfig+0x7c>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <TIM_OC1_SetConfig+0x110>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_OC1_SetConfig+0x7c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a2b      	ldr	r2, [pc, #172]	; (800677c <TIM_OC1_SetConfig+0x114>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_OC1_SetConfig+0x7c>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a2a      	ldr	r2, [pc, #168]	; (8006780 <TIM_OC1_SetConfig+0x118>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC1_SetConfig+0x7c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a29      	ldr	r2, [pc, #164]	; (8006784 <TIM_OC1_SetConfig+0x11c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10c      	bne.n	80066fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0308 	bic.w	r3, r3, #8
 80066ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a1c      	ldr	r2, [pc, #112]	; (8006774 <TIM_OC1_SetConfig+0x10c>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00f      	beq.n	8006726 <TIM_OC1_SetConfig+0xbe>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <TIM_OC1_SetConfig+0x110>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00b      	beq.n	8006726 <TIM_OC1_SetConfig+0xbe>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a1a      	ldr	r2, [pc, #104]	; (800677c <TIM_OC1_SetConfig+0x114>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d007      	beq.n	8006726 <TIM_OC1_SetConfig+0xbe>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a19      	ldr	r2, [pc, #100]	; (8006780 <TIM_OC1_SetConfig+0x118>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d003      	beq.n	8006726 <TIM_OC1_SetConfig+0xbe>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a18      	ldr	r2, [pc, #96]	; (8006784 <TIM_OC1_SetConfig+0x11c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d111      	bne.n	800674a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800672c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	621a      	str	r2, [r3, #32]
}
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	fffeff8f 	.word	0xfffeff8f
 8006774:	40010000 	.word	0x40010000
 8006778:	40010400 	.word	0x40010400
 800677c:	40014000 	.word	0x40014000
 8006780:	40014400 	.word	0x40014400
 8006784:	40014800 	.word	0x40014800

08006788 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0210 	bic.w	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	4b34      	ldr	r3, [pc, #208]	; (8006884 <TIM_OC2_SetConfig+0xfc>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f023 0320 	bic.w	r3, r3, #32
 80067d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a29      	ldr	r2, [pc, #164]	; (8006888 <TIM_OC2_SetConfig+0x100>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_OC2_SetConfig+0x68>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a28      	ldr	r2, [pc, #160]	; (800688c <TIM_OC2_SetConfig+0x104>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10d      	bne.n	800680c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <TIM_OC2_SetConfig+0x100>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d00f      	beq.n	8006834 <TIM_OC2_SetConfig+0xac>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a1d      	ldr	r2, [pc, #116]	; (800688c <TIM_OC2_SetConfig+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00b      	beq.n	8006834 <TIM_OC2_SetConfig+0xac>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <TIM_OC2_SetConfig+0x108>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <TIM_OC2_SetConfig+0xac>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <TIM_OC2_SetConfig+0x10c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_OC2_SetConfig+0xac>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a1a      	ldr	r2, [pc, #104]	; (8006898 <TIM_OC2_SetConfig+0x110>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d113      	bne.n	800685c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800683a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	feff8fff 	.word	0xfeff8fff
 8006888:	40010000 	.word	0x40010000
 800688c:	40010400 	.word	0x40010400
 8006890:	40014000 	.word	0x40014000
 8006894:	40014400 	.word	0x40014400
 8006898:	40014800 	.word	0x40014800

0800689c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4b33      	ldr	r3, [pc, #204]	; (8006994 <TIM_OC3_SetConfig+0xf8>)
 80068c8:	4013      	ands	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a28      	ldr	r2, [pc, #160]	; (8006998 <TIM_OC3_SetConfig+0xfc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC3_SetConfig+0x66>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a27      	ldr	r2, [pc, #156]	; (800699c <TIM_OC3_SetConfig+0x100>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <TIM_OC3_SetConfig+0xfc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <TIM_OC3_SetConfig+0xaa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <TIM_OC3_SetConfig+0x100>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_OC3_SetConfig+0xaa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1b      	ldr	r2, [pc, #108]	; (80069a0 <TIM_OC3_SetConfig+0x104>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d007      	beq.n	8006946 <TIM_OC3_SetConfig+0xaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1a      	ldr	r2, [pc, #104]	; (80069a4 <TIM_OC3_SetConfig+0x108>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_OC3_SetConfig+0xaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a19      	ldr	r2, [pc, #100]	; (80069a8 <TIM_OC3_SetConfig+0x10c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d113      	bne.n	800696e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800694c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	fffeff8f 	.word	0xfffeff8f
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40014400 	.word	0x40014400
 80069a8:	40014800 	.word	0x40014800

080069ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4b24      	ldr	r3, [pc, #144]	; (8006a68 <TIM_OC4_SetConfig+0xbc>)
 80069d8:	4013      	ands	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <TIM_OC4_SetConfig+0xc0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00f      	beq.n	8006a2c <TIM_OC4_SetConfig+0x80>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a18      	ldr	r2, [pc, #96]	; (8006a70 <TIM_OC4_SetConfig+0xc4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00b      	beq.n	8006a2c <TIM_OC4_SetConfig+0x80>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <TIM_OC4_SetConfig+0xc8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d007      	beq.n	8006a2c <TIM_OC4_SetConfig+0x80>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <TIM_OC4_SetConfig+0xcc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d003      	beq.n	8006a2c <TIM_OC4_SetConfig+0x80>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <TIM_OC4_SetConfig+0xd0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d109      	bne.n	8006a40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	019b      	lsls	r3, r3, #6
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	621a      	str	r2, [r3, #32]
}
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	feff8fff 	.word	0xfeff8fff
 8006a6c:	40010000 	.word	0x40010000
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40014400 	.word	0x40014400
 8006a7c:	40014800 	.word	0x40014800

08006a80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4b21      	ldr	r3, [pc, #132]	; (8006b30 <TIM_OC5_SetConfig+0xb0>)
 8006aac:	4013      	ands	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006ac0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	041b      	lsls	r3, r3, #16
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <TIM_OC5_SetConfig+0xb4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_OC5_SetConfig+0x76>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <TIM_OC5_SetConfig+0xb8>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00b      	beq.n	8006af6 <TIM_OC5_SetConfig+0x76>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a16      	ldr	r2, [pc, #88]	; (8006b3c <TIM_OC5_SetConfig+0xbc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_OC5_SetConfig+0x76>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <TIM_OC5_SetConfig+0xc0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_OC5_SetConfig+0x76>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <TIM_OC5_SetConfig+0xc4>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d109      	bne.n	8006b0a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	621a      	str	r2, [r3, #32]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	fffeff8f 	.word	0xfffeff8f
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40014000 	.word	0x40014000
 8006b40:	40014400 	.word	0x40014400
 8006b44:	40014800 	.word	0x40014800

08006b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4b22      	ldr	r3, [pc, #136]	; (8006bfc <TIM_OC6_SetConfig+0xb4>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	051b      	lsls	r3, r3, #20
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a19      	ldr	r2, [pc, #100]	; (8006c00 <TIM_OC6_SetConfig+0xb8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00f      	beq.n	8006bc0 <TIM_OC6_SetConfig+0x78>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a18      	ldr	r2, [pc, #96]	; (8006c04 <TIM_OC6_SetConfig+0xbc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_OC6_SetConfig+0x78>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC6_SetConfig+0xc0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <TIM_OC6_SetConfig+0x78>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC6_SetConfig+0xc4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_OC6_SetConfig+0x78>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <TIM_OC6_SetConfig+0xc8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d109      	bne.n	8006bd4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	feff8fff 	.word	0xfeff8fff
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40010400 	.word	0x40010400
 8006c08:	40014000 	.word	0x40014000
 8006c0c:	40014400 	.word	0x40014400
 8006c10:	40014800 	.word	0x40014800

08006c14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0201 	bic.w	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4a28      	ldr	r2, [pc, #160]	; (8006ce0 <TIM_TI1_SetConfig+0xcc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01b      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c48:	d017      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a25      	ldr	r2, [pc, #148]	; (8006ce4 <TIM_TI1_SetConfig+0xd0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a24      	ldr	r2, [pc, #144]	; (8006ce8 <TIM_TI1_SetConfig+0xd4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4a23      	ldr	r2, [pc, #140]	; (8006cec <TIM_TI1_SetConfig+0xd8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a22      	ldr	r2, [pc, #136]	; (8006cf0 <TIM_TI1_SetConfig+0xdc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4a21      	ldr	r2, [pc, #132]	; (8006cf4 <TIM_TI1_SetConfig+0xe0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a20      	ldr	r2, [pc, #128]	; (8006cf8 <TIM_TI1_SetConfig+0xe4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d101      	bne.n	8006c7e <TIM_TI1_SetConfig+0x6a>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <TIM_TI1_SetConfig+0x6c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e003      	b.n	8006c9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f023 030a 	bic.w	r3, r3, #10
 8006cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f003 030a 	and.w	r3, r3, #10
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40001800 	.word	0x40001800
 8006cf8:	40014000 	.word	0x40014000

08006cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 030a 	bic.w	r3, r3, #10
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f023 0210 	bic.w	r2, r3, #16
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	031b      	lsls	r3, r3, #12
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	621a      	str	r2, [r3, #32]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	f023 0210 	bic.w	r2, r3, #16
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	031b      	lsls	r3, r3, #12
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	621a      	str	r2, [r3, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	031b      	lsls	r3, r3, #12
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006efe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <TIM_ITRx_SetConfig+0x38>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f043 0307 	orr.w	r3, r3, #7
 8006f4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	609a      	str	r2, [r3, #8]
}
 8006f52:	bf00      	nop
 8006f54:	3714      	adds	r7, #20
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	ffcfff8f 	.word	0xffcfff8f

08006f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	021a      	lsls	r2, r3, #8
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	609a      	str	r2, [r3, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d101      	bne.n	8006fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e06d      	b.n	8007098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a30      	ldr	r2, [pc, #192]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2f      	ldr	r2, [pc, #188]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d108      	bne.n	8007002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a20      	ldr	r2, [pc, #128]	; (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d022      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800702e:	d01d      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1d      	ldr	r2, [pc, #116]	; (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d018      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1a      	ldr	r2, [pc, #104]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00e      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a15      	ldr	r2, [pc, #84]	; (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d009      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d004      	beq.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a15      	ldr	r2, [pc, #84]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d10c      	bne.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	4313      	orrs	r3, r2
 800707c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40010400 	.word	0x40010400
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40001800 	.word	0x40001800
 80070bc:	40014000 	.word	0x40014000

080070c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d101      	bne.n	80070dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070d8:	2302      	movs	r3, #2
 80070da:	e087      	b.n	80071ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4313      	orrs	r3, r2
 800710c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a25      	ldr	r2, [pc, #148]	; (80071fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d106      	bne.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1e      	ldr	r2, [pc, #120]	; (80071f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1d      	ldr	r2, [pc, #116]	; (80071fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d126      	bne.n	80071da <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	051b      	lsls	r3, r3, #20
 8007198:	4313      	orrs	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0e      	ldr	r2, [pc, #56]	; (80071f8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d004      	beq.n	80071cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a0d      	ldr	r2, [pc, #52]	; (80071fc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d106      	bne.n	80071da <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40010400 	.word	0x40010400

08007200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e042      	b.n	80072d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fa fa2d 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2224      	movs	r2, #36	; 0x24
 800726a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f82c 	bl	80072dc <UART_SetConfig>
 8007284:	4603      	mov	r3, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e022      	b.n	80072d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fe7e 	bl	8007f98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 ff05 	bl	80080dc <UART_CheckIdleState>
 80072d2:	4603      	mov	r3, r0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072dc:	b5b0      	push	{r4, r5, r7, lr}
 80072de:	b08e      	sub	sp, #56	; 0x38
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	4313      	orrs	r3, r2
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	4bbf      	ldr	r3, [pc, #764]	; (8007608 <UART_SetConfig+0x32c>)
 800730a:	4013      	ands	r3, r2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007312:	430b      	orrs	r3, r1
 8007314:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4ab5      	ldr	r2, [pc, #724]	; (800760c <UART_SetConfig+0x330>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d004      	beq.n	8007346 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007342:	4313      	orrs	r3, r2
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	4bb0      	ldr	r3, [pc, #704]	; (8007610 <UART_SetConfig+0x334>)
 800734e:	4013      	ands	r3, r2
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6812      	ldr	r2, [r2, #0]
 8007354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007356:	430b      	orrs	r3, r1
 8007358:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	f023 010f 	bic.w	r1, r3, #15
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4aa7      	ldr	r2, [pc, #668]	; (8007614 <UART_SetConfig+0x338>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d176      	bne.n	8007468 <UART_SetConfig+0x18c>
 800737a:	4ba7      	ldr	r3, [pc, #668]	; (8007618 <UART_SetConfig+0x33c>)
 800737c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007382:	2b28      	cmp	r3, #40	; 0x28
 8007384:	d86c      	bhi.n	8007460 <UART_SetConfig+0x184>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0xb0>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	08007431 	.word	0x08007431
 8007390:	08007461 	.word	0x08007461
 8007394:	08007461 	.word	0x08007461
 8007398:	08007461 	.word	0x08007461
 800739c:	08007461 	.word	0x08007461
 80073a0:	08007461 	.word	0x08007461
 80073a4:	08007461 	.word	0x08007461
 80073a8:	08007461 	.word	0x08007461
 80073ac:	08007439 	.word	0x08007439
 80073b0:	08007461 	.word	0x08007461
 80073b4:	08007461 	.word	0x08007461
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007461 	.word	0x08007461
 80073c0:	08007461 	.word	0x08007461
 80073c4:	08007461 	.word	0x08007461
 80073c8:	08007461 	.word	0x08007461
 80073cc:	08007441 	.word	0x08007441
 80073d0:	08007461 	.word	0x08007461
 80073d4:	08007461 	.word	0x08007461
 80073d8:	08007461 	.word	0x08007461
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007461 	.word	0x08007461
 80073e4:	08007461 	.word	0x08007461
 80073e8:	08007461 	.word	0x08007461
 80073ec:	08007449 	.word	0x08007449
 80073f0:	08007461 	.word	0x08007461
 80073f4:	08007461 	.word	0x08007461
 80073f8:	08007461 	.word	0x08007461
 80073fc:	08007461 	.word	0x08007461
 8007400:	08007461 	.word	0x08007461
 8007404:	08007461 	.word	0x08007461
 8007408:	08007461 	.word	0x08007461
 800740c:	08007451 	.word	0x08007451
 8007410:	08007461 	.word	0x08007461
 8007414:	08007461 	.word	0x08007461
 8007418:	08007461 	.word	0x08007461
 800741c:	08007461 	.word	0x08007461
 8007420:	08007461 	.word	0x08007461
 8007424:	08007461 	.word	0x08007461
 8007428:	08007461 	.word	0x08007461
 800742c:	08007459 	.word	0x08007459
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007436:	e326      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007438:	2304      	movs	r3, #4
 800743a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743e:	e322      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007440:	2308      	movs	r3, #8
 8007442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007446:	e31e      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007448:	2310      	movs	r3, #16
 800744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800744e:	e31a      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007450:	2320      	movs	r3, #32
 8007452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007456:	e316      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007458:	2340      	movs	r3, #64	; 0x40
 800745a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800745e:	e312      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007466:	e30e      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a6b      	ldr	r2, [pc, #428]	; (800761c <UART_SetConfig+0x340>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d130      	bne.n	80074d4 <UART_SetConfig+0x1f8>
 8007472:	4b69      	ldr	r3, [pc, #420]	; (8007618 <UART_SetConfig+0x33c>)
 8007474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	2b05      	cmp	r3, #5
 800747c:	d826      	bhi.n	80074cc <UART_SetConfig+0x1f0>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x1a8>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	0800749d 	.word	0x0800749d
 8007488:	080074a5 	.word	0x080074a5
 800748c:	080074ad 	.word	0x080074ad
 8007490:	080074b5 	.word	0x080074b5
 8007494:	080074bd 	.word	0x080074bd
 8007498:	080074c5 	.word	0x080074c5
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a2:	e2f0      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074a4:	2304      	movs	r3, #4
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074aa:	e2ec      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074ac:	2308      	movs	r3, #8
 80074ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074b2:	e2e8      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074b4:	2310      	movs	r3, #16
 80074b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ba:	e2e4      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074bc:	2320      	movs	r3, #32
 80074be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074c2:	e2e0      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074c4:	2340      	movs	r3, #64	; 0x40
 80074c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ca:	e2dc      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d2:	e2d8      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a51      	ldr	r2, [pc, #324]	; (8007620 <UART_SetConfig+0x344>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d130      	bne.n	8007540 <UART_SetConfig+0x264>
 80074de:	4b4e      	ldr	r3, [pc, #312]	; (8007618 <UART_SetConfig+0x33c>)
 80074e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e2:	f003 0307 	and.w	r3, r3, #7
 80074e6:	2b05      	cmp	r3, #5
 80074e8:	d826      	bhi.n	8007538 <UART_SetConfig+0x25c>
 80074ea:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <UART_SetConfig+0x214>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007509 	.word	0x08007509
 80074f4:	08007511 	.word	0x08007511
 80074f8:	08007519 	.word	0x08007519
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	2300      	movs	r3, #0
 800750a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750e:	e2ba      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007510:	2304      	movs	r3, #4
 8007512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007516:	e2b6      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007518:	2308      	movs	r3, #8
 800751a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800751e:	e2b2      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007520:	2310      	movs	r3, #16
 8007522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007526:	e2ae      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007528:	2320      	movs	r3, #32
 800752a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800752e:	e2aa      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007536:	e2a6      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007538:	2380      	movs	r3, #128	; 0x80
 800753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753e:	e2a2      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a37      	ldr	r2, [pc, #220]	; (8007624 <UART_SetConfig+0x348>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d130      	bne.n	80075ac <UART_SetConfig+0x2d0>
 800754a:	4b33      	ldr	r3, [pc, #204]	; (8007618 <UART_SetConfig+0x33c>)
 800754c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b05      	cmp	r3, #5
 8007554:	d826      	bhi.n	80075a4 <UART_SetConfig+0x2c8>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x280>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	08007575 	.word	0x08007575
 8007560:	0800757d 	.word	0x0800757d
 8007564:	08007585 	.word	0x08007585
 8007568:	0800758d 	.word	0x0800758d
 800756c:	08007595 	.word	0x08007595
 8007570:	0800759d 	.word	0x0800759d
 8007574:	2300      	movs	r3, #0
 8007576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757a:	e284      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800757c:	2304      	movs	r3, #4
 800757e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007582:	e280      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007584:	2308      	movs	r3, #8
 8007586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800758a:	e27c      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800758c:	2310      	movs	r3, #16
 800758e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007592:	e278      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007594:	2320      	movs	r3, #32
 8007596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800759a:	e274      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800759c:	2340      	movs	r3, #64	; 0x40
 800759e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a2:	e270      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075aa:	e26c      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1d      	ldr	r2, [pc, #116]	; (8007628 <UART_SetConfig+0x34c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d142      	bne.n	800763c <UART_SetConfig+0x360>
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <UART_SetConfig+0x33c>)
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d838      	bhi.n	8007634 <UART_SetConfig+0x358>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <UART_SetConfig+0x2ec>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075e9 	.word	0x080075e9
 80075d0:	080075f1 	.word	0x080075f1
 80075d4:	080075f9 	.word	0x080075f9
 80075d8:	08007601 	.word	0x08007601
 80075dc:	0800762d 	.word	0x0800762d
 80075e0:	2300      	movs	r3, #0
 80075e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075e6:	e24e      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80075e8:	2304      	movs	r3, #4
 80075ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ee:	e24a      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80075f0:	2308      	movs	r3, #8
 80075f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075f6:	e246      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80075f8:	2310      	movs	r3, #16
 80075fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075fe:	e242      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007600:	2320      	movs	r3, #32
 8007602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007606:	e23e      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007608:	cfff69f3 	.word	0xcfff69f3
 800760c:	58000c00 	.word	0x58000c00
 8007610:	11fff4ff 	.word	0x11fff4ff
 8007614:	40011000 	.word	0x40011000
 8007618:	58024400 	.word	0x58024400
 800761c:	40004400 	.word	0x40004400
 8007620:	40004800 	.word	0x40004800
 8007624:	40004c00 	.word	0x40004c00
 8007628:	40005000 	.word	0x40005000
 800762c:	2340      	movs	r3, #64	; 0x40
 800762e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007632:	e228      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007634:	2380      	movs	r3, #128	; 0x80
 8007636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763a:	e224      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4ab1      	ldr	r2, [pc, #708]	; (8007908 <UART_SetConfig+0x62c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d176      	bne.n	8007734 <UART_SetConfig+0x458>
 8007646:	4bb1      	ldr	r3, [pc, #708]	; (800790c <UART_SetConfig+0x630>)
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764e:	2b28      	cmp	r3, #40	; 0x28
 8007650:	d86c      	bhi.n	800772c <UART_SetConfig+0x450>
 8007652:	a201      	add	r2, pc, #4	; (adr r2, 8007658 <UART_SetConfig+0x37c>)
 8007654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007658:	080076fd 	.word	0x080076fd
 800765c:	0800772d 	.word	0x0800772d
 8007660:	0800772d 	.word	0x0800772d
 8007664:	0800772d 	.word	0x0800772d
 8007668:	0800772d 	.word	0x0800772d
 800766c:	0800772d 	.word	0x0800772d
 8007670:	0800772d 	.word	0x0800772d
 8007674:	0800772d 	.word	0x0800772d
 8007678:	08007705 	.word	0x08007705
 800767c:	0800772d 	.word	0x0800772d
 8007680:	0800772d 	.word	0x0800772d
 8007684:	0800772d 	.word	0x0800772d
 8007688:	0800772d 	.word	0x0800772d
 800768c:	0800772d 	.word	0x0800772d
 8007690:	0800772d 	.word	0x0800772d
 8007694:	0800772d 	.word	0x0800772d
 8007698:	0800770d 	.word	0x0800770d
 800769c:	0800772d 	.word	0x0800772d
 80076a0:	0800772d 	.word	0x0800772d
 80076a4:	0800772d 	.word	0x0800772d
 80076a8:	0800772d 	.word	0x0800772d
 80076ac:	0800772d 	.word	0x0800772d
 80076b0:	0800772d 	.word	0x0800772d
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	08007715 	.word	0x08007715
 80076bc:	0800772d 	.word	0x0800772d
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	0800772d 	.word	0x0800772d
 80076d4:	0800772d 	.word	0x0800772d
 80076d8:	0800771d 	.word	0x0800771d
 80076dc:	0800772d 	.word	0x0800772d
 80076e0:	0800772d 	.word	0x0800772d
 80076e4:	0800772d 	.word	0x0800772d
 80076e8:	0800772d 	.word	0x0800772d
 80076ec:	0800772d 	.word	0x0800772d
 80076f0:	0800772d 	.word	0x0800772d
 80076f4:	0800772d 	.word	0x0800772d
 80076f8:	08007725 	.word	0x08007725
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007702:	e1c0      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800770a:	e1bc      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007712:	e1b8      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800771a:	e1b4      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800771c:	2320      	movs	r3, #32
 800771e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007722:	e1b0      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800772a:	e1ac      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007732:	e1a8      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a75      	ldr	r2, [pc, #468]	; (8007910 <UART_SetConfig+0x634>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d130      	bne.n	80077a0 <UART_SetConfig+0x4c4>
 800773e:	4b73      	ldr	r3, [pc, #460]	; (800790c <UART_SetConfig+0x630>)
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b05      	cmp	r3, #5
 8007748:	d826      	bhi.n	8007798 <UART_SetConfig+0x4bc>
 800774a:	a201      	add	r2, pc, #4	; (adr r2, 8007750 <UART_SetConfig+0x474>)
 800774c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007750:	08007769 	.word	0x08007769
 8007754:	08007771 	.word	0x08007771
 8007758:	08007779 	.word	0x08007779
 800775c:	08007781 	.word	0x08007781
 8007760:	08007789 	.word	0x08007789
 8007764:	08007791 	.word	0x08007791
 8007768:	2300      	movs	r3, #0
 800776a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776e:	e18a      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007776:	e186      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800777e:	e182      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007786:	e17e      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007788:	2320      	movs	r3, #32
 800778a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800778e:	e17a      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007796:	e176      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007798:	2380      	movs	r3, #128	; 0x80
 800779a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779e:	e172      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a5b      	ldr	r2, [pc, #364]	; (8007914 <UART_SetConfig+0x638>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d130      	bne.n	800780c <UART_SetConfig+0x530>
 80077aa:	4b58      	ldr	r3, [pc, #352]	; (800790c <UART_SetConfig+0x630>)
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d826      	bhi.n	8007804 <UART_SetConfig+0x528>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <UART_SetConfig+0x4e0>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	080077d5 	.word	0x080077d5
 80077c0:	080077dd 	.word	0x080077dd
 80077c4:	080077e5 	.word	0x080077e5
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	080077f5 	.word	0x080077f5
 80077d0:	080077fd 	.word	0x080077fd
 80077d4:	2300      	movs	r3, #0
 80077d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077da:	e154      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80077dc:	2304      	movs	r3, #4
 80077de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077e2:	e150      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80077e4:	2308      	movs	r3, #8
 80077e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ea:	e14c      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80077ec:	2310      	movs	r3, #16
 80077ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f2:	e148      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80077f4:	2320      	movs	r3, #32
 80077f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077fa:	e144      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80077fc:	2340      	movs	r3, #64	; 0x40
 80077fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007802:	e140      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007804:	2380      	movs	r3, #128	; 0x80
 8007806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780a:	e13c      	b.n	8007a86 <UART_SetConfig+0x7aa>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a41      	ldr	r2, [pc, #260]	; (8007918 <UART_SetConfig+0x63c>)
 8007812:	4293      	cmp	r3, r2
 8007814:	f040 8082 	bne.w	800791c <UART_SetConfig+0x640>
 8007818:	4b3c      	ldr	r3, [pc, #240]	; (800790c <UART_SetConfig+0x630>)
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007820:	2b28      	cmp	r3, #40	; 0x28
 8007822:	d86d      	bhi.n	8007900 <UART_SetConfig+0x624>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <UART_SetConfig+0x550>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	080078d1 	.word	0x080078d1
 8007830:	08007901 	.word	0x08007901
 8007834:	08007901 	.word	0x08007901
 8007838:	08007901 	.word	0x08007901
 800783c:	08007901 	.word	0x08007901
 8007840:	08007901 	.word	0x08007901
 8007844:	08007901 	.word	0x08007901
 8007848:	08007901 	.word	0x08007901
 800784c:	080078d9 	.word	0x080078d9
 8007850:	08007901 	.word	0x08007901
 8007854:	08007901 	.word	0x08007901
 8007858:	08007901 	.word	0x08007901
 800785c:	08007901 	.word	0x08007901
 8007860:	08007901 	.word	0x08007901
 8007864:	08007901 	.word	0x08007901
 8007868:	08007901 	.word	0x08007901
 800786c:	080078e1 	.word	0x080078e1
 8007870:	08007901 	.word	0x08007901
 8007874:	08007901 	.word	0x08007901
 8007878:	08007901 	.word	0x08007901
 800787c:	08007901 	.word	0x08007901
 8007880:	08007901 	.word	0x08007901
 8007884:	08007901 	.word	0x08007901
 8007888:	08007901 	.word	0x08007901
 800788c:	080078e9 	.word	0x080078e9
 8007890:	08007901 	.word	0x08007901
 8007894:	08007901 	.word	0x08007901
 8007898:	08007901 	.word	0x08007901
 800789c:	08007901 	.word	0x08007901
 80078a0:	08007901 	.word	0x08007901
 80078a4:	08007901 	.word	0x08007901
 80078a8:	08007901 	.word	0x08007901
 80078ac:	080078f1 	.word	0x080078f1
 80078b0:	08007901 	.word	0x08007901
 80078b4:	08007901 	.word	0x08007901
 80078b8:	08007901 	.word	0x08007901
 80078bc:	08007901 	.word	0x08007901
 80078c0:	08007901 	.word	0x08007901
 80078c4:	08007901 	.word	0x08007901
 80078c8:	08007901 	.word	0x08007901
 80078cc:	080078f9 	.word	0x080078f9
 80078d0:	2301      	movs	r3, #1
 80078d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078d6:	e0d6      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80078d8:	2304      	movs	r3, #4
 80078da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078de:	e0d2      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80078e0:	2308      	movs	r3, #8
 80078e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078e6:	e0ce      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ee:	e0ca      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80078f0:	2320      	movs	r3, #32
 80078f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f6:	e0c6      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80078f8:	2340      	movs	r3, #64	; 0x40
 80078fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fe:	e0c2      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007900:	2380      	movs	r3, #128	; 0x80
 8007902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007906:	e0be      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007908:	40011400 	.word	0x40011400
 800790c:	58024400 	.word	0x58024400
 8007910:	40007800 	.word	0x40007800
 8007914:	40007c00 	.word	0x40007c00
 8007918:	40011800 	.word	0x40011800
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4aad      	ldr	r2, [pc, #692]	; (8007bd8 <UART_SetConfig+0x8fc>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d176      	bne.n	8007a14 <UART_SetConfig+0x738>
 8007926:	4bad      	ldr	r3, [pc, #692]	; (8007bdc <UART_SetConfig+0x900>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800792e:	2b28      	cmp	r3, #40	; 0x28
 8007930:	d86c      	bhi.n	8007a0c <UART_SetConfig+0x730>
 8007932:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <UART_SetConfig+0x65c>)
 8007934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007938:	080079dd 	.word	0x080079dd
 800793c:	08007a0d 	.word	0x08007a0d
 8007940:	08007a0d 	.word	0x08007a0d
 8007944:	08007a0d 	.word	0x08007a0d
 8007948:	08007a0d 	.word	0x08007a0d
 800794c:	08007a0d 	.word	0x08007a0d
 8007950:	08007a0d 	.word	0x08007a0d
 8007954:	08007a0d 	.word	0x08007a0d
 8007958:	080079e5 	.word	0x080079e5
 800795c:	08007a0d 	.word	0x08007a0d
 8007960:	08007a0d 	.word	0x08007a0d
 8007964:	08007a0d 	.word	0x08007a0d
 8007968:	08007a0d 	.word	0x08007a0d
 800796c:	08007a0d 	.word	0x08007a0d
 8007970:	08007a0d 	.word	0x08007a0d
 8007974:	08007a0d 	.word	0x08007a0d
 8007978:	080079ed 	.word	0x080079ed
 800797c:	08007a0d 	.word	0x08007a0d
 8007980:	08007a0d 	.word	0x08007a0d
 8007984:	08007a0d 	.word	0x08007a0d
 8007988:	08007a0d 	.word	0x08007a0d
 800798c:	08007a0d 	.word	0x08007a0d
 8007990:	08007a0d 	.word	0x08007a0d
 8007994:	08007a0d 	.word	0x08007a0d
 8007998:	080079f5 	.word	0x080079f5
 800799c:	08007a0d 	.word	0x08007a0d
 80079a0:	08007a0d 	.word	0x08007a0d
 80079a4:	08007a0d 	.word	0x08007a0d
 80079a8:	08007a0d 	.word	0x08007a0d
 80079ac:	08007a0d 	.word	0x08007a0d
 80079b0:	08007a0d 	.word	0x08007a0d
 80079b4:	08007a0d 	.word	0x08007a0d
 80079b8:	080079fd 	.word	0x080079fd
 80079bc:	08007a0d 	.word	0x08007a0d
 80079c0:	08007a0d 	.word	0x08007a0d
 80079c4:	08007a0d 	.word	0x08007a0d
 80079c8:	08007a0d 	.word	0x08007a0d
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a0d 	.word	0x08007a0d
 80079d4:	08007a0d 	.word	0x08007a0d
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	2301      	movs	r3, #1
 80079de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079e2:	e050      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80079e4:	2304      	movs	r3, #4
 80079e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079ea:	e04c      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80079ec:	2308      	movs	r3, #8
 80079ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079f2:	e048      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80079f4:	2310      	movs	r3, #16
 80079f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80079fa:	e044      	b.n	8007a86 <UART_SetConfig+0x7aa>
 80079fc:	2320      	movs	r3, #32
 80079fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a02:	e040      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a04:	2340      	movs	r3, #64	; 0x40
 8007a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a0a:	e03c      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a0c:	2380      	movs	r3, #128	; 0x80
 8007a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a12:	e038      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a71      	ldr	r2, [pc, #452]	; (8007be0 <UART_SetConfig+0x904>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d130      	bne.n	8007a80 <UART_SetConfig+0x7a4>
 8007a1e:	4b6f      	ldr	r3, [pc, #444]	; (8007bdc <UART_SetConfig+0x900>)
 8007a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	d826      	bhi.n	8007a78 <UART_SetConfig+0x79c>
 8007a2a:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <UART_SetConfig+0x754>)
 8007a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a30:	08007a49 	.word	0x08007a49
 8007a34:	08007a51 	.word	0x08007a51
 8007a38:	08007a59 	.word	0x08007a59
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a69 	.word	0x08007a69
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	2302      	movs	r3, #2
 8007a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a4e:	e01a      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a50:	2304      	movs	r3, #4
 8007a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a56:	e016      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a58:	2308      	movs	r3, #8
 8007a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a5e:	e012      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a60:	2310      	movs	r3, #16
 8007a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a66:	e00e      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a68:	2320      	movs	r3, #32
 8007a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a6e:	e00a      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a70:	2340      	movs	r3, #64	; 0x40
 8007a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a76:	e006      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007a7e:	e002      	b.n	8007a86 <UART_SetConfig+0x7aa>
 8007a80:	2380      	movs	r3, #128	; 0x80
 8007a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a55      	ldr	r2, [pc, #340]	; (8007be0 <UART_SetConfig+0x904>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	f040 80f0 	bne.w	8007c72 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	dc46      	bgt.n	8007b28 <UART_SetConfig+0x84c>
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	db75      	blt.n	8007b8a <UART_SetConfig+0x8ae>
 8007a9e:	3b02      	subs	r3, #2
 8007aa0:	2b1e      	cmp	r3, #30
 8007aa2:	d872      	bhi.n	8007b8a <UART_SetConfig+0x8ae>
 8007aa4:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <UART_SetConfig+0x7d0>)
 8007aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aaa:	bf00      	nop
 8007aac:	08007b2f 	.word	0x08007b2f
 8007ab0:	08007b8b 	.word	0x08007b8b
 8007ab4:	08007b37 	.word	0x08007b37
 8007ab8:	08007b8b 	.word	0x08007b8b
 8007abc:	08007b8b 	.word	0x08007b8b
 8007ac0:	08007b8b 	.word	0x08007b8b
 8007ac4:	08007b47 	.word	0x08007b47
 8007ac8:	08007b8b 	.word	0x08007b8b
 8007acc:	08007b8b 	.word	0x08007b8b
 8007ad0:	08007b8b 	.word	0x08007b8b
 8007ad4:	08007b8b 	.word	0x08007b8b
 8007ad8:	08007b8b 	.word	0x08007b8b
 8007adc:	08007b8b 	.word	0x08007b8b
 8007ae0:	08007b8b 	.word	0x08007b8b
 8007ae4:	08007b57 	.word	0x08007b57
 8007ae8:	08007b8b 	.word	0x08007b8b
 8007aec:	08007b8b 	.word	0x08007b8b
 8007af0:	08007b8b 	.word	0x08007b8b
 8007af4:	08007b8b 	.word	0x08007b8b
 8007af8:	08007b8b 	.word	0x08007b8b
 8007afc:	08007b8b 	.word	0x08007b8b
 8007b00:	08007b8b 	.word	0x08007b8b
 8007b04:	08007b8b 	.word	0x08007b8b
 8007b08:	08007b8b 	.word	0x08007b8b
 8007b0c:	08007b8b 	.word	0x08007b8b
 8007b10:	08007b8b 	.word	0x08007b8b
 8007b14:	08007b8b 	.word	0x08007b8b
 8007b18:	08007b8b 	.word	0x08007b8b
 8007b1c:	08007b8b 	.word	0x08007b8b
 8007b20:	08007b8b 	.word	0x08007b8b
 8007b24:	08007b7d 	.word	0x08007b7d
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	d02a      	beq.n	8007b82 <UART_SetConfig+0x8a6>
 8007b2c:	e02d      	b.n	8007b8a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b2e:	f7fd fb23 	bl	8005178 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b32:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b34:	e02f      	b.n	8007b96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b36:	f107 0314 	add.w	r3, r7, #20
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fd fb32 	bl	80051a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b44:	e027      	b.n	8007b96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b46:	f107 0308 	add.w	r3, r7, #8
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fd fc7e 	bl	800544c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b54:	e01f      	b.n	8007b96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b56:	4b21      	ldr	r3, [pc, #132]	; (8007bdc <UART_SetConfig+0x900>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b62:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <UART_SetConfig+0x900>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	08db      	lsrs	r3, r3, #3
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <UART_SetConfig+0x908>)
 8007b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b74:	e00f      	b.n	8007b96 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8007b76:	4b1b      	ldr	r3, [pc, #108]	; (8007be4 <UART_SetConfig+0x908>)
 8007b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b7a:	e00c      	b.n	8007b96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <UART_SetConfig+0x90c>)
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b80:	e009      	b.n	8007b96 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b88:	e005      	b.n	8007b96 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 81e6 	beq.w	8007f6a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	4a12      	ldr	r2, [pc, #72]	; (8007bec <UART_SetConfig+0x910>)
 8007ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bb0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4413      	add	r3, r2
 8007bbc:	6a3a      	ldr	r2, [r7, #32]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d305      	bcc.n	8007bce <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bc8:	6a3a      	ldr	r2, [r7, #32]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d910      	bls.n	8007bf0 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007bd4:	e1c9      	b.n	8007f6a <UART_SetConfig+0xc8e>
 8007bd6:	bf00      	nop
 8007bd8:	40011c00 	.word	0x40011c00
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	58000c00 	.word	0x58000c00
 8007be4:	03d09000 	.word	0x03d09000
 8007be8:	003d0900 	.word	0x003d0900
 8007bec:	08008a54 	.word	0x08008a54
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f04f 0100 	mov.w	r1, #0
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	4ac1      	ldr	r2, [pc, #772]	; (8007f04 <UART_SetConfig+0xc28>)
 8007bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f04f 0300 	mov.w	r3, #0
 8007c08:	f7f8 fb72 	bl	80002f0 <__aeabi_uldivmod>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4610      	mov	r0, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	f04f 0200 	mov.w	r2, #0
 8007c18:	f04f 0300 	mov.w	r3, #0
 8007c1c:	020b      	lsls	r3, r1, #8
 8007c1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c22:	0202      	lsls	r2, r0, #8
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	6849      	ldr	r1, [r1, #4]
 8007c28:	0849      	lsrs	r1, r1, #1
 8007c2a:	4608      	mov	r0, r1
 8007c2c:	f04f 0100 	mov.w	r1, #0
 8007c30:	1814      	adds	r4, r2, r0
 8007c32:	eb43 0501 	adc.w	r5, r3, r1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	4620      	mov	r0, r4
 8007c42:	4629      	mov	r1, r5
 8007c44:	f7f8 fb54 	bl	80002f0 <__aeabi_uldivmod>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c56:	d308      	bcc.n	8007c6a <UART_SetConfig+0x98e>
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c5e:	d204      	bcs.n	8007c6a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c66:	60da      	str	r2, [r3, #12]
 8007c68:	e17f      	b.n	8007f6a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c70:	e17b      	b.n	8007f6a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c7a:	f040 80bd 	bne.w	8007df8 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8007c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	dc48      	bgt.n	8007d18 <UART_SetConfig+0xa3c>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	db7b      	blt.n	8007d82 <UART_SetConfig+0xaa6>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d879      	bhi.n	8007d82 <UART_SetConfig+0xaa6>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <UART_SetConfig+0x9b8>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007d1f 	.word	0x08007d1f
 8007c98:	08007d27 	.word	0x08007d27
 8007c9c:	08007d83 	.word	0x08007d83
 8007ca0:	08007d83 	.word	0x08007d83
 8007ca4:	08007d2f 	.word	0x08007d2f
 8007ca8:	08007d83 	.word	0x08007d83
 8007cac:	08007d83 	.word	0x08007d83
 8007cb0:	08007d83 	.word	0x08007d83
 8007cb4:	08007d3f 	.word	0x08007d3f
 8007cb8:	08007d83 	.word	0x08007d83
 8007cbc:	08007d83 	.word	0x08007d83
 8007cc0:	08007d83 	.word	0x08007d83
 8007cc4:	08007d83 	.word	0x08007d83
 8007cc8:	08007d83 	.word	0x08007d83
 8007ccc:	08007d83 	.word	0x08007d83
 8007cd0:	08007d83 	.word	0x08007d83
 8007cd4:	08007d4f 	.word	0x08007d4f
 8007cd8:	08007d83 	.word	0x08007d83
 8007cdc:	08007d83 	.word	0x08007d83
 8007ce0:	08007d83 	.word	0x08007d83
 8007ce4:	08007d83 	.word	0x08007d83
 8007ce8:	08007d83 	.word	0x08007d83
 8007cec:	08007d83 	.word	0x08007d83
 8007cf0:	08007d83 	.word	0x08007d83
 8007cf4:	08007d83 	.word	0x08007d83
 8007cf8:	08007d83 	.word	0x08007d83
 8007cfc:	08007d83 	.word	0x08007d83
 8007d00:	08007d83 	.word	0x08007d83
 8007d04:	08007d83 	.word	0x08007d83
 8007d08:	08007d83 	.word	0x08007d83
 8007d0c:	08007d83 	.word	0x08007d83
 8007d10:	08007d83 	.word	0x08007d83
 8007d14:	08007d75 	.word	0x08007d75
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	d02e      	beq.n	8007d7a <UART_SetConfig+0xa9e>
 8007d1c:	e031      	b.n	8007d82 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d1e:	f7fc fab1 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8007d22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d24:	e033      	b.n	8007d8e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d26:	f7fc fac3 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8007d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d2c:	e02f      	b.n	8007d8e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d2e:	f107 0314 	add.w	r3, r7, #20
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fd fa36 	bl	80051a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d3c:	e027      	b.n	8007d8e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fd fb82 	bl	800544c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d4c:	e01f      	b.n	8007d8e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d4e:	4b6e      	ldr	r3, [pc, #440]	; (8007f08 <UART_SetConfig+0xc2c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d009      	beq.n	8007d6e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d5a:	4b6b      	ldr	r3, [pc, #428]	; (8007f08 <UART_SetConfig+0xc2c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	08db      	lsrs	r3, r3, #3
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	4a69      	ldr	r2, [pc, #420]	; (8007f0c <UART_SetConfig+0xc30>)
 8007d66:	fa22 f303 	lsr.w	r3, r2, r3
 8007d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d6c:	e00f      	b.n	8007d8e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8007d6e:	4b67      	ldr	r3, [pc, #412]	; (8007f0c <UART_SetConfig+0xc30>)
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d72:	e00c      	b.n	8007d8e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d74:	4b66      	ldr	r3, [pc, #408]	; (8007f10 <UART_SetConfig+0xc34>)
 8007d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d78:	e009      	b.n	8007d8e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d80:	e005      	b.n	8007d8e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80ea 	beq.w	8007f6a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	4a5a      	ldr	r2, [pc, #360]	; (8007f04 <UART_SetConfig+0xc28>)
 8007d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007da8:	005a      	lsls	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	441a      	add	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	2b0f      	cmp	r3, #15
 8007dc0:	d916      	bls.n	8007df0 <UART_SetConfig+0xb14>
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dc8:	d212      	bcs.n	8007df0 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f023 030f 	bic.w	r3, r3, #15
 8007dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	085b      	lsrs	r3, r3, #1
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007de2:	4313      	orrs	r3, r2
 8007de4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	e0bc      	b.n	8007f6a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007df6:	e0b8      	b.n	8007f6a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007df8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	dc4b      	bgt.n	8007e98 <UART_SetConfig+0xbbc>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f2c0 8087 	blt.w	8007f14 <UART_SetConfig+0xc38>
 8007e06:	2b20      	cmp	r3, #32
 8007e08:	f200 8084 	bhi.w	8007f14 <UART_SetConfig+0xc38>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0xb38>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e9f 	.word	0x08007e9f
 8007e18:	08007ea7 	.word	0x08007ea7
 8007e1c:	08007f15 	.word	0x08007f15
 8007e20:	08007f15 	.word	0x08007f15
 8007e24:	08007eaf 	.word	0x08007eaf
 8007e28:	08007f15 	.word	0x08007f15
 8007e2c:	08007f15 	.word	0x08007f15
 8007e30:	08007f15 	.word	0x08007f15
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007f15 	.word	0x08007f15
 8007e3c:	08007f15 	.word	0x08007f15
 8007e40:	08007f15 	.word	0x08007f15
 8007e44:	08007f15 	.word	0x08007f15
 8007e48:	08007f15 	.word	0x08007f15
 8007e4c:	08007f15 	.word	0x08007f15
 8007e50:	08007f15 	.word	0x08007f15
 8007e54:	08007ecf 	.word	0x08007ecf
 8007e58:	08007f15 	.word	0x08007f15
 8007e5c:	08007f15 	.word	0x08007f15
 8007e60:	08007f15 	.word	0x08007f15
 8007e64:	08007f15 	.word	0x08007f15
 8007e68:	08007f15 	.word	0x08007f15
 8007e6c:	08007f15 	.word	0x08007f15
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f15 	.word	0x08007f15
 8007e78:	08007f15 	.word	0x08007f15
 8007e7c:	08007f15 	.word	0x08007f15
 8007e80:	08007f15 	.word	0x08007f15
 8007e84:	08007f15 	.word	0x08007f15
 8007e88:	08007f15 	.word	0x08007f15
 8007e8c:	08007f15 	.word	0x08007f15
 8007e90:	08007f15 	.word	0x08007f15
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	2b40      	cmp	r3, #64	; 0x40
 8007e9a:	d02e      	beq.n	8007efa <UART_SetConfig+0xc1e>
 8007e9c:	e03a      	b.n	8007f14 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9e:	f7fc f9f1 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8007ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007ea4:	e03c      	b.n	8007f20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea6:	f7fc fa03 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8007eaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007eac:	e038      	b.n	8007f20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eae:	f107 0314 	add.w	r3, r7, #20
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd f976 	bl	80051a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ebc:	e030      	b.n	8007f20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ebe:	f107 0308 	add.w	r3, r7, #8
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fd fac2 	bl	800544c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ecc:	e028      	b.n	8007f20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <UART_SetConfig+0xc2c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <UART_SetConfig+0xc2c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	08db      	lsrs	r3, r3, #3
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	4a09      	ldr	r2, [pc, #36]	; (8007f0c <UART_SetConfig+0xc30>)
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007eec:	e018      	b.n	8007f20 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8007eee:	4b07      	ldr	r3, [pc, #28]	; (8007f0c <UART_SetConfig+0xc30>)
 8007ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef2:	e015      	b.n	8007f20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <UART_SetConfig+0xc34>)
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef8:	e012      	b.n	8007f20 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f00:	e00e      	b.n	8007f20 <UART_SetConfig+0xc44>
 8007f02:	bf00      	nop
 8007f04:	08008a54 	.word	0x08008a54
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	03d09000 	.word	0x03d09000
 8007f10:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007f1e:	bf00      	nop
    }

    if (pclk != 0U)
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d021      	beq.n	8007f6a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <UART_SetConfig+0xcb8>)
 8007f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f34:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	085b      	lsrs	r3, r3, #1
 8007f3e:	441a      	add	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4c:	2b0f      	cmp	r3, #15
 8007f4e:	d909      	bls.n	8007f64 <UART_SetConfig+0xc88>
 8007f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f56:	d205      	bcs.n	8007f64 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	e002      	b.n	8007f6a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3738      	adds	r7, #56	; 0x38
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bdb0      	pop	{r4, r5, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	08008a54 	.word	0x08008a54

08007f98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f003 0310 	and.w	r3, r3, #16
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	430a      	orrs	r2, r1
 800806a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01a      	beq.n	80080ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008096:	d10a      	bne.n	80080ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	605a      	str	r2, [r3, #4]
  }
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080ec:	f7f9 fbc8 	bl	8001880 <HAL_GetTick>
 80080f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d10e      	bne.n	800811e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f82f 	bl	8008172 <UART_WaitOnFlagUntilTimeout>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d001      	beq.n	800811e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e025      	b.n	800816a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0304 	and.w	r3, r3, #4
 8008128:	2b04      	cmp	r3, #4
 800812a:	d10e      	bne.n	800814a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f819 	bl	8008172 <UART_WaitOnFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e00f      	b.n	800816a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b09c      	sub	sp, #112	; 0x70
 8008176:	af00      	add	r7, sp, #0
 8008178:	60f8      	str	r0, [r7, #12]
 800817a:	60b9      	str	r1, [r7, #8]
 800817c:	603b      	str	r3, [r7, #0]
 800817e:	4613      	mov	r3, r2
 8008180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008182:	e0a9      	b.n	80082d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	f000 80a5 	beq.w	80082d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818e:	f7f9 fb77 	bl	8001880 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800819a:	429a      	cmp	r2, r3
 800819c:	d302      	bcc.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800819e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d140      	bne.n	8008226 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081b8:	667b      	str	r3, [r7, #100]	; 0x64
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e6      	bne.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	663b      	str	r3, [r7, #96]	; 0x60
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3308      	adds	r3, #8
 80081f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80081f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081fe:	e841 2300 	strex	r3, r2, [r1]
 8008202:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1e5      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2220      	movs	r2, #32
 800820e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e069      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d051      	beq.n	80082d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800823e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008242:	d149      	bne.n	80082d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800824c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008262:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
 800826e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3308      	adds	r3, #8
 8008286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	613b      	str	r3, [r7, #16]
   return(result);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	66bb      	str	r3, [r7, #104]	; 0x68
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3308      	adds	r3, #8
 800829e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082a0:	623a      	str	r2, [r7, #32]
 80082a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	69f9      	ldr	r1, [r7, #28]
 80082a6:	6a3a      	ldr	r2, [r7, #32]
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e5      	bne.n	8008280 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e010      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69da      	ldr	r2, [r3, #28]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	4013      	ands	r3, r2
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	bf0c      	ite	eq
 80082e8:	2301      	moveq	r3, #1
 80082ea:	2300      	movne	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	461a      	mov	r2, r3
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	f43f af46 	beq.w	8008184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3770      	adds	r7, #112	; 0x70
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_UARTEx_DisableFifoMode+0x16>
 8008314:	2302      	movs	r3, #2
 8008316:	e027      	b.n	8008368 <HAL_UARTEx_DisableFifoMode+0x66>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2224      	movs	r2, #36	; 0x24
 8008324:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0201 	bic.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008346:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008384:	2b01      	cmp	r3, #1
 8008386:	d101      	bne.n	800838c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008388:	2302      	movs	r3, #2
 800838a:	e02d      	b.n	80083e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2224      	movs	r2, #36	; 0x24
 8008398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f84f 	bl	800846c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2220      	movs	r2, #32
 80083da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008404:	2302      	movs	r3, #2
 8008406:	e02d      	b.n	8008464 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2224      	movs	r2, #36	; 0x24
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 0201 	bic.w	r2, r2, #1
 800842e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f811 	bl	800846c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2220      	movs	r2, #32
 8008456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008478:	2b00      	cmp	r3, #0
 800847a:	d108      	bne.n	800848e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800848c:	e031      	b.n	80084f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800848e:	2310      	movs	r3, #16
 8008490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008492:	2310      	movs	r3, #16
 8008494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	0e5b      	lsrs	r3, r3, #25
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0f5b      	lsrs	r3, r3, #29
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	7b3a      	ldrb	r2, [r7, #12]
 80084ba:	4911      	ldr	r1, [pc, #68]	; (8008500 <UARTEx_SetNbDataToProcess+0x94>)
 80084bc:	5c8a      	ldrb	r2, [r1, r2]
 80084be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084c2:	7b3a      	ldrb	r2, [r7, #12]
 80084c4:	490f      	ldr	r1, [pc, #60]	; (8008504 <UARTEx_SetNbDataToProcess+0x98>)
 80084c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
 80084d6:	7b7a      	ldrb	r2, [r7, #13]
 80084d8:	4909      	ldr	r1, [pc, #36]	; (8008500 <UARTEx_SetNbDataToProcess+0x94>)
 80084da:	5c8a      	ldrb	r2, [r1, r2]
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e0:	7b7a      	ldrb	r2, [r7, #13]
 80084e2:	4908      	ldr	r1, [pc, #32]	; (8008504 <UARTEx_SetNbDataToProcess+0x98>)
 80084e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80084f2:	bf00      	nop
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	08008a6c 	.word	0x08008a6c
 8008504:	08008a74 	.word	0x08008a74

08008508 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800850c:	4b05      	ldr	r3, [pc, #20]	; (8008524 <SysTick_Handler+0x1c>)
 800850e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008510:	f000 f996 	bl	8008840 <xTaskGetSchedulerState>
 8008514:	4603      	mov	r3, r0
 8008516:	2b01      	cmp	r3, #1
 8008518:	d001      	beq.n	800851e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800851a:	f000 f9fd 	bl	8008918 <xPortSysTickHandler>
  }
}
 800851e:	bf00      	nop
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	e000e010 	.word	0xe000e010

08008528 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	1c5a      	adds	r2, r3, #1
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6892      	ldr	r2, [r2, #8]
 8008586:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	6852      	ldr	r2, [r2, #4]
 8008590:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d103      	bne.n	80085a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	1e5a      	subs	r2, r3, #1
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085ca:	2300      	movs	r3, #0
 80085cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <xTaskIncrementTick+0x148>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f040 808f 	bne.w	80086f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085d8:	4b4d      	ldr	r3, [pc, #308]	; (8008710 <xTaskIncrementTick+0x14c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085e0:	4a4b      	ldr	r2, [pc, #300]	; (8008710 <xTaskIncrementTick+0x14c>)
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d120      	bne.n	800862e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085ec:	4b49      	ldr	r3, [pc, #292]	; (8008714 <xTaskIncrementTick+0x150>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008608:	bf00      	nop
 800860a:	e7fe      	b.n	800860a <xTaskIncrementTick+0x46>
 800860c:	4b41      	ldr	r3, [pc, #260]	; (8008714 <xTaskIncrementTick+0x150>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	4b41      	ldr	r3, [pc, #260]	; (8008718 <xTaskIncrementTick+0x154>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a3f      	ldr	r2, [pc, #252]	; (8008714 <xTaskIncrementTick+0x150>)
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	4a3f      	ldr	r2, [pc, #252]	; (8008718 <xTaskIncrementTick+0x154>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	4b3e      	ldr	r3, [pc, #248]	; (800871c <xTaskIncrementTick+0x158>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3301      	adds	r3, #1
 8008626:	4a3d      	ldr	r2, [pc, #244]	; (800871c <xTaskIncrementTick+0x158>)
 8008628:	6013      	str	r3, [r2, #0]
 800862a:	f000 f8e9 	bl	8008800 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800862e:	4b3c      	ldr	r3, [pc, #240]	; (8008720 <xTaskIncrementTick+0x15c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	429a      	cmp	r2, r3
 8008636:	d349      	bcc.n	80086cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008638:	4b36      	ldr	r3, [pc, #216]	; (8008714 <xTaskIncrementTick+0x150>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008642:	4b37      	ldr	r3, [pc, #220]	; (8008720 <xTaskIncrementTick+0x15c>)
 8008644:	f04f 32ff 	mov.w	r2, #4294967295
 8008648:	601a      	str	r2, [r3, #0]
					break;
 800864a:	e03f      	b.n	80086cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800864c:	4b31      	ldr	r3, [pc, #196]	; (8008714 <xTaskIncrementTick+0x150>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800865c:	693a      	ldr	r2, [r7, #16]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d203      	bcs.n	800866c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008664:	4a2e      	ldr	r2, [pc, #184]	; (8008720 <xTaskIncrementTick+0x15c>)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800866a:	e02f      	b.n	80086cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3304      	adds	r3, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff ff7d 	bl	8008570 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	3318      	adds	r3, #24
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff ff74 	bl	8008570 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800868c:	4b25      	ldr	r3, [pc, #148]	; (8008724 <xTaskIncrementTick+0x160>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d903      	bls.n	800869c <xTaskIncrementTick+0xd8>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a22      	ldr	r2, [pc, #136]	; (8008724 <xTaskIncrementTick+0x160>)
 800869a:	6013      	str	r3, [r2, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a0:	4613      	mov	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	4413      	add	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4a1f      	ldr	r2, [pc, #124]	; (8008728 <xTaskIncrementTick+0x164>)
 80086aa:	441a      	add	r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4619      	mov	r1, r3
 80086b2:	4610      	mov	r0, r2
 80086b4:	f7ff ff38 	bl	8008528 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086bc:	4b1b      	ldr	r3, [pc, #108]	; (800872c <xTaskIncrementTick+0x168>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d3b8      	bcc.n	8008638 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ca:	e7b5      	b.n	8008638 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086cc:	4b17      	ldr	r3, [pc, #92]	; (800872c <xTaskIncrementTick+0x168>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d2:	4915      	ldr	r1, [pc, #84]	; (8008728 <xTaskIncrementTick+0x164>)
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d901      	bls.n	80086e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086e4:	2301      	movs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086e8:	4b11      	ldr	r3, [pc, #68]	; (8008730 <xTaskIncrementTick+0x16c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d007      	beq.n	8008700 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	e004      	b.n	8008700 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086f6:	4b0f      	ldr	r3, [pc, #60]	; (8008734 <xTaskIncrementTick+0x170>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a0d      	ldr	r2, [pc, #52]	; (8008734 <xTaskIncrementTick+0x170>)
 80086fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008700:	697b      	ldr	r3, [r7, #20]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	24000528 	.word	0x24000528
 8008710:	2400050c 	.word	0x2400050c
 8008714:	24000504 	.word	0x24000504
 8008718:	24000508 	.word	0x24000508
 800871c:	24000520 	.word	0x24000520
 8008720:	24000524 	.word	0x24000524
 8008724:	24000510 	.word	0x24000510
 8008728:	240000a4 	.word	0x240000a4
 800872c:	240000a0 	.word	0x240000a0
 8008730:	2400051c 	.word	0x2400051c
 8008734:	24000518 	.word	0x24000518

08008738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800873e:	4b2a      	ldr	r3, [pc, #168]	; (80087e8 <vTaskSwitchContext+0xb0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008746:	4b29      	ldr	r3, [pc, #164]	; (80087ec <vTaskSwitchContext+0xb4>)
 8008748:	2201      	movs	r2, #1
 800874a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800874c:	e046      	b.n	80087dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800874e:	4b27      	ldr	r3, [pc, #156]	; (80087ec <vTaskSwitchContext+0xb4>)
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008754:	4b26      	ldr	r3, [pc, #152]	; (80087f0 <vTaskSwitchContext+0xb8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e010      	b.n	800877e <vTaskSwitchContext+0x46>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <vTaskSwitchContext+0x40>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <vTaskSwitchContext+0x3e>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3b01      	subs	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]
 800877e:	491d      	ldr	r1, [pc, #116]	; (80087f4 <vTaskSwitchContext+0xbc>)
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0e4      	beq.n	800875c <vTaskSwitchContext+0x24>
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	4613      	mov	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4a15      	ldr	r2, [pc, #84]	; (80087f4 <vTaskSwitchContext+0xbc>)
 800879e:	4413      	add	r3, r2
 80087a0:	60bb      	str	r3, [r7, #8]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	605a      	str	r2, [r3, #4]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3308      	adds	r3, #8
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d104      	bne.n	80087c2 <vTaskSwitchContext+0x8a>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	605a      	str	r2, [r3, #4]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	4a0b      	ldr	r2, [pc, #44]	; (80087f8 <vTaskSwitchContext+0xc0>)
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4a08      	ldr	r2, [pc, #32]	; (80087f0 <vTaskSwitchContext+0xb8>)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087d2:	4b09      	ldr	r3, [pc, #36]	; (80087f8 <vTaskSwitchContext+0xc0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3354      	adds	r3, #84	; 0x54
 80087d8:	4a08      	ldr	r2, [pc, #32]	; (80087fc <vTaskSwitchContext+0xc4>)
 80087da:	6013      	str	r3, [r2, #0]
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	24000528 	.word	0x24000528
 80087ec:	2400051c 	.word	0x2400051c
 80087f0:	24000510 	.word	0x24000510
 80087f4:	240000a4 	.word	0x240000a4
 80087f8:	240000a0 	.word	0x240000a0
 80087fc:	24000010 	.word	0x24000010

08008800 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <prvResetNextTaskUnblockTime+0x38>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008810:	4b0a      	ldr	r3, [pc, #40]	; (800883c <prvResetNextTaskUnblockTime+0x3c>)
 8008812:	f04f 32ff 	mov.w	r2, #4294967295
 8008816:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008818:	e008      	b.n	800882c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <prvResetNextTaskUnblockTime+0x38>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4a04      	ldr	r2, [pc, #16]	; (800883c <prvResetNextTaskUnblockTime+0x3c>)
 800882a:	6013      	str	r3, [r2, #0]
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	24000504 	.word	0x24000504
 800883c:	24000524 	.word	0x24000524

08008840 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <xTaskGetSchedulerState+0x34>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d102      	bne.n	8008854 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800884e:	2301      	movs	r3, #1
 8008850:	607b      	str	r3, [r7, #4]
 8008852:	e008      	b.n	8008866 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008854:	4b08      	ldr	r3, [pc, #32]	; (8008878 <xTaskGetSchedulerState+0x38>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800885c:	2302      	movs	r3, #2
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	e001      	b.n	8008866 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008866:	687b      	ldr	r3, [r7, #4]
	}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	24000514 	.word	0x24000514
 8008878:	24000528 	.word	0x24000528
 800887c:	00000000 	.word	0x00000000

08008880 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <pxCurrentTCBConst2>)
 8008882:	6819      	ldr	r1, [r3, #0]
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	f380 8809 	msr	PSP, r0
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8811 	msr	BASEPRI, r0
 800889a:	4770      	bx	lr
 800889c:	f3af 8000 	nop.w

080088a0 <pxCurrentTCBConst2>:
 80088a0:	240000a0 	.word	0x240000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
	...

080088b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088b0:	f3ef 8009 	mrs	r0, PSP
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	4b15      	ldr	r3, [pc, #84]	; (8008910 <pxCurrentTCBConst>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	f01e 0f10 	tst.w	lr, #16
 80088c0:	bf08      	it	eq
 80088c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	6010      	str	r0, [r2, #0]
 80088cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80088d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088d4:	f380 8811 	msr	BASEPRI, r0
 80088d8:	f3bf 8f4f 	dsb	sy
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f7ff ff2a 	bl	8008738 <vTaskSwitchContext>
 80088e4:	f04f 0000 	mov.w	r0, #0
 80088e8:	f380 8811 	msr	BASEPRI, r0
 80088ec:	bc09      	pop	{r0, r3}
 80088ee:	6819      	ldr	r1, [r3, #0]
 80088f0:	6808      	ldr	r0, [r1, #0]
 80088f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f6:	f01e 0f10 	tst.w	lr, #16
 80088fa:	bf08      	it	eq
 80088fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008900:	f380 8809 	msr	PSP, r0
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	f3af 8000 	nop.w

08008910 <pxCurrentTCBConst>:
 8008910:	240000a0 	.word	0x240000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008932:	f7ff fe47 	bl	80085c4 <xTaskIncrementTick>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <xPortSysTickHandler+0x40>)
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800894e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <__libc_init_array>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	4d0d      	ldr	r5, [pc, #52]	; (8008994 <__libc_init_array+0x38>)
 8008960:	4c0d      	ldr	r4, [pc, #52]	; (8008998 <__libc_init_array+0x3c>)
 8008962:	1b64      	subs	r4, r4, r5
 8008964:	10a4      	asrs	r4, r4, #2
 8008966:	2600      	movs	r6, #0
 8008968:	42a6      	cmp	r6, r4
 800896a:	d109      	bne.n	8008980 <__libc_init_array+0x24>
 800896c:	4d0b      	ldr	r5, [pc, #44]	; (800899c <__libc_init_array+0x40>)
 800896e:	4c0c      	ldr	r4, [pc, #48]	; (80089a0 <__libc_init_array+0x44>)
 8008970:	f000 f82e 	bl	80089d0 <_init>
 8008974:	1b64      	subs	r4, r4, r5
 8008976:	10a4      	asrs	r4, r4, #2
 8008978:	2600      	movs	r6, #0
 800897a:	42a6      	cmp	r6, r4
 800897c:	d105      	bne.n	800898a <__libc_init_array+0x2e>
 800897e:	bd70      	pop	{r4, r5, r6, pc}
 8008980:	f855 3b04 	ldr.w	r3, [r5], #4
 8008984:	4798      	blx	r3
 8008986:	3601      	adds	r6, #1
 8008988:	e7ee      	b.n	8008968 <__libc_init_array+0xc>
 800898a:	f855 3b04 	ldr.w	r3, [r5], #4
 800898e:	4798      	blx	r3
 8008990:	3601      	adds	r6, #1
 8008992:	e7f2      	b.n	800897a <__libc_init_array+0x1e>
 8008994:	08008ae4 	.word	0x08008ae4
 8008998:	08008ae4 	.word	0x08008ae4
 800899c:	08008ae4 	.word	0x08008ae4
 80089a0:	08008ae8 	.word	0x08008ae8

080089a4 <memcpy>:
 80089a4:	440a      	add	r2, r1
 80089a6:	4291      	cmp	r1, r2
 80089a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80089ac:	d100      	bne.n	80089b0 <memcpy+0xc>
 80089ae:	4770      	bx	lr
 80089b0:	b510      	push	{r4, lr}
 80089b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ba:	4291      	cmp	r1, r2
 80089bc:	d1f9      	bne.n	80089b2 <memcpy+0xe>
 80089be:	bd10      	pop	{r4, pc}

080089c0 <memset>:
 80089c0:	4402      	add	r2, r0
 80089c2:	4603      	mov	r3, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d100      	bne.n	80089ca <memset+0xa>
 80089c8:	4770      	bx	lr
 80089ca:	f803 1b01 	strb.w	r1, [r3], #1
 80089ce:	e7f9      	b.n	80089c4 <memset+0x4>

080089d0 <_init>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr

080089dc <_fini>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	bf00      	nop
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr
