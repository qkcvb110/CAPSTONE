
STM32CubeIDE_IRsensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b70  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e54  08006e54  00016e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e5c  08006e5c  00016e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e60  08006e60  00016e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000178  24000010  08006e74  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000188  08006e74  00020188  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fbb5  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000310e  00000000  00000000  0003fbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e80  00000000  00000000  00042d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d98  00000000  00000000  00043b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031287  00000000  00000000  00044920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013220  00000000  00000000  00075ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00146490  00000000  00000000  00088dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001cf257  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003c88  00000000  00000000  001cf2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08006e04 	.word	0x08006e04

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08006e04 	.word	0x08006e04

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800060a:	4a30      	ldr	r2, [pc, #192]	; (80006cc <MX_ADC1_Init+0xe8>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060e:	4b2e      	ldr	r3, [pc, #184]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000614:	4b2c      	ldr	r3, [pc, #176]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000620:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000622:	2204      	movs	r2, #4
 8000624:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000626:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000628:	2200      	movs	r2, #0
 800062a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800062e:	2200      	movs	r2, #0
 8000630:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000634:	2201      	movs	r2, #1
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000640:	2200      	movs	r2, #0
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000646:	2200      	movs	r2, #0
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800064c:	2200      	movs	r2, #0
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000652:	2200      	movs	r2, #0
 8000654:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC1_Init+0xe4>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	4818      	ldr	r0, [pc, #96]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000666:	f000 fdd9 	bl	800121c <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000670:	f000 f974 	bl	800095c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4812      	ldr	r0, [pc, #72]	; (80006c8 <MX_ADC1_Init+0xe4>)
 8000680:	f001 fe6a 	bl	8002358 <HAL_ADCEx_MultiModeConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800068a:	f000 f967 	bl	800095c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_ADC1_Init+0xec>)
 8000690:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000692:	2306      	movs	r3, #6
 8000694:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800069e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a0:	2304      	movs	r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC1_Init+0xe4>)
 80006b2:	f001 f8e1 	bl	8001878 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006bc:	f000 f94e 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2400002c 	.word	0x2400002c
 80006cc:	40022000 	.word	0x40022000
 80006d0:	08600004 	.word	0x08600004

080006d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0b8      	sub	sp, #224	; 0xe0
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	22b8      	movs	r2, #184	; 0xb8
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 fb7d 	bl	8006df4 <memset>
  if(adcHandle->Instance==ADC1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <HAL_ADC_MspInit+0xd4>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d14d      	bne.n	80007a0 <HAL_ADC_MspInit+0xcc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000704:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000708:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 800070a:	2320      	movs	r3, #32
 800070c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800070e:	2381      	movs	r3, #129	; 0x81
 8000710:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800071e:	2340      	movs	r3, #64	; 0x40
 8000720:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000722:	2300      	movs	r3, #0
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4618      	mov	r0, r3
 8000736:	f003 f929 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000740:	f000 f90c 	bl	800095c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 8000746:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 8000756:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800075a:	f003 0320 	and.w	r3, r3, #32
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 8000764:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_ADC_MspInit+0xd8>)
 8000774:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000784:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000788:	2303      	movs	r3, #3
 800078a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000794:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000798:	4619      	mov	r1, r3
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <HAL_ADC_MspInit+0xdc>)
 800079c:	f001 ff5c 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007a0:	bf00      	nop
 80007a2:	37e0      	adds	r7, #224	; 0xe0
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40022000 	.word	0x40022000
 80007ac:	58024400 	.word	0x58024400
 80007b0:	58021400 	.word	0x58021400

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_GPIO_Init+0x90>)
 80007cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d0:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_GPIO_Init+0x90>)
 80007d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_GPIO_Init+0x90>)
 80007dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_GPIO_Init+0x90>)
 80007ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_GPIO_Init+0x90>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_GPIO_Init+0x90>)
 80007fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_GPIO_Init+0x90>)
 8000808:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <MX_GPIO_Init+0x90>)
 800080e:	f043 0320 	orr.w	r3, r3, #32
 8000812:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_GPIO_Init+0x90>)
 8000818:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800081c:	f003 0320 	and.w	r3, r3, #32
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0x94>)
 8000838:	f001 ff0e 	bl	8002658 <HAL_GPIO_Init>

}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58024400 	.word	0x58024400
 8000848:	58020000 	.word	0x58020000

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fa1f 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f81b 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f7ff ffab 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800085e:	f000 f93f 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000862:	f7ff febf 	bl	80005e4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t adc_value = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc); // ADC 측정 시작
 800086a:	4808      	ldr	r0, [pc, #32]	; (800088c <main+0x40>)
 800086c:	f000 fe30 	bl	80014d0 <HAL_ADC_Start>
	     HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY); // ADC 변환 완료까지 대기
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <main+0x40>)
 8000876:	f000 ff19 	bl	80016ac <HAL_ADC_PollForConversion>
	     adc_value = HAL_ADC_GetValue(&hadc); // ADC 값 읽기
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <main+0x40>)
 800087c:	f000 ffee 	bl	800185c <HAL_ADC_GetValue>
 8000880:	6078      	str	r0, [r7, #4]
	     HAL_ADC_Stop(&hadc); // ADC 중지
 8000882:	4802      	ldr	r0, [pc, #8]	; (800088c <main+0x40>)
 8000884:	f000 fede 	bl	8001644 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc); // ADC 측정 시작
 8000888:	e7ef      	b.n	800086a <main+0x1e>
 800088a:	bf00      	nop
 800088c:	24000090 	.word	0x24000090

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b09c      	sub	sp, #112	; 0x70
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	224c      	movs	r2, #76	; 0x4c
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 faa8 	bl	8006df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2220      	movs	r2, #32
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 faa2 	bl	8006df4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008b0:	2004      	movs	r0, #4
 80008b2:	f002 f881 	bl	80029b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <SystemClock_Config+0xc4>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <SystemClock_Config+0xc4>)
 80008c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xc4>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d2:	bf00      	nop
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xc4>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e0:	d1f8      	bne.n	80008d4 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <SystemClock_Config+0xc8>)
 80008e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e6:	4a1c      	ldr	r2, [pc, #112]	; (8000958 <SystemClock_Config+0xc8>)
 80008e8:	f023 0303 	bic.w	r3, r3, #3
 80008ec:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008ee:	2302      	movs	r3, #2
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008f2:	2301      	movs	r3, #1
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008fe:	2300      	movs	r3, #0
 8000900:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4618      	mov	r0, r3
 8000908:	f002 f8b0 	bl	8002a6c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000912:	f000 f823 	bl	800095c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	233f      	movs	r3, #63	; 0x3f
 8000918:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000934:	2340      	movs	r3, #64	; 0x40
 8000936:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2102      	movs	r1, #2
 800093c:	4618      	mov	r0, r3
 800093e:	f002 fc99 	bl	8003274 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000948:	f000 f808 	bl	800095c <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3770      	adds	r7, #112	; 0x70
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024800 	.word	0x58024800
 8000958:	58024400 	.word	0x58024400

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x30>)
 8000970:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000974:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_MspInit+0x30>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_MspInit+0x30>)
 8000980:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	58024400 	.word	0x58024400

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <NMI_Handler+0x4>

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <MemManage_Handler+0x4>

080009ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b2:	e7fe      	b.n	80009b2 <BusFault_Handler+0x4>

080009b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <UsageFault_Handler+0x4>

080009ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f9c6 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009f4:	4b32      	ldr	r3, [pc, #200]	; (8000ac0 <SystemInit+0xd0>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <SystemInit+0xd0>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <SystemInit+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d807      	bhi.n	8000a20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <SystemInit+0xd4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f023 030f 	bic.w	r3, r3, #15
 8000a18:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <SystemInit+0xd4>)
 8000a1a:	f043 0303 	orr.w	r3, r3, #3
 8000a1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <SystemInit+0xd8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <SystemInit+0xd8>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a2c:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <SystemInit+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <SystemInit+0xd8>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4924      	ldr	r1, [pc, #144]	; (8000ac8 <SystemInit+0xd8>)
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <SystemInit+0xdc>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <SystemInit+0xd4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d007      	beq.n	8000a5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <SystemInit+0xd4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f023 030f 	bic.w	r3, r3, #15
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <SystemInit+0xd4>)
 8000a54:	f043 0303 	orr.w	r3, r3, #3
 8000a58:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <SystemInit+0xd8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <SystemInit+0xd8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <SystemInit+0xd8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <SystemInit+0xd8>)
 8000a6e:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <SystemInit+0xe0>)
 8000a70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <SystemInit+0xd8>)
 8000a74:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <SystemInit+0xe4>)
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a78:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <SystemInit+0xd8>)
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <SystemInit+0xe8>)
 8000a7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <SystemInit+0xd8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <SystemInit+0xd8>)
 8000a86:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <SystemInit+0xe8>)
 8000a88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <SystemInit+0xd8>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SystemInit+0xd8>)
 8000a92:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <SystemInit+0xe8>)
 8000a94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <SystemInit+0xd8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SystemInit+0xd8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <SystemInit+0xd8>)
 8000aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <SystemInit+0xd8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <SystemInit+0xec>)
 8000ab0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ab4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	52002000 	.word	0x52002000
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ad0:	02020200 	.word	0x02020200
 8000ad4:	01ff0000 	.word	0x01ff0000
 8000ad8:	01010280 	.word	0x01010280
 8000adc:	52004000 	.word	0x52004000

08000ae0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000ae6:	4a23      	ldr	r2, [pc, #140]	; (8000b74 <MX_USART2_UART_Init+0x94>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1d      	ldr	r3, [pc, #116]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b2a:	f004 ffd9 	bl	8005ae0 <HAL_UART_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f7ff ff12 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b3c:	f006 f86c 	bl	8006c18 <HAL_UARTEx_SetTxFifoThreshold>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f7ff ff09 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f006 f8a1 	bl	8006c94 <HAL_UARTEx_SetRxFifoThreshold>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f7ff ff00 	bl	800095c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	; (8000b70 <MX_USART2_UART_Init+0x90>)
 8000b5e:	f006 f822 	bl	8006ba6 <HAL_UARTEx_DisableFifoMode>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f7ff fef8 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	240000f4 	.word	0x240000f4
 8000b74:	40004400 	.word	0x40004400

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b0b8      	sub	sp, #224	; 0xe0
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	22b8      	movs	r2, #184	; 0xb8
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f006 f92b 	bl	8006df4 <memset>
  if(uartHandle->Instance==USART2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <HAL_UART_MspInit+0xbc>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d141      	bne.n	8000c2c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fee8 	bl	800398c <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bc2:	f7ff fecb 	bl	800095c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000bc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000bd8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bea:	4a13      	ldr	r2, [pc, #76]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_UART_MspInit+0xc0>)
 8000bf6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c02:	230c      	movs	r3, #12
 8000c04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0xc4>)
 8000c28:	f001 fd16 	bl	8002658 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	37e0      	adds	r7, #224	; 0xe0
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40004400 	.word	0x40004400
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020000 	.word	0x58020000

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c44:	f7ff fed4 	bl	80009f0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480c      	ldr	r0, [pc, #48]	; (8000c7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	; (8000c84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c60:	4c0a      	ldr	r4, [pc, #40]	; (8000c8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f006 f89d 	bl	8006dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fdeb 	bl	800084c <main>
  bx  lr
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c78:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000c7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c80:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c84:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 8000c88:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c8c:	24000188 	.word	0x24000188

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f001 fcaa 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ca0:	f002 fc9e 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_Init+0x68>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	0a1b      	lsrs	r3, r3, #8
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4913      	ldr	r1, [pc, #76]	; (8000d00 <HAL_Init+0x6c>)
 8000cb2:	5ccb      	ldrb	r3, [r1, r3]
 8000cb4:	f003 031f 	and.w	r3, r3, #31
 8000cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cbc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_Init+0x6c>)
 8000cc8:	5cd3      	ldrb	r3, [r2, r3]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <HAL_Init+0x70>)
 8000cd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_Init+0x74>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	200f      	movs	r0, #15
 8000ce0:	f000 f814 	bl	8000d0c <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e002      	b.n	8000cf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cee:	f7ff fe3b 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	08006e1c 	.word	0x08006e1c
 8000d04:	24000004 	.word	0x24000004
 8000d08:	24000000 	.word	0x24000000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d14:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_InitTick+0x60>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d101      	bne.n	8000d20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e021      	b.n	8000d64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_InitTick+0x64>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_InitTick+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fc81 	bl	800263e <HAL_SYSTICK_Config>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e00e      	b.n	8000d64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2b0f      	cmp	r3, #15
 8000d4a:	d80a      	bhi.n	8000d62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295
 8000d54:	f001 fc59 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <HAL_InitTick+0x68>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2400000c 	.word	0x2400000c
 8000d70:	24000000 	.word	0x24000000
 8000d74:	24000008 	.word	0x24000008

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	2400000c 	.word	0x2400000c
 8000d9c:	24000184 	.word	0x24000184

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	24000184 	.word	0x24000184

08000db8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3360      	adds	r3, #96	; 0x60
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000e54:	bf00      	nop
 8000e56:	371c      	adds	r7, #28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	431a      	orrs	r2, r3
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	611a      	str	r2, [r3, #16]
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b087      	sub	sp, #28
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	60f8      	str	r0, [r7, #12]
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3360      	adds	r3, #96	; 0x60
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	601a      	str	r2, [r3, #0]
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b087      	sub	sp, #28
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	3330      	adds	r3, #48	; 0x30
 8000efe:	461a      	mov	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	f003 030c 	and.w	r3, r3, #12
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	211f      	movs	r1, #31
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	401a      	ands	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0e9b      	lsrs	r3, r3, #26
 8000f26:	f003 011f 	and.w	r1, r3, #31
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	431a      	orrs	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f3a:	bf00      	nop
 8000f3c:	371c      	adds	r7, #28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b087      	sub	sp, #28
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3314      	adds	r3, #20
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	0e5b      	lsrs	r3, r3, #25
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	0d1b      	lsrs	r3, r3, #20
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2107      	movs	r1, #7
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	0d1b      	lsrs	r3, r3, #20
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0318 	and.w	r3, r3, #24
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000fc0:	40d9      	lsrs	r1, r3
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	000fffff 	.word	0x000fffff

08000fe4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <LL_ADC_DisableDeepPowerDown+0x20>)
 800102a:	4013      	ands	r3, r2
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6093      	str	r3, [r2, #8]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	5fffffc0 	.word	0x5fffffc0

08001040 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001054:	d101      	bne.n	800105a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <LL_ADC_EnableInternalRegulator+0x24>)
 8001076:	4013      	ands	r3, r2
 8001078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	6fffffc0 	.word	0x6fffffc0

08001090 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010a4:	d101      	bne.n	80010aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <LL_ADC_Enable+0x24>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	f043 0201 	orr.w	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	7fffffc0 	.word	0x7fffffc0

080010e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <LL_ADC_Disable+0x24>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	f043 0202 	orr.w	r2, r3, #2
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	7fffffc0 	.word	0x7fffffc0

08001108 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b01      	cmp	r3, #1
 800111a:	d101      	bne.n	8001120 <LL_ADC_IsEnabled+0x18>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <LL_ADC_IsEnabled+0x1a>
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b02      	cmp	r3, #2
 8001140:	d101      	bne.n	8001146 <LL_ADC_IsDisableOngoing+0x18>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <LL_ADC_IsDisableOngoing+0x1a>
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689a      	ldr	r2, [r3, #8]
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_ADC_REG_StartConversion+0x24>)
 8001162:	4013      	ands	r3, r2
 8001164:	f043 0204 	orr.w	r2, r3, #4
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	7fffffc0 	.word	0x7fffffc0

0800117c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <LL_ADC_REG_StopConversion+0x24>)
 800118a:	4013      	ands	r3, r2
 800118c:	f043 0210 	orr.w	r2, r3, #16
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	7fffffc0 	.word	0x7fffffc0

080011a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	d101      	bne.n	80011bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <LL_ADC_INJ_StopConversion+0x24>)
 80011da:	4013      	ands	r3, r2
 80011dc:	f043 0220 	orr.w	r2, r3, #32
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	7fffffc0 	.word	0x7fffffc0

080011f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	2b08      	cmp	r3, #8
 8001206:	d101      	bne.n	800120c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e138      	b.n	80014a8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	2b00      	cmp	r3, #0
 8001242:	d109      	bne.n	8001258 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fa45 	bl	80006d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff feef 	bl	8001040 <LL_ADC_IsDeepPowerDownEnabled>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff fed5 	bl	800101c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff0a 	bl	8001090 <LL_ADC_IsInternalRegulatorEnabled>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d114      	bne.n	80012ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff feee 	bl	8001068 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_ADC_Init+0x294>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	4a88      	ldr	r2, [pc, #544]	; (80014b4 <HAL_ADC_Init+0x298>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	099b      	lsrs	r3, r3, #6
 800129a:	3301      	adds	r3, #1
 800129c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800129e:	e002      	b.n	80012a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f9      	bne.n	80012a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff feed 	bl	8001090 <LL_ADC_IsInternalRegulatorEnabled>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10d      	bne.n	80012d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c0:	f043 0210 	orr.w	r2, r3, #16
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff61 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80012e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	f003 0310 	and.w	r3, r3, #16
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 80d2 	bne.w	8001496 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f040 80ce 	bne.w	8001496 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001302:	f043 0202 	orr.w	r2, r3, #2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fefa 	bl	8001108 <LL_ADC_IsEnabled>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d110      	bne.n	800133c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800131a:	4867      	ldr	r0, [pc, #412]	; (80014b8 <HAL_ADC_Init+0x29c>)
 800131c:	f7ff fef4 	bl	8001108 <LL_ADC_IsEnabled>
 8001320:	4604      	mov	r4, r0
 8001322:	4866      	ldr	r0, [pc, #408]	; (80014bc <HAL_ADC_Init+0x2a0>)
 8001324:	f7ff fef0 	bl	8001108 <LL_ADC_IsEnabled>
 8001328:	4603      	mov	r3, r0
 800132a:	4323      	orrs	r3, r4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	4862      	ldr	r0, [pc, #392]	; (80014c0 <HAL_ADC_Init+0x2a4>)
 8001338:	f7ff fd3e 	bl	8000db8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7d5b      	ldrb	r3, [r3, #21]
 8001340:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001346:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800134c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7f1b      	ldrb	r3, [r3, #28]
 8001352:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7f1b      	ldrb	r3, [r3, #28]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	3b01      	subs	r3, #1
 8001366:	045b      	lsls	r3, r3, #17
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <HAL_ADC_Init+0x2a8>)
 8001392:	4013      	ands	r3, r2
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	69b9      	ldr	r1, [r7, #24]
 800139a:	430b      	orrs	r3, r1
 800139c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fefe 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80013a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff20 	bl	80011f4 <LL_ADC_INJ_IsConversionOngoing>
 80013b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d14a      	bne.n	8001452 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d147      	bne.n	8001452 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7d1b      	ldrb	r3, [r3, #20]
 80013c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68da      	ldr	r2, [r3, #12]
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <HAL_ADC_Init+0x2ac>)
 80013d8:	4013      	ands	r3, r2
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d11b      	bne.n	8001426 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_ADC_Init+0x2b0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001402:	3a01      	subs	r2, #1
 8001404:	0411      	lsls	r1, r2, #16
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001410:	4311      	orrs	r1, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001416:	430a      	orrs	r2, r1
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f042 0201 	orr.w	r2, r2, #1
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	e007      	b.n	8001436 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 fe91 	bl	8002174 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10c      	bne.n	8001474 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f023 010f 	bic.w	r1, r3, #15
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	1e5a      	subs	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
 8001472:	e007      	b.n	8001484 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 020f 	bic.w	r2, r2, #15
 8001482:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001488:	f023 0303 	bic.w	r3, r3, #3
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	655a      	str	r2, [r3, #84]	; 0x54
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3724      	adds	r7, #36	; 0x24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	24000000 	.word	0x24000000
 80014b4:	053e2d63 	.word	0x053e2d63
 80014b8:	40022000 	.word	0x40022000
 80014bc:	40022100 	.word	0x40022100
 80014c0:	40022300 	.word	0x40022300
 80014c4:	fff0c003 	.word	0xfff0c003
 80014c8:	ffffbffc 	.word	0xffffbffc
 80014cc:	fc00f81e 	.word	0xfc00f81e

080014d0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014d8:	4856      	ldr	r0, [pc, #344]	; (8001634 <HAL_ADC_Start+0x164>)
 80014da:	f7ff fd83 	bl	8000fe4 <LL_ADC_GetMultimode>
 80014de:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe5d 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 809a 	bne.w	8001626 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_ADC_Start+0x30>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e095      	b.n	800162c <HAL_ADC_Start+0x15c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fd57 	bl	8001fbc <ADC_Enable>
 800150e:	4603      	mov	r3, r0
 8001510:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 8081 	bne.w	800161c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800151e:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_ADC_Start+0x168>)
 8001520:	4013      	ands	r3, r2
 8001522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a43      	ldr	r2, [pc, #268]	; (800163c <HAL_ADC_Start+0x16c>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d002      	beq.n	800153a <HAL_ADC_Start+0x6a>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	e000      	b.n	800153c <HAL_ADC_Start+0x6c>
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_ADC_Start+0x170>)
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	4293      	cmp	r3, r2
 8001542:	d002      	beq.n	800154a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001562:	d106      	bne.n	8001572 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	f023 0206 	bic.w	r2, r3, #6
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	659a      	str	r2, [r3, #88]	; 0x58
 8001570:	e002      	b.n	8001578 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	221c      	movs	r2, #28
 800157e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2b      	ldr	r2, [pc, #172]	; (800163c <HAL_ADC_Start+0x16c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d002      	beq.n	8001598 <HAL_ADC_Start+0xc8>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	e000      	b.n	800159a <HAL_ADC_Start+0xca>
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <HAL_ADC_Start+0x170>)
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	4293      	cmp	r3, r2
 80015a0:	d008      	beq.n	80015b4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d002      	beq.n	80015b4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	2b09      	cmp	r3, #9
 80015b2:	d114      	bne.n	80015de <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fdbc 	bl	8001154 <LL_ADC_REG_StartConversion>
 80015dc:	e025      	b.n	800162a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <HAL_ADC_Start+0x16c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d002      	beq.n	80015fa <HAL_ADC_Start+0x12a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	e000      	b.n	80015fc <HAL_ADC_Start+0x12c>
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_ADC_Start+0x170>)
 80015fc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00f      	beq.n	800162a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001612:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
 800161a:	e006      	b.n	800162a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001624:	e001      	b.n	800162a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001626:	2302      	movs	r3, #2
 8001628:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800162a:	7dfb      	ldrb	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022300 	.word	0x40022300
 8001638:	fffff0fe 	.word	0xfffff0fe
 800163c:	40022100 	.word	0x40022100
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_ADC_Stop+0x16>
 8001656:	2302      	movs	r3, #2
 8001658:	e021      	b.n	800169e <HAL_ADC_Stop+0x5a>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001662:	2103      	movs	r1, #3
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fbed 	bl	8001e44 <ADC_ConversionStop>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10f      	bne.n	8001694 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fd1d 	bl	80020b4 <ADC_Disable>
 800167a:	4603      	mov	r3, r0
 800167c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d107      	bne.n	8001694 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_ADC_Stop+0x64>)
 800168a:	4013      	ands	r3, r2
 800168c:	f043 0201 	orr.w	r2, r3, #1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	ffffeefe 	.word	0xffffeefe

080016ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016b6:	4866      	ldr	r0, [pc, #408]	; (8001850 <HAL_ADC_PollForConversion+0x1a4>)
 80016b8:	f7ff fc94 	bl	8000fe4 <LL_ADC_GetMultimode>
 80016bc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d102      	bne.n	80016cc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80016c6:	2308      	movs	r3, #8
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e02a      	b.n	8001722 <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d002      	beq.n	80016de <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	2b09      	cmp	r3, #9
 80016dc:	d111      	bne.n	8001702 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f0:	f043 0220 	orr.w	r2, r3, #32
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0a4      	b.n	8001846 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80016fc:	2304      	movs	r3, #4
 80016fe:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001700:	e00f      	b.n	8001722 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001702:	4853      	ldr	r0, [pc, #332]	; (8001850 <HAL_ADC_PollForConversion+0x1a4>)
 8001704:	f7ff fc7c 	bl	8001000 <LL_ADC_GetMultiDMATransfer>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d007      	beq.n	800171e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e093      	b.n	8001846 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800171e:	2304      	movs	r3, #4
 8001720:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001722:	f7ff fb3d 	bl	8000da0 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001728:	e021      	b.n	800176e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d01d      	beq.n	800176e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001732:	f7ff fb35 	bl	8000da0 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d302      	bcc.n	8001748 <HAL_ADC_PollForConversion+0x9c>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d112      	bne.n	800176e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10b      	bne.n	800176e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e06b      	b.n	8001846 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0d6      	beq.n	800172a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fb9b 	bl	8000ec8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7d5b      	ldrb	r3, [r3, #21]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d118      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d111      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d105      	bne.n	80017d2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_ADC_PollForConversion+0x1a8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d002      	beq.n	80017e2 <HAL_ADC_PollForConversion+0x136>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	e000      	b.n	80017e4 <HAL_ADC_PollForConversion+0x138>
 80017e2:	4b1d      	ldr	r3, [pc, #116]	; (8001858 <HAL_ADC_PollForConversion+0x1ac>)
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d008      	beq.n	80017fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b05      	cmp	r3, #5
 80017f6:	d002      	beq.n	80017fe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b09      	cmp	r3, #9
 80017fc:	d104      	bne.n	8001808 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	e00c      	b.n	8001822 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_ADC_PollForConversion+0x1a8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d002      	beq.n	8001818 <HAL_ADC_PollForConversion+0x16c>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	e000      	b.n	800181a <HAL_ADC_PollForConversion+0x16e>
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <HAL_ADC_PollForConversion+0x1ac>)
 800181a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b08      	cmp	r3, #8
 8001826:	d104      	bne.n	8001832 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2208      	movs	r2, #8
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	e008      	b.n	8001844 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	220c      	movs	r2, #12
 8001842:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3720      	adds	r7, #32
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40022300 	.word	0x40022300
 8001854:	40022100 	.word	0x40022100
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b0a1      	sub	sp, #132	; 0x84
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a9a      	ldr	r2, [pc, #616]	; (8001afc <HAL_ADC_ConfigChannel+0x284>)
 8001892:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x2a>
 800189e:	2302      	movs	r3, #2
 80018a0:	e2bc      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x5a4>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc78 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 82a1 	bne.w	8001dfe <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d108      	bne.n	80018da <HAL_ADC_ConfigChannel+0x62>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0e9b      	lsrs	r3, r3, #26
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2201      	movs	r2, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	e016      	b.n	8001908 <HAL_ADC_ConfigChannel+0x90>
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018ea:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80018f2:	2320      	movs	r3, #32
 80018f4:	e003      	b.n	80018fe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80018f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2201      	movs	r2, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	69d1      	ldr	r1, [r2, #28]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	430b      	orrs	r3, r1
 8001914:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	f7ff fae3 	bl	8000eee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fc39 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 8001932:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fc5b 	bl	80011f4 <LL_ADC_INJ_IsConversionOngoing>
 800193e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80a0 	bne.w	8001a88 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 809c 	bne.w	8001a88 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	461a      	mov	r2, r3
 800195e:	f7ff faf2 	bl	8000f46 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f003 0310 	and.w	r3, r3, #16
 800196c:	2b00      	cmp	r3, #0
 800196e:	d10b      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x110>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	089b      	lsrs	r3, r3, #2
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	e00a      	b.n	800199e <HAL_ADC_ConfigChannel+0x126>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d027      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6919      	ldr	r1, [r3, #16]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019b6:	f7ff fa33 	bl	8000e20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6919      	ldr	r1, [r3, #16]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	7e5b      	ldrb	r3, [r3, #25]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x158>
 80019ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80019ce:	e000      	b.n	80019d2 <HAL_ADC_ConfigChannel+0x15a>
 80019d0:	2300      	movs	r3, #0
 80019d2:	461a      	mov	r2, r3
 80019d4:	f7ff fa5d 	bl	8000e92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6919      	ldr	r1, [r3, #16]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7e1b      	ldrb	r3, [r3, #24]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d102      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x176>
 80019e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ec:	e000      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x178>
 80019ee:	2300      	movs	r3, #0
 80019f0:	461a      	mov	r2, r3
 80019f2:	f7ff fa35 	bl	8000e60 <LL_ADC_SetDataRightShift>
 80019f6:	e047      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	069b      	lsls	r3, r3, #26
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d107      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a1a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	069b      	lsls	r3, r3, #26
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d107      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a3e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	069b      	lsls	r3, r3, #26
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d107      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a62:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	069b      	lsls	r3, r3, #26
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d107      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fb3b 	bl	8001108 <LL_ADC_IsEnabled>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 81bb 	bne.w	8001e10 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f7ff fa78 	bl	8000f9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_ADC_ConfigChannel+0x284>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	f040 8130 	bne.w	8001d18 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x268>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	bf94      	ite	ls
 8001ad8:	2301      	movls	r3, #1
 8001ada:	2300      	movhi	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	e01b      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x2a0>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d103      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e005      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x290>
 8001afc:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 8001b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	bf94      	ite	ls
 8001b12:	2301      	movls	r3, #1
 8001b14:	2300      	movhi	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d079      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d107      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x2c0>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	3301      	adds	r3, #1
 8001b30:	069b      	lsls	r3, r3, #26
 8001b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b36:	e015      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x2ec>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b48:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001b50:	2320      	movs	r3, #32
 8001b52:	e003      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	069b      	lsls	r3, r3, #26
 8001b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x30c>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0e9b      	lsrs	r3, r3, #26
 8001b76:	3301      	adds	r3, #1
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	e017      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x33c>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b94:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001b96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e003      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8001ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f003 031f 	and.w	r3, r3, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb4:	ea42 0103 	orr.w	r1, r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x362>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	0e9b      	lsrs	r3, r3, #26
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f003 021f 	and.w	r2, r3, #31
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	051b      	lsls	r3, r3, #20
 8001bd8:	e018      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x394>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be2:	fa93 f3a3 	rbit	r3, r3
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8001bf2:	2320      	movs	r3, #32
 8001bf4:	e003      	b.n	8001bfe <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf8:	fab3 f383 	clz	r3, r3
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f003 021f 	and.w	r2, r3, #31
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	e07e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x3b4>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	3301      	adds	r3, #1
 8001c24:	069b      	lsls	r3, r3, #26
 8001c26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c2a:	e015      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x3e0>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001c44:	2320      	movs	r3, #32
 8001c46:	e003      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	fab3 f383 	clz	r3, r3
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	069b      	lsls	r3, r3, #26
 8001c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x400>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0e9b      	lsrs	r3, r3, #26
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	2101      	movs	r1, #1
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	e017      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x430>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	61bb      	str	r3, [r7, #24]
  return result;
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8001c90:	2320      	movs	r3, #32
 8001c92:	e003      	b.n	8001c9c <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	ea42 0103 	orr.w	r1, r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x45c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	0e9b      	lsrs	r3, r3, #26
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	051b      	lsls	r3, r3, #20
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	e01b      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x494>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	60fb      	str	r3, [r7, #12]
  return result;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 021f 	and.w	r2, r3, #31
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	3b1e      	subs	r3, #30
 8001d06:	051b      	lsls	r3, r3, #20
 8001d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6892      	ldr	r2, [r2, #8]
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7ff f917 	bl	8000f46 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da77      	bge.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d20:	4840      	ldr	r0, [pc, #256]	; (8001e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d22:	f7ff f86f 	bl	8000e04 <LL_ADC_GetCommonPathInternalCh>
 8001d26:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d28:	483f      	ldr	r0, [pc, #252]	; (8001e28 <HAL_ADC_ConfigChannel+0x5b0>)
 8001d2a:	f7ff f9ed 	bl	8001108 <LL_ADC_IsEnabled>
 8001d2e:	4604      	mov	r4, r0
 8001d30:	483e      	ldr	r0, [pc, #248]	; (8001e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001d32:	f7ff f9e9 	bl	8001108 <LL_ADC_IsEnabled>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4323      	orrs	r3, r4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d155      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a3b      	ldr	r2, [pc, #236]	; (8001e30 <HAL_ADC_ConfigChannel+0x5b8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d122      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x516>
 8001d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a35      	ldr	r2, [pc, #212]	; (8001e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d159      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d62:	4619      	mov	r1, r3
 8001d64:	482f      	ldr	r0, [pc, #188]	; (8001e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8001d66:	f7ff f83a 	bl	8000dde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_ADC_ConfigChannel+0x5bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <HAL_ADC_ConfigChannel+0x5c0>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	3301      	adds	r3, #1
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d7e:	e002      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d8c:	e040      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <HAL_ADC_ConfigChannel+0x5c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x544>
 8001d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10c      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d131      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	4619      	mov	r1, r3
 8001db4:	481b      	ldr	r0, [pc, #108]	; (8001e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8001db6:	f7ff f812 	bl	8000dde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dba:	e029      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_ADC_ConfigChannel+0x5c8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d124      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
 8001dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11f      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a15      	ldr	r2, [pc, #84]	; (8001e2c <HAL_ADC_ConfigChannel+0x5b4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11a      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de0:	4619      	mov	r1, r3
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <HAL_ADC_ConfigChannel+0x5ac>)
 8001de4:	f7fe fffb 	bl	8000dde <LL_ADC_SetCommonPathInternalCh>
 8001de8:	e012      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dee:	f043 0220 	orr.w	r2, r3, #32
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001dfc:	e008      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e02:	f043 0220 	orr.w	r2, r3, #32
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001e18:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3784      	adds	r7, #132	; 0x84
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd90      	pop	{r4, r7, pc}
 8001e24:	40022300 	.word	0x40022300
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022100 	.word	0x40022100
 8001e30:	cb840000 	.word	0xcb840000
 8001e34:	24000000 	.word	0x24000000
 8001e38:	053e2d63 	.word	0x053e2d63
 8001e3c:	bac04000 	.word	0xbac04000
 8001e40:	cfb80000 	.word	0xcfb80000

08001e44 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f9a2 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 8001e60:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f9c4 	bl	80011f4 <LL_ADC_INJ_IsConversionOngoing>
 8001e6c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8098 	beq.w	8001fac <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d02a      	beq.n	8001ee0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7d5b      	ldrb	r3, [r3, #21]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d126      	bne.n	8001ee0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7d1b      	ldrb	r3, [r3, #20]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d122      	bne.n	8001ee0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e9e:	e014      	b.n	8001eca <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	4a45      	ldr	r2, [pc, #276]	; (8001fb8 <ADC_ConversionStop+0x174>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d90d      	bls.n	8001ec4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f043 0210 	orr.w	r2, r3, #16
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f043 0201 	orr.w	r2, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e074      	b.n	8001fae <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d1e3      	bne.n	8001ea0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d014      	beq.n	8001f10 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f95a 	bl	80011a4 <LL_ADC_REG_IsConversionOngoing>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f917 	bl	800112e <LL_ADC_IsDisableOngoing>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d104      	bne.n	8001f10 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f936 	bl	800117c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d014      	beq.n	8001f40 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff f96a 	bl	80011f4 <LL_ADC_INJ_IsConversionOngoing>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00c      	beq.n	8001f40 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff f8ff 	bl	800112e <LL_ADC_IsDisableOngoing>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d104      	bne.n	8001f40 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f946 	bl	80011cc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d005      	beq.n	8001f52 <ADC_ConversionStop+0x10e>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d105      	bne.n	8001f58 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	617b      	str	r3, [r7, #20]
        break;
 8001f50:	e005      	b.n	8001f5e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001f52:	2308      	movs	r3, #8
 8001f54:	617b      	str	r3, [r7, #20]
        break;
 8001f56:	e002      	b.n	8001f5e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
        break;
 8001f5c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001f5e:	f7fe ff1f 	bl	8000da0 <HAL_GetTick>
 8001f62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f64:	e01b      	b.n	8001f9e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f66:	f7fe ff1b 	bl	8000da0 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d914      	bls.n	8001f9e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00d      	beq.n	8001f9e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f043 0210 	orr.w	r2, r3, #16
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e007      	b.n	8001fae <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1dc      	bne.n	8001f66 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	000cdbff 	.word	0x000cdbff

08001fbc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f89d 	bl	8001108 <LL_ADC_IsEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d161      	bne.n	8002098 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <ADC_Enable+0xe8>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00d      	beq.n	8001ffe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f043 0210 	orr.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	f043 0201 	orr.w	r2, r3, #1
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e04d      	b.n	800209a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f858 	bl	80010b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002008:	f7fe feca 	bl	8000da0 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800200e:	4826      	ldr	r0, [pc, #152]	; (80020a8 <ADC_Enable+0xec>)
 8002010:	f7fe ffe8 	bl	8000fe4 <LL_ADC_GetMultimode>
 8002014:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a24      	ldr	r2, [pc, #144]	; (80020ac <ADC_Enable+0xf0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d002      	beq.n	8002026 <ADC_Enable+0x6a>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	e000      	b.n	8002028 <ADC_Enable+0x6c>
 8002026:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <ADC_Enable+0xf4>)
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	4293      	cmp	r3, r2
 800202e:	d02c      	beq.n	800208a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d130      	bne.n	8002098 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002036:	e028      	b.n	800208a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f863 	bl	8001108 <LL_ADC_IsEnabled>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d104      	bne.n	8002052 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff f833 	bl	80010b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002052:	f7fe fea5 	bl	8000da0 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d914      	bls.n	800208a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00d      	beq.n	800208a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0210 	orr.w	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e007      	b.n	800209a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d1cf      	bne.n	8002038 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	8000003f 	.word	0x8000003f
 80020a8:	40022300 	.word	0x40022300
 80020ac:	40022100 	.word	0x40022100
 80020b0:	40022000 	.word	0x40022000

080020b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f834 	bl	800112e <LL_ADC_IsDisableOngoing>
 80020c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f81b 	bl	8001108 <LL_ADC_IsEnabled>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d047      	beq.n	8002168 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d144      	bne.n	8002168 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 030d 	and.w	r3, r3, #13
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d10c      	bne.n	8002106 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fff5 	bl	80010e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2203      	movs	r2, #3
 80020fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fe:	f7fe fe4f 	bl	8000da0 <HAL_GetTick>
 8002102:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002104:	e029      	b.n	800215a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 0210 	orr.w	r2, r3, #16
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f043 0201 	orr.w	r2, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e023      	b.n	800216a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002122:	f7fe fe3d 	bl	8000da0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d914      	bls.n	800215a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00d      	beq.n	800215a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e007      	b.n	800216a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1dc      	bne.n	8002122 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <ADC_ConfigureBoostMode+0x188>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01c      	beq.n	80021c2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002188:	f001 fba4 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 800218c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002196:	d010      	beq.n	80021ba <ADC_ConfigureBoostMode+0x46>
 8002198:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800219c:	d871      	bhi.n	8002282 <ADC_ConfigureBoostMode+0x10e>
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d002      	beq.n	80021aa <ADC_ConfigureBoostMode+0x36>
 80021a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021a8:	d16b      	bne.n	8002282 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
        break;
 80021b8:	e066      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	60fb      	str	r3, [r7, #12]
        break;
 80021c0:	e062      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80021c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021c6:	f002 faed 	bl	80047a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80021ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021d4:	d051      	beq.n	800227a <ADC_ConfigureBoostMode+0x106>
 80021d6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80021da:	d854      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 80021dc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021e0:	d047      	beq.n	8002272 <ADC_ConfigureBoostMode+0xfe>
 80021e2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80021e6:	d84e      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 80021e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021ec:	d03d      	beq.n	800226a <ADC_ConfigureBoostMode+0xf6>
 80021ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80021f2:	d848      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 80021f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021f8:	d033      	beq.n	8002262 <ADC_ConfigureBoostMode+0xee>
 80021fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021fe:	d842      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 8002200:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002204:	d029      	beq.n	800225a <ADC_ConfigureBoostMode+0xe6>
 8002206:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800220a:	d83c      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 800220c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002210:	d01a      	beq.n	8002248 <ADC_ConfigureBoostMode+0xd4>
 8002212:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002216:	d836      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 8002218:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800221c:	d014      	beq.n	8002248 <ADC_ConfigureBoostMode+0xd4>
 800221e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002222:	d830      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 8002224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002228:	d00e      	beq.n	8002248 <ADC_ConfigureBoostMode+0xd4>
 800222a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800222e:	d82a      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 8002230:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002234:	d008      	beq.n	8002248 <ADC_ConfigureBoostMode+0xd4>
 8002236:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800223a:	d824      	bhi.n	8002286 <ADC_ConfigureBoostMode+0x112>
 800223c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002240:	d002      	beq.n	8002248 <ADC_ConfigureBoostMode+0xd4>
 8002242:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002246:	d11e      	bne.n	8002286 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	60fb      	str	r3, [r7, #12]
        break;
 8002258:	e016      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
        break;
 8002260:	e012      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	60fb      	str	r3, [r7, #12]
        break;
 8002268:	e00e      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	60fb      	str	r3, [r7, #12]
        break;
 8002270:	e00a      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	09db      	lsrs	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]
        break;
 8002278:	e006      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	60fb      	str	r3, [r7, #12]
        break;
 8002280:	e002      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
        break;
 8002282:	bf00      	nop
 8002284:	e000      	b.n	8002288 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002286:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <ADC_ConfigureBoostMode+0x18c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d808      	bhi.n	80022a8 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022a4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80022a6:	e025      	b.n	80022f4 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4a16      	ldr	r2, [pc, #88]	; (8002304 <ADC_ConfigureBoostMode+0x190>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d80a      	bhi.n	80022c6 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	e016      	b.n	80022f4 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4a0f      	ldr	r2, [pc, #60]	; (8002308 <ADC_ConfigureBoostMode+0x194>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d80a      	bhi.n	80022e4 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e0:	609a      	str	r2, [r3, #8]
}
 80022e2:	e007      	b.n	80022f4 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80022f2:	609a      	str	r2, [r3, #8]
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40022300 	.word	0x40022300
 8002300:	005f5e10 	.word	0x005f5e10
 8002304:	00bebc20 	.word	0x00bebc20
 8002308:	017d7840 	.word	0x017d7840

0800230c <LL_ADC_IsEnabled>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <LL_ADC_IsEnabled+0x18>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <LL_ADC_IsEnabled+0x1a>
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_REG_IsConversionOngoing>:
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d101      	bne.n	800234a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b09f      	sub	sp, #124	; 0x7c
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002372:	2302      	movs	r3, #2
 8002374:	e080      	b.n	8002478 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002382:	2300      	movs	r3, #0
 8002384:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3d      	ldr	r2, [pc, #244]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d102      	bne.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002390:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	e001      	b.n	800239a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e05f      	b.n	8002478 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ffb9 	bl	8002332 <LL_ADC_REG_IsConversionOngoing>
 80023c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ffb3 	bl	8002332 <LL_ADC_REG_IsConversionOngoing>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d141      	bne.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80023d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13e      	bne.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80023da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80023e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023f6:	4822      	ldr	r0, [pc, #136]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80023f8:	f7ff ff88 	bl	800230c <LL_ADC_IsEnabled>
 80023fc:	4604      	mov	r4, r0
 80023fe:	4821      	ldr	r0, [pc, #132]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002400:	f7ff ff84 	bl	800230c <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	4323      	orrs	r3, r4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d12e      	bne.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800240c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002412:	4013      	ands	r3, r2
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	6811      	ldr	r1, [r2, #0]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	6892      	ldr	r2, [r2, #8]
 800241c:	430a      	orrs	r2, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002422:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002424:	e021      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002430:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002432:	4813      	ldr	r0, [pc, #76]	; (8002480 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002434:	f7ff ff6a 	bl	800230c <LL_ADC_IsEnabled>
 8002438:	4604      	mov	r4, r0
 800243a:	4812      	ldr	r0, [pc, #72]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800243c:	f7ff ff66 	bl	800230c <LL_ADC_IsEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	4323      	orrs	r3, r4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d110      	bne.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800244e:	4013      	ands	r3, r2
 8002450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002452:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002454:	e009      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002468:	e000      	b.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800246a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002474:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002478:	4618      	mov	r0, r3
 800247a:	377c      	adds	r7, #124	; 0x7c
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	40022000 	.word	0x40022000
 8002484:	40022100 	.word	0x40022100
 8002488:	40022300 	.word	0x40022300
 800248c:	fffff0e0 	.word	0xfffff0e0

08002490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <__NVIC_SetPriorityGrouping+0x40>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024ac:	4013      	ands	r3, r2
 80024ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <__NVIC_SetPriorityGrouping+0x44>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x40>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00
 80024d4:	05fa0000 	.word	0x05fa0000

080024d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <__NVIC_GetPriorityGrouping+0x18>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	f003 0307 	and.w	r3, r3, #7
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	; (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	; (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff8e 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff47 	bl	8002490 <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff5e 	bl	80024d8 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff90 	bl	8002548 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5f 	bl	80024f4 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffb2 	bl	80025b0 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002666:	4b89      	ldr	r3, [pc, #548]	; (800288c <HAL_GPIO_Init+0x234>)
 8002668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800266a:	e194      	b.n	8002996 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8186 	beq.w	8002990 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b01      	cmp	r3, #1
 800268e:	d005      	beq.n	800269c <HAL_GPIO_Init+0x44>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d130      	bne.n	80026fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026d2:	2201      	movs	r2, #1
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 0201 	and.w	r2, r3, #1
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b03      	cmp	r3, #3
 8002708:	d017      	beq.n	800273a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d123      	bne.n	800278e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	08da      	lsrs	r2, r3, #3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3208      	adds	r2, #8
 8002788:	69b9      	ldr	r1, [r7, #24]
 800278a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	2203      	movs	r2, #3
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0203 	and.w	r2, r3, #3
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80e0 	beq.w	8002990 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <HAL_GPIO_Init+0x238>)
 80027d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80027d6:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <HAL_GPIO_Init+0x238>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_GPIO_Init+0x238>)
 80027e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ee:	4a29      	ldr	r2, [pc, #164]	; (8002894 <HAL_GPIO_Init+0x23c>)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3302      	adds	r3, #2
 80027f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	220f      	movs	r2, #15
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a20      	ldr	r2, [pc, #128]	; (8002898 <HAL_GPIO_Init+0x240>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d052      	beq.n	80028c0 <HAL_GPIO_Init+0x268>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_GPIO_Init+0x244>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d031      	beq.n	8002886 <HAL_GPIO_Init+0x22e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1e      	ldr	r2, [pc, #120]	; (80028a0 <HAL_GPIO_Init+0x248>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d02b      	beq.n	8002882 <HAL_GPIO_Init+0x22a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_GPIO_Init+0x24c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d025      	beq.n	800287e <HAL_GPIO_Init+0x226>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <HAL_GPIO_Init+0x250>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01f      	beq.n	800287a <HAL_GPIO_Init+0x222>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1b      	ldr	r2, [pc, #108]	; (80028ac <HAL_GPIO_Init+0x254>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_GPIO_Init+0x21e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_GPIO_Init+0x258>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_GPIO_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a19      	ldr	r2, [pc, #100]	; (80028b4 <HAL_GPIO_Init+0x25c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00d      	beq.n	800286e <HAL_GPIO_Init+0x216>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_GPIO_Init+0x260>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <HAL_GPIO_Init+0x212>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_GPIO_Init+0x264>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_GPIO_Init+0x20e>
 8002862:	2309      	movs	r3, #9
 8002864:	e02d      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 8002866:	230a      	movs	r3, #10
 8002868:	e02b      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 800286a:	2308      	movs	r3, #8
 800286c:	e029      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 800286e:	2307      	movs	r3, #7
 8002870:	e027      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 8002872:	2306      	movs	r3, #6
 8002874:	e025      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 8002876:	2305      	movs	r3, #5
 8002878:	e023      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 800287a:	2304      	movs	r3, #4
 800287c:	e021      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 800287e:	2303      	movs	r3, #3
 8002880:	e01f      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 8002882:	2302      	movs	r3, #2
 8002884:	e01d      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 8002886:	2301      	movs	r3, #1
 8002888:	e01b      	b.n	80028c2 <HAL_GPIO_Init+0x26a>
 800288a:	bf00      	nop
 800288c:	58000080 	.word	0x58000080
 8002890:	58024400 	.word	0x58024400
 8002894:	58000400 	.word	0x58000400
 8002898:	58020000 	.word	0x58020000
 800289c:	58020400 	.word	0x58020400
 80028a0:	58020800 	.word	0x58020800
 80028a4:	58020c00 	.word	0x58020c00
 80028a8:	58021000 	.word	0x58021000
 80028ac:	58021400 	.word	0x58021400
 80028b0:	58021800 	.word	0x58021800
 80028b4:	58021c00 	.word	0x58021c00
 80028b8:	58022000 	.word	0x58022000
 80028bc:	58022400 	.word	0x58022400
 80028c0:	2300      	movs	r3, #0
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	f002 0203 	and.w	r2, r2, #3
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	4093      	lsls	r3, r2
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d2:	4938      	ldr	r1, [pc, #224]	; (80029b4 <HAL_GPIO_Init+0x35c>)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3301      	adds	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f47f ae63 	bne.w	800266c <HAL_GPIO_Init+0x14>
  }
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	3724      	adds	r7, #36	; 0x24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	58000400 	.word	0x58000400

080029b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	2b06      	cmp	r3, #6
 80029ca:	d00a      	beq.n	80029e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029cc:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e040      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e03e      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80029ea:	491f      	ldr	r1, [pc, #124]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029f2:	f7fe f9d5 	bl	8000da0 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029f8:	e009      	b.n	8002a0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029fa:	f7fe f9d1 	bl	8000da0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a08:	d901      	bls.n	8002a0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e028      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a1a:	d1ee      	bne.n	80029fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b1e      	cmp	r3, #30
 8002a20:	d008      	beq.n	8002a34 <HAL_PWREx_ConfigSupply+0x7c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b2e      	cmp	r3, #46	; 0x2e
 8002a26:	d005      	beq.n	8002a34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b1d      	cmp	r3, #29
 8002a2c:	d002      	beq.n	8002a34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b2d      	cmp	r3, #45	; 0x2d
 8002a32:	d114      	bne.n	8002a5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002a34:	f7fe f9b4 	bl	8000da0 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a3a:	e009      	b.n	8002a50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a3c:	f7fe f9b0 	bl	8000da0 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a4a:	d901      	bls.n	8002a50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e007      	b.n	8002a60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	58024800 	.word	0x58024800

08002a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e3f3      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80b3 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a8c:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a96:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d007      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46>
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	2b18      	cmp	r3, #24
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_OscConfig+0x62>
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d10d      	bne.n	8002ace <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab2:	4b95      	ldr	r3, [pc, #596]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8098 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x184>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 8093 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e3cb      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x7a>
 8002ad8:	4b8b      	ldr	r3, [pc, #556]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a8a      	ldr	r2, [pc, #552]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e058      	b.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d112      	bne.n	8002b14 <HAL_RCC_OscConfig+0xa8>
 8002aee:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a85      	ldr	r2, [pc, #532]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a82      	ldr	r2, [pc, #520]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b00:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b80      	ldr	r3, [pc, #512]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e041      	b.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b1c:	d112      	bne.n	8002b44 <HAL_RCC_OscConfig+0xd8>
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a79      	ldr	r2, [pc, #484]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a76      	ldr	r2, [pc, #472]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e029      	b.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002b4c:	d112      	bne.n	8002b74 <HAL_RCC_OscConfig+0x108>
 8002b4e:	4b6e      	ldr	r3, [pc, #440]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a6d      	ldr	r2, [pc, #436]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b6b      	ldr	r3, [pc, #428]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6a      	ldr	r2, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b68      	ldr	r3, [pc, #416]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a67      	ldr	r2, [pc, #412]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e011      	b.n	8002b98 <HAL_RCC_OscConfig+0x12c>
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b61      	ldr	r3, [pc, #388]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a60      	ldr	r2, [pc, #384]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b5e      	ldr	r3, [pc, #376]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a5d      	ldr	r2, [pc, #372]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002b92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f8fe 	bl	8000da0 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe f8fa 	bl	8000da0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e355      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bba:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x13c>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f8ea 	bl	8000da0 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe f8e6 	bl	8000da0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e341      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x164>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 808c 	beq.w	8002d18 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c0a:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1ba>
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	d137      	bne.n	8002c8c <HAL_RCC_OscConfig+0x220>
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d132      	bne.n	8002c8c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c26:	4b38      	ldr	r3, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d005      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e313      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c3e:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0219 	bic.w	r2, r3, #25
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	492f      	ldr	r1, [pc, #188]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c50:	f7fe f8a6 	bl	8000da0 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c58:	f7fe f8a2 	bl	8000da0 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e2fd      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f0      	beq.n	8002c58 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c76:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	4920      	ldr	r1, [pc, #128]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c8a:	e045      	b.n	8002d18 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d026      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c94:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 0219 	bic.w	r2, r3, #25
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	4919      	ldr	r1, [pc, #100]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe f87b 	bl	8000da0 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe f877 	bl	8000da0 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e2d2      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	490b      	ldr	r1, [pc, #44]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
 8002ce0:	e01a      	b.n	8002d18 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <HAL_RCC_OscConfig+0x29c>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe f857 	bl	8000da0 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe f853 	bl	8000da0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d903      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e2ae      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
 8002d08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d0c:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ee      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d06a      	beq.n	8002dfa <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d24:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d2e:	4b91      	ldr	r3, [pc, #580]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d007      	beq.n	8002d4a <HAL_RCC_OscConfig+0x2de>
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b18      	cmp	r3, #24
 8002d3e:	d11b      	bne.n	8002d78 <HAL_RCC_OscConfig+0x30c>
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d116      	bne.n	8002d78 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d4a:	4b8a      	ldr	r3, [pc, #552]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2f6>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	2b80      	cmp	r3, #128	; 0x80
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e281      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d62:	4b84      	ldr	r3, [pc, #528]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	4980      	ldr	r1, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d76:	e040      	b.n	8002dfa <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d80:	4b7c      	ldr	r3, [pc, #496]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7b      	ldr	r2, [pc, #492]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f808 	bl	8000da0 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d94:	f7fe f804 	bl	8000da0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e25f      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002da6:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002db2:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	061b      	lsls	r3, r3, #24
 8002dc0:	496c      	ldr	r1, [pc, #432]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60cb      	str	r3, [r1, #12]
 8002dc6:	e018      	b.n	8002dfa <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dc8:	4b6a      	ldr	r3, [pc, #424]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a69      	ldr	r2, [pc, #420]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fd ffe4 	bl	8000da0 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ddc:	f7fd ffe0 	bl	8000da0 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e23b      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dee:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d036      	beq.n	8002e74 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d019      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e12:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fd ffc1 	bl	8000da0 <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fd ffbd 	bl	8000da0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e218      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x3b6>
 8002e40:	e018      	b.n	8002e74 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e42:	4b4c      	ldr	r3, [pc, #304]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e46:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fd ffa7 	bl	8000da0 <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e56:	f7fd ffa3 	bl	8000da0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e1fe      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e68:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d036      	beq.n	8002eee <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d019      	beq.n	8002ebc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002e8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e94:	f7fd ff84 	bl	8000da0 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e9c:	f7fd ff80 	bl	8000da0 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e1db      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x430>
 8002eba:	e018      	b.n	8002eee <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a2c      	ldr	r2, [pc, #176]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ec8:	f7fd ff6a 	bl	8000da0 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ed0:	f7fd ff66 	bl	8000da0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1c1      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80af 	beq.w	800305a <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002efc:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCC_OscConfig+0x50c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_RCC_OscConfig+0x50c>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f08:	f7fd ff4a 	bl	8000da0 <HAL_GetTick>
 8002f0c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fd ff46 	bl	8000da0 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1a1      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_RCC_OscConfig+0x50c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4d8>
 8002f36:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
 8002f42:	e05b      	b.n	8002ffc <HAL_RCC_OscConfig+0x590>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d117      	bne.n	8002f7c <HAL_RCC_OscConfig+0x510>
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a08      	ldr	r2, [pc, #32]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a02      	ldr	r2, [pc, #8]	; (8002f74 <HAL_RCC_OscConfig+0x508>)
 8002f6a:	f023 0304 	bic.w	r3, r3, #4
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e044      	b.n	8002ffc <HAL_RCC_OscConfig+0x590>
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58024800 	.word	0x58024800
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_OscConfig+0x53e>
 8002f84:	4b95      	ldr	r3, [pc, #596]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a91      	ldr	r2, [pc, #580]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	4b8f      	ldr	r3, [pc, #572]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a8e      	ldr	r2, [pc, #568]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	e028      	b.n	8002ffc <HAL_RCC_OscConfig+0x590>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b85      	cmp	r3, #133	; 0x85
 8002fb0:	d112      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x56c>
 8002fb2:	4b8a      	ldr	r3, [pc, #552]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a89      	ldr	r2, [pc, #548]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbe:	4b87      	ldr	r3, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a86      	ldr	r2, [pc, #536]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a83      	ldr	r2, [pc, #524]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd6:	e011      	b.n	8002ffc <HAL_RCC_OscConfig+0x590>
 8002fd8:	4b80      	ldr	r3, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe4:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a7c      	ldr	r2, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002fea:	f023 0304 	bic.w	r3, r3, #4
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a79      	ldr	r2, [pc, #484]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8002ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d015      	beq.n	8003030 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fd fecc 	bl	8000da0 <HAL_GetTick>
 8003008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fd fec8 	bl	8000da0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e121      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003022:	4b6e      	ldr	r3, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0ee      	beq.n	800300c <HAL_RCC_OscConfig+0x5a0>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fd feb6 	bl	8000da0 <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fd feb2 	bl	8000da0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e10b      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800304e:	4b63      	ldr	r3, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ee      	bne.n	8003038 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8100 	beq.w	8003264 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003064:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800306c:	2b18      	cmp	r3, #24
 800306e:	f000 80bb 	beq.w	80031e8 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b02      	cmp	r3, #2
 8003078:	f040 8095 	bne.w	80031a6 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307c:	4b57      	ldr	r3, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a56      	ldr	r2, [pc, #344]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fd fe8a 	bl	8000da0 <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003090:	f7fd fe86 	bl	8000da0 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0e1      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a2:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ae:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <HAL_RCC_OscConfig+0x774>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	430a      	orrs	r2, r1
 80030c2:	4946      	ldr	r1, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	628b      	str	r3, [r1, #40]	; 0x28
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	3b01      	subs	r3, #1
 80030ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	3b01      	subs	r3, #1
 80030d8:	025b      	lsls	r3, r3, #9
 80030da:	b29b      	uxth	r3, r3
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f0:	3b01      	subs	r3, #1
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80030f8:	4938      	ldr	r1, [pc, #224]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	4a36      	ldr	r2, [pc, #216]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800310c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800310e:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <HAL_RCC_OscConfig+0x778>)
 8003110:	4013      	ands	r3, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003116:	00d2      	lsls	r2, r2, #3
 8003118:	4930      	ldr	r1, [pc, #192]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800311a:	4313      	orrs	r3, r2
 800311c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f023 020c 	bic.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	492c      	ldr	r1, [pc, #176]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800312c:	4313      	orrs	r3, r2
 800312e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f023 0202 	bic.w	r2, r3, #2
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	4927      	ldr	r1, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800313e:	4313      	orrs	r3, r2
 8003140:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003142:	4b26      	ldr	r3, [pc, #152]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003146:	4a25      	ldr	r2, [pc, #148]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 8003178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fd fe0f 	bl	8000da0 <HAL_GetTick>
 8003182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7fd fe0b 	bl	8000da0 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e066      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003198:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x71a>
 80031a4:	e05e      	b.n	8003264 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80031ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7fd fdf5 	bl	8000da0 <HAL_GetTick>
 80031b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fd fdf1 	bl	8000da0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e04c      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCC_OscConfig+0x770>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x74e>
 80031d8:	e044      	b.n	8003264 <HAL_RCC_OscConfig+0x7f8>
 80031da:	bf00      	nop
 80031dc:	58024400 	.word	0x58024400
 80031e0:	fffffc0c 	.word	0xfffffc0c
 80031e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_RCC_OscConfig+0x804>)
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCC_OscConfig+0x804>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d031      	beq.n	8003260 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0203 	and.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d12a      	bne.n	8003260 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003216:	429a      	cmp	r2, r3
 8003218:	d122      	bne.n	8003260 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003224:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	0a5b      	lsrs	r3, r3, #9
 800322e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d111      	bne.n	8003260 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d108      	bne.n	8003260 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	0e1b      	lsrs	r3, r3, #24
 8003252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	58024400 	.word	0x58024400

08003274 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e19c      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b8a      	ldr	r3, [pc, #552]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d910      	bls.n	80032b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b87      	ldr	r3, [pc, #540]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 020f 	bic.w	r2, r3, #15
 800329e:	4985      	ldr	r1, [pc, #532]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032a6:	4b83      	ldr	r3, [pc, #524]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 030f 	and.w	r3, r3, #15
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e184      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d010      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d908      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032d4:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	4975      	ldr	r1, [pc, #468]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fe:	429a      	cmp	r2, r3
 8003300:	d908      	bls.n	8003314 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	496a      	ldr	r1, [pc, #424]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003310:	4313      	orrs	r3, r2
 8003312:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	4b64      	ldr	r3, [pc, #400]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800332c:	429a      	cmp	r2, r3
 800332e:	d908      	bls.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	495e      	ldr	r1, [pc, #376]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 800333e:	4313      	orrs	r3, r2
 8003340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69da      	ldr	r2, [r3, #28]
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335a:	429a      	cmp	r2, r3
 800335c:	d908      	bls.n	8003370 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800335e:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	4953      	ldr	r1, [pc, #332]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 800336c:	4313      	orrs	r3, r2
 800336e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	429a      	cmp	r2, r3
 800338a:	d908      	bls.n	800339e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f023 020f 	bic.w	r2, r3, #15
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4947      	ldr	r1, [pc, #284]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d055      	beq.n	8003456 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80033aa:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	4940      	ldr	r1, [pc, #256]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033c4:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d121      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0f6      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d115      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0ea      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f4:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0de      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003404:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d6      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f023 0207 	bic.w	r2, r3, #7
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4925      	ldr	r1, [pc, #148]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003426:	f7fd fcbb 	bl	8000da0 <HAL_GetTick>
 800342a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342c:	e00a      	b.n	8003444 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342e:	f7fd fcb7 	bl	8000da0 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0be      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	429a      	cmp	r2, r3
 8003454:	d1eb      	bne.n	800342e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d010      	beq.n	8003484 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	429a      	cmp	r2, r3
 8003470:	d208      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	490e      	ldr	r1, [pc, #56]	; (80034b8 <HAL_RCC_ClockConfig+0x244>)
 8003480:	4313      	orrs	r3, r2
 8003482:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d214      	bcs.n	80034bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 020f 	bic.w	r2, r3, #15
 800349a:	4906      	ldr	r1, [pc, #24]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_RCC_ClockConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e086      	b.n	80035c2 <HAL_RCC_ClockConfig+0x34e>
 80034b4:	52002000 	.word	0x52002000
 80034b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d010      	beq.n	80034ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d208      	bcs.n	80034ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034d8:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	4939      	ldr	r1, [pc, #228]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003502:	429a      	cmp	r2, r3
 8003504:	d208      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	492e      	ldr	r1, [pc, #184]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	d010      	beq.n	8003546 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003530:	429a      	cmp	r2, r3
 8003532:	d208      	bcs.n	8003546 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003534:	4b25      	ldr	r3, [pc, #148]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	4922      	ldr	r1, [pc, #136]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003542:	4313      	orrs	r3, r2
 8003544:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d010      	beq.n	8003574 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355e:	429a      	cmp	r2, r3
 8003560:	d208      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4917      	ldr	r1, [pc, #92]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003570:	4313      	orrs	r3, r2
 8003572:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003574:	f000 f834 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	4912      	ldr	r1, [pc, #72]	; (80035d0 <HAL_RCC_ClockConfig+0x35c>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
 8003590:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003592:	4b0e      	ldr	r3, [pc, #56]	; (80035cc <HAL_RCC_ClockConfig+0x358>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <HAL_RCC_ClockConfig+0x35c>)
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_RCC_ClockConfig+0x360>)
 80035aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ac:	4a0a      	ldr	r2, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x364>)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x368>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fba8 	bl	8000d0c <HAL_InitTick>
 80035bc:	4603      	mov	r3, r0
 80035be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400
 80035d0:	08006e1c 	.word	0x08006e1c
 80035d4:	24000004 	.word	0x24000004
 80035d8:	24000000 	.word	0x24000000
 80035dc:	24000008 	.word	0x24000008

080035e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e6:	4bb3      	ldr	r3, [pc, #716]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035ee:	2b18      	cmp	r3, #24
 80035f0:	f200 8155 	bhi.w	800389e <HAL_RCC_GetSysClockFreq+0x2be>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003661 	.word	0x08003661
 8003600:	0800389f 	.word	0x0800389f
 8003604:	0800389f 	.word	0x0800389f
 8003608:	0800389f 	.word	0x0800389f
 800360c:	0800389f 	.word	0x0800389f
 8003610:	0800389f 	.word	0x0800389f
 8003614:	0800389f 	.word	0x0800389f
 8003618:	0800389f 	.word	0x0800389f
 800361c:	08003687 	.word	0x08003687
 8003620:	0800389f 	.word	0x0800389f
 8003624:	0800389f 	.word	0x0800389f
 8003628:	0800389f 	.word	0x0800389f
 800362c:	0800389f 	.word	0x0800389f
 8003630:	0800389f 	.word	0x0800389f
 8003634:	0800389f 	.word	0x0800389f
 8003638:	0800389f 	.word	0x0800389f
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800389f 	.word	0x0800389f
 8003644:	0800389f 	.word	0x0800389f
 8003648:	0800389f 	.word	0x0800389f
 800364c:	0800389f 	.word	0x0800389f
 8003650:	0800389f 	.word	0x0800389f
 8003654:	0800389f 	.word	0x0800389f
 8003658:	0800389f 	.word	0x0800389f
 800365c:	08003693 	.word	0x08003693
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003660:	4b94      	ldr	r3, [pc, #592]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800366c:	4b91      	ldr	r3, [pc, #580]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	4a90      	ldr	r2, [pc, #576]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800367e:	e111      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003680:	4b8d      	ldr	r3, [pc, #564]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003682:	61bb      	str	r3, [r7, #24]
    break;
 8003684:	e10e      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003686:	4b8d      	ldr	r3, [pc, #564]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003688:	61bb      	str	r3, [r7, #24]
    break;
 800368a:	e10b      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800368c:	4b8c      	ldr	r3, [pc, #560]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800368e:	61bb      	str	r3, [r7, #24]
    break;
 8003690:	e108      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800369c:	4b85      	ldr	r3, [pc, #532]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80036a8:	4b82      	ldr	r3, [pc, #520]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80036b2:	4b80      	ldr	r3, [pc, #512]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	08db      	lsrs	r3, r3, #3
 80036b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fb02 f303 	mul.w	r3, r2, r3
 80036c2:	ee07 3a90 	vmov	s15, r3
 80036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ca:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80e1 	beq.w	8003898 <HAL_RCC_GetSysClockFreq+0x2b8>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	f000 8083 	beq.w	80037e4 <HAL_RCC_GetSysClockFreq+0x204>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	f200 80a1 	bhi.w	8003828 <HAL_RCC_GetSysClockFreq+0x248>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x114>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d056      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036f2:	e099      	b.n	8003828 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f4:	4b6f      	ldr	r3, [pc, #444]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02d      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003700:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	4a6b      	ldr	r2, [pc, #428]	; (80038b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800372a:	4b62      	ldr	r3, [pc, #392]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 6a02 	vldr	s12, [r7, #8]
 800373e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80038c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800375a:	e087      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	ee07 3a90 	vmov	s15, r3
 8003762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003766:	eddf 6a58 	vldr	s13, [pc, #352]	; 80038c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376e:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003782:	eddf 5a50 	vldr	s11, [pc, #320]	; 80038c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800379e:	e065      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80037ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037b2:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80038c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037e2:	e043      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f6:	4b2f      	ldr	r3, [pc, #188]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003806:	ed97 6a02 	vldr	s12, [r7, #8]
 800380a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80038c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800380e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800381a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003826:	e021      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800384a:	ed97 6a02 	vldr	s12, [r7, #8]
 800384e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80038c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800385a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800386a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	0a5b      	lsrs	r3, r3, #9
 8003872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003876:	3301      	adds	r3, #1
 8003878:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	ee07 3a90 	vmov	s15, r3
 8003880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003884:	edd7 6a07 	vldr	s13, [r7, #28]
 8003888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800388c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003890:	ee17 3a90 	vmov	r3, s15
 8003894:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003896:	e005      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
    break;
 800389c:	e002      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038a0:	61bb      	str	r3, [r7, #24]
    break;
 80038a2:	bf00      	nop
  }

  return sysclockfreq;
 80038a4:	69bb      	ldr	r3, [r7, #24]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
 80038b8:	03d09000 	.word	0x03d09000
 80038bc:	003d0900 	.word	0x003d0900
 80038c0:	016e3600 	.word	0x016e3600
 80038c4:	46000000 	.word	0x46000000
 80038c8:	4c742400 	.word	0x4c742400
 80038cc:	4a742400 	.word	0x4a742400
 80038d0:	4bb71b00 	.word	0x4bb71b00

080038d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80038da:	f7ff fe81 	bl	80035e0 <HAL_RCC_GetSysClockFreq>
 80038de:	4602      	mov	r2, r0
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCC_GetHCLKFreq+0x50>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	490f      	ldr	r1, [pc, #60]	; (8003928 <HAL_RCC_GetHCLKFreq+0x54>)
 80038ec:	5ccb      	ldrb	r3, [r1, r3]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	fa22 f303 	lsr.w	r3, r2, r3
 80038f6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <HAL_RCC_GetHCLKFreq+0x50>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	4a09      	ldr	r2, [pc, #36]	; (8003928 <HAL_RCC_GetHCLKFreq+0x54>)
 8003902:	5cd3      	ldrb	r3, [r2, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	fa22 f303 	lsr.w	r3, r2, r3
 800390e:	4a07      	ldr	r2, [pc, #28]	; (800392c <HAL_RCC_GetHCLKFreq+0x58>)
 8003910:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003912:	4a07      	ldr	r2, [pc, #28]	; (8003930 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <HAL_RCC_GetHCLKFreq+0x58>)
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	58024400 	.word	0x58024400
 8003928:	08006e1c 	.word	0x08006e1c
 800392c:	24000004 	.word	0x24000004
 8003930:	24000000 	.word	0x24000000

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003938:	f7ff ffcc 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	; (800395c <HAL_RCC_GetPCLK1Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58024400 	.word	0x58024400
 800395c:	08006e1c 	.word	0x08006e1c

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003964:	f7ff ffb6 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4904      	ldr	r1, [pc, #16]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	58024400 	.word	0x58024400
 8003988:	08006e1c 	.word	0x08006e1c

0800398c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003998:	2300      	movs	r3, #0
 800399a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d03f      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039b0:	d02a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039b6:	d824      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039bc:	d018      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039c2:	d81e      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039cc:	d007      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039ce:	e018      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d0:	4ba6      	ldr	r3, [pc, #664]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4aa5      	ldr	r2, [pc, #660]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2102      	movs	r1, #2
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 ff17 	bl	8005818 <RCCEx_PLL2_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3324      	adds	r3, #36	; 0x24
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 ffc0 	bl	800597c <RCCEx_PLL3_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a10:	4b96      	ldr	r3, [pc, #600]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1c:	4993      	ldr	r1, [pc, #588]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	650b      	str	r3, [r1, #80]	; 0x50
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d03d      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d826      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a59 	.word	0x08003a59
 8003a48:	08003a67 	.word	0x08003a67
 8003a4c:	08003a79 	.word	0x08003a79
 8003a50:	08003a91 	.word	0x08003a91
 8003a54:	08003a91 	.word	0x08003a91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b84      	ldr	r3, [pc, #528]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	4a83      	ldr	r2, [pc, #524]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a64:	e015      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 fed3 	bl	8005818 <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a76:	e00c      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3324      	adds	r3, #36	; 0x24
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 ff7c 	bl	800597c <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8e:	e000      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a98:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	f023 0207 	bic.w	r2, r3, #7
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa4:	4971      	ldr	r1, [pc, #452]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	650b      	str	r3, [r1, #80]	; 0x50
 8003aaa:	e001      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7dfb      	ldrb	r3, [r7, #23]
 8003aae:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d04a      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ac4:	d031      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003ac6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003aca:	d82b      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad0:	d02d      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad6:	d825      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ad8:	2bc0      	cmp	r3, #192	; 0xc0
 8003ada:	d02a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003adc:	2bc0      	cmp	r3, #192	; 0xc0
 8003ade:	d821      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ae0:	2b80      	cmp	r3, #128	; 0x80
 8003ae2:	d016      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d81d      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d007      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003af0:	e018      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af2:	4b5e      	ldr	r3, [pc, #376]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	4a5d      	ldr	r2, [pc, #372]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003afe:	e019      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f001 fe86 	bl	8005818 <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003b10:	e010      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3324      	adds	r3, #36	; 0x24
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f001 ff2f 	bl	800597c <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003b22:	e007      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75fb      	strb	r3, [r7, #23]
      break;
 8003b28:	e004      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e002      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e000      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b34:	7dfb      	ldrb	r3, [r7, #23]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d109      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003b3a:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	4949      	ldr	r1, [pc, #292]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	650b      	str	r3, [r1, #80]	; 0x50
 8003b4c:	e001      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d04f      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b62:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003b66:	d036      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003b68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003b6c:	d830      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b72:	d032      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b78:	d82a      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b7e:	d02e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003b80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b84:	d824      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8a:	d018      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b90:	d81e      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b9a:	d007      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003b9c:	e018      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9e:	4b33      	ldr	r3, [pc, #204]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003baa:	e019      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fe30 	bl	8005818 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003bbc:	e010      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3324      	adds	r3, #36	; 0x24
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 fed9 	bl	800597c <RCCEx_PLL3_Config>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003bce:	e007      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bd4:	e004      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	491e      	ldr	r1, [pc, #120]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	650b      	str	r3, [r1, #80]	; 0x50
 8003bf8:	e001      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	7dfb      	ldrb	r3, [r7, #23]
 8003bfc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d034      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0e:	2b30      	cmp	r3, #48	; 0x30
 8003c10:	d01c      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003c12:	2b30      	cmp	r3, #48	; 0x30
 8003c14:	d817      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c16:	2b20      	cmp	r3, #32
 8003c18:	d00c      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d813      	bhi.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d016      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003c22:	2b10      	cmp	r3, #16
 8003c24:	d10f      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c26:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	4a10      	ldr	r2, [pc, #64]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c32:	e00e      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	2102      	movs	r1, #2
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f001 fdec 	bl	8005818 <RCCEx_PLL2_Config>
 8003c40:	4603      	mov	r3, r0
 8003c42:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003c44:	e005      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003c4c:	bf00      	nop
 8003c4e:	e000      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003c58:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	4901      	ldr	r1, [pc, #4]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c6a:	e003      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003c6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
 8003c72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d047      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c88:	d030      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c8e:	d82a      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c94:	d02c      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003c96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c9a:	d824      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	d018      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d81e      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d007      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4aaf      	ldr	r2, [pc, #700]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cc0:	e017      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f001 fda5 	bl	8005818 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003cd2:	e00e      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3324      	adds	r3, #36	; 0x24
 8003cd8:	2100      	movs	r1, #0
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f001 fe4e 	bl	800597c <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cea:	e002      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cf8:	4b9f      	ldr	r3, [pc, #636]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	499c      	ldr	r1, [pc, #624]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	650b      	str	r3, [r1, #80]	; 0x50
 8003d0a:	e001      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d049      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d24:	d02e      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d2a:	d828      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003d2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d30:	d02a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003d32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d36:	d822      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003d38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d3c:	d026      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003d3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d42:	d81c      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003d44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d48:	d010      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d4e:	d816      	bhi.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01d      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d111      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 fd59 	bl	8005818 <RCCEx_PLL2_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d6a:	e012      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3324      	adds	r3, #36	; 0x24
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 fe02 	bl	800597c <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003d7c:	e009      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
      break;
 8003d82:	e006      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d84:	bf00      	nop
 8003d86:	e004      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d88:	bf00      	nop
 8003d8a:	e002      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d98:	4b77      	ldr	r3, [pc, #476]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da4:	4974      	ldr	r1, [pc, #464]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	650b      	str	r3, [r1, #80]	; 0x50
 8003daa:	e001      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d053      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dc2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003dc6:	d034      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003dc8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003dcc:	d82e      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd2:	d030      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dd8:	d828      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d02c      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d822      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dea:	d028      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003dec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003df0:	d81c      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003df6:	d010      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfc:	d816      	bhi.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01f      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e06:	d111      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fd02 	bl	8005818 <RCCEx_PLL2_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e18:	e014      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3324      	adds	r3, #36	; 0x24
 8003e1e:	2101      	movs	r1, #1
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 fdab 	bl	800597c <RCCEx_PLL3_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e30:	e008      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e006      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e004      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e002      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e000      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e44:	7dfb      	ldrb	r3, [r7, #23]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e58:	4947      	ldr	r1, [pc, #284]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e5e:	e001      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d02f      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e78:	d00e      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e7e:	d814      	bhi.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003e84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e88:	d10f      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a3a      	ldr	r2, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003e96:	e00c      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f001 fcba 	bl	8005818 <RCCEx_PLL2_Config>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	75fb      	strb	r3, [r7, #23]
      break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eb8:	4b2f      	ldr	r3, [pc, #188]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec4:	492c      	ldr	r1, [pc, #176]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	650b      	str	r3, [r1, #80]	; 0x50
 8003eca:	e001      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d032      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d81b      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003ee4:	a201      	add	r2, pc, #4	; (adr r2, 8003eec <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003efd 	.word	0x08003efd
 8003ef4:	08003f0b 	.word	0x08003f0b
 8003ef8:	08003f23 	.word	0x08003f23
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a1d      	ldr	r2, [pc, #116]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f08:	e00c      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	2102      	movs	r1, #2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 fc81 	bl	8005818 <RCCEx_PLL2_Config>
 8003f16:	4603      	mov	r3, r0
 8003f18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4910      	ldr	r1, [pc, #64]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f3c:	e001      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 808a 	beq.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f5c:	f7fc ff20 	bl	8000da0 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f62:	e00d      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f64:	f7fc ff1c 	bl	8000da0 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d906      	bls.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	75fb      	strb	r3, [r7, #23]
        break;
 8003f76:	e009      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f80:	4bba      	ldr	r3, [pc, #744]	; (800426c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0eb      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d166      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f92:	4bb7      	ldr	r3, [pc, #732]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003f94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f9c:	4053      	eors	r3, r2
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d013      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa6:	4bb2      	ldr	r3, [pc, #712]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fb0:	4baf      	ldr	r3, [pc, #700]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	4aae      	ldr	r2, [pc, #696]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fbc:	4bac      	ldr	r3, [pc, #688]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc0:	4aab      	ldr	r2, [pc, #684]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003fc8:	4aa9      	ldr	r2, [pc, #676]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd8:	d115      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fc fee1 	bl	8000da0 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fe0:	e00b      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fc fedd 	bl	8000da0 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d902      	bls.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ff8:	e005      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ffa:	4b9d      	ldr	r3, [pc, #628]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ed      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d126      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800401a:	d10d      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800401c:	4b94      	ldr	r3, [pc, #592]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800402a:	0919      	lsrs	r1, r3, #4
 800402c:	4b91      	ldr	r3, [pc, #580]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800402e:	400b      	ands	r3, r1
 8004030:	498f      	ldr	r1, [pc, #572]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	610b      	str	r3, [r1, #16]
 8004036:	e005      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004038:	4b8d      	ldr	r3, [pc, #564]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	4a8c      	ldr	r2, [pc, #560]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800403e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004042:	6113      	str	r3, [r2, #16]
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004046:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800404e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004052:	4987      	ldr	r1, [pc, #540]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004054:	4313      	orrs	r3, r2
 8004056:	670b      	str	r3, [r1, #112]	; 0x70
 8004058:	e004      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800405a:	7dfb      	ldrb	r3, [r7, #23]
 800405c:	75bb      	strb	r3, [r7, #22]
 800405e:	e001      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d07f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004076:	2b28      	cmp	r3, #40	; 0x28
 8004078:	d866      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	0800414f 	.word	0x0800414f
 8004084:	08004149 	.word	0x08004149
 8004088:	08004149 	.word	0x08004149
 800408c:	08004149 	.word	0x08004149
 8004090:	08004149 	.word	0x08004149
 8004094:	08004149 	.word	0x08004149
 8004098:	08004149 	.word	0x08004149
 800409c:	08004149 	.word	0x08004149
 80040a0:	08004125 	.word	0x08004125
 80040a4:	08004149 	.word	0x08004149
 80040a8:	08004149 	.word	0x08004149
 80040ac:	08004149 	.word	0x08004149
 80040b0:	08004149 	.word	0x08004149
 80040b4:	08004149 	.word	0x08004149
 80040b8:	08004149 	.word	0x08004149
 80040bc:	08004149 	.word	0x08004149
 80040c0:	08004137 	.word	0x08004137
 80040c4:	08004149 	.word	0x08004149
 80040c8:	08004149 	.word	0x08004149
 80040cc:	08004149 	.word	0x08004149
 80040d0:	08004149 	.word	0x08004149
 80040d4:	08004149 	.word	0x08004149
 80040d8:	08004149 	.word	0x08004149
 80040dc:	08004149 	.word	0x08004149
 80040e0:	0800414f 	.word	0x0800414f
 80040e4:	08004149 	.word	0x08004149
 80040e8:	08004149 	.word	0x08004149
 80040ec:	08004149 	.word	0x08004149
 80040f0:	08004149 	.word	0x08004149
 80040f4:	08004149 	.word	0x08004149
 80040f8:	08004149 	.word	0x08004149
 80040fc:	08004149 	.word	0x08004149
 8004100:	0800414f 	.word	0x0800414f
 8004104:	08004149 	.word	0x08004149
 8004108:	08004149 	.word	0x08004149
 800410c:	08004149 	.word	0x08004149
 8004110:	08004149 	.word	0x08004149
 8004114:	08004149 	.word	0x08004149
 8004118:	08004149 	.word	0x08004149
 800411c:	08004149 	.word	0x08004149
 8004120:	0800414f 	.word	0x0800414f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3304      	adds	r3, #4
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fb74 	bl	8005818 <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004134:	e00c      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3324      	adds	r3, #36	; 0x24
 800413a:	2101      	movs	r1, #1
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fc1d 	bl	800597c <RCCEx_PLL3_Config>
 8004142:	4603      	mov	r3, r0
 8004144:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004146:	e003      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	75fb      	strb	r3, [r7, #23]
      break;
 800414c:	e000      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800414e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004156:	4b46      	ldr	r3, [pc, #280]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004164:	4942      	ldr	r1, [pc, #264]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	654b      	str	r3, [r1, #84]	; 0x54
 800416a:	e001      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d038      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004180:	2b05      	cmp	r3, #5
 8004182:	d821      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	080041cf 	.word	0x080041cf
 8004190:	080041a5 	.word	0x080041a5
 8004194:	080041b7 	.word	0x080041b7
 8004198:	080041cf 	.word	0x080041cf
 800419c:	080041cf 	.word	0x080041cf
 80041a0:	080041cf 	.word	0x080041cf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2101      	movs	r1, #1
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 fb34 	bl	8005818 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041b4:	e00c      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f001 fbdd 	bl	800597c <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80041c6:	e003      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041d6:	4b26      	ldr	r3, [pc, #152]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e2:	4923      	ldr	r1, [pc, #140]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	654b      	str	r3, [r1, #84]	; 0x54
 80041e8:	e001      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d040      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004200:	2b05      	cmp	r3, #5
 8004202:	d821      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800424f 	.word	0x0800424f
 8004210:	08004225 	.word	0x08004225
 8004214:	08004237 	.word	0x08004237
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800424f 	.word	0x0800424f
 8004220:	0800424f 	.word	0x0800424f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	2101      	movs	r1, #1
 800422a:	4618      	mov	r0, r3
 800422c:	f001 faf4 	bl	8005818 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004234:	e00c      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3324      	adds	r3, #36	; 0x24
 800423a:	2101      	movs	r1, #1
 800423c:	4618      	mov	r0, r3
 800423e:	f001 fb9d 	bl	800597c <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
      break;
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800424e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004250:	7dfb      	ldrb	r3, [r7, #23]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d110      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f023 0207 	bic.w	r2, r3, #7
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004264:	4902      	ldr	r1, [pc, #8]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	658b      	str	r3, [r1, #88]	; 0x58
 800426a:	e007      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800426c:	58024800 	.word	0x58024800
 8004270:	58024400 	.word	0x58024400
 8004274:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d04b      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004292:	d02e      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004298:	d828      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d02a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d822      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042aa:	d026      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80042ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042b0:	d81c      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b6:	d010      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80042b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042bc:	d816      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x960>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01d      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x972>
 80042c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c6:	d111      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f001 faa2 	bl	8005818 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042d8:	e012      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3324      	adds	r3, #36	; 0x24
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 fb4b 	bl	800597c <RCCEx_PLL3_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80042ea:	e009      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e006      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042f2:	bf00      	nop
 80042f4:	e004      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042f6:	bf00      	nop
 80042f8:	e002      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80042fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004306:	4bb3      	ldr	r3, [pc, #716]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004314:	49af      	ldr	r1, [pc, #700]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004316:	4313      	orrs	r3, r2
 8004318:	654b      	str	r3, [r1, #84]	; 0x54
 800431a:	e001      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d04b      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004332:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004336:	d02e      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004338:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800433c:	d828      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800433e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004342:	d02a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004348:	d822      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800434a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800434e:	d026      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004354:	d81c      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800435a:	d010      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004360:	d816      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01d      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436a:	d111      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2100      	movs	r1, #0
 8004372:	4618      	mov	r0, r3
 8004374:	f001 fa50 	bl	8005818 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800437c:	e012      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f001 faf9 	bl	800597c <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800438e:	e009      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	75fb      	strb	r3, [r7, #23]
      break;
 8004394:	e006      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8004396:	bf00      	nop
 8004398:	e004      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800439a:	bf00      	nop
 800439c:	e002      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80043a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043aa:	4b8a      	ldr	r3, [pc, #552]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043b8:	4986      	ldr	r1, [pc, #536]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	658b      	str	r3, [r1, #88]	; 0x58
 80043be:	e001      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d04b      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043da:	d02e      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80043dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043e0:	d828      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e6:	d02a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ec:	d822      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f2:	d026      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80043f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043f8:	d81c      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80043fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043fe:	d010      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8004400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004404:	d816      	bhi.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d01d      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800440a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800440e:	d111      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f9fe 	bl	8005818 <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004420:	e012      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3324      	adds	r3, #36	; 0x24
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f001 faa7 	bl	800597c <RCCEx_PLL3_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004432:	e009      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	75fb      	strb	r3, [r7, #23]
      break;
 8004438:	e006      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800443a:	bf00      	nop
 800443c:	e004      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8004446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800444e:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800445c:	495d      	ldr	r1, [pc, #372]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800445e:	4313      	orrs	r3, r2
 8004460:	658b      	str	r3, [r1, #88]	; 0x58
 8004462:	e001      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d10a      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3324      	adds	r3, #36	; 0x24
 8004484:	2102      	movs	r1, #2
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fa78 	bl	800597c <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004496:	4b4f      	ldr	r3, [pc, #316]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a4:	494b      	ldr	r1, [pc, #300]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d01a      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	d10a      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3324      	adds	r3, #36	; 0x24
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fa57 	bl	800597c <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044d8:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e6:	493b      	ldr	r1, [pc, #236]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d034      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004502:	d01d      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8004504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004508:	d817      	bhi.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800450e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004512:	d009      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004514:	e011      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	2100      	movs	r1, #0
 800451c:	4618      	mov	r0, r3
 800451e:	f001 f97b 	bl	8005818 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004526:	e00c      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	2102      	movs	r1, #2
 800452e:	4618      	mov	r0, r3
 8004530:	f001 fa24 	bl	800597c <RCCEx_PLL3_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004538:	e003      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
      break;
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8004540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004556:	491f      	ldr	r1, [pc, #124]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004558:	4313      	orrs	r3, r2
 800455a:	658b      	str	r3, [r1, #88]	; 0x58
 800455c:	e001      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
 8004560:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d036      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004574:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004578:	d01c      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800457a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800457e:	d816      	bhi.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	d003      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800458a:	d007      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800458c:	e00f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	4a10      	ldr	r2, [pc, #64]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800459a:	e00c      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 f9ea 	bl	800597c <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80045ac:	e003      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	75fb      	strb	r3, [r7, #23]
      break;
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80045b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10d      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80045be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ca:	4902      	ldr	r1, [pc, #8]	; (80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	654b      	str	r3, [r1, #84]	; 0x54
 80045d0:	e004      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80045d2:	bf00      	nop
 80045d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d029      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80045f6:	e00f      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b69      	ldr	r3, [pc, #420]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004604:	e00b      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3304      	adds	r3, #4
 800460a:	2102      	movs	r1, #2
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f903 	bl	8005818 <RCCEx_PLL2_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004616:	e002      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
      break;
 800461c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004624:	4b5e      	ldr	r3, [pc, #376]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004630:	495b      	ldr	r1, [pc, #364]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004632:	4313      	orrs	r3, r2
 8004634:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004636:	e001      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3324      	adds	r3, #36	; 0x24
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f001 f994 	bl	800597c <RCCEx_PLL3_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d032      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004674:	d017      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800467a:	d811      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d013      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8004682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004686:	d80b      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd22>
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d106      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004692:	4b43      	ldr	r3, [pc, #268]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	4a42      	ldr	r2, [pc, #264]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800469e:	e007      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
      break;
 80046a4:	e004      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80046ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046b6:	4b3a      	ldr	r3, [pc, #232]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	4936      	ldr	r1, [pc, #216]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	654b      	str	r3, [r1, #84]	; 0x54
 80046ca:	e001      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046e8:	492d      	ldr	r1, [pc, #180]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046fa:	4b29      	ldr	r3, [pc, #164]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004706:	4926      	ldr	r1, [pc, #152]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004708:	4313      	orrs	r3, r2
 800470a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004718:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800471a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	491e      	ldr	r1, [pc, #120]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004726:	4313      	orrs	r3, r2
 8004728:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00d      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004736:	4b1a      	ldr	r3, [pc, #104]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	4a19      	ldr	r2, [pc, #100]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800473c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004740:	6113      	str	r3, [r2, #16]
 8004742:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800474c:	4914      	ldr	r1, [pc, #80]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800474e:	4313      	orrs	r3, r2
 8004750:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da08      	bge.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800475a:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800475c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	490e      	ldr	r1, [pc, #56]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004768:	4313      	orrs	r3, r2
 800476a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4906      	ldr	r1, [pc, #24]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004788:	4313      	orrs	r3, r2
 800478a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800478c:	7dbb      	ldrb	r3, [r7, #22]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	58024400 	.word	0x58024400

080047a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b090      	sub	sp, #64	; 0x40
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b2:	f040 8089 	bne.w	80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80047b6:	4ba8      	ldr	r3, [pc, #672]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d87d      	bhi.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 80047c6:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80047c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	08004805 	.word	0x08004805
 80047d4:	08004829 	.word	0x08004829
 80047d8:	080048bd 	.word	0x080048bd
 80047dc:	0800484d 	.word	0x0800484d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047e0:	4b9d      	ldr	r3, [pc, #628]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ec:	d107      	bne.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 febe 	bl	8005574 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047fc:	e3f5      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004802:	e3f2      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004804:	4b94      	ldr	r3, [pc, #592]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800480c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004810:	d107      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004812:	f107 0318 	add.w	r3, r7, #24
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fc04 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004820:	e3e3      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004826:	e3e0      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004828:	4b8b      	ldr	r3, [pc, #556]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004834:	d107      	bne.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004836:	f107 030c 	add.w	r3, r7, #12
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fd46 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004844:	e3d1      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800484a:	e3ce      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800484c:	4b82      	ldr	r3, [pc, #520]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800484e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004854:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004856:	4b80      	ldr	r3, [pc, #512]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	d10c      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004868:	4b7b      	ldr	r3, [pc, #492]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	08db      	lsrs	r3, r3, #3
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	4a7a      	ldr	r2, [pc, #488]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004874:	fa22 f303 	lsr.w	r3, r2, r3
 8004878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487a:	e01e      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800487c:	4b76      	ldr	r3, [pc, #472]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d106      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004890:	d102      	bne.n	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004892:	4b73      	ldr	r3, [pc, #460]	; (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004896:	e010      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004898:	4b6f      	ldr	r3, [pc, #444]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a4:	d106      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80048a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ac:	d102      	bne.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048ae:	4b6d      	ldr	r3, [pc, #436]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b2:	e002      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048b8:	e397      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80048ba:	e396      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048bc:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048c0:	e393      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048c6:	e390      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ce:	f040 8095 	bne.w	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 80048d2:	4b61      	ldr	r3, [pc, #388]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80048da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e2:	d04d      	beq.n	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ea:	f200 8084 	bhi.w	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	2bc0      	cmp	r3, #192	; 0xc0
 80048f2:	d07d      	beq.n	80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	2bc0      	cmp	r3, #192	; 0xc0
 80048f8:	d87d      	bhi.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	2b80      	cmp	r3, #128	; 0x80
 80048fe:	d02d      	beq.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	2b80      	cmp	r3, #128	; 0x80
 8004904:	d877      	bhi.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	2b40      	cmp	r3, #64	; 0x40
 8004910:	d012      	beq.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8004912:	e070      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004914:	4b50      	ldr	r3, [pc, #320]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004920:	d107      	bne.n	8004932 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fe24 	bl	8005574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004930:	e35b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004936:	e358      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004938:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004944:	d107      	bne.n	8004956 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004946:	f107 0318 	add.w	r3, r7, #24
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb6a 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004954:	e349      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800495a:	e346      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800495c:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004968:	d107      	bne.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800496a:	f107 030c 	add.w	r3, r7, #12
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fcac 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004978:	e337      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800497e:	e334      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004980:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004988:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800498a:	4b33      	ldr	r3, [pc, #204]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d10c      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800499c:	4b2e      	ldr	r3, [pc, #184]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ae:	e01e      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049b0:	4b29      	ldr	r3, [pc, #164]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049bc:	d106      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049c4:	d102      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049c6:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ca:	e010      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049cc:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049d8:	d106      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d102      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e6:	e002      	b.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80049ec:	e2fd      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80049ee:	e2fc      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049f4:	e2f9      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049fa:	e2f6      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a02:	f040 80a7 	bne.w	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004a0e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a16:	d05f      	beq.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1e:	f200 8096 	bhi.w	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a28:	f000 808e 	beq.w	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a32:	f200 808c 	bhi.w	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3c:	d03a      	beq.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a44:	f200 8083 	bhi.w	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00e      	beq.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d01c      	beq.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8004a56:	e07a      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	03d09000 	.word	0x03d09000
 8004a60:	003d0900 	.word	0x003d0900
 8004a64:	016e3600 	.word	0x016e3600
 8004a68:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a6c:	4ba8      	ldr	r3, [pc, #672]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a78:	d107      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fd78 	bl	8005574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a88:	e2af      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a8e:	e2ac      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a90:	4b9f      	ldr	r3, [pc, #636]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9c:	d107      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a9e:	f107 0318 	add.w	r3, r7, #24
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fabe 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004aac:	e29d      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ab2:	e29a      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ab4:	4b96      	ldr	r3, [pc, #600]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fc00 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ad0:	e28b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad6:	e288      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ad8:	4b8d      	ldr	r3, [pc, #564]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ae2:	4b8b      	ldr	r3, [pc, #556]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d10c      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8004aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004af4:	4b86      	ldr	r3, [pc, #536]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	4a85      	ldr	r2, [pc, #532]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b06:	e01e      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b08:	4b81      	ldr	r3, [pc, #516]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b14:	d106      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b1e:	4b7e      	ldr	r3, [pc, #504]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b22:	e010      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b24:	4b7a      	ldr	r3, [pc, #488]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b30:	d106      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b38:	d102      	bne.n	8004b40 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b3a:	4b78      	ldr	r3, [pc, #480]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b3e:	e002      	b.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8004b44:	e251      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004b46:	e250      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b48:	4b75      	ldr	r3, [pc, #468]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b4c:	e24d      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b52:	e24a      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b5a:	f040 809c 	bne.w	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b5e:	4b6c      	ldr	r3, [pc, #432]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b66:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b6e:	d054      	beq.n	8004c1a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b76:	f200 808b 	bhi.w	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b80:	f000 8083 	beq.w	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b8a:	f200 8081 	bhi.w	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b94:	d02f      	beq.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9c:	d878      	bhi.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004baa:	d012      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8004bac:	e070      	b.n	8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bae:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bba:	d107      	bne.n	8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fcd7 	bl	8005574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bca:	e20e      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bd0:	e20b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bd2:	4b4f      	ldr	r3, [pc, #316]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004be0:	f107 0318 	add.w	r3, r7, #24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fa1d 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bee:	e1fc      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bf4:	e1f9      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bf6:	4b46      	ldr	r3, [pc, #280]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c02:	d107      	bne.n	8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fb5f 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c12:	e1ea      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c18:	e1e7      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c24:	4b3a      	ldr	r3, [pc, #232]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8004c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c36:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	4a34      	ldr	r2, [pc, #208]	; (8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8004c42:	fa22 f303 	lsr.w	r3, r2, r3
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c48:	e01e      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c56:	d106      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8004c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c5e:	d102      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	e010      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c66:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c72:	d106      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c7a:	d102      	bne.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c86:	e1b0      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004c88:	e1af      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c8a:	4b25      	ldr	r3, [pc, #148]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8e:	e1ac      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c94:	e1a9      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c9c:	d17d      	bne.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ca6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cae:	d039      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cb6:	d86d      	bhi.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d012      	beq.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8004cc6:	e065      	b.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd4:	d107      	bne.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cd6:	f107 0318 	add.w	r3, r7, #24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 f9a2 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ce4:	e181      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cea:	e17e      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fae4 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d08:	e16f      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d0e:	e16c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004d10:	58024400 	.word	0x58024400
 8004d14:	03d09000 	.word	0x03d09000
 8004d18:	003d0900 	.word	0x003d0900
 8004d1c:	016e3600 	.word	0x016e3600
 8004d20:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d24:	4ba0      	ldr	r3, [pc, #640]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d2e:	4b9e      	ldr	r3, [pc, #632]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d109      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d40:	4b99      	ldr	r3, [pc, #612]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	08db      	lsrs	r3, r3, #3
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	4a98      	ldr	r2, [pc, #608]	; (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d52:	e01e      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d54:	4b94      	ldr	r3, [pc, #592]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d60:	d106      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d68:	d102      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d6a:	4b91      	ldr	r3, [pc, #580]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d6e:	e010      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d70:	4b8d      	ldr	r3, [pc, #564]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d7c:	d106      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d84:	d102      	bne.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d86:	4b8b      	ldr	r3, [pc, #556]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8a:	e002      	b.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d90:	e12b      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004d92:	e12a      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d98:	e127      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d133      	bne.n	8004e0a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004da2:	4b81      	ldr	r3, [pc, #516]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d012      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004dba:	e023      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dbc:	4b7a      	ldr	r3, [pc, #488]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dc8:	d107      	bne.n	8004dda <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 fbd0 	bl	8005574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dd8:	e107      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004dde:	e104      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004de0:	4b71      	ldr	r3, [pc, #452]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dec:	d107      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dee:	f107 0318 	add.w	r3, r7, #24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f916 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dfc:	e0f5      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e02:	e0f2      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e08:	e0ef      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e10:	f040 8091 	bne.w	8004f36 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e14:	4b64      	ldr	r3, [pc, #400]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e24:	f000 8081 	beq.w	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004e2e:	d87f      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e36:	d06b      	beq.n	8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e3e:	d877      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e46:	d056      	beq.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4e:	d86f      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e56:	d03b      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8004e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e5e:	d867      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e66:	d021      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e6e:	d85f      	bhi.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8004e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d004      	beq.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8004e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e7c:	d004      	beq.n	8004e88 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8004e7e:	e057      	b.n	8004f30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e80:	f000 f8ba 	bl	8004ff8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e84:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e86:	e0b0      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e88:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e94:	d107      	bne.n	8004ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e96:	f107 0318 	add.w	r3, r7, #24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f8c2 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ea4:	e0a1      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eaa:	e09e      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eb8:	d107      	bne.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eba:	f107 030c 	add.w	r3, r7, #12
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fa04 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ec8:	e08f      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ece:	e08c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ed0:	4b35      	ldr	r3, [pc, #212]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d109      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004edc:	4b32      	ldr	r3, [pc, #200]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a31      	ldr	r2, [pc, #196]	; (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eee:	e07c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ef4:	e079      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004ef6:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f02:	d102      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f08:	e06f      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f0e:	e06c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8004f1e:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f22:	e062      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f28:	e05f      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f2a:	4b23      	ldr	r3, [pc, #140]	; (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8004f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f2e:	e05c      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f34:	e059      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3c:	d153      	bne.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f4e:	d035      	beq.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f56:	d843      	bhi.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f64:	d00d      	beq.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8004f66:	e03b      	b.n	8004fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f74:	d102      	bne.n	8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8004f76:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f7a:	e036      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f80:	e033      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f82:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 faed 	bl	8005574 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f9e:	e024      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa4:	e021      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	03d09000 	.word	0x03d09000
 8004fb0:	003d0900 	.word	0x003d0900
 8004fb4:	016e3600 	.word	0x016e3600
 8004fb8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fc8:	d107      	bne.n	8004fda <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fca:	f107 0318 	add.w	r3, r7, #24
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 f828 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fd8:	e007      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fe4:	e001      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3740      	adds	r7, #64	; 0x40
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	58024400 	.word	0x58024400

08004ff8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004ffc:	f7fe fc6a 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4904      	ldr	r1, [pc, #16]	; (8005020 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	58024400 	.word	0x58024400
 8005020:	08006e1c 	.word	0x08006e1c

08005024 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	; 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800502c:	4ba1      	ldr	r3, [pc, #644]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005036:	4b9f      	ldr	r3, [pc, #636]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	0b1b      	lsrs	r3, r3, #12
 800503c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005040:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005042:	4b9c      	ldr	r3, [pc, #624]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800504e:	4b99      	ldr	r3, [pc, #612]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8111 	beq.w	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b02      	cmp	r3, #2
 8005076:	f000 8083 	beq.w	8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f200 80a1 	bhi.w	80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d056      	beq.n	800513c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800508e:	e099      	b.n	80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005090:	4b88      	ldr	r3, [pc, #544]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02d      	beq.n	80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800509c:	4b85      	ldr	r3, [pc, #532]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	4a84      	ldr	r2, [pc, #528]	; (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	ee07 3a90 	vmov	s15, r3
 80050b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c6:	4b7b      	ldr	r3, [pc, #492]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050f6:	e087      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b6a      	ldr	r3, [pc, #424]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a03 	vldr	s12, [r7, #12]
 800511e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800513a:	e065      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005162:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800517e:	e043      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b48      	ldr	r3, [pc, #288]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051c2:	e021      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b37      	ldr	r3, [pc, #220]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005206:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005208:	4b2a      	ldr	r3, [pc, #168]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	0a5b      	lsrs	r3, r3, #9
 800520e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800521e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005222:	edd7 6a07 	vldr	s13, [r7, #28]
 8005226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522e:	ee17 2a90 	vmov	r2, s15
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005236:	4b1f      	ldr	r3, [pc, #124]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005250:	edd7 6a07 	vldr	s13, [r7, #28]
 8005254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525c:	ee17 2a90 	vmov	r2, s15
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	0e1b      	lsrs	r3, r3, #24
 800526a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800527a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528a:	ee17 2a90 	vmov	r2, s15
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005292:	e008      	b.n	80052a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
}
 80052a6:	bf00      	nop
 80052a8:	3724      	adds	r7, #36	; 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	03d09000 	.word	0x03d09000
 80052bc:	46000000 	.word	0x46000000
 80052c0:	4c742400 	.word	0x4c742400
 80052c4:	4a742400 	.word	0x4a742400
 80052c8:	4bb71b00 	.word	0x4bb71b00

080052cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d4:	4ba1      	ldr	r3, [pc, #644]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052de:	4b9f      	ldr	r3, [pc, #636]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	0d1b      	lsrs	r3, r3, #20
 80052e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ea:	4b9c      	ldr	r3, [pc, #624]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052f6:	4b99      	ldr	r3, [pc, #612]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	08db      	lsrs	r3, r3, #3
 80052fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8111 	beq.w	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f000 8083 	beq.w	8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f200 80a1 	bhi.w	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d056      	beq.n	80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005336:	e099      	b.n	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005338:	4b88      	ldr	r3, [pc, #544]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02d      	beq.n	80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005344:	4b85      	ldr	r3, [pc, #532]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	4a84      	ldr	r2, [pc, #528]	; (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b7b      	ldr	r3, [pc, #492]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005382:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800539e:	e087      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b6a      	ldr	r3, [pc, #424]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053e2:	e065      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b59      	ldr	r3, [pc, #356]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005406:	ed97 6a03 	vldr	s12, [r7, #12]
 800540a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005426:	e043      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543a:	4b48      	ldr	r3, [pc, #288]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544a:	ed97 6a03 	vldr	s12, [r7, #12]
 800544e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800546a:	e021      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800547a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547e:	4b37      	ldr	r3, [pc, #220]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005492:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	0a5b      	lsrs	r3, r3, #9
 80054b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d6:	ee17 2a90 	vmov	r2, s15
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054de:	4b1f      	ldr	r3, [pc, #124]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005504:	ee17 2a90 	vmov	r2, s15
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800550c:	4b13      	ldr	r3, [pc, #76]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005526:	edd7 6a07 	vldr	s13, [r7, #28]
 800552a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005532:	ee17 2a90 	vmov	r2, s15
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800553a:	e008      	b.n	800554e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
}
 800554e:	bf00      	nop
 8005550:	3724      	adds	r7, #36	; 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	58024400 	.word	0x58024400
 8005560:	03d09000 	.word	0x03d09000
 8005564:	46000000 	.word	0x46000000
 8005568:	4c742400 	.word	0x4c742400
 800556c:	4a742400 	.word	0x4a742400
 8005570:	4bb71b00 	.word	0x4bb71b00

08005574 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005574:	b480      	push	{r7}
 8005576:	b089      	sub	sp, #36	; 0x24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800557c:	4ba0      	ldr	r3, [pc, #640]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005586:	4b9e      	ldr	r3, [pc, #632]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005590:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005592:	4b9b      	ldr	r3, [pc, #620]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800559c:	4b98      	ldr	r3, [pc, #608]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800559e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a0:	08db      	lsrs	r3, r3, #3
 80055a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8111 	beq.w	80057e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	f000 8083 	beq.w	80056ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	f200 80a1 	bhi.w	8005712 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d056      	beq.n	800568a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055dc:	e099      	b.n	8005712 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055de:	4b88      	ldr	r3, [pc, #544]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d02d      	beq.n	8005646 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055ea:	4b85      	ldr	r3, [pc, #532]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	4a83      	ldr	r2, [pc, #524]	; (8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055f6:	fa22 f303 	lsr.w	r3, r2, r3
 80055fa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005614:	4b7a      	ldr	r3, [pc, #488]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005624:	ed97 6a03 	vldr	s12, [r7, #12]
 8005628:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800562c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005630:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005638:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005640:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005644:	e087      	b.n	8005756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	ee07 3a90 	vmov	s15, r3
 800564c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005650:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005654:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005658:	4b69      	ldr	r3, [pc, #420]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005668:	ed97 6a03 	vldr	s12, [r7, #12]
 800566c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005670:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005674:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005678:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800567c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005684:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005688:	e065      	b.n	8005756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005694:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569c:	4b58      	ldr	r3, [pc, #352]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a4:	ee07 3a90 	vmov	s15, r3
 80056a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056cc:	e043      	b.n	8005756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005814 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e0:	4b47      	ldr	r3, [pc, #284]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005700:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005704:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800570c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005710:	e021      	b.n	8005756 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	ee07 3a90 	vmov	s15, r3
 8005718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800571c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005724:	4b36      	ldr	r3, [pc, #216]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005734:	ed97 6a03 	vldr	s12, [r7, #12]
 8005738:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800573c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005740:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005750:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005754:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005756:	4b2a      	ldr	r3, [pc, #168]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	0a5b      	lsrs	r3, r3, #9
 800575c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800576c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005770:	edd7 6a07 	vldr	s13, [r7, #28]
 8005774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800577c:	ee17 2a90 	vmov	r2, s15
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005784:	4b1e      	ldr	r3, [pc, #120]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005788:	0c1b      	lsrs	r3, r3, #16
 800578a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800579a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800579e:	edd7 6a07 	vldr	s13, [r7, #28]
 80057a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057aa:	ee17 2a90 	vmov	r2, s15
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057b2:	4b13      	ldr	r3, [pc, #76]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	0e1b      	lsrs	r3, r3, #24
 80057b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057bc:	ee07 3a90 	vmov	s15, r3
 80057c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d8:	ee17 2a90 	vmov	r2, s15
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057e0:	e008      	b.n	80057f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	3724      	adds	r7, #36	; 0x24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	58024400 	.word	0x58024400
 8005804:	03d09000 	.word	0x03d09000
 8005808:	46000000 	.word	0x46000000
 800580c:	4c742400 	.word	0x4c742400
 8005810:	4a742400 	.word	0x4a742400
 8005814:	4bb71b00 	.word	0x4bb71b00

08005818 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005826:	4b53      	ldr	r3, [pc, #332]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b03      	cmp	r3, #3
 8005830:	d101      	bne.n	8005836 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e099      	b.n	800596a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005836:	4b4f      	ldr	r3, [pc, #316]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a4e      	ldr	r2, [pc, #312]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800583c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005842:	f7fb faad 	bl	8000da0 <HAL_GetTick>
 8005846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005848:	e008      	b.n	800585c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800584a:	f7fb faa9 	bl	8000da0 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e086      	b.n	800596a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800585c:	4b45      	ldr	r3, [pc, #276]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f0      	bne.n	800584a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005868:	4b42      	ldr	r3, [pc, #264]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	031b      	lsls	r3, r3, #12
 8005876:	493f      	ldr	r1, [pc, #252]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	628b      	str	r3, [r1, #40]	; 0x28
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	3b01      	subs	r3, #1
 8005882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	3b01      	subs	r3, #1
 800588c:	025b      	lsls	r3, r3, #9
 800588e:	b29b      	uxth	r3, r3
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	3b01      	subs	r3, #1
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	061b      	lsls	r3, r3, #24
 80058a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058ac:	4931      	ldr	r1, [pc, #196]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058b2:	4b30      	ldr	r3, [pc, #192]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	492d      	ldr	r1, [pc, #180]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058c4:	4b2b      	ldr	r3, [pc, #172]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c8:	f023 0220 	bic.w	r2, r3, #32
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	4928      	ldr	r1, [pc, #160]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058d6:	4b27      	ldr	r3, [pc, #156]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4a26      	ldr	r2, [pc, #152]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058dc:	f023 0310 	bic.w	r3, r3, #16
 80058e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e6:	4b24      	ldr	r3, [pc, #144]	; (8005978 <RCCEx_PLL2_Config+0x160>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	69d2      	ldr	r2, [r2, #28]
 80058ee:	00d2      	lsls	r2, r2, #3
 80058f0:	4920      	ldr	r1, [pc, #128]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058f6:	4b1f      	ldr	r3, [pc, #124]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 80058fc:	f043 0310 	orr.w	r3, r3, #16
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d106      	bne.n	8005916 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005908:	4b1a      	ldr	r3, [pc, #104]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	4a19      	ldr	r2, [pc, #100]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800590e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005912:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005914:	e00f      	b.n	8005936 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d106      	bne.n	800592a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800591c:	4b15      	ldr	r3, [pc, #84]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005920:	4a14      	ldr	r2, [pc, #80]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 8005922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005928:	e005      	b.n	8005936 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800592a:	4b12      	ldr	r3, [pc, #72]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	4a11      	ldr	r2, [pc, #68]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 8005930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005934:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005936:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a0e      	ldr	r2, [pc, #56]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800593c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005942:	f7fb fa2d 	bl	8000da0 <HAL_GetTick>
 8005946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005948:	e008      	b.n	800595c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800594a:	f7fb fa29 	bl	8000da0 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e006      	b.n	800596a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <RCCEx_PLL2_Config+0x15c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
 8005978:	ffff0007 	.word	0xffff0007

0800597c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800598a:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	f003 0303 	and.w	r3, r3, #3
 8005992:	2b03      	cmp	r3, #3
 8005994:	d101      	bne.n	800599a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e099      	b.n	8005ace <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800599a:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 80059a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a6:	f7fb f9fb 	bl	8000da0 <HAL_GetTick>
 80059aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059ac:	e008      	b.n	80059c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059ae:	f7fb f9f7 	bl	8000da0 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e086      	b.n	8005ace <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059c0:	4b45      	ldr	r3, [pc, #276]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1f0      	bne.n	80059ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059cc:	4b42      	ldr	r3, [pc, #264]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	051b      	lsls	r3, r3, #20
 80059da:	493f      	ldr	r1, [pc, #252]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	628b      	str	r3, [r1, #40]	; 0x28
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	025b      	lsls	r3, r3, #9
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	431a      	orrs	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	041b      	lsls	r3, r3, #16
 80059fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	061b      	lsls	r3, r3, #24
 8005a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a10:	4931      	ldr	r1, [pc, #196]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a16:	4b30      	ldr	r3, [pc, #192]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	492d      	ldr	r1, [pc, #180]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a28:	4b2b      	ldr	r3, [pc, #172]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	4928      	ldr	r1, [pc, #160]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a3a:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	4a26      	ldr	r2, [pc, #152]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <RCCEx_PLL3_Config+0x160>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	69d2      	ldr	r2, [r2, #28]
 8005a52:	00d2      	lsls	r2, r2, #3
 8005a54:	4920      	ldr	r1, [pc, #128]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a5a:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d106      	bne.n	8005a7a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a78:	e00f      	b.n	8005a9a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d106      	bne.n	8005a8e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a80:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a8c:	e005      	b.n	8005a9a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a0e      	ldr	r2, [pc, #56]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fb f97b 	bl	8000da0 <HAL_GetTick>
 8005aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aac:	e008      	b.n	8005ac0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005aae:	f7fb f977 	bl	8000da0 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e006      	b.n	8005ace <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <RCCEx_PLL3_Config+0x15c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	58024400 	.word	0x58024400
 8005adc:	ffff0007 	.word	0xffff0007

08005ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e042      	b.n	8005b78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7fb f837 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2224      	movs	r2, #36	; 0x24
 8005b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0201 	bic.w	r2, r2, #1
 8005b20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f82c 	bl	8005b80 <UART_SetConfig>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e022      	b.n	8005b78 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fe7e 	bl	800683c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 ff05 	bl	8006980 <UART_CheckIdleState>
 8005b76:	4603      	mov	r3, r0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b5b0      	push	{r4, r5, r7, lr}
 8005b82:	b08e      	sub	sp, #56	; 0x38
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4bbf      	ldr	r3, [pc, #764]	; (8005eac <UART_SetConfig+0x32c>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6812      	ldr	r2, [r2, #0]
 8005bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4ab5      	ldr	r2, [pc, #724]	; (8005eb0 <UART_SetConfig+0x330>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005be6:	4313      	orrs	r3, r2
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	4bb0      	ldr	r3, [pc, #704]	; (8005eb4 <UART_SetConfig+0x334>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	f023 010f 	bic.w	r1, r3, #15
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4aa7      	ldr	r2, [pc, #668]	; (8005eb8 <UART_SetConfig+0x338>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d176      	bne.n	8005d0c <UART_SetConfig+0x18c>
 8005c1e:	4ba7      	ldr	r3, [pc, #668]	; (8005ebc <UART_SetConfig+0x33c>)
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c26:	2b28      	cmp	r3, #40	; 0x28
 8005c28:	d86c      	bhi.n	8005d04 <UART_SetConfig+0x184>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0xb0>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005cd5 	.word	0x08005cd5
 8005c34:	08005d05 	.word	0x08005d05
 8005c38:	08005d05 	.word	0x08005d05
 8005c3c:	08005d05 	.word	0x08005d05
 8005c40:	08005d05 	.word	0x08005d05
 8005c44:	08005d05 	.word	0x08005d05
 8005c48:	08005d05 	.word	0x08005d05
 8005c4c:	08005d05 	.word	0x08005d05
 8005c50:	08005cdd 	.word	0x08005cdd
 8005c54:	08005d05 	.word	0x08005d05
 8005c58:	08005d05 	.word	0x08005d05
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005d05 	.word	0x08005d05
 8005c64:	08005d05 	.word	0x08005d05
 8005c68:	08005d05 	.word	0x08005d05
 8005c6c:	08005d05 	.word	0x08005d05
 8005c70:	08005ce5 	.word	0x08005ce5
 8005c74:	08005d05 	.word	0x08005d05
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d05 	.word	0x08005d05
 8005c80:	08005d05 	.word	0x08005d05
 8005c84:	08005d05 	.word	0x08005d05
 8005c88:	08005d05 	.word	0x08005d05
 8005c8c:	08005d05 	.word	0x08005d05
 8005c90:	08005ced 	.word	0x08005ced
 8005c94:	08005d05 	.word	0x08005d05
 8005c98:	08005d05 	.word	0x08005d05
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005d05 	.word	0x08005d05
 8005ca4:	08005d05 	.word	0x08005d05
 8005ca8:	08005d05 	.word	0x08005d05
 8005cac:	08005d05 	.word	0x08005d05
 8005cb0:	08005cf5 	.word	0x08005cf5
 8005cb4:	08005d05 	.word	0x08005d05
 8005cb8:	08005d05 	.word	0x08005d05
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005d05 	.word	0x08005d05
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005d05 	.word	0x08005d05
 8005ccc:	08005d05 	.word	0x08005d05
 8005cd0:	08005cfd 	.word	0x08005cfd
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cda:	e326      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cdc:	2304      	movs	r3, #4
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ce2:	e322      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ce4:	2308      	movs	r3, #8
 8005ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cea:	e31e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cec:	2310      	movs	r3, #16
 8005cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cf2:	e31a      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cf4:	2320      	movs	r3, #32
 8005cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cfa:	e316      	b.n	800632a <UART_SetConfig+0x7aa>
 8005cfc:	2340      	movs	r3, #64	; 0x40
 8005cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d02:	e312      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d04:	2380      	movs	r3, #128	; 0x80
 8005d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0a:	e30e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a6b      	ldr	r2, [pc, #428]	; (8005ec0 <UART_SetConfig+0x340>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d130      	bne.n	8005d78 <UART_SetConfig+0x1f8>
 8005d16:	4b69      	ldr	r3, [pc, #420]	; (8005ebc <UART_SetConfig+0x33c>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	2b05      	cmp	r3, #5
 8005d20:	d826      	bhi.n	8005d70 <UART_SetConfig+0x1f0>
 8005d22:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x1a8>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d41 	.word	0x08005d41
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d61 	.word	0x08005d61
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	2300      	movs	r3, #0
 8005d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d46:	e2f0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4e:	e2ec      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d56:	e2e8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5e:	e2e4      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d60:	2320      	movs	r3, #32
 8005d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d66:	e2e0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6e:	e2dc      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d76:	e2d8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a51      	ldr	r2, [pc, #324]	; (8005ec4 <UART_SetConfig+0x344>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d130      	bne.n	8005de4 <UART_SetConfig+0x264>
 8005d82:	4b4e      	ldr	r3, [pc, #312]	; (8005ebc <UART_SetConfig+0x33c>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d826      	bhi.n	8005ddc <UART_SetConfig+0x25c>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x214>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dad 	.word	0x08005dad
 8005d98:	08005db5 	.word	0x08005db5
 8005d9c:	08005dbd 	.word	0x08005dbd
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005dd5 	.word	0x08005dd5
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db2:	e2ba      	b.n	800632a <UART_SetConfig+0x7aa>
 8005db4:	2304      	movs	r3, #4
 8005db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dba:	e2b6      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc2:	e2b2      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dca:	e2ae      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dcc:	2320      	movs	r3, #32
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd2:	e2aa      	b.n	800632a <UART_SetConfig+0x7aa>
 8005dd4:	2340      	movs	r3, #64	; 0x40
 8005dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dda:	e2a6      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005de2:	e2a2      	b.n	800632a <UART_SetConfig+0x7aa>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a37      	ldr	r2, [pc, #220]	; (8005ec8 <UART_SetConfig+0x348>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d130      	bne.n	8005e50 <UART_SetConfig+0x2d0>
 8005dee:	4b33      	ldr	r3, [pc, #204]	; (8005ebc <UART_SetConfig+0x33c>)
 8005df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d826      	bhi.n	8005e48 <UART_SetConfig+0x2c8>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <UART_SetConfig+0x280>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e19 	.word	0x08005e19
 8005e04:	08005e21 	.word	0x08005e21
 8005e08:	08005e29 	.word	0x08005e29
 8005e0c:	08005e31 	.word	0x08005e31
 8005e10:	08005e39 	.word	0x08005e39
 8005e14:	08005e41 	.word	0x08005e41
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1e:	e284      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e20:	2304      	movs	r3, #4
 8005e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e26:	e280      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2e:	e27c      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e30:	2310      	movs	r3, #16
 8005e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e36:	e278      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e38:	2320      	movs	r3, #32
 8005e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3e:	e274      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e40:	2340      	movs	r3, #64	; 0x40
 8005e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e46:	e270      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e48:	2380      	movs	r3, #128	; 0x80
 8005e4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4e:	e26c      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <UART_SetConfig+0x34c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d142      	bne.n	8005ee0 <UART_SetConfig+0x360>
 8005e5a:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <UART_SetConfig+0x33c>)
 8005e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d838      	bhi.n	8005ed8 <UART_SetConfig+0x358>
 8005e66:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <UART_SetConfig+0x2ec>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005e85 	.word	0x08005e85
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	08005e95 	.word	0x08005e95
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005ea5 	.word	0x08005ea5
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8a:	e24e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e8c:	2304      	movs	r3, #4
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e24a      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e94:	2308      	movs	r3, #8
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e246      	b.n	800632a <UART_SetConfig+0x7aa>
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e242      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e23e      	b.n	800632a <UART_SetConfig+0x7aa>
 8005eac:	cfff69f3 	.word	0xcfff69f3
 8005eb0:	58000c00 	.word	0x58000c00
 8005eb4:	11fff4ff 	.word	0x11fff4ff
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	58024400 	.word	0x58024400
 8005ec0:	40004400 	.word	0x40004400
 8005ec4:	40004800 	.word	0x40004800
 8005ec8:	40004c00 	.word	0x40004c00
 8005ecc:	40005000 	.word	0x40005000
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ed6:	e228      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ed8:	2380      	movs	r3, #128	; 0x80
 8005eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ede:	e224      	b.n	800632a <UART_SetConfig+0x7aa>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4ab1      	ldr	r2, [pc, #708]	; (80061ac <UART_SetConfig+0x62c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d176      	bne.n	8005fd8 <UART_SetConfig+0x458>
 8005eea:	4bb1      	ldr	r3, [pc, #708]	; (80061b0 <UART_SetConfig+0x630>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef2:	2b28      	cmp	r3, #40	; 0x28
 8005ef4:	d86c      	bhi.n	8005fd0 <UART_SetConfig+0x450>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x37c>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fd1 	.word	0x08005fd1
 8005f04:	08005fd1 	.word	0x08005fd1
 8005f08:	08005fd1 	.word	0x08005fd1
 8005f0c:	08005fd1 	.word	0x08005fd1
 8005f10:	08005fd1 	.word	0x08005fd1
 8005f14:	08005fd1 	.word	0x08005fd1
 8005f18:	08005fd1 	.word	0x08005fd1
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fd1 	.word	0x08005fd1
 8005f24:	08005fd1 	.word	0x08005fd1
 8005f28:	08005fd1 	.word	0x08005fd1
 8005f2c:	08005fd1 	.word	0x08005fd1
 8005f30:	08005fd1 	.word	0x08005fd1
 8005f34:	08005fd1 	.word	0x08005fd1
 8005f38:	08005fd1 	.word	0x08005fd1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fd1 	.word	0x08005fd1
 8005f44:	08005fd1 	.word	0x08005fd1
 8005f48:	08005fd1 	.word	0x08005fd1
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08005fd1 	.word	0x08005fd1
 8005f54:	08005fd1 	.word	0x08005fd1
 8005f58:	08005fd1 	.word	0x08005fd1
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fd1 	.word	0x08005fd1
 8005f64:	08005fd1 	.word	0x08005fd1
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005fd1 	.word	0x08005fd1
 8005f70:	08005fd1 	.word	0x08005fd1
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e1c0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	e1bc      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb6:	e1b8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fbe:	e1b4      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc6:	e1b0      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e1ac      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e1a8      	b.n	800632a <UART_SetConfig+0x7aa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a75      	ldr	r2, [pc, #468]	; (80061b4 <UART_SetConfig+0x634>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d130      	bne.n	8006044 <UART_SetConfig+0x4c4>
 8005fe2:	4b73      	ldr	r3, [pc, #460]	; (80061b0 <UART_SetConfig+0x630>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d826      	bhi.n	800603c <UART_SetConfig+0x4bc>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x474>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	0800601d 	.word	0x0800601d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006012:	e18a      	b.n	800632a <UART_SetConfig+0x7aa>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601a:	e186      	b.n	800632a <UART_SetConfig+0x7aa>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006022:	e182      	b.n	800632a <UART_SetConfig+0x7aa>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602a:	e17e      	b.n	800632a <UART_SetConfig+0x7aa>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006032:	e17a      	b.n	800632a <UART_SetConfig+0x7aa>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e176      	b.n	800632a <UART_SetConfig+0x7aa>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e172      	b.n	800632a <UART_SetConfig+0x7aa>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a5b      	ldr	r2, [pc, #364]	; (80061b8 <UART_SetConfig+0x638>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d130      	bne.n	80060b0 <UART_SetConfig+0x530>
 800604e:	4b58      	ldr	r3, [pc, #352]	; (80061b0 <UART_SetConfig+0x630>)
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b05      	cmp	r3, #5
 8006058:	d826      	bhi.n	80060a8 <UART_SetConfig+0x528>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x4e0>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
 8006068:	08006089 	.word	0x08006089
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607e:	e154      	b.n	800632a <UART_SetConfig+0x7aa>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006086:	e150      	b.n	800632a <UART_SetConfig+0x7aa>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608e:	e14c      	b.n	800632a <UART_SetConfig+0x7aa>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006096:	e148      	b.n	800632a <UART_SetConfig+0x7aa>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609e:	e144      	b.n	800632a <UART_SetConfig+0x7aa>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e140      	b.n	800632a <UART_SetConfig+0x7aa>
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e13c      	b.n	800632a <UART_SetConfig+0x7aa>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a41      	ldr	r2, [pc, #260]	; (80061bc <UART_SetConfig+0x63c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f040 8082 	bne.w	80061c0 <UART_SetConfig+0x640>
 80060bc:	4b3c      	ldr	r3, [pc, #240]	; (80061b0 <UART_SetConfig+0x630>)
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060c4:	2b28      	cmp	r3, #40	; 0x28
 80060c6:	d86d      	bhi.n	80061a4 <UART_SetConfig+0x624>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x550>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006175 	.word	0x08006175
 80060d4:	080061a5 	.word	0x080061a5
 80060d8:	080061a5 	.word	0x080061a5
 80060dc:	080061a5 	.word	0x080061a5
 80060e0:	080061a5 	.word	0x080061a5
 80060e4:	080061a5 	.word	0x080061a5
 80060e8:	080061a5 	.word	0x080061a5
 80060ec:	080061a5 	.word	0x080061a5
 80060f0:	0800617d 	.word	0x0800617d
 80060f4:	080061a5 	.word	0x080061a5
 80060f8:	080061a5 	.word	0x080061a5
 80060fc:	080061a5 	.word	0x080061a5
 8006100:	080061a5 	.word	0x080061a5
 8006104:	080061a5 	.word	0x080061a5
 8006108:	080061a5 	.word	0x080061a5
 800610c:	080061a5 	.word	0x080061a5
 8006110:	08006185 	.word	0x08006185
 8006114:	080061a5 	.word	0x080061a5
 8006118:	080061a5 	.word	0x080061a5
 800611c:	080061a5 	.word	0x080061a5
 8006120:	080061a5 	.word	0x080061a5
 8006124:	080061a5 	.word	0x080061a5
 8006128:	080061a5 	.word	0x080061a5
 800612c:	080061a5 	.word	0x080061a5
 8006130:	0800618d 	.word	0x0800618d
 8006134:	080061a5 	.word	0x080061a5
 8006138:	080061a5 	.word	0x080061a5
 800613c:	080061a5 	.word	0x080061a5
 8006140:	080061a5 	.word	0x080061a5
 8006144:	080061a5 	.word	0x080061a5
 8006148:	080061a5 	.word	0x080061a5
 800614c:	080061a5 	.word	0x080061a5
 8006150:	08006195 	.word	0x08006195
 8006154:	080061a5 	.word	0x080061a5
 8006158:	080061a5 	.word	0x080061a5
 800615c:	080061a5 	.word	0x080061a5
 8006160:	080061a5 	.word	0x080061a5
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061a5 	.word	0x080061a5
 800616c:	080061a5 	.word	0x080061a5
 8006170:	0800619d 	.word	0x0800619d
 8006174:	2301      	movs	r3, #1
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e0d6      	b.n	800632a <UART_SetConfig+0x7aa>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e0d2      	b.n	800632a <UART_SetConfig+0x7aa>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618a:	e0ce      	b.n	800632a <UART_SetConfig+0x7aa>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006192:	e0ca      	b.n	800632a <UART_SetConfig+0x7aa>
 8006194:	2320      	movs	r3, #32
 8006196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800619a:	e0c6      	b.n	800632a <UART_SetConfig+0x7aa>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a2:	e0c2      	b.n	800632a <UART_SetConfig+0x7aa>
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061aa:	e0be      	b.n	800632a <UART_SetConfig+0x7aa>
 80061ac:	40011400 	.word	0x40011400
 80061b0:	58024400 	.word	0x58024400
 80061b4:	40007800 	.word	0x40007800
 80061b8:	40007c00 	.word	0x40007c00
 80061bc:	40011800 	.word	0x40011800
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4aad      	ldr	r2, [pc, #692]	; (800647c <UART_SetConfig+0x8fc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d176      	bne.n	80062b8 <UART_SetConfig+0x738>
 80061ca:	4bad      	ldr	r3, [pc, #692]	; (8006480 <UART_SetConfig+0x900>)
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d2:	2b28      	cmp	r3, #40	; 0x28
 80061d4:	d86c      	bhi.n	80062b0 <UART_SetConfig+0x730>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x65c>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	08006281 	.word	0x08006281
 80061e0:	080062b1 	.word	0x080062b1
 80061e4:	080062b1 	.word	0x080062b1
 80061e8:	080062b1 	.word	0x080062b1
 80061ec:	080062b1 	.word	0x080062b1
 80061f0:	080062b1 	.word	0x080062b1
 80061f4:	080062b1 	.word	0x080062b1
 80061f8:	080062b1 	.word	0x080062b1
 80061fc:	08006289 	.word	0x08006289
 8006200:	080062b1 	.word	0x080062b1
 8006204:	080062b1 	.word	0x080062b1
 8006208:	080062b1 	.word	0x080062b1
 800620c:	080062b1 	.word	0x080062b1
 8006210:	080062b1 	.word	0x080062b1
 8006214:	080062b1 	.word	0x080062b1
 8006218:	080062b1 	.word	0x080062b1
 800621c:	08006291 	.word	0x08006291
 8006220:	080062b1 	.word	0x080062b1
 8006224:	080062b1 	.word	0x080062b1
 8006228:	080062b1 	.word	0x080062b1
 800622c:	080062b1 	.word	0x080062b1
 8006230:	080062b1 	.word	0x080062b1
 8006234:	080062b1 	.word	0x080062b1
 8006238:	080062b1 	.word	0x080062b1
 800623c:	08006299 	.word	0x08006299
 8006240:	080062b1 	.word	0x080062b1
 8006244:	080062b1 	.word	0x080062b1
 8006248:	080062b1 	.word	0x080062b1
 800624c:	080062b1 	.word	0x080062b1
 8006250:	080062b1 	.word	0x080062b1
 8006254:	080062b1 	.word	0x080062b1
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062a1 	.word	0x080062a1
 8006260:	080062b1 	.word	0x080062b1
 8006264:	080062b1 	.word	0x080062b1
 8006268:	080062b1 	.word	0x080062b1
 800626c:	080062b1 	.word	0x080062b1
 8006270:	080062b1 	.word	0x080062b1
 8006274:	080062b1 	.word	0x080062b1
 8006278:	080062b1 	.word	0x080062b1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	2301      	movs	r3, #1
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e050      	b.n	800632a <UART_SetConfig+0x7aa>
 8006288:	2304      	movs	r3, #4
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e04c      	b.n	800632a <UART_SetConfig+0x7aa>
 8006290:	2308      	movs	r3, #8
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e048      	b.n	800632a <UART_SetConfig+0x7aa>
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e044      	b.n	800632a <UART_SetConfig+0x7aa>
 80062a0:	2320      	movs	r3, #32
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e040      	b.n	800632a <UART_SetConfig+0x7aa>
 80062a8:	2340      	movs	r3, #64	; 0x40
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e03c      	b.n	800632a <UART_SetConfig+0x7aa>
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b6:	e038      	b.n	800632a <UART_SetConfig+0x7aa>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a71      	ldr	r2, [pc, #452]	; (8006484 <UART_SetConfig+0x904>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d130      	bne.n	8006324 <UART_SetConfig+0x7a4>
 80062c2:	4b6f      	ldr	r3, [pc, #444]	; (8006480 <UART_SetConfig+0x900>)
 80062c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d826      	bhi.n	800631c <UART_SetConfig+0x79c>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x754>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	080062ed 	.word	0x080062ed
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	080062fd 	.word	0x080062fd
 80062e0:	08006305 	.word	0x08006305
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006315 	.word	0x08006315
 80062ec:	2302      	movs	r3, #2
 80062ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f2:	e01a      	b.n	800632a <UART_SetConfig+0x7aa>
 80062f4:	2304      	movs	r3, #4
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e016      	b.n	800632a <UART_SetConfig+0x7aa>
 80062fc:	2308      	movs	r3, #8
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	e012      	b.n	800632a <UART_SetConfig+0x7aa>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630a:	e00e      	b.n	800632a <UART_SetConfig+0x7aa>
 800630c:	2320      	movs	r3, #32
 800630e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006312:	e00a      	b.n	800632a <UART_SetConfig+0x7aa>
 8006314:	2340      	movs	r3, #64	; 0x40
 8006316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631a:	e006      	b.n	800632a <UART_SetConfig+0x7aa>
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006322:	e002      	b.n	800632a <UART_SetConfig+0x7aa>
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a55      	ldr	r2, [pc, #340]	; (8006484 <UART_SetConfig+0x904>)
 8006330:	4293      	cmp	r3, r2
 8006332:	f040 80f0 	bne.w	8006516 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800633a:	2b20      	cmp	r3, #32
 800633c:	dc46      	bgt.n	80063cc <UART_SetConfig+0x84c>
 800633e:	2b02      	cmp	r3, #2
 8006340:	db75      	blt.n	800642e <UART_SetConfig+0x8ae>
 8006342:	3b02      	subs	r3, #2
 8006344:	2b1e      	cmp	r3, #30
 8006346:	d872      	bhi.n	800642e <UART_SetConfig+0x8ae>
 8006348:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x7d0>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	080063d3 	.word	0x080063d3
 8006354:	0800642f 	.word	0x0800642f
 8006358:	080063db 	.word	0x080063db
 800635c:	0800642f 	.word	0x0800642f
 8006360:	0800642f 	.word	0x0800642f
 8006364:	0800642f 	.word	0x0800642f
 8006368:	080063eb 	.word	0x080063eb
 800636c:	0800642f 	.word	0x0800642f
 8006370:	0800642f 	.word	0x0800642f
 8006374:	0800642f 	.word	0x0800642f
 8006378:	0800642f 	.word	0x0800642f
 800637c:	0800642f 	.word	0x0800642f
 8006380:	0800642f 	.word	0x0800642f
 8006384:	0800642f 	.word	0x0800642f
 8006388:	080063fb 	.word	0x080063fb
 800638c:	0800642f 	.word	0x0800642f
 8006390:	0800642f 	.word	0x0800642f
 8006394:	0800642f 	.word	0x0800642f
 8006398:	0800642f 	.word	0x0800642f
 800639c:	0800642f 	.word	0x0800642f
 80063a0:	0800642f 	.word	0x0800642f
 80063a4:	0800642f 	.word	0x0800642f
 80063a8:	0800642f 	.word	0x0800642f
 80063ac:	0800642f 	.word	0x0800642f
 80063b0:	0800642f 	.word	0x0800642f
 80063b4:	0800642f 	.word	0x0800642f
 80063b8:	0800642f 	.word	0x0800642f
 80063bc:	0800642f 	.word	0x0800642f
 80063c0:	0800642f 	.word	0x0800642f
 80063c4:	0800642f 	.word	0x0800642f
 80063c8:	08006421 	.word	0x08006421
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d02a      	beq.n	8006426 <UART_SetConfig+0x8a6>
 80063d0:	e02d      	b.n	800642e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063d2:	f7fe fe11 	bl	8004ff8 <HAL_RCCEx_GetD3PCLK1Freq>
 80063d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063d8:	e02f      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063da:	f107 0314 	add.w	r3, r7, #20
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fe20 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063e8:	e027      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ea:	f107 0308 	add.w	r3, r7, #8
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe ff6c 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063f8:	e01f      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063fa:	4b21      	ldr	r3, [pc, #132]	; (8006480 <UART_SetConfig+0x900>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0320 	and.w	r3, r3, #32
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006406:	4b1e      	ldr	r3, [pc, #120]	; (8006480 <UART_SetConfig+0x900>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	08db      	lsrs	r3, r3, #3
 800640c:	f003 0303 	and.w	r3, r3, #3
 8006410:	4a1d      	ldr	r2, [pc, #116]	; (8006488 <UART_SetConfig+0x908>)
 8006412:	fa22 f303 	lsr.w	r3, r2, r3
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006418:	e00f      	b.n	800643a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800641a:	4b1b      	ldr	r3, [pc, #108]	; (8006488 <UART_SetConfig+0x908>)
 800641c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800641e:	e00c      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006420:	4b1a      	ldr	r3, [pc, #104]	; (800648c <UART_SetConfig+0x90c>)
 8006422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006424:	e009      	b.n	800643a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800642c:	e005      	b.n	800643a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 81e6 	beq.w	800680e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <UART_SetConfig+0x910>)
 8006448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644c:	461a      	mov	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	fbb3 f3f2 	udiv	r3, r3, r2
 8006454:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	6a3a      	ldr	r2, [r7, #32]
 8006462:	429a      	cmp	r2, r3
 8006464:	d305      	bcc.n	8006472 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	429a      	cmp	r2, r3
 8006470:	d910      	bls.n	8006494 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006478:	e1c9      	b.n	800680e <UART_SetConfig+0xc8e>
 800647a:	bf00      	nop
 800647c:	40011c00 	.word	0x40011c00
 8006480:	58024400 	.word	0x58024400
 8006484:	58000c00 	.word	0x58000c00
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
 8006490:	08006e2c 	.word	0x08006e2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	4618      	mov	r0, r3
 8006498:	f04f 0100 	mov.w	r1, #0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	4ac1      	ldr	r2, [pc, #772]	; (80067a8 <UART_SetConfig+0xc28>)
 80064a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	f7f9 ff1e 	bl	80002ec <__aeabi_uldivmod>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	020b      	lsls	r3, r1, #8
 80064c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064c6:	0202      	lsls	r2, r0, #8
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	6849      	ldr	r1, [r1, #4]
 80064cc:	0849      	lsrs	r1, r1, #1
 80064ce:	4608      	mov	r0, r1
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	1814      	adds	r4, r2, r0
 80064d6:	eb43 0501 	adc.w	r5, r3, r1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	4620      	mov	r0, r4
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7f9 ff00 	bl	80002ec <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064fa:	d308      	bcc.n	800650e <UART_SetConfig+0x98e>
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006502:	d204      	bcs.n	800650e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	e17f      	b.n	800680e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006514:	e17b      	b.n	800680e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651e:	f040 80bd 	bne.w	800669c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8006522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006526:	2b20      	cmp	r3, #32
 8006528:	dc48      	bgt.n	80065bc <UART_SetConfig+0xa3c>
 800652a:	2b00      	cmp	r3, #0
 800652c:	db7b      	blt.n	8006626 <UART_SetConfig+0xaa6>
 800652e:	2b20      	cmp	r3, #32
 8006530:	d879      	bhi.n	8006626 <UART_SetConfig+0xaa6>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x9b8>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	080065c3 	.word	0x080065c3
 800653c:	080065cb 	.word	0x080065cb
 8006540:	08006627 	.word	0x08006627
 8006544:	08006627 	.word	0x08006627
 8006548:	080065d3 	.word	0x080065d3
 800654c:	08006627 	.word	0x08006627
 8006550:	08006627 	.word	0x08006627
 8006554:	08006627 	.word	0x08006627
 8006558:	080065e3 	.word	0x080065e3
 800655c:	08006627 	.word	0x08006627
 8006560:	08006627 	.word	0x08006627
 8006564:	08006627 	.word	0x08006627
 8006568:	08006627 	.word	0x08006627
 800656c:	08006627 	.word	0x08006627
 8006570:	08006627 	.word	0x08006627
 8006574:	08006627 	.word	0x08006627
 8006578:	080065f3 	.word	0x080065f3
 800657c:	08006627 	.word	0x08006627
 8006580:	08006627 	.word	0x08006627
 8006584:	08006627 	.word	0x08006627
 8006588:	08006627 	.word	0x08006627
 800658c:	08006627 	.word	0x08006627
 8006590:	08006627 	.word	0x08006627
 8006594:	08006627 	.word	0x08006627
 8006598:	08006627 	.word	0x08006627
 800659c:	08006627 	.word	0x08006627
 80065a0:	08006627 	.word	0x08006627
 80065a4:	08006627 	.word	0x08006627
 80065a8:	08006627 	.word	0x08006627
 80065ac:	08006627 	.word	0x08006627
 80065b0:	08006627 	.word	0x08006627
 80065b4:	08006627 	.word	0x08006627
 80065b8:	08006619 	.word	0x08006619
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d02e      	beq.n	800661e <UART_SetConfig+0xa9e>
 80065c0:	e031      	b.n	8006626 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c2:	f7fd f9b7 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 80065c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065c8:	e033      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ca:	f7fd f9c9 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 80065ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065d0:	e02f      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d2:	f107 0314 	add.w	r3, r7, #20
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fd24 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e0:	e027      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065e2:	f107 0308 	add.w	r3, r7, #8
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fe70 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065f0:	e01f      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065f2:	4b6e      	ldr	r3, [pc, #440]	; (80067ac <UART_SetConfig+0xc2c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d009      	beq.n	8006612 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065fe:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <UART_SetConfig+0xc2c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	08db      	lsrs	r3, r3, #3
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	4a69      	ldr	r2, [pc, #420]	; (80067b0 <UART_SetConfig+0xc30>)
 800660a:	fa22 f303 	lsr.w	r3, r2, r3
 800660e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006610:	e00f      	b.n	8006632 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8006612:	4b67      	ldr	r3, [pc, #412]	; (80067b0 <UART_SetConfig+0xc30>)
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006616:	e00c      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006618:	4b66      	ldr	r3, [pc, #408]	; (80067b4 <UART_SetConfig+0xc34>)
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800661c:	e009      	b.n	8006632 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006624:	e005      	b.n	8006632 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80ea 	beq.w	800680e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	4a5a      	ldr	r2, [pc, #360]	; (80067a8 <UART_SetConfig+0xc28>)
 8006640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006644:	461a      	mov	r2, r3
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	fbb3 f3f2 	udiv	r3, r3, r2
 800664c:	005a      	lsls	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	441a      	add	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	fbb2 f3f3 	udiv	r3, r2, r3
 800665e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	2b0f      	cmp	r3, #15
 8006664:	d916      	bls.n	8006694 <UART_SetConfig+0xb14>
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666c:	d212      	bcs.n	8006694 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	b29b      	uxth	r3, r3
 8006672:	f023 030f 	bic.w	r3, r3, #15
 8006676:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	b29b      	uxth	r3, r3
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	b29a      	uxth	r2, r3
 8006684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006686:	4313      	orrs	r3, r2
 8006688:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006690:	60da      	str	r2, [r3, #12]
 8006692:	e0bc      	b.n	800680e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800669a:	e0b8      	b.n	800680e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800669c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	dc4b      	bgt.n	800673c <UART_SetConfig+0xbbc>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f2c0 8087 	blt.w	80067b8 <UART_SetConfig+0xc38>
 80066aa:	2b20      	cmp	r3, #32
 80066ac:	f200 8084 	bhi.w	80067b8 <UART_SetConfig+0xc38>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <UART_SetConfig+0xb38>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	08006743 	.word	0x08006743
 80066bc:	0800674b 	.word	0x0800674b
 80066c0:	080067b9 	.word	0x080067b9
 80066c4:	080067b9 	.word	0x080067b9
 80066c8:	08006753 	.word	0x08006753
 80066cc:	080067b9 	.word	0x080067b9
 80066d0:	080067b9 	.word	0x080067b9
 80066d4:	080067b9 	.word	0x080067b9
 80066d8:	08006763 	.word	0x08006763
 80066dc:	080067b9 	.word	0x080067b9
 80066e0:	080067b9 	.word	0x080067b9
 80066e4:	080067b9 	.word	0x080067b9
 80066e8:	080067b9 	.word	0x080067b9
 80066ec:	080067b9 	.word	0x080067b9
 80066f0:	080067b9 	.word	0x080067b9
 80066f4:	080067b9 	.word	0x080067b9
 80066f8:	08006773 	.word	0x08006773
 80066fc:	080067b9 	.word	0x080067b9
 8006700:	080067b9 	.word	0x080067b9
 8006704:	080067b9 	.word	0x080067b9
 8006708:	080067b9 	.word	0x080067b9
 800670c:	080067b9 	.word	0x080067b9
 8006710:	080067b9 	.word	0x080067b9
 8006714:	080067b9 	.word	0x080067b9
 8006718:	080067b9 	.word	0x080067b9
 800671c:	080067b9 	.word	0x080067b9
 8006720:	080067b9 	.word	0x080067b9
 8006724:	080067b9 	.word	0x080067b9
 8006728:	080067b9 	.word	0x080067b9
 800672c:	080067b9 	.word	0x080067b9
 8006730:	080067b9 	.word	0x080067b9
 8006734:	080067b9 	.word	0x080067b9
 8006738:	08006799 	.word	0x08006799
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d02e      	beq.n	800679e <UART_SetConfig+0xc1e>
 8006740:	e03a      	b.n	80067b8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006742:	f7fd f8f7 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8006746:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006748:	e03c      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674a:	f7fd f909 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 800674e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006750:	e038      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006752:	f107 0314 	add.w	r3, r7, #20
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fc64 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006760:	e030      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006762:	f107 0308 	add.w	r3, r7, #8
 8006766:	4618      	mov	r0, r3
 8006768:	f7fe fdb0 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006770:	e028      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006772:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <UART_SetConfig+0xc2c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <UART_SetConfig+0xc2c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	08db      	lsrs	r3, r3, #3
 8006784:	f003 0303 	and.w	r3, r3, #3
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <UART_SetConfig+0xc30>)
 800678a:	fa22 f303 	lsr.w	r3, r2, r3
 800678e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006790:	e018      	b.n	80067c4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <UART_SetConfig+0xc30>)
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006796:	e015      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <UART_SetConfig+0xc34>)
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800679c:	e012      	b.n	80067c4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067a4:	e00e      	b.n	80067c4 <UART_SetConfig+0xc44>
 80067a6:	bf00      	nop
 80067a8:	08006e2c 	.word	0x08006e2c
 80067ac:	58024400 	.word	0x58024400
 80067b0:	03d09000 	.word	0x03d09000
 80067b4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067c2:	bf00      	nop
    }

    if (pclk != 0U)
 80067c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d021      	beq.n	800680e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <UART_SetConfig+0xcb8>)
 80067d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	085b      	lsrs	r3, r3, #1
 80067e2:	441a      	add	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	2b0f      	cmp	r3, #15
 80067f2:	d909      	bls.n	8006808 <UART_SetConfig+0xc88>
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fa:	d205      	bcs.n	8006808 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	b29a      	uxth	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	e002      	b.n	800680e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800682a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800682e:	4618      	mov	r0, r3
 8006830:	3738      	adds	r7, #56	; 0x38
 8006832:	46bd      	mov	sp, r7
 8006834:	bdb0      	pop	{r4, r5, r7, pc}
 8006836:	bf00      	nop
 8006838:	08006e2c 	.word	0x08006e2c

0800683c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	f003 0302 	and.w	r3, r3, #2
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d01a      	beq.n	8006952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800693a:	d10a      	bne.n	8006952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af02      	add	r7, sp, #8
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006990:	f7fa fa06 	bl	8000da0 <HAL_GetTick>
 8006994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0308 	and.w	r3, r3, #8
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d10e      	bne.n	80069c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f82f 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e025      	b.n	8006a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d10e      	bne.n	80069ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f819 	bl	8006a16 <UART_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e00f      	b.n	8006a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b09c      	sub	sp, #112	; 0x70
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	603b      	str	r3, [r7, #0]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a26:	e0a9      	b.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	f000 80a5 	beq.w	8006b7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fa f9b5 	bl	8000da0 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8006a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d140      	bne.n	8006aca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a68:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e6      	bne.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3308      	adds	r3, #8
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	663b      	str	r3, [r7, #96]	; 0x60
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3308      	adds	r3, #8
 8006a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e5      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e069      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d051      	beq.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae6:	d149      	bne.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
 8006b12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e6      	bne.n	8006af2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	e853 3f00 	ldrex	r3, [r3]
 8006b32:	613b      	str	r3, [r7, #16]
   return(result);
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f023 0301 	bic.w	r3, r3, #1
 8006b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3308      	adds	r3, #8
 8006b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b44:	623a      	str	r2, [r7, #32]
 8006b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b48:	69f9      	ldr	r1, [r7, #28]
 8006b4a:	6a3a      	ldr	r2, [r7, #32]
 8006b4c:	e841 2300 	strex	r3, r2, [r1]
 8006b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1e5      	bne.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e010      	b.n	8006b9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69da      	ldr	r2, [r3, #28]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4013      	ands	r3, r2
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	bf0c      	ite	eq
 8006b8c:	2301      	moveq	r3, #1
 8006b8e:	2300      	movne	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	f43f af46 	beq.w	8006a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3770      	adds	r7, #112	; 0x70
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b085      	sub	sp, #20
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_UARTEx_DisableFifoMode+0x16>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e027      	b.n	8006c0c <HAL_UARTEx_DisableFifoMode+0x66>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2224      	movs	r2, #36	; 0x24
 8006bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0201 	bic.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e02d      	b.n	8006c8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	; 0x24
 8006c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f84f 	bl	8006d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e02d      	b.n	8006d08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2224      	movs	r2, #36	; 0x24
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f811 	bl	8006d10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d108      	bne.n	8006d32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d30:	e031      	b.n	8006d96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d32:	2310      	movs	r3, #16
 8006d34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d36:	2310      	movs	r3, #16
 8006d38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	0e5b      	lsrs	r3, r3, #25
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	0f5b      	lsrs	r3, r3, #29
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	7b3a      	ldrb	r2, [r7, #12]
 8006d5e:	4911      	ldr	r1, [pc, #68]	; (8006da4 <UARTEx_SetNbDataToProcess+0x94>)
 8006d60:	5c8a      	ldrb	r2, [r1, r2]
 8006d62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d66:	7b3a      	ldrb	r2, [r7, #12]
 8006d68:	490f      	ldr	r1, [pc, #60]	; (8006da8 <UARTEx_SetNbDataToProcess+0x98>)
 8006d6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	7b7a      	ldrb	r2, [r7, #13]
 8006d7c:	4909      	ldr	r1, [pc, #36]	; (8006da4 <UARTEx_SetNbDataToProcess+0x94>)
 8006d7e:	5c8a      	ldrb	r2, [r1, r2]
 8006d80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d84:	7b7a      	ldrb	r2, [r7, #13]
 8006d86:	4908      	ldr	r1, [pc, #32]	; (8006da8 <UARTEx_SetNbDataToProcess+0x98>)
 8006d88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d96:	bf00      	nop
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	08006e44 	.word	0x08006e44
 8006da8:	08006e4c 	.word	0x08006e4c

08006dac <__libc_init_array>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	4d0d      	ldr	r5, [pc, #52]	; (8006de4 <__libc_init_array+0x38>)
 8006db0:	4c0d      	ldr	r4, [pc, #52]	; (8006de8 <__libc_init_array+0x3c>)
 8006db2:	1b64      	subs	r4, r4, r5
 8006db4:	10a4      	asrs	r4, r4, #2
 8006db6:	2600      	movs	r6, #0
 8006db8:	42a6      	cmp	r6, r4
 8006dba:	d109      	bne.n	8006dd0 <__libc_init_array+0x24>
 8006dbc:	4d0b      	ldr	r5, [pc, #44]	; (8006dec <__libc_init_array+0x40>)
 8006dbe:	4c0c      	ldr	r4, [pc, #48]	; (8006df0 <__libc_init_array+0x44>)
 8006dc0:	f000 f820 	bl	8006e04 <_init>
 8006dc4:	1b64      	subs	r4, r4, r5
 8006dc6:	10a4      	asrs	r4, r4, #2
 8006dc8:	2600      	movs	r6, #0
 8006dca:	42a6      	cmp	r6, r4
 8006dcc:	d105      	bne.n	8006dda <__libc_init_array+0x2e>
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd4:	4798      	blx	r3
 8006dd6:	3601      	adds	r6, #1
 8006dd8:	e7ee      	b.n	8006db8 <__libc_init_array+0xc>
 8006dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dde:	4798      	blx	r3
 8006de0:	3601      	adds	r6, #1
 8006de2:	e7f2      	b.n	8006dca <__libc_init_array+0x1e>
 8006de4:	08006e5c 	.word	0x08006e5c
 8006de8:	08006e5c 	.word	0x08006e5c
 8006dec:	08006e5c 	.word	0x08006e5c
 8006df0:	08006e60 	.word	0x08006e60

08006df4 <memset>:
 8006df4:	4402      	add	r2, r0
 8006df6:	4603      	mov	r3, r0
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d100      	bne.n	8006dfe <memset+0xa>
 8006dfc:	4770      	bx	lr
 8006dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006e02:	e7f9      	b.n	8006df8 <memset+0x4>

08006e04 <_init>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr

08006e10 <_fini>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr
