
STM32CubeIDE_FDCAN2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a50  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08004db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  24000074  08004e28  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001b8  08004e28  000201b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014822  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002276  00000000  00000000  000348c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000aa0  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009d8  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f503  00000000  00000000  00037fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b602  00000000  00000000  000674bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001363d7  00000000  00000000  00072abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001a8e94  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fbc  00000000  00000000  001a8ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08004ce8 	.word	0x08004ce8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08004ce8 	.word	0x08004ce8

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <HAL_FDCAN_RxFifo1Callback>:
uint8_t               TxData2[12];
uint8_t               RxData2[12];

// FDCAN2 Callback
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  if((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	f003 0310 	and.w	r3, r3, #16
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d028      	beq.n	80003f6 <HAL_FDCAN_RxFifo1Callback+0x66>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader2, RxData2) != HAL_OK)
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <HAL_FDCAN_RxFifo1Callback+0x70>)
 80003a6:	4a17      	ldr	r2, [pc, #92]	; (8000404 <HAL_FDCAN_RxFifo1Callback+0x74>)
 80003a8:	2141      	movs	r1, #65	; 0x41
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 ff98 	bl	80012e0 <HAL_FDCAN_GetRxMessage>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <HAL_FDCAN_RxFifo1Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80003b6:	f000 f977 	bl	80006a8 <Error_Handler>
    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f001 f8fc 	bl	80015bc <HAL_FDCAN_ActivateNotification>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <HAL_FDCAN_RxFifo1Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80003ca:	f000 f96d 	bl	80006a8 <Error_Handler>
    }

	  sprintf ((char *)TxData2, "FDCAN2TX %d", indx++);
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <HAL_FDCAN_RxFifo1Callback+0x78>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	1c5a      	adds	r2, r3, #1
 80003d4:	490c      	ldr	r1, [pc, #48]	; (8000408 <HAL_FDCAN_RxFifo1Callback+0x78>)
 80003d6:	600a      	str	r2, [r1, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	490c      	ldr	r1, [pc, #48]	; (800040c <HAL_FDCAN_RxFifo1Callback+0x7c>)
 80003dc:	480c      	ldr	r0, [pc, #48]	; (8000410 <HAL_FDCAN_RxFifo1Callback+0x80>)
 80003de:	f004 f863 	bl	80044a8 <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader2, TxData2)!= HAL_OK)
 80003e2:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <HAL_FDCAN_RxFifo1Callback+0x80>)
 80003e4:	490b      	ldr	r1, [pc, #44]	; (8000414 <HAL_FDCAN_RxFifo1Callback+0x84>)
 80003e6:	480c      	ldr	r0, [pc, #48]	; (8000418 <HAL_FDCAN_RxFifo1Callback+0x88>)
 80003e8:	f000 ff1f 	bl	800122a <HAL_FDCAN_AddMessageToTxFifoQ>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <HAL_FDCAN_RxFifo1Callback+0x66>
	  {
		  Error_Handler();
 80003f2:	f000 f959 	bl	80006a8 <Error_Handler>
	  }
  }
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	240000c4 	.word	0x240000c4
 8000404:	240000d0 	.word	0x240000d0
 8000408:	24000090 	.word	0x24000090
 800040c:	08004d00 	.word	0x08004d00
 8000410:	240000f8 	.word	0x240000f8
 8000414:	240000a0 	.word	0x240000a0
 8000418:	24000104 	.word	0x24000104

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000420:	f000 fade 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000424:	f000 f838 	bl	8000498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000428:	f000 f924 	bl	8000674 <MX_GPIO_Init>
  MX_FDCAN2_Init();
 800042c:	f000 f8a2 	bl	8000574 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  // STart FDCAN2
   if(HAL_FDCAN_Start(&hfdcan2)!= HAL_OK)
 8000430:	4817      	ldr	r0, [pc, #92]	; (8000490 <main+0x74>)
 8000432:	f000 fecf 	bl	80011d4 <HAL_FDCAN_Start>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <main+0x24>
   {
    Error_Handler();
 800043c:	f000 f934 	bl	80006a8 <Error_Handler>
   }
   // Activate the notification for new data in FIFO1 for FDCAN2
     if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 8000440:	2200      	movs	r2, #0
 8000442:	2110      	movs	r1, #16
 8000444:	4812      	ldr	r0, [pc, #72]	; (8000490 <main+0x74>)
 8000446:	f001 f8b9 	bl	80015bc <HAL_FDCAN_ActivateNotification>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <main+0x38>
     {
       /* Notification Error */
       Error_Handler();
 8000450:	f000 f92a 	bl	80006a8 <Error_Handler>
     }
     // Configure TX Header for FDCAN2
       TxHeader2.Identifier = 0x22;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <main+0x78>)
 8000456:	2222      	movs	r2, #34	; 0x22
 8000458:	601a      	str	r2, [r3, #0]
       TxHeader2.IdType = FDCAN_STANDARD_ID;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <main+0x78>)
 800045c:	2200      	movs	r2, #0
 800045e:	605a      	str	r2, [r3, #4]
       TxHeader2.TxFrameType = FDCAN_DATA_FRAME;
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <main+0x78>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
       TxHeader2.DataLength = FDCAN_DLC_BYTES_12;
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <main+0x78>)
 8000468:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800046c:	60da      	str	r2, [r3, #12]
       TxHeader2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <main+0x78>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
       TxHeader2.BitRateSwitch = FDCAN_BRS_OFF;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <main+0x78>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
       TxHeader2.FDFormat = FDCAN_FD_CAN;
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <main+0x78>)
 800047c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000480:	619a      	str	r2, [r3, #24]
       TxHeader2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <main+0x78>)
 8000484:	2200      	movs	r2, #0
 8000486:	61da      	str	r2, [r3, #28]
       TxHeader2.MessageMarker = 0;
 8000488:	4b02      	ldr	r3, [pc, #8]	; (8000494 <main+0x78>)
 800048a:	2200      	movs	r2, #0
 800048c:	621a      	str	r2, [r3, #32]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048e:	e7fe      	b.n	800048e <main+0x72>
 8000490:	24000104 	.word	0x24000104
 8000494:	240000a0 	.word	0x240000a0

08000498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b09c      	sub	sp, #112	; 0x70
 800049c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a2:	224c      	movs	r2, #76	; 0x4c
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fff6 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2220      	movs	r2, #32
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f003 fff0 	bl	8004498 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004b8:	2004      	movs	r0, #4
 80004ba:	f001 ffb7 	bl	800242c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004be:	2300      	movs	r3, #0
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	4b2b      	ldr	r3, [pc, #172]	; (8000570 <SystemClock_Config+0xd8>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a2a      	ldr	r2, [pc, #168]	; (8000570 <SystemClock_Config+0xd8>)
 80004c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b28      	ldr	r3, [pc, #160]	; (8000570 <SystemClock_Config+0xd8>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d6:	603b      	str	r3, [r7, #0]
 80004d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004da:	bf00      	nop
 80004dc:	4b24      	ldr	r3, [pc, #144]	; (8000570 <SystemClock_Config+0xd8>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004e8:	d1f8      	bne.n	80004dc <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ea:	2302      	movs	r3, #2
 80004ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f2:	2340      	movs	r3, #64	; 0x40
 80004f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f6:	2302      	movs	r3, #2
 80004f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004fe:	2304      	movs	r3, #4
 8000500:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000502:	2308      	movs	r3, #8
 8000504:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000506:	2302      	movs	r3, #2
 8000508:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800050a:	2301      	movs	r3, #1
 800050c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800050e:	2302      	movs	r3, #2
 8000510:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000512:	230c      	movs	r3, #12
 8000514:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000516:	2300      	movs	r3, #0
 8000518:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000522:	4618      	mov	r0, r3
 8000524:	f001 ffdc 	bl	80024e0 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800052e:	f000 f8bb 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	233f      	movs	r3, #63	; 0x3f
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000542:	2340      	movs	r3, #64	; 0x40
 8000544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000546:	2340      	movs	r3, #64	; 0x40
 8000548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800054a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000550:	2340      	movs	r3, #64	; 0x40
 8000552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2102      	movs	r1, #2
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fbc5 	bl	8002ce8 <HAL_RCC_ClockConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000564:	f000 f8a0 	bl	80006a8 <Error_Handler>
  }
}
 8000568:	bf00      	nop
 800056a:	3770      	adds	r7, #112	; 0x70
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58024800 	.word	0x58024800

08000574 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <MX_FDCAN2_Init+0xf8>)
 800057c:	4a3c      	ldr	r2, [pc, #240]	; (8000670 <MX_FDCAN2_Init+0xfc>)
 800057e:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000580:	4b3a      	ldr	r3, [pc, #232]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000586:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000588:	4b38      	ldr	r3, [pc, #224]	; (800066c <MX_FDCAN2_Init+0xf8>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 800058e:	4b37      	ldr	r3, [pc, #220]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000590:	2201      	movs	r2, #1
 8000592:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000594:	4b35      	ldr	r3, [pc, #212]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000596:	2200      	movs	r2, #0
 8000598:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800059a:	4b34      	ldr	r3, [pc, #208]	; (800066c <MX_FDCAN2_Init+0xf8>)
 800059c:	2200      	movs	r2, #0
 800059e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80005a0:	4b32      	ldr	r3, [pc, #200]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 13;
 80005a6:	4b31      	ldr	r3, [pc, #196]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005a8:	220d      	movs	r2, #13
 80005aa:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 86;
 80005ac:	4b2f      	ldr	r3, [pc, #188]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005ae:	2256      	movs	r2, #86	; 0x56
 80005b0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 13;
 80005b2:	4b2e      	ldr	r3, [pc, #184]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005b4:	220d      	movs	r2, #13
 80005b6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005ba:	2219      	movs	r2, #25
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 2;
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 11;
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005d2:	220b      	movs	r2, #11
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005d8:	2200      	movs	r2, #0
 80005da:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005ea:	2204      	movs	r2, #4
 80005ec:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 1;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_12;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005f6:	2205      	movs	r2, #5
 80005f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <MX_FDCAN2_Init+0xf8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000600:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000602:	2204      	movs	r2, #4
 8000604:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000608:	2200      	movs	r2, #0
 800060a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_FDCAN2_Init+0xf8>)
 800060e:	2200      	movs	r2, #0
 8000610:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000614:	2201      	movs	r2, #1
 8000616:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <MX_FDCAN2_Init+0xf8>)
 800061a:	2200      	movs	r2, #0
 800061c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 800061e:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000620:	2205      	movs	r2, #5
 8000622:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000624:	4811      	ldr	r0, [pc, #68]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000626:	f000 fb7d 	bl	8000d24 <HAL_FDCAN_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_FDCAN2_Init+0xc0>
  {
    Error_Handler();
 8000630:	f000 f83a 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800063c:	2302      	movs	r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000640:	2302      	movs	r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x11;
 8000644:	2311      	movs	r3, #17
 8000646:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x11;
 8000648:	2311      	movs	r3, #17
 800064a:	617b      	str	r3, [r7, #20]
    sFilterConfig.RxBufferIndex = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
    if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <MX_FDCAN2_Init+0xf8>)
 8000656:	f000 fd47 	bl	80010e8 <HAL_FDCAN_ConfigFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_FDCAN2_Init+0xf0>
    {
      /* Filter configuration Error */
      Error_Handler();
 8000660:	f000 f822 	bl	80006a8 <Error_Handler>
    }

  /* USER CODE END FDCAN2_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	24000104 	.word	0x24000104
 8000670:	4000a400 	.word	0x4000a400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_GPIO_Init+0x30>)
 800067c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000680:	4a08      	ldr	r2, [pc, #32]	; (80006a4 <MX_GPIO_Init+0x30>)
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_GPIO_Init+0x30>)
 800068c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000690:	f003 0302 	and.w	r3, r3, #2
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	58024400 	.word	0x58024400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <HAL_MspInit+0x30>)
 80006bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x30>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x30>)
 80006cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	58024400 	.word	0x58024400

080006e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0b8      	sub	sp, #224	; 0xe0
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	22b8      	movs	r2, #184	; 0xb8
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fec5 	bl	8004498 <memset>
  if(hfdcan->Instance==FDCAN2)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <HAL_FDCAN_MspInit+0xd4>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d14c      	bne.n	80007b2 <HAL_FDCAN_MspInit+0xca>
  /* USER CODE BEGIN FDCAN2_MspInit 0 */

  /* USER CODE END FDCAN2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800071c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800071e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000722:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4618      	mov	r0, r3
 800072c:	f002 fe0c 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000736:	f7ff ffb7 	bl	80006a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <HAL_FDCAN_MspInit+0xd8>)
 800073c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <HAL_FDCAN_MspInit+0xd8>)
 8000742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000746:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <HAL_FDCAN_MspInit+0xd8>)
 800074c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_FDCAN_MspInit+0xd8>)
 800075a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800075e:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <HAL_FDCAN_MspInit+0xd8>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_FDCAN_MspInit+0xd8>)
 800076a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB13     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000776:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800077a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000790:	2309      	movs	r3, #9
 8000792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800079a:	4619      	mov	r1, r3
 800079c:	4809      	ldr	r0, [pc, #36]	; (80007c4 <HAL_FDCAN_MspInit+0xdc>)
 800079e:	f001 fc95 	bl	80020cc <HAL_GPIO_Init>

    /* FDCAN2 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2014      	movs	r0, #20
 80007a8:	f000 fa87 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80007ac:	2014      	movs	r0, #20
 80007ae:	f000 fa9e 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80007b2:	bf00      	nop
 80007b4:	37e0      	adds	r7, #224	; 0xe0
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	4000a400 	.word	0x4000a400
 80007c0:	58024400 	.word	0x58024400
 80007c4:	58020400 	.word	0x58020400

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <NMI_Handler+0x4>

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MemManage_Handler+0x4>

080007da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <BusFault_Handler+0x4>

080007e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <UsageFault_Handler+0x4>

080007e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f956 	bl	8000ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <FDCAN2_IT0_IRQHandler+0x10>)
 8000822:	f000 ff45 	bl	80016b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	24000104 	.word	0x24000104

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f003 fde2 	bl	8004428 <__errno>
 8000864:	4603      	mov	r3, r0
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <_sbrk+0x64>)
 8000880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24100000 	.word	0x24100000
 8000890:	00000400 	.word	0x00000400
 8000894:	24000094 	.word	0x24000094
 8000898:	240001b8 	.word	0x240001b8

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <SystemInit+0xd0>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a31      	ldr	r2, [pc, #196]	; (800096c <SystemInit+0xd0>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <SystemInit+0xd4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 030f 	and.w	r3, r3, #15
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d807      	bhi.n	80008cc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <SystemInit+0xd4>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f023 030f 	bic.w	r3, r3, #15
 80008c4:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <SystemInit+0xd4>)
 80008c6:	f043 0303 	orr.w	r3, r3, #3
 80008ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <SystemInit+0xd8>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a28      	ldr	r2, [pc, #160]	; (8000974 <SystemInit+0xd8>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <SystemInit+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemInit+0xd8>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4924      	ldr	r1, [pc, #144]	; (8000974 <SystemInit+0xd8>)
 80008e4:	4b24      	ldr	r3, [pc, #144]	; (8000978 <SystemInit+0xdc>)
 80008e6:	4013      	ands	r3, r2
 80008e8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008ea:	4b21      	ldr	r3, [pc, #132]	; (8000970 <SystemInit+0xd4>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f003 030c 	and.w	r3, r3, #12
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d007      	beq.n	8000906 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <SystemInit+0xd4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f023 030f 	bic.w	r3, r3, #15
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <SystemInit+0xd4>)
 8000900:	f043 0303 	orr.w	r3, r3, #3
 8000904:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <SystemInit+0xd8>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <SystemInit+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <SystemInit+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <SystemInit+0xd8>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <SystemInit+0xe0>)
 800091c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <SystemInit+0xd8>)
 8000920:	4a17      	ldr	r2, [pc, #92]	; (8000980 <SystemInit+0xe4>)
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <SystemInit+0xd8>)
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <SystemInit+0xe8>)
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <SystemInit+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <SystemInit+0xd8>)
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <SystemInit+0xe8>)
 8000934:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <SystemInit+0xd8>)
 8000938:	2200      	movs	r2, #0
 800093a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <SystemInit+0xd8>)
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <SystemInit+0xe8>)
 8000940:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <SystemInit+0xd8>)
 8000944:	2200      	movs	r2, #0
 8000946:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <SystemInit+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <SystemInit+0xd8>)
 800094e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <SystemInit+0xd8>)
 8000956:	2200      	movs	r2, #0
 8000958:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <SystemInit+0xec>)
 800095c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000960:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	52002000 	.word	0x52002000
 8000974:	58024400 	.word	0x58024400
 8000978:	eaf6ed7f 	.word	0xeaf6ed7f
 800097c:	02020200 	.word	0x02020200
 8000980:	01ff0000 	.word	0x01ff0000
 8000984:	01010280 	.word	0x01010280
 8000988:	52004000 	.word	0x52004000

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f7ff ff84 	bl	800089c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f003 fd3b 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fd2d 	bl	800041c <main>
  bx  lr
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009c4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80009c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009cc:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80009d0:	08004db4 	.word	0x08004db4
  ldr r2, =_sbss
 80009d4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 80009d8:	240001b8 	.word	0x240001b8

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e6:	2003      	movs	r0, #3
 80009e8:	f000 f95c 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80009ec:	f002 fb32 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 80009f0:	4602      	mov	r2, r0
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <HAL_Init+0x68>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	f003 030f 	and.w	r3, r3, #15
 80009fc:	4913      	ldr	r1, [pc, #76]	; (8000a4c <HAL_Init+0x6c>)
 80009fe:	5ccb      	ldrb	r3, [r1, r3]
 8000a00:	f003 031f 	and.w	r3, r3, #31
 8000a04:	fa22 f303 	lsr.w	r3, r2, r3
 8000a08:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_Init+0x68>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 030f 	and.w	r3, r3, #15
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_Init+0x6c>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <HAL_Init+0x70>)
 8000a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a24:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <HAL_Init+0x74>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f814 	bl	8000a58 <HAL_InitTick>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e002      	b.n	8000a40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a3a:	f7ff fe3b 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	08004d58 	.word	0x08004d58
 8000a50:	24000004 	.word	0x24000004
 8000a54:	24000000 	.word	0x24000000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <HAL_InitTick+0x60>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d101      	bne.n	8000a6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e021      	b.n	8000ab0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_InitTick+0x64>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_InitTick+0x60>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4619      	mov	r1, r3
 8000a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f941 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e00e      	b.n	8000ab0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d80a      	bhi.n	8000aae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f90b 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4a06      	ldr	r2, [pc, #24]	; (8000ac0 <HAL_InitTick+0x68>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e000      	b.n	8000ab0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400000c 	.word	0x2400000c
 8000abc:	24000000 	.word	0x24000000
 8000ac0:	24000008 	.word	0x24000008

08000ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x20>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_IncTick+0x24>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	2400000c 	.word	0x2400000c
 8000ae8:	240001a4 	.word	0x240001a4

08000aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return uwTick;
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_GetTick+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	240001a4 	.word	0x240001a4

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <__NVIC_SetPriorityGrouping+0x40>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x40>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00
 8000b48:	05fa0000 	.word	0x05fa0000

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4907      	ldr	r1, [pc, #28]	; (8000ba0 <__NVIC_EnableIRQ+0x38>)
 8000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	; (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	; (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff29 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff40 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff90 	bl	8000bf8 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5f 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff33 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa4 	bl	8000c60 <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b098      	sub	sp, #96	; 0x60
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d2c:	4a84      	ldr	r2, [pc, #528]	; (8000f40 <HAL_FDCAN_Init+0x21c>)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4611      	mov	r1, r2
 8000d34:	224c      	movs	r2, #76	; 0x4c
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fba0 	bl	800447c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e1ca      	b.n	80010dc <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a7e      	ldr	r2, [pc, #504]	; (8000f44 <HAL_FDCAN_Init+0x220>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d106      	bne.n	8000d5e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d58:	461a      	mov	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d106      	bne.n	8000d78 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fcb8 	bl	80006e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0210 	bic.w	r2, r2, #16
 8000d86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d88:	f7ff feb0 	bl	8000aec <HAL_GetTick>
 8000d8c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d8e:	e014      	b.n	8000dba <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d90:	f7ff feac 	bl	8000aec <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b0a      	cmp	r3, #10
 8000d9c:	d90d      	bls.n	8000dba <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000da4:	f043 0201 	orr.w	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e190      	b.n	80010dc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d0e3      	beq.n	8000d90 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff fe88 	bl	8000aec <HAL_GetTick>
 8000ddc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000dde:	e014      	b.n	8000e0a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000de0:	f7ff fe84 	bl	8000aec <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90d      	bls.n	8000e0a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000df4:	f043 0201 	orr.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2203      	movs	r2, #3
 8000e02:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e168      	b.n	80010dc <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0e3      	beq.n	8000de0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0202 	orr.w	r2, r2, #2
 8000e26:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7c1b      	ldrb	r3, [r3, #16]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d108      	bne.n	8000e42 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	699a      	ldr	r2, [r3, #24]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e3e:	619a      	str	r2, [r3, #24]
 8000e40:	e007      	b.n	8000e52 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	699a      	ldr	r2, [r3, #24]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e50:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	7c5b      	ldrb	r3, [r3, #17]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d108      	bne.n	8000e6c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e68:	619a      	str	r2, [r3, #24]
 8000e6a:	e007      	b.n	8000e7c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e7a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7c9b      	ldrb	r3, [r3, #18]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d108      	bne.n	8000e96 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e92:	619a      	str	r2, [r3, #24]
 8000e94:	e007      	b.n	8000ea6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ea4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000eca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0210 	bic.w	r2, r2, #16
 8000eda:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d108      	bne.n	8000ef6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699a      	ldr	r2, [r3, #24]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0204 	orr.w	r2, r2, #4
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	e030      	b.n	8000f58 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d02c      	beq.n	8000f58 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d020      	beq.n	8000f48 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699a      	ldr	r2, [r3, #24]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f14:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0210 	orr.w	r2, r2, #16
 8000f24:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d114      	bne.n	8000f58 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0220 	orr.w	r2, r2, #32
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	e00b      	b.n	8000f58 <HAL_FDCAN_Init+0x234>
 8000f40:	08004d0c 	.word	0x08004d0c
 8000f44:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	699a      	ldr	r2, [r3, #24]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0220 	orr.w	r2, r2, #32
 8000f56:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f68:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a1b      	ldr	r3, [r3, #32]
 8000f6e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f70:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f80:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f82:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000f8c:	d115      	bne.n	8000fba <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000f9c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fa6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000fb6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fb8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00a      	beq.n	8000fd8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d012      	beq.n	800100c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000fee:	f023 0107 	bic.w	r1, r3, #7
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ffc:	4413      	add	r3, r2
 8000ffe:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d012      	beq.n	800103a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800101c:	f023 0107 	bic.w	r1, r3, #7
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800102a:	4413      	add	r3, r2
 800102c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	430a      	orrs	r2, r1
 8001036:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103e:	2b00      	cmp	r3, #0
 8001040:	d013      	beq.n	800106a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800104a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001058:	4413      	add	r3, r2
 800105a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800105e:	011a      	lsls	r2, r3, #4
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800106e:	2b00      	cmp	r3, #0
 8001070:	d013      	beq.n	800109a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800107a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001088:	4413      	add	r3, r2
 800108a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800108e:	021a      	lsls	r2, r3, #8
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_FDCAN_Init+0x3c0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d107      	bne.n	80010b4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f022 0203 	bic.w	r2, r2, #3
 80010b2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f000 fdf9 	bl	8001cc4 <FDCAN_CalcultateRamBlockAddresses>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80010d8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3760      	adds	r7, #96	; 0x60
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	4000a000 	.word	0x4000a000

080010e8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80010f8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d002      	beq.n	8001106 <HAL_FDCAN_ConfigFilter+0x1e>
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d157      	bne.n	80011b6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d12b      	bne.n	8001166 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	2b07      	cmp	r3, #7
 8001114:	d10d      	bne.n	8001132 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001122:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001128:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800112a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	e00e      	b.n	8001150 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800113e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001146:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800114c:	4313      	orrs	r3, r2
 800114e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e025      	b.n	80011b2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	075a      	lsls	r2, r3, #29
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b07      	cmp	r3, #7
 800117a:	d103      	bne.n	8001184 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	e006      	b.n	8001192 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	079a      	lsls	r2, r3, #30
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	3304      	adds	r3, #4
 80011aa:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e008      	b.n	80011c8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011bc:	f043 0202 	orr.w	r2, r3, #2
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
  }
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d111      	bne.n	800120c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2202      	movs	r2, #2
 80011ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0201 	bic.w	r2, r2, #1
 80011fe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	e008      	b.n	800121e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001212:	f043 0204 	orr.w	r2, r3, #4
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
  }
}
 800121e:	4618      	mov	r0, r3
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d141      	bne.n	80012c6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800124a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d109      	bne.n	8001266 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001258:	f043 0220 	orr.w	r2, r3, #32
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e038      	b.n	80012d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800126e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800127c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e026      	b.n	80012d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001292:	0c1b      	lsrs	r3, r3, #16
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 fe95 	bl	8001fd0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2101      	movs	r1, #1
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	fa01 f202 	lsl.w	r2, r1, r2
 80012b2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80012b6:	2201      	movs	r2, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e008      	b.n	80012d8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012cc:	f043 0208 	orr.w	r2, r3, #8
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
  }
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b08b      	sub	sp, #44	; 0x2c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012f8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80012fa:	7efb      	ldrb	r3, [r7, #27]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	f040 814b 	bne.w	8001598 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	2b40      	cmp	r3, #64	; 0x40
 8001306:	d14d      	bne.n	80013a4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001310:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e13e      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001342:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e12c      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001358:	0e1b      	lsrs	r3, r3, #24
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10b      	bne.n	800137a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800136a:	0fdb      	lsrs	r3, r3, #31
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001374:	d101      	bne.n	800137a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	4413      	add	r3, r2
 800138c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	69f9      	ldr	r1, [r7, #28]
 8001398:	fb01 f303 	mul.w	r3, r1, r3
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e069      	b.n	8001478 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2b41      	cmp	r3, #65	; 0x41
 80013a8:	d14d      	bne.n	8001446 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e0ed      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80013d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d109      	bne.n	80013f2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0db      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80013fa:	0e1b      	lsrs	r3, r3, #24
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10b      	bne.n	800141c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800140c:	0fdb      	lsrs	r3, r3, #31
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001416:	d101      	bne.n	800141c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001418:	2301      	movs	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001438:	69f9      	ldr	r1, [r7, #28]
 800143a:	fb01 f303 	mul.w	r3, r1, r3
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
 8001444:	e018      	b.n	8001478 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	429a      	cmp	r2, r3
 800144e:	d309      	bcc.n	8001464 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001456:	f043 0220 	orr.w	r2, r3, #32
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0a2      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	fb01 f303 	mul.w	r3, r1, r3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0c9b      	lsrs	r3, r3, #18
 8001492:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e005      	b.n	80014a8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	3304      	adds	r3, #4
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e1b      	lsrs	r3, r3, #24
 80014fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0fda      	lsrs	r2, r3, #31
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	3304      	adds	r3, #4
 8001510:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	e00a      	b.n	8001532 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	441a      	add	r2, r3
 8001522:	6839      	ldr	r1, [r7, #0]
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	440b      	add	r3, r1
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	3301      	adds	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	461a      	mov	r2, r3
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	4293      	cmp	r3, r2
 8001542:	d3eb      	bcc.n	800151c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b40      	cmp	r3, #64	; 0x40
 8001548:	d105      	bne.n	8001556 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001554:	e01e      	b.n	8001594 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	2b41      	cmp	r3, #65	; 0x41
 800155a:	d105      	bne.n	8001568 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001566:	e015      	b.n	8001594 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b1f      	cmp	r3, #31
 800156c:	d808      	bhi.n	8001580 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2101      	movs	r1, #1
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	fa01 f202 	lsl.w	r2, r1, r2
 800157a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800157e:	e009      	b.n	8001594 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	f003 021f 	and.w	r2, r3, #31
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	e008      	b.n	80015aa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800159e:	f043 0208 	orr.w	r2, r3, #8
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	372c      	adds	r7, #44	; 0x2c
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	08004d68 	.word	0x08004d68

080015bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015ce:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d002      	beq.n	80015dc <HAL_FDCAN_ActivateNotification+0x20>
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d155      	bne.n	8001688 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f042 0201 	orr.w	r2, r2, #1
 80015f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80015fa:	e014      	b.n	8001626 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	4013      	ands	r3, r2
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	429a      	cmp	r2, r3
 800160a:	d108      	bne.n	800161e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0202 	orr.w	r2, r2, #2
 800161a:	65da      	str	r2, [r3, #92]	; 0x5c
 800161c:	e003      	b.n	8001626 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2203      	movs	r2, #3
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800162c:	2b00      	cmp	r3, #0
 800162e:	d009      	beq.n	8001644 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	430a      	orrs	r2, r1
 8001640:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	430a      	orrs	r2, r1
 800165e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_FDCAN_ActivateNotification+0xec>)
 800166c:	4013      	ands	r3, r2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	430b      	orrs	r3, r1
 8001674:	6553      	str	r3, [r2, #84]	; 0x54
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_FDCAN_ActivateNotification+0xf0>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	0f9b      	lsrs	r3, r3, #30
 800167e:	490b      	ldr	r1, [pc, #44]	; (80016ac <HAL_FDCAN_ActivateNotification+0xf0>)
 8001680:	4313      	orrs	r3, r2
 8001682:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	e008      	b.n	800169a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800168e:	f043 0202 	orr.w	r2, r3, #2
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
  }
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	3fcfffff 	.word	0x3fcfffff
 80016ac:	4000a800 	.word	0x4000a800

080016b0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b092      	sub	sp, #72	; 0x48
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80016b8:	4b90      	ldr	r3, [pc, #576]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	079b      	lsls	r3, r3, #30
 80016be:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80016c0:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	079b      	lsls	r3, r3, #30
 80016c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016c8:	4013      	ands	r3, r2
 80016ca:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016e0:	4013      	ands	r3, r2
 80016e2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016f8:	4013      	ands	r3, r2
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001706:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001710:	4013      	ands	r3, r2
 8001712:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001728:	4013      	ands	r3, r2
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001732:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001740:	4013      	ands	r3, r2
 8001742:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d00a      	beq.n	8001776 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001768:	651a      	str	r2, [r3, #80]	; 0x50
 800176a:	4b64      	ldr	r3, [pc, #400]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 fa5a 	bl	8001c2a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	2b00      	cmp	r3, #0
 8001782:	d01e      	beq.n	80017c2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178e:	2b00      	cmp	r3, #0
 8001790:	d017      	beq.n	80017c2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a6:	4013      	ands	r3, r2
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b2:	651a      	str	r2, [r3, #80]	; 0x50
 80017b4:	4b51      	ldr	r3, [pc, #324]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80017ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fa0b 	bl	8001bd8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80017c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00d      	beq.n	80017e4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80017ce:	4b4c      	ldr	r3, [pc, #304]	; (8001900 <HAL_FDCAN_IRQHandler+0x250>)
 80017d0:	400b      	ands	r3, r1
 80017d2:	6513      	str	r3, [r2, #80]	; 0x50
 80017d4:	4a49      	ldr	r2, [pc, #292]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80017d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d8:	0f9b      	lsrs	r3, r3, #30
 80017da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80017dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f9c4 	bl	8001b6c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80017e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00d      	beq.n	8001806 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <HAL_FDCAN_IRQHandler+0x250>)
 80017f2:	400b      	ands	r3, r1
 80017f4:	6513      	str	r3, [r2, #80]	; 0x50
 80017f6:	4a41      	ldr	r2, [pc, #260]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80017f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fa:	0f9b      	lsrs	r3, r3, #30
 80017fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80017fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 f9be 	bl	8001b82 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_FDCAN_IRQHandler+0x250>)
 8001814:	400b      	ands	r3, r1
 8001816:	6513      	str	r3, [r2, #80]	; 0x50
 8001818:	4a38      	ldr	r2, [pc, #224]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 800181a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181c:	0f9b      	lsrs	r3, r3, #30
 800181e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001820:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f9b8 	bl	8001b98 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001834:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_FDCAN_IRQHandler+0x250>)
 8001836:	400b      	ands	r3, r1
 8001838:	6513      	str	r3, [r2, #80]	; 0x50
 800183a:	4a30      	ldr	r2, [pc, #192]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 800183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183e:	0f9b      	lsrs	r3, r3, #30
 8001840:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7fe fda3 	bl	8000390 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001854:	2b00      	cmp	r3, #0
 8001856:	d011      	beq.n	800187c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800186e:	651a      	str	r2, [r3, #80]	; 0x50
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f999 	bl	8001bae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d01e      	beq.n	80018c8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001894:	2b00      	cmp	r3, #0
 8001896:	d017      	beq.n	80018c8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ac:	4013      	ands	r3, r2
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80018c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f97d 	bl	8001bc2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d016      	beq.n	8001904 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00f      	beq.n	8001904 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018ec:	651a      	str	r2, [r3, #80]	; 0x50
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_FDCAN_IRQHandler+0x24c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 f97a 	bl	8001bee <HAL_FDCAN_RxBufferNewMessageCallback>
 80018fa:	e003      	b.n	8001904 <HAL_FDCAN_IRQHandler+0x254>
 80018fc:	4000a800 	.word	0x4000a800
 8001900:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00a      	beq.n	8001936 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001928:	651a      	str	r2, [r3, #80]	; 0x50
 800192a:	4b8d      	ldr	r3, [pc, #564]	; (8001b60 <HAL_FDCAN_IRQHandler+0x4b0>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f966 	bl	8001c02 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d011      	beq.n	8001968 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00a      	beq.n	8001968 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800195a:	651a      	str	r2, [r3, #80]	; 0x50
 800195c:	4b80      	ldr	r3, [pc, #512]	; (8001b60 <HAL_FDCAN_IRQHandler+0x4b0>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f957 	bl	8001c16 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d016      	beq.n	80019a4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00f      	beq.n	80019a4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800198c:	651a      	str	r2, [r3, #80]	; 0x50
 800198e:	4b74      	ldr	r3, [pc, #464]	; (8001b60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800199a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80019a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00d      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019b0:	4b6c      	ldr	r3, [pc, #432]	; (8001b64 <HAL_FDCAN_IRQHandler+0x4b4>)
 80019b2:	400b      	ands	r3, r1
 80019b4:	6513      	str	r3, [r2, #80]	; 0x50
 80019b6:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ba:	0f9b      	lsrs	r3, r3, #30
 80019bc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80019be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f946 	bl	8001c52 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d011      	beq.n	80019f0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <HAL_FDCAN_IRQHandler+0x4b4>)
 80019d4:	400b      	ands	r3, r1
 80019d6:	6513      	str	r3, [r2, #80]	; 0x50
 80019d8:	4a61      	ldr	r2, [pc, #388]	; (8001b60 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019dc:	0f9b      	lsrs	r3, r3, #30
 80019de:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80019e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <HAL_FDCAN_IRQHandler+0x4b8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f040 80a6 	bne.w	8001b48 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 809e 	beq.w	8001b48 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a20:	4013      	ands	r3, r2
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a2e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a46:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001a5e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001a76:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4013      	ands	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d007      	beq.n	8001a9a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 f8e7 	bl	8001c68 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	6a3a      	ldr	r2, [r7, #32]
 8001aa6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001aa8:	6a39      	ldr	r1, [r7, #32]
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8e7 	bl	8001c7e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01b      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f8cf 	bl	8001c94 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d007      	beq.n	8001b0c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001b04:	69f9      	ldr	r1, [r7, #28]
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8d0 	bl	8001cac <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d002      	beq.n	8001b58 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 f873 	bl	8001c3e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3748      	adds	r7, #72	; 0x48
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	4000a800 	.word	0x4000a800
 8001b64:	3fcfffff 	.word	0x3fcfffff
 8001b68:	4000a000 	.word	0x4000a000

08001b6c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001cda:	4ba7      	ldr	r3, [pc, #668]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	0091      	lsls	r1, r2, #2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cf4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d1a:	4b97      	ldr	r3, [pc, #604]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	0091      	lsls	r1, r2, #2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	041a      	lsls	r2, r3, #16
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4413      	add	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d5c:	4b86      	ldr	r3, [pc, #536]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	0091      	lsls	r1, r2, #2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	041a      	lsls	r2, r3, #16
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	4413      	add	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001da4:	4b74      	ldr	r3, [pc, #464]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	0091      	lsls	r1, r2, #2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dbe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	041a      	lsls	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	0091      	lsls	r1, r2, #2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e18:	4b57      	ldr	r3, [pc, #348]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	0091      	lsls	r1, r2, #2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4413      	add	r3, r2
 8001e50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	0091      	lsls	r1, r2, #2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	430b      	orrs	r3, r1
 8001e68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e98:	061a      	lsls	r2, r3, #24
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea8:	4b34      	ldr	r3, [pc, #208]	; (8001f7c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	009a      	lsls	r2, r3, #2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	441a      	add	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	441a      	add	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	441a      	add	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001ef6:	fb01 f303 	mul.w	r3, r1, r3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	441a      	add	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	441a      	add	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d915      	bls.n	8001fa0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001f74:	e006      	b.n	8001f84 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001f76:	bf00      	nop
 8001f78:	ffff0003 	.word	0xffff0003
 8001f7c:	10002b00 	.word	0x10002b00
 8001f80:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2203      	movs	r2, #3
 8001f98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e010      	b.n	8001fc2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e005      	b.n	8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d3f3      	bcc.n	8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3714      	adds	r7, #20
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001fee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e00a      	b.n	8002012 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002004:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800200a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800200c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002010:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800201c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002022:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002028:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	3304      	adds	r3, #4
 8002052:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	3304      	adds	r3, #4
 800205e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	e020      	b.n	80020a8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3303      	adds	r3, #3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3302      	adds	r3, #2
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	440b      	add	r3, r1
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800207e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	440b      	add	r3, r1
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800208c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	440a      	add	r2, r1
 8002094:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002096:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	3304      	adds	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3304      	adds	r3, #4
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0c1b      	lsrs	r3, r3, #16
 80020ae:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <FDCAN_CopyMessageToRAM+0xf8>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	461a      	mov	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d3d5      	bcc.n	8002066 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	3724      	adds	r7, #36	; 0x24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	08004d68 	.word	0x08004d68

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020da:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_GPIO_Init+0x234>)
 80020dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020de:	e194      	b.n	800240a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8186 	beq.w	8002404 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_Init+0x44>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d130      	bne.n	8002172 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002146:	2201      	movs	r2, #1
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	f003 0201 	and.w	r2, r3, #1
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4013      	ands	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d123      	bne.n	8002202 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	69b9      	ldr	r1, [r7, #24]
 80021fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0203 	and.w	r2, r3, #3
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80e0 	beq.w	8002404 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002244:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_GPIO_Init+0x238>)
 8002246:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800224a:	4a2e      	ldr	r2, [pc, #184]	; (8002304 <HAL_GPIO_Init+0x238>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_GPIO_Init+0x238>)
 8002256:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002262:	4a29      	ldr	r2, [pc, #164]	; (8002308 <HAL_GPIO_Init+0x23c>)
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	089b      	lsrs	r3, r3, #2
 8002268:	3302      	adds	r3, #2
 800226a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a20      	ldr	r2, [pc, #128]	; (800230c <HAL_GPIO_Init+0x240>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d052      	beq.n	8002334 <HAL_GPIO_Init+0x268>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_GPIO_Init+0x244>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d031      	beq.n	80022fa <HAL_GPIO_Init+0x22e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_GPIO_Init+0x248>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d02b      	beq.n	80022f6 <HAL_GPIO_Init+0x22a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_GPIO_Init+0x24c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d025      	beq.n	80022f2 <HAL_GPIO_Init+0x226>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_GPIO_Init+0x250>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d01f      	beq.n	80022ee <HAL_GPIO_Init+0x222>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_GPIO_Init+0x254>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d019      	beq.n	80022ea <HAL_GPIO_Init+0x21e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_GPIO_Init+0x258>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_GPIO_Init+0x25c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00d      	beq.n	80022e2 <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_GPIO_Init+0x260>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d007      	beq.n	80022de <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_GPIO_Init+0x264>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_GPIO_Init+0x20e>
 80022d6:	2309      	movs	r3, #9
 80022d8:	e02d      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022da:	230a      	movs	r3, #10
 80022dc:	e02b      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022de:	2308      	movs	r3, #8
 80022e0:	e029      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e027      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e025      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022ea:	2305      	movs	r3, #5
 80022ec:	e023      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022ee:	2304      	movs	r3, #4
 80022f0:	e021      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e01f      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e01d      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e01b      	b.n	8002336 <HAL_GPIO_Init+0x26a>
 80022fe:	bf00      	nop
 8002300:	58000080 	.word	0x58000080
 8002304:	58024400 	.word	0x58024400
 8002308:	58000400 	.word	0x58000400
 800230c:	58020000 	.word	0x58020000
 8002310:	58020400 	.word	0x58020400
 8002314:	58020800 	.word	0x58020800
 8002318:	58020c00 	.word	0x58020c00
 800231c:	58021000 	.word	0x58021000
 8002320:	58021400 	.word	0x58021400
 8002324:	58021800 	.word	0x58021800
 8002328:	58021c00 	.word	0x58021c00
 800232c:	58022000 	.word	0x58022000
 8002330:	58022400 	.word	0x58022400
 8002334:	2300      	movs	r3, #0
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	f002 0203 	and.w	r2, r2, #3
 800233c:	0092      	lsls	r2, r2, #2
 800233e:	4093      	lsls	r3, r2
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002346:	4938      	ldr	r1, [pc, #224]	; (8002428 <HAL_GPIO_Init+0x35c>)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	3302      	adds	r3, #2
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800237a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	f47f ae63 	bne.w	80020e0 <HAL_GPIO_Init+0x14>
  }
}
 800241a:	bf00      	nop
 800241c:	bf00      	nop
 800241e:	3724      	adds	r7, #36	; 0x24
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	58000400 	.word	0x58000400

0800242c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	2b06      	cmp	r3, #6
 800243e:	d00a      	beq.n	8002456 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	429a      	cmp	r2, r3
 800244c:	d001      	beq.n	8002452 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e040      	b.n	80024d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e03e      	b.n	80024d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800245e:	491f      	ldr	r1, [pc, #124]	; (80024dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4313      	orrs	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002466:	f7fe fb41 	bl	8000aec <HAL_GetTick>
 800246a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800246c:	e009      	b.n	8002482 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800246e:	f7fe fb3d 	bl	8000aec <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800247c:	d901      	bls.n	8002482 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e028      	b.n	80024d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_PWREx_ConfigSupply+0xb0>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800248e:	d1ee      	bne.n	800246e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b1e      	cmp	r3, #30
 8002494:	d008      	beq.n	80024a8 <HAL_PWREx_ConfigSupply+0x7c>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b2e      	cmp	r3, #46	; 0x2e
 800249a:	d005      	beq.n	80024a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b1d      	cmp	r3, #29
 80024a0:	d002      	beq.n	80024a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b2d      	cmp	r3, #45	; 0x2d
 80024a6:	d114      	bne.n	80024d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80024a8:	f7fe fb20 	bl	8000aec <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024ae:	e009      	b.n	80024c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024b0:	f7fe fb1c 	bl	8000aec <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024be:	d901      	bls.n	80024c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e007      	b.n	80024d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_PWREx_ConfigSupply+0xb0>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d0:	d1ee      	bne.n	80024b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	58024800 	.word	0x58024800

080024e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	; 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e3f3      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80b3 	beq.w	8002666 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002500:	4b9e      	ldr	r3, [pc, #632]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800250a:	4b9c      	ldr	r3, [pc, #624]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2b10      	cmp	r3, #16
 8002514:	d007      	beq.n	8002526 <HAL_RCC_OscConfig+0x46>
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	2b18      	cmp	r3, #24
 800251a:	d112      	bne.n	8002542 <HAL_RCC_OscConfig+0x62>
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d10d      	bne.n	8002542 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b95      	ldr	r3, [pc, #596]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8098 	beq.w	8002664 <HAL_RCC_OscConfig+0x184>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f040 8093 	bne.w	8002664 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e3cb      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254a:	d106      	bne.n	800255a <HAL_RCC_OscConfig+0x7a>
 800254c:	4b8b      	ldr	r3, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a8a      	ldr	r2, [pc, #552]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	6013      	str	r3, [r2, #0]
 8002558:	e058      	b.n	800260c <HAL_RCC_OscConfig+0x12c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0xa8>
 8002562:	4b86      	ldr	r3, [pc, #536]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a85      	ldr	r2, [pc, #532]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b83      	ldr	r3, [pc, #524]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a82      	ldr	r2, [pc, #520]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b80      	ldr	r3, [pc, #512]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a7f      	ldr	r2, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e041      	b.n	800260c <HAL_RCC_OscConfig+0x12c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0xd8>
 8002592:	4b7a      	ldr	r3, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b77      	ldr	r3, [pc, #476]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a76      	ldr	r2, [pc, #472]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b74      	ldr	r3, [pc, #464]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a73      	ldr	r2, [pc, #460]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e029      	b.n	800260c <HAL_RCC_OscConfig+0x12c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80025c0:	d112      	bne.n	80025e8 <HAL_RCC_OscConfig+0x108>
 80025c2:	4b6e      	ldr	r3, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6d      	ldr	r2, [pc, #436]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6a      	ldr	r2, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a67      	ldr	r2, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	e011      	b.n	800260c <HAL_RCC_OscConfig+0x12c>
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a63      	ldr	r2, [pc, #396]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b61      	ldr	r3, [pc, #388]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a60      	ldr	r2, [pc, #384]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80025fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b5e      	ldr	r3, [pc, #376]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5d      	ldr	r2, [pc, #372]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002606:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fa6a 	bl	8000aec <HAL_GetTick>
 8002618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fa66 	bl	8000aec <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e355      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262e:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x13c>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7fe fa56 	bl	8000aec <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fa52 	bl	8000aec <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e341      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x164>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 808c 	beq.w	800278c <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800267c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_RCC_OscConfig+0x1ba>
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	2b18      	cmp	r3, #24
 800268e:	d137      	bne.n	8002700 <HAL_RCC_OscConfig+0x220>
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d132      	bne.n	8002700 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269a:	4b38      	ldr	r3, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e313      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 0219 	bic.w	r2, r3, #25
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	492f      	ldr	r1, [pc, #188]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c4:	f7fe fa12 	bl	8000aec <HAL_GetTick>
 80026c8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe fa0e 	bl	8000aec <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e2fd      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	4920      	ldr	r1, [pc, #128]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fe:	e045      	b.n	800278c <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d026      	beq.n	8002756 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 0219 	bic.w	r2, r3, #25
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4919      	ldr	r1, [pc, #100]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7fe f9e7 	bl	8000aec <HAL_GetTick>
 800271e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002722:	f7fe f9e3 	bl	8000aec <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e2d2      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	490b      	ldr	r1, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	e01a      	b.n	800278c <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a08      	ldr	r2, [pc, #32]	; (800277c <HAL_RCC_OscConfig+0x29c>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe f9c3 	bl	8000aec <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276a:	f7fe f9bf 	bl	8000aec <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d903      	bls.n	8002780 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e2ae      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
 800277c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002780:	4b99      	ldr	r3, [pc, #612]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ee      	bne.n	800276a <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06a      	beq.n	800286e <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002798:	4b93      	ldr	r3, [pc, #588]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a2:	4b91      	ldr	r3, [pc, #580]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d007      	beq.n	80027be <HAL_RCC_OscConfig+0x2de>
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b18      	cmp	r3, #24
 80027b2:	d11b      	bne.n	80027ec <HAL_RCC_OscConfig+0x30c>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027be:	4b8a      	ldr	r3, [pc, #552]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	2b80      	cmp	r3, #128	; 0x80
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e281      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027d6:	4b84      	ldr	r3, [pc, #528]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	4980      	ldr	r1, [pc, #512]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ea:	e040      	b.n	800286e <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d023      	beq.n	800283c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027f4:	4b7c      	ldr	r3, [pc, #496]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a7b      	ldr	r2, [pc, #492]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80027fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe f974 	bl	8000aec <HAL_GetTick>
 8002804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002808:	f7fe f970 	bl	8000aec <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e25f      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800281a:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002826:	4b70      	ldr	r3, [pc, #448]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	496c      	ldr	r1, [pc, #432]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
 800283a:	e018      	b.n	800286e <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a69      	ldr	r2, [pc, #420]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe f950 	bl	8000aec <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002850:	f7fe f94c 	bl	8000aec <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e23b      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002862:	4b61      	ldr	r3, [pc, #388]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d036      	beq.n	80028e8 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d019      	beq.n	80028b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002882:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7fe f92d 	bl	8000aec <HAL_GetTick>
 8002892:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002896:	f7fe f929 	bl	8000aec <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e218      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028a8:	4b4f      	ldr	r3, [pc, #316]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80028aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x3b6>
 80028b4:	e018      	b.n	80028e8 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028b6:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80028b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ba:	4a4b      	ldr	r2, [pc, #300]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fe f913 	bl	8000aec <HAL_GetTick>
 80028c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ca:	f7fe f90f 	bl	8000aec <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e1fe      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028dc:	4b42      	ldr	r3, [pc, #264]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80028de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d036      	beq.n	8002962 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d019      	beq.n	8002930 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028fc:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002908:	f7fe f8f0 	bl	8000aec <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002910:	f7fe f8ec 	bl	8000aec <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1db      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x430>
 800292e:	e018      	b.n	8002962 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002930:	4b2d      	ldr	r3, [pc, #180]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2c      	ldr	r2, [pc, #176]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800293a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800293c:	f7fe f8d6 	bl	8000aec <HAL_GetTick>
 8002940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002944:	f7fe f8d2 	bl	8000aec <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1c1      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80af 	beq.w	8002ace <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002970:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_OscConfig+0x50c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1d      	ldr	r2, [pc, #116]	; (80029ec <HAL_RCC_OscConfig+0x50c>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800297c:	f7fe f8b6 	bl	8000aec <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002984:	f7fe f8b2 	bl	8000aec <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b64      	cmp	r3, #100	; 0x64
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e1a1      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002996:	4b15      	ldr	r3, [pc, #84]	; (80029ec <HAL_RCC_OscConfig+0x50c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4d8>
 80029aa:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a0e      	ldr	r2, [pc, #56]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	; 0x70
 80029b6:	e05b      	b.n	8002a70 <HAL_RCC_OscConfig+0x590>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d117      	bne.n	80029f0 <HAL_RCC_OscConfig+0x510>
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
 80029d8:	4b03      	ldr	r3, [pc, #12]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a02      	ldr	r2, [pc, #8]	; (80029e8 <HAL_RCC_OscConfig+0x508>)
 80029de:	f023 0304 	bic.w	r3, r3, #4
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	e044      	b.n	8002a70 <HAL_RCC_OscConfig+0x590>
 80029e6:	bf00      	nop
 80029e8:	58024400 	.word	0x58024400
 80029ec:	58024800 	.word	0x58024800
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b05      	cmp	r3, #5
 80029f6:	d112      	bne.n	8002a1e <HAL_RCC_OscConfig+0x53e>
 80029f8:	4b95      	ldr	r3, [pc, #596]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a94      	ldr	r2, [pc, #592]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 80029fe:	f043 0304 	orr.w	r3, r3, #4
 8002a02:	6713      	str	r3, [r2, #112]	; 0x70
 8002a04:	4b92      	ldr	r3, [pc, #584]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4a91      	ldr	r2, [pc, #580]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a10:	4b8f      	ldr	r3, [pc, #572]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a8e      	ldr	r2, [pc, #568]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	e028      	b.n	8002a70 <HAL_RCC_OscConfig+0x590>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b85      	cmp	r3, #133	; 0x85
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x56c>
 8002a26:	4b8a      	ldr	r3, [pc, #552]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a89      	ldr	r2, [pc, #548]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a2c:	f043 0304 	orr.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a86      	ldr	r2, [pc, #536]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b84      	ldr	r3, [pc, #528]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4a:	e011      	b.n	8002a70 <HAL_RCC_OscConfig+0x590>
 8002a4c:	4b80      	ldr	r3, [pc, #512]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a7f      	ldr	r2, [pc, #508]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a7c      	ldr	r2, [pc, #496]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	4b7a      	ldr	r3, [pc, #488]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	4a79      	ldr	r2, [pc, #484]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe f838 	bl	8000aec <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe f834 	bl	8000aec <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e121      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a96:	4b6e      	ldr	r3, [pc, #440]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ee      	beq.n	8002a80 <HAL_RCC_OscConfig+0x5a0>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7fe f822 	bl	8000aec <HAL_GetTick>
 8002aa8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe f81e 	bl	8000aec <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e10b      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac2:	4b63      	ldr	r3, [pc, #396]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1ee      	bne.n	8002aac <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8100 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ae0:	2b18      	cmp	r3, #24
 8002ae2:	f000 80bb 	beq.w	8002c5c <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	f040 8095 	bne.w	8002c1a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b57      	ldr	r3, [pc, #348]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fd fff6 	bl	8000aec <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fd fff2 	bl	8000aec <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0e1      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b22:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <HAL_RCC_OscConfig+0x774>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b32:	0112      	lsls	r2, r2, #4
 8002b34:	430a      	orrs	r2, r1
 8002b36:	4946      	ldr	r1, [pc, #280]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	628b      	str	r3, [r1, #40]	; 0x28
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	3b01      	subs	r3, #1
 8002b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	025b      	lsls	r3, r3, #9
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	3b01      	subs	r3, #1
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	3b01      	subs	r3, #1
 8002b66:	061b      	lsls	r3, r3, #24
 8002b68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b6c:	4938      	ldr	r1, [pc, #224]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	4a36      	ldr	r2, [pc, #216]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <HAL_RCC_OscConfig+0x778>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b8a:	00d2      	lsls	r2, r2, #3
 8002b8c:	4930      	ldr	r1, [pc, #192]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b92:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f023 020c 	bic.w	r2, r3, #12
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	492c      	ldr	r1, [pc, #176]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f023 0202 	bic.w	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb0:	4927      	ldr	r1, [pc, #156]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fd ff7b 	bl	8000aec <HAL_GetTick>
 8002bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7fd ff77 	bl	8000aec <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e066      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x71a>
 8002c18:	e05e      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a0c      	ldr	r2, [pc, #48]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fd ff61 	bl	8000aec <HAL_GetTick>
 8002c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fd ff5d 	bl	8000aec <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e04c      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCC_OscConfig+0x770>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x74e>
 8002c4c:	e044      	b.n	8002cd8 <HAL_RCC_OscConfig+0x7f8>
 8002c4e:	bf00      	nop
 8002c50:	58024400 	.word	0x58024400
 8002c54:	fffffc0c 	.word	0xfffffc0c
 8002c58:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCC_OscConfig+0x804>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_OscConfig+0x804>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d031      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d12a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d122      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d11a      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0a5b      	lsrs	r3, r3, #9
 8002ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002caa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	0c1b      	lsrs	r3, r3, #16
 8002cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d108      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	0e1b      	lsrs	r3, r3, #24
 8002cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3730      	adds	r7, #48	; 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	58024400 	.word	0x58024400

08002ce8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e19c      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d910      	bls.n	8002d2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 020f 	bic.w	r2, r3, #15
 8002d12:	4985      	ldr	r1, [pc, #532]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b83      	ldr	r3, [pc, #524]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e184      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691a      	ldr	r2, [r3, #16]
 8002d3c:	4b7b      	ldr	r3, [pc, #492]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d908      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d48:	4b78      	ldr	r3, [pc, #480]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4975      	ldr	r1, [pc, #468]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b70      	ldr	r3, [pc, #448]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d908      	bls.n	8002d88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d76:	4b6d      	ldr	r3, [pc, #436]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	496a      	ldr	r1, [pc, #424]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0310 	and.w	r3, r3, #16
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002da4:	4b61      	ldr	r3, [pc, #388]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	495e      	ldr	r1, [pc, #376]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d908      	bls.n	8002de4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dd2:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4953      	ldr	r1, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d908      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b4a      	ldr	r3, [pc, #296]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f023 020f 	bic.w	r2, r3, #15
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4947      	ldr	r1, [pc, #284]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d055      	beq.n	8002eca <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4940      	ldr	r1, [pc, #256]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e38:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d121      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0f6      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d107      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e50:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d115      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0ea      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d109      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0de      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0d6      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f023 0207 	bic.w	r2, r3, #7
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4925      	ldr	r1, [pc, #148]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9a:	f7fd fe27 	bl	8000aec <HAL_GetTick>
 8002e9e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea2:	f7fd fe23 	bl	8000aec <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e0be      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d1eb      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d208      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee6:	4b11      	ldr	r3, [pc, #68]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d214      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 020f 	bic.w	r2, r3, #15
 8002f0e:	4906      	ldr	r1, [pc, #24]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_RCC_ClockConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e086      	b.n	8003036 <HAL_RCC_ClockConfig+0x34e>
 8002f28:	52002000 	.word	0x52002000
 8002f2c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	4b3f      	ldr	r3, [pc, #252]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d208      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f4c:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	4939      	ldr	r1, [pc, #228]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d208      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	492e      	ldr	r1, [pc, #184]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d208      	bcs.n	8002fba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4922      	ldr	r1, [pc, #136]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69da      	ldr	r2, [r3, #28]
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d208      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4917      	ldr	r1, [pc, #92]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002fe8:	f000 f834 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	4912      	ldr	r1, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x35c>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003006:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_RCC_ClockConfig+0x358>)
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_RCC_ClockConfig+0x35c>)
 8003010:	5cd3      	ldrb	r3, [r2, r3]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x360>)
 800301e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003020:	4a0a      	ldr	r2, [pc, #40]	; (800304c <HAL_RCC_ClockConfig+0x364>)
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_ClockConfig+0x368>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7fd fd14 	bl	8000a58 <HAL_InitTick>
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	58024400 	.word	0x58024400
 8003044:	08004d58 	.word	0x08004d58
 8003048:	24000004 	.word	0x24000004
 800304c:	24000000 	.word	0x24000000
 8003050:	24000008 	.word	0x24000008

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800305a:	4bb3      	ldr	r3, [pc, #716]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003062:	2b18      	cmp	r3, #24
 8003064:	f200 8155 	bhi.w	8003312 <HAL_RCC_GetSysClockFreq+0x2be>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_RCC_GetSysClockFreq+0x1c>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030d5 	.word	0x080030d5
 8003074:	08003313 	.word	0x08003313
 8003078:	08003313 	.word	0x08003313
 800307c:	08003313 	.word	0x08003313
 8003080:	08003313 	.word	0x08003313
 8003084:	08003313 	.word	0x08003313
 8003088:	08003313 	.word	0x08003313
 800308c:	08003313 	.word	0x08003313
 8003090:	080030fb 	.word	0x080030fb
 8003094:	08003313 	.word	0x08003313
 8003098:	08003313 	.word	0x08003313
 800309c:	08003313 	.word	0x08003313
 80030a0:	08003313 	.word	0x08003313
 80030a4:	08003313 	.word	0x08003313
 80030a8:	08003313 	.word	0x08003313
 80030ac:	08003313 	.word	0x08003313
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003313 	.word	0x08003313
 80030b8:	08003313 	.word	0x08003313
 80030bc:	08003313 	.word	0x08003313
 80030c0:	08003313 	.word	0x08003313
 80030c4:	08003313 	.word	0x08003313
 80030c8:	08003313 	.word	0x08003313
 80030cc:	08003313 	.word	0x08003313
 80030d0:	08003107 	.word	0x08003107
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030d4:	4b94      	ldr	r3, [pc, #592]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d009      	beq.n	80030f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030e0:	4b91      	ldr	r3, [pc, #580]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	4a90      	ldr	r2, [pc, #576]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
 80030f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030f2:	e111      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030f4:	4b8d      	ldr	r3, [pc, #564]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030f6:	61bb      	str	r3, [r7, #24]
    break;
 80030f8:	e10e      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030fa:	4b8d      	ldr	r3, [pc, #564]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030fc:	61bb      	str	r3, [r7, #24]
    break;
 80030fe:	e10b      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003100:	4b8c      	ldr	r3, [pc, #560]	; (8003334 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003102:	61bb      	str	r3, [r7, #24]
    break;
 8003104:	e108      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003106:	4b88      	ldr	r3, [pc, #544]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003110:	4b85      	ldr	r3, [pc, #532]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800311c:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003126:	4b80      	ldr	r3, [pc, #512]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	08db      	lsrs	r3, r3, #3
 800312c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80e1 	beq.w	800330c <HAL_RCC_GetSysClockFreq+0x2b8>
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2b02      	cmp	r3, #2
 800314e:	f000 8083 	beq.w	8003258 <HAL_RCC_GetSysClockFreq+0x204>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b02      	cmp	r3, #2
 8003156:	f200 80a1 	bhi.w	800329c <HAL_RCC_GetSysClockFreq+0x248>
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x114>
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d056      	beq.n	8003214 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003166:	e099      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	08db      	lsrs	r3, r3, #3
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	4a6b      	ldr	r2, [pc, #428]	; (800332c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80031ce:	e087      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800333c <HAL_RCC_GetSysClockFreq+0x2e8>
 80031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e2:	4b51      	ldr	r3, [pc, #324]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003212:	e065      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003340 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003226:	4b40      	ldr	r3, [pc, #256]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003236:	ed97 6a02 	vldr	s12, [r7, #8]
 800323a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 800323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003256:	e043      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003262:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003344 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326a:	4b2f      	ldr	r3, [pc, #188]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327a:	ed97 6a02 	vldr	s12, [r7, #8]
 800327e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800328e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800329a:	e021      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003340 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032be:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003338 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	0a5b      	lsrs	r3, r3, #9
 80032e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ea:	3301      	adds	r3, #1
 80032ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003304:	ee17 3a90 	vmov	r3, s15
 8003308:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800330a:	e005      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
    break;
 8003310:	e002      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003312:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003314:	61bb      	str	r3, [r7, #24]
    break;
 8003316:	bf00      	nop
  }

  return sysclockfreq;
 8003318:	69bb      	ldr	r3, [r7, #24]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	; 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	58024400 	.word	0x58024400
 800332c:	03d09000 	.word	0x03d09000
 8003330:	003d0900 	.word	0x003d0900
 8003334:	016e3600 	.word	0x016e3600
 8003338:	46000000 	.word	0x46000000
 800333c:	4c742400 	.word	0x4c742400
 8003340:	4a742400 	.word	0x4a742400
 8003344:	4bb71b00 	.word	0x4bb71b00

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003354:	2300      	movs	r3, #0
 8003356:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d03f      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003368:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800336c:	d02a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800336e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003372:	d824      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003378:	d018      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800337a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800337e:	d81e      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003388:	d007      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800338a:	e018      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800338c:	4ba6      	ldr	r3, [pc, #664]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	4aa5      	ldr	r2, [pc, #660]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003398:	e015      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3304      	adds	r3, #4
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fedd 	bl	8004160 <RCCEx_PLL2_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033aa:	e00c      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	2102      	movs	r1, #2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 ff86 	bl	80042c4 <RCCEx_PLL3_Config>
 80033b8:	4603      	mov	r3, r0
 80033ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
      break;
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033cc:	4b96      	ldr	r3, [pc, #600]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d8:	4993      	ldr	r1, [pc, #588]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	650b      	str	r3, [r1, #80]	; 0x50
 80033de:	e001      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03d      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d826      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80033f8:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003415 	.word	0x08003415
 8003404:	08003423 	.word	0x08003423
 8003408:	08003435 	.word	0x08003435
 800340c:	0800344d 	.word	0x0800344d
 8003410:	0800344d 	.word	0x0800344d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003414:	4b84      	ldr	r3, [pc, #528]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	4a83      	ldr	r2, [pc, #524]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800341a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800341e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003420:	e015      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fe99 	bl	8004160 <RCCEx_PLL2_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003432:	e00c      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3324      	adds	r3, #36	; 0x24
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f000 ff42 	bl	80042c4 <RCCEx_PLL3_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
      break;
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800344c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d109      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003454:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003458:	f023 0207 	bic.w	r2, r3, #7
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	4971      	ldr	r1, [pc, #452]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	650b      	str	r3, [r1, #80]	; 0x50
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003474:	2b00      	cmp	r3, #0
 8003476:	d04a      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003480:	d031      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003482:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003486:	d82b      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348c:	d02d      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800348e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003492:	d825      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003494:	2bc0      	cmp	r3, #192	; 0xc0
 8003496:	d02a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003498:	2bc0      	cmp	r3, #192	; 0xc0
 800349a:	d821      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800349c:	2b80      	cmp	r3, #128	; 0x80
 800349e:	d016      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x186>
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d81d      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x166>
 80034a8:	2b40      	cmp	r3, #64	; 0x40
 80034aa:	d007      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80034ac:	e018      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ae:	4b5e      	ldr	r3, [pc, #376]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4a5d      	ldr	r2, [pc, #372]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034ba:	e019      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2100      	movs	r1, #0
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fe4c 	bl	8004160 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034cc:	e010      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3324      	adds	r3, #36	; 0x24
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fef5 	bl	80042c4 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80034de:	e007      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	e004      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80034ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80034f6:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	4949      	ldr	r1, [pc, #292]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003504:	4313      	orrs	r3, r2
 8003506:	650b      	str	r3, [r1, #80]	; 0x50
 8003508:	e001      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003516:	2b00      	cmp	r3, #0
 8003518:	d04f      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003522:	d036      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003524:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003528:	d830      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800352e:	d032      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003534:	d82a      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003536:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800353a:	d02e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x252>
 800353c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003540:	d824      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003546:	d018      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d81e      	bhi.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003556:	d007      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003558:	e018      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355a:	4b33      	ldr	r3, [pc, #204]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4a32      	ldr	r2, [pc, #200]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003566:	e019      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fdf6 	bl	8004160 <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003578:	e010      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3324      	adds	r3, #36	; 0x24
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fe9f 	bl	80042c4 <RCCEx_PLL3_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800358a:	e007      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	75fb      	strb	r3, [r7, #23]
      break;
 8003590:	e004      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800359a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80035a2:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	491e      	ldr	r1, [pc, #120]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	650b      	str	r3, [r1, #80]	; 0x50
 80035b4:	e001      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
 80035b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d034      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	2b30      	cmp	r3, #48	; 0x30
 80035cc:	d01c      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d817      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d00c      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d813      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d10f      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80035ee:	e00e      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3304      	adds	r3, #4
 80035f4:	2102      	movs	r1, #2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fdb2 	bl	8004160 <RCCEx_PLL2_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003600:	e005      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
      break;
 8003606:	e002      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8003608:	bf00      	nop
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800360c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	4901      	ldr	r1, [pc, #4]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003622:	4313      	orrs	r3, r2
 8003624:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8003628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d047      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003640:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003644:	d030      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364a:	d82a      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800364c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003650:	d02c      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003652:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003656:	d824      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800365c:	d018      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d81e      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d007      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800366e:	e018      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003670:	4bb0      	ldr	r3, [pc, #704]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	4aaf      	ldr	r2, [pc, #700]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800367c:	e017      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fd6b 	bl	8004160 <RCCEx_PLL2_Config>
 800368a:	4603      	mov	r3, r0
 800368c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800368e:	e00e      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3324      	adds	r3, #36	; 0x24
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fe14 	bl	80042c4 <RCCEx_PLL3_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80036a0:	e005      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036a8:	bf00      	nop
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036b4:	4b9f      	ldr	r3, [pc, #636]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c0:	499c      	ldr	r1, [pc, #624]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	650b      	str	r3, [r1, #80]	; 0x50
 80036c6:	e001      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d049      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d02e      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e6:	d828      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80036e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ec:	d02a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80036ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f2:	d822      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80036f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036f8:	d026      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80036fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036fe:	d81c      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003704:	d010      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800370a:	d816      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01d      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d111      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd1f 	bl	8004160 <RCCEx_PLL2_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003726:	e012      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3324      	adds	r3, #36	; 0x24
 800372c:	2101      	movs	r1, #1
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fdc8 	bl	80042c4 <RCCEx_PLL3_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003738:	e009      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	75fb      	strb	r3, [r7, #23]
      break;
 800373e:	e006      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003740:	bf00      	nop
 8003742:	e004      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003744:	bf00      	nop
 8003746:	e002      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800374c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003754:	4b77      	ldr	r3, [pc, #476]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003758:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003760:	4974      	ldr	r1, [pc, #464]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003762:	4313      	orrs	r3, r2
 8003764:	650b      	str	r3, [r1, #80]	; 0x50
 8003766:	e001      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d053      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800377e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003782:	d034      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003784:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003788:	d82e      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800378a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800378e:	d030      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003794:	d828      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800379a:	d02c      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d822      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037a6:	d028      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80037a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80037ac:	d81c      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b2:	d010      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80037b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b8:	d816      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01f      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80037be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c2:	d111      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	2101      	movs	r1, #1
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fcc8 	bl	8004160 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037d4:	e014      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3324      	adds	r3, #36	; 0x24
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fd71 	bl	80042c4 <RCCEx_PLL3_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80037e6:	e00b      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	75fb      	strb	r3, [r7, #23]
      break;
 80037ec:	e008      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80037f2:	bf00      	nop
 80037f4:	e004      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80037f6:	bf00      	nop
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80037fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003806:	4b4b      	ldr	r3, [pc, #300]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003814:	4947      	ldr	r1, [pc, #284]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003816:	4313      	orrs	r3, r2
 8003818:	658b      	str	r3, [r1, #88]	; 0x58
 800381a:	e001      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d02f      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003834:	d00e      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383a:	d814      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d015      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003844:	d10f      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003846:	4b3b      	ldr	r3, [pc, #236]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384a:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003852:	e00c      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	2101      	movs	r1, #1
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fc80 	bl	8004160 <RCCEx_PLL2_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003864:	e003      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
      break;
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 800386c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003874:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	492c      	ldr	r1, [pc, #176]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003882:	4313      	orrs	r3, r2
 8003884:	650b      	str	r3, [r1, #80]	; 0x50
 8003886:	e001      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d032      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	2b03      	cmp	r3, #3
 800389e:	d81b      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x590>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038df 	.word	0x080038df
 80038ac:	080038b9 	.word	0x080038b9
 80038b0:	080038c7 	.word	0x080038c7
 80038b4:	080038df 	.word	0x080038df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038c4:	e00c      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3304      	adds	r3, #4
 80038ca:	2102      	movs	r1, #2
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fc47 	bl	8004160 <RCCEx_PLL2_Config>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	75fb      	strb	r3, [r7, #23]
      break;
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 80038de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	4910      	ldr	r1, [pc, #64]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038f8:	e001      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 808a 	beq.w	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003918:	f7fd f8e8 	bl	8000aec <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391e:	e00d      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003920:	f7fd f8e4 	bl	8000aec <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d906      	bls.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	75fb      	strb	r3, [r7, #23]
        break;
 8003932:	e009      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8003934:	58024400 	.word	0x58024400
 8003938:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800393c:	4bba      	ldr	r3, [pc, #744]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0eb      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d166      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800394e:	4bb7      	ldr	r3, [pc, #732]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003958:	4053      	eors	r3, r2
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d013      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003962:	4bb2      	ldr	r3, [pc, #712]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800396c:	4baf      	ldr	r3, [pc, #700]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4aae      	ldr	r2, [pc, #696]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003978:	4bac      	ldr	r3, [pc, #688]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4aab      	ldr	r2, [pc, #684]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800397e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003984:	4aa9      	ldr	r2, [pc, #676]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003994:	d115      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003996:	f7fd f8a9 	bl	8000aec <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800399c:	e00b      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fd f8a5 	bl	8000aec <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d902      	bls.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	75fb      	strb	r3, [r7, #23]
            break;
 80039b4:	e005      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b6:	4b9d      	ldr	r3, [pc, #628]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0ed      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d126      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80039d8:	4b94      	ldr	r3, [pc, #592]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039e6:	0919      	lsrs	r1, r3, #4
 80039e8:	4b91      	ldr	r3, [pc, #580]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80039ea:	400b      	ands	r3, r1
 80039ec:	498f      	ldr	r1, [pc, #572]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	610b      	str	r3, [r1, #16]
 80039f2:	e005      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80039f4:	4b8d      	ldr	r3, [pc, #564]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4a8c      	ldr	r2, [pc, #560]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80039fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039fe:	6113      	str	r3, [r2, #16]
 8003a00:	4b8a      	ldr	r3, [pc, #552]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0e:	4987      	ldr	r1, [pc, #540]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	670b      	str	r3, [r1, #112]	; 0x70
 8003a14:	e004      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	75bb      	strb	r3, [r7, #22]
 8003a1a:	e001      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d07f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a32:	2b28      	cmp	r3, #40	; 0x28
 8003a34:	d866      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003a36:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003b0b 	.word	0x08003b0b
 8003a40:	08003b05 	.word	0x08003b05
 8003a44:	08003b05 	.word	0x08003b05
 8003a48:	08003b05 	.word	0x08003b05
 8003a4c:	08003b05 	.word	0x08003b05
 8003a50:	08003b05 	.word	0x08003b05
 8003a54:	08003b05 	.word	0x08003b05
 8003a58:	08003b05 	.word	0x08003b05
 8003a5c:	08003ae1 	.word	0x08003ae1
 8003a60:	08003b05 	.word	0x08003b05
 8003a64:	08003b05 	.word	0x08003b05
 8003a68:	08003b05 	.word	0x08003b05
 8003a6c:	08003b05 	.word	0x08003b05
 8003a70:	08003b05 	.word	0x08003b05
 8003a74:	08003b05 	.word	0x08003b05
 8003a78:	08003b05 	.word	0x08003b05
 8003a7c:	08003af3 	.word	0x08003af3
 8003a80:	08003b05 	.word	0x08003b05
 8003a84:	08003b05 	.word	0x08003b05
 8003a88:	08003b05 	.word	0x08003b05
 8003a8c:	08003b05 	.word	0x08003b05
 8003a90:	08003b05 	.word	0x08003b05
 8003a94:	08003b05 	.word	0x08003b05
 8003a98:	08003b05 	.word	0x08003b05
 8003a9c:	08003b0b 	.word	0x08003b0b
 8003aa0:	08003b05 	.word	0x08003b05
 8003aa4:	08003b05 	.word	0x08003b05
 8003aa8:	08003b05 	.word	0x08003b05
 8003aac:	08003b05 	.word	0x08003b05
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003b05 	.word	0x08003b05
 8003ab8:	08003b05 	.word	0x08003b05
 8003abc:	08003b0b 	.word	0x08003b0b
 8003ac0:	08003b05 	.word	0x08003b05
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b05 	.word	0x08003b05
 8003acc:	08003b05 	.word	0x08003b05
 8003ad0:	08003b05 	.word	0x08003b05
 8003ad4:	08003b05 	.word	0x08003b05
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b0b 	.word	0x08003b0b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fb3a 	bl	8004160 <RCCEx_PLL2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003af0:	e00c      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3324      	adds	r3, #36	; 0x24
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fbe3 	bl	80042c4 <RCCEx_PLL3_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003b02:	e003      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
      break;
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10a      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b12:	4b46      	ldr	r3, [pc, #280]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b20:	4942      	ldr	r1, [pc, #264]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	654b      	str	r3, [r1, #84]	; 0x54
 8003b26:	e001      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d038      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d821      	bhi.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b8b 	.word	0x08003b8b
 8003b4c:	08003b61 	.word	0x08003b61
 8003b50:	08003b73 	.word	0x08003b73
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b8b 	.word	0x08003b8b
 8003b5c:	08003b8b 	.word	0x08003b8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fafa 	bl	8004160 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b70:	e00c      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	; 0x24
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fba3 	bl	80042c4 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003b82:	e003      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	e000      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f023 0207 	bic.w	r2, r3, #7
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b9e:	4923      	ldr	r1, [pc, #140]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ba4:	e001      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d040      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d821      	bhi.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003c0b 	.word	0x08003c0b
 8003bcc:	08003be1 	.word	0x08003be1
 8003bd0:	08003bf3 	.word	0x08003bf3
 8003bd4:	08003c0b 	.word	0x08003c0b
 8003bd8:	08003c0b 	.word	0x08003c0b
 8003bdc:	08003c0b 	.word	0x08003c0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	2101      	movs	r1, #1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 faba 	bl	8004160 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3324      	adds	r3, #36	; 0x24
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fb63 	bl	80042c4 <RCCEx_PLL3_Config>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	75fb      	strb	r3, [r7, #23]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003c0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d110      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	f023 0207 	bic.w	r2, r3, #7
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c20:	4902      	ldr	r1, [pc, #8]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	658b      	str	r3, [r1, #88]	; 0x58
 8003c26:	e007      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003c28:	58024800 	.word	0x58024800
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d04b      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c4e:	d02e      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c54:	d828      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5a:	d02a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d822      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c66:	d026      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c6c:	d81c      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c72:	d010      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c78:	d816      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d01d      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c82:	d111      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fa68 	bl	8004160 <RCCEx_PLL2_Config>
 8003c90:	4603      	mov	r3, r0
 8003c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003c94:	e012      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3324      	adds	r3, #36	; 0x24
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fb11 	bl	80042c4 <RCCEx_PLL3_Config>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ca6:	e009      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75fb      	strb	r3, [r7, #23]
      break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cbc:	7dfb      	ldrb	r3, [r7, #23]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4bb3      	ldr	r3, [pc, #716]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd0:	49af      	ldr	r1, [pc, #700]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	654b      	str	r3, [r1, #84]	; 0x54
 8003cd6:	e001      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d04b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cf2:	d02e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003cf4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cf8:	d828      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfe:	d02a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d822      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0a:	d026      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003d0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d10:	d81c      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d16:	d010      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1c:	d816      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01d      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d111      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa16 	bl	8004160 <RCCEx_PLL2_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d38:	e012      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3324      	adds	r3, #36	; 0x24
 8003d3e:	2102      	movs	r1, #2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fabf 	bl	80042c4 <RCCEx_PLL3_Config>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003d4a:	e009      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d50:	e006      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d66:	4b8a      	ldr	r3, [pc, #552]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d74:	4986      	ldr	r1, [pc, #536]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d04b      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d96:	d02e      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003d98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d9c:	d828      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da2:	d02a      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d822      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003daa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dae:	d026      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003db0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003db4:	d81c      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d010      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc0:	d816      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01d      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dca:	d111      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f9c4 	bl	8004160 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ddc:	e012      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3324      	adds	r3, #36	; 0x24
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fa6d 	bl	80042c4 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	e006      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003df6:	bf00      	nop
 8003df8:	e004      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e0a:	4b61      	ldr	r3, [pc, #388]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e18:	495d      	ldr	r1, [pc, #372]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3a:	d10a      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3324      	adds	r3, #36	; 0x24
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fa3e 	bl	80042c4 <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e52:	4b4f      	ldr	r3, [pc, #316]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	494b      	ldr	r1, [pc, #300]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7c:	d10a      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3324      	adds	r3, #36	; 0x24
 8003e82:	2102      	movs	r1, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fa1d 	bl	80042c4 <RCCEx_PLL3_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e94:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ea2:	493b      	ldr	r1, [pc, #236]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d034      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003eba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ebe:	d01d      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003ec0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ec4:	d817      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003ed0:	e011      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 f941 	bl	8004160 <RCCEx_PLL2_Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ee2:	e00c      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3324      	adds	r3, #36	; 0x24
 8003ee8:	2102      	movs	r1, #2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f9ea 	bl	80042c4 <RCCEx_PLL3_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ef4:	e003      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f12:	491f      	ldr	r1, [pc, #124]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	658b      	str	r3, [r1, #88]	; 0x58
 8003f18:	e001      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d036      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f34:	d01c      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003f36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f3a:	d816      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f40:	d003      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f46:	d007      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003f48:	e00f      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4a:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f56:	e00c      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 f9b0 	bl	80042c4 <RCCEx_PLL3_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f86:	4902      	ldr	r1, [pc, #8]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d029      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d007      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003fb2:	e00f      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b69      	ldr	r3, [pc, #420]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a68      	ldr	r2, [pc, #416]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fc0:	e00b      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f8c9 	bl	8004160 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fe0:	4b5e      	ldr	r3, [pc, #376]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fec:	495b      	ldr	r1, [pc, #364]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ff2:	e001      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f95a 	bl	80042c4 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d032      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004030:	d017      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8004032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004036:	d811      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800403c:	d013      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800403e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004042:	d80b      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d010      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404c:	d106      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404e:	4b43      	ldr	r3, [pc, #268]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	4a42      	ldr	r2, [pc, #264]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800405a:	e007      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	e004      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800406a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406c:	7dfb      	ldrb	r3, [r7, #23]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004072:	4b3a      	ldr	r3, [pc, #232]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004080:	4936      	ldr	r1, [pc, #216]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004082:	4313      	orrs	r3, r2
 8004084:	654b      	str	r3, [r1, #84]	; 0x54
 8004086:	e001      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004098:	4b30      	ldr	r3, [pc, #192]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040a4:	492d      	ldr	r1, [pc, #180]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040b6:	4b29      	ldr	r3, [pc, #164]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	4926      	ldr	r1, [pc, #152]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80040d4:	4b21      	ldr	r3, [pc, #132]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	491e      	ldr	r1, [pc, #120]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00d      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	4a19      	ldr	r2, [pc, #100]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040fc:	6113      	str	r3, [r2, #16]
 80040fe:	4b17      	ldr	r3, [pc, #92]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004108:	4914      	ldr	r1, [pc, #80]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800410a:	4313      	orrs	r3, r2
 800410c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da08      	bge.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	490e      	ldr	r1, [pc, #56]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004124:	4313      	orrs	r3, r2
 8004126:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	4906      	ldr	r1, [pc, #24]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004144:	4313      	orrs	r3, r2
 8004146:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004148:	7dbb      	ldrb	r3, [r7, #22]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	58024400 	.word	0x58024400

08004160 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800416e:	4b53      	ldr	r3, [pc, #332]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d101      	bne.n	800417e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e099      	b.n	80042b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800417e:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a4e      	ldr	r2, [pc, #312]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004184:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418a:	f7fc fcaf 	bl	8000aec <HAL_GetTick>
 800418e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004190:	e008      	b.n	80041a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004192:	f7fc fcab 	bl	8000aec <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e086      	b.n	80042b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80041a4:	4b45      	ldr	r3, [pc, #276]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1f0      	bne.n	8004192 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80041b0:	4b42      	ldr	r3, [pc, #264]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	493f      	ldr	r1, [pc, #252]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	628b      	str	r3, [r1, #40]	; 0x28
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	025b      	lsls	r3, r3, #9
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	061b      	lsls	r3, r3, #24
 80041f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80041f4:	4931      	ldr	r1, [pc, #196]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80041fa:	4b30      	ldr	r3, [pc, #192]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	492d      	ldr	r1, [pc, #180]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800420c:	4b2b      	ldr	r3, [pc, #172]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f023 0220 	bic.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	4928      	ldr	r1, [pc, #160]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800422a:	4b24      	ldr	r3, [pc, #144]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 800422c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <RCCEx_PLL2_Config+0x160>)
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	69d2      	ldr	r2, [r2, #28]
 8004236:	00d2      	lsls	r2, r2, #3
 8004238:	4920      	ldr	r1, [pc, #128]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800423e:	4b1f      	ldr	r3, [pc, #124]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a1e      	ldr	r2, [pc, #120]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004244:	f043 0310 	orr.w	r3, r3, #16
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004256:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800425c:	e00f      	b.n	800427e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d106      	bne.n	8004272 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	4a14      	ldr	r2, [pc, #80]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 800426a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800426e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004270:	e005      	b.n	800427e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a11      	ldr	r2, [pc, #68]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 8004284:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fc fc2f 	bl	8000aec <HAL_GetTick>
 800428e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004290:	e008      	b.n	80042a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004292:	f7fc fc2b 	bl	8000aec <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e006      	b.n	80042b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <RCCEx_PLL2_Config+0x15c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	58024400 	.word	0x58024400
 80042c0:	ffff0007 	.word	0xffff0007

080042c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042d2:	4b53      	ldr	r3, [pc, #332]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d101      	bne.n	80042e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e099      	b.n	8004416 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80042e2:	4b4f      	ldr	r3, [pc, #316]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a4e      	ldr	r2, [pc, #312]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80042e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ee:	f7fc fbfd 	bl	8000aec <HAL_GetTick>
 80042f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042f4:	e008      	b.n	8004308 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042f6:	f7fc fbf9 	bl	8000aec <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d901      	bls.n	8004308 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e086      	b.n	8004416 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004308:	4b45      	ldr	r3, [pc, #276]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1f0      	bne.n	80042f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	051b      	lsls	r3, r3, #20
 8004322:	493f      	ldr	r1, [pc, #252]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	628b      	str	r3, [r1, #40]	; 0x28
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3b01      	subs	r3, #1
 800432e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	3b01      	subs	r3, #1
 8004338:	025b      	lsls	r3, r3, #9
 800433a:	b29b      	uxth	r3, r3
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	3b01      	subs	r3, #1
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004358:	4931      	ldr	r1, [pc, #196]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 800435a:	4313      	orrs	r3, r2
 800435c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	492d      	ldr	r1, [pc, #180]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004370:	4b2b      	ldr	r3, [pc, #172]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	4928      	ldr	r1, [pc, #160]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 800437e:	4313      	orrs	r3, r2
 8004380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	4a26      	ldr	r2, [pc, #152]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 8004390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004392:	4b24      	ldr	r3, [pc, #144]	; (8004424 <RCCEx_PLL3_Config+0x160>)
 8004394:	4013      	ands	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	69d2      	ldr	r2, [r2, #28]
 800439a:	00d2      	lsls	r2, r2, #3
 800439c:	4920      	ldr	r1, [pc, #128]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80043a2:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80043b4:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043c0:	e00f      	b.n	80043e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043d4:	e005      	b.n	80043e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	4a11      	ldr	r2, [pc, #68]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80043e2:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a0e      	ldr	r2, [pc, #56]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ee:	f7fc fb7d 	bl	8000aec <HAL_GetTick>
 80043f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043f4:	e008      	b.n	8004408 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043f6:	f7fc fb79 	bl	8000aec <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e006      	b.n	8004416 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <RCCEx_PLL3_Config+0x15c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
 8004424:	ffff0007 	.word	0xffff0007

08004428 <__errno>:
 8004428:	4b01      	ldr	r3, [pc, #4]	; (8004430 <__errno+0x8>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	24000010 	.word	0x24000010

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	4d0d      	ldr	r5, [pc, #52]	; (800446c <__libc_init_array+0x38>)
 8004438:	4c0d      	ldr	r4, [pc, #52]	; (8004470 <__libc_init_array+0x3c>)
 800443a:	1b64      	subs	r4, r4, r5
 800443c:	10a4      	asrs	r4, r4, #2
 800443e:	2600      	movs	r6, #0
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	4d0b      	ldr	r5, [pc, #44]	; (8004474 <__libc_init_array+0x40>)
 8004446:	4c0c      	ldr	r4, [pc, #48]	; (8004478 <__libc_init_array+0x44>)
 8004448:	f000 fc4e 	bl	8004ce8 <_init>
 800444c:	1b64      	subs	r4, r4, r5
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	2600      	movs	r6, #0
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	f855 3b04 	ldr.w	r3, [r5], #4
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	f855 3b04 	ldr.w	r3, [r5], #4
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	08004dac 	.word	0x08004dac
 8004470:	08004dac 	.word	0x08004dac
 8004474:	08004dac 	.word	0x08004dac
 8004478:	08004db0 	.word	0x08004db0

0800447c <memcpy>:
 800447c:	440a      	add	r2, r1
 800447e:	4291      	cmp	r1, r2
 8004480:	f100 33ff 	add.w	r3, r0, #4294967295
 8004484:	d100      	bne.n	8004488 <memcpy+0xc>
 8004486:	4770      	bx	lr
 8004488:	b510      	push	{r4, lr}
 800448a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800448e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004492:	4291      	cmp	r1, r2
 8004494:	d1f9      	bne.n	800448a <memcpy+0xe>
 8004496:	bd10      	pop	{r4, pc}

08004498 <memset>:
 8004498:	4402      	add	r2, r0
 800449a:	4603      	mov	r3, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <siprintf>:
 80044a8:	b40e      	push	{r1, r2, r3}
 80044aa:	b500      	push	{lr}
 80044ac:	b09c      	sub	sp, #112	; 0x70
 80044ae:	ab1d      	add	r3, sp, #116	; 0x74
 80044b0:	9002      	str	r0, [sp, #8]
 80044b2:	9006      	str	r0, [sp, #24]
 80044b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044b8:	4809      	ldr	r0, [pc, #36]	; (80044e0 <siprintf+0x38>)
 80044ba:	9107      	str	r1, [sp, #28]
 80044bc:	9104      	str	r1, [sp, #16]
 80044be:	4909      	ldr	r1, [pc, #36]	; (80044e4 <siprintf+0x3c>)
 80044c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044c4:	9105      	str	r1, [sp, #20]
 80044c6:	6800      	ldr	r0, [r0, #0]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	a902      	add	r1, sp, #8
 80044cc:	f000 f868 	bl	80045a0 <_svfiprintf_r>
 80044d0:	9b02      	ldr	r3, [sp, #8]
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	b01c      	add	sp, #112	; 0x70
 80044d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044dc:	b003      	add	sp, #12
 80044de:	4770      	bx	lr
 80044e0:	24000010 	.word	0x24000010
 80044e4:	ffff0208 	.word	0xffff0208

080044e8 <__ssputs_r>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	688e      	ldr	r6, [r1, #8]
 80044ee:	429e      	cmp	r6, r3
 80044f0:	4682      	mov	sl, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	461f      	mov	r7, r3
 80044f8:	d838      	bhi.n	800456c <__ssputs_r+0x84>
 80044fa:	898a      	ldrh	r2, [r1, #12]
 80044fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004500:	d032      	beq.n	8004568 <__ssputs_r+0x80>
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	6909      	ldr	r1, [r1, #16]
 8004506:	eba5 0901 	sub.w	r9, r5, r1
 800450a:	6965      	ldr	r5, [r4, #20]
 800450c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004510:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004514:	3301      	adds	r3, #1
 8004516:	444b      	add	r3, r9
 8004518:	106d      	asrs	r5, r5, #1
 800451a:	429d      	cmp	r5, r3
 800451c:	bf38      	it	cc
 800451e:	461d      	movcc	r5, r3
 8004520:	0553      	lsls	r3, r2, #21
 8004522:	d531      	bpl.n	8004588 <__ssputs_r+0xa0>
 8004524:	4629      	mov	r1, r5
 8004526:	f000 fb39 	bl	8004b9c <_malloc_r>
 800452a:	4606      	mov	r6, r0
 800452c:	b950      	cbnz	r0, 8004544 <__ssputs_r+0x5c>
 800452e:	230c      	movs	r3, #12
 8004530:	f8ca 3000 	str.w	r3, [sl]
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	f04f 30ff 	mov.w	r0, #4294967295
 8004540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004544:	6921      	ldr	r1, [r4, #16]
 8004546:	464a      	mov	r2, r9
 8004548:	f7ff ff98 	bl	800447c <memcpy>
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	6126      	str	r6, [r4, #16]
 800455a:	6165      	str	r5, [r4, #20]
 800455c:	444e      	add	r6, r9
 800455e:	eba5 0509 	sub.w	r5, r5, r9
 8004562:	6026      	str	r6, [r4, #0]
 8004564:	60a5      	str	r5, [r4, #8]
 8004566:	463e      	mov	r6, r7
 8004568:	42be      	cmp	r6, r7
 800456a:	d900      	bls.n	800456e <__ssputs_r+0x86>
 800456c:	463e      	mov	r6, r7
 800456e:	4632      	mov	r2, r6
 8004570:	6820      	ldr	r0, [r4, #0]
 8004572:	4641      	mov	r1, r8
 8004574:	f000 faa8 	bl	8004ac8 <memmove>
 8004578:	68a3      	ldr	r3, [r4, #8]
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	1b9b      	subs	r3, r3, r6
 800457e:	4432      	add	r2, r6
 8004580:	60a3      	str	r3, [r4, #8]
 8004582:	6022      	str	r2, [r4, #0]
 8004584:	2000      	movs	r0, #0
 8004586:	e7db      	b.n	8004540 <__ssputs_r+0x58>
 8004588:	462a      	mov	r2, r5
 800458a:	f000 fb61 	bl	8004c50 <_realloc_r>
 800458e:	4606      	mov	r6, r0
 8004590:	2800      	cmp	r0, #0
 8004592:	d1e1      	bne.n	8004558 <__ssputs_r+0x70>
 8004594:	6921      	ldr	r1, [r4, #16]
 8004596:	4650      	mov	r0, sl
 8004598:	f000 fab0 	bl	8004afc <_free_r>
 800459c:	e7c7      	b.n	800452e <__ssputs_r+0x46>
	...

080045a0 <_svfiprintf_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	4698      	mov	r8, r3
 80045a6:	898b      	ldrh	r3, [r1, #12]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	b09d      	sub	sp, #116	; 0x74
 80045ac:	4607      	mov	r7, r0
 80045ae:	460d      	mov	r5, r1
 80045b0:	4614      	mov	r4, r2
 80045b2:	d50e      	bpl.n	80045d2 <_svfiprintf_r+0x32>
 80045b4:	690b      	ldr	r3, [r1, #16]
 80045b6:	b963      	cbnz	r3, 80045d2 <_svfiprintf_r+0x32>
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	f000 faef 	bl	8004b9c <_malloc_r>
 80045be:	6028      	str	r0, [r5, #0]
 80045c0:	6128      	str	r0, [r5, #16]
 80045c2:	b920      	cbnz	r0, 80045ce <_svfiprintf_r+0x2e>
 80045c4:	230c      	movs	r3, #12
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	e0d1      	b.n	8004772 <_svfiprintf_r+0x1d2>
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	616b      	str	r3, [r5, #20]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9309      	str	r3, [sp, #36]	; 0x24
 80045d6:	2320      	movs	r3, #32
 80045d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e0:	2330      	movs	r3, #48	; 0x30
 80045e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800478c <_svfiprintf_r+0x1ec>
 80045e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ea:	f04f 0901 	mov.w	r9, #1
 80045ee:	4623      	mov	r3, r4
 80045f0:	469a      	mov	sl, r3
 80045f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f6:	b10a      	cbz	r2, 80045fc <_svfiprintf_r+0x5c>
 80045f8:	2a25      	cmp	r2, #37	; 0x25
 80045fa:	d1f9      	bne.n	80045f0 <_svfiprintf_r+0x50>
 80045fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004600:	d00b      	beq.n	800461a <_svfiprintf_r+0x7a>
 8004602:	465b      	mov	r3, fp
 8004604:	4622      	mov	r2, r4
 8004606:	4629      	mov	r1, r5
 8004608:	4638      	mov	r0, r7
 800460a:	f7ff ff6d 	bl	80044e8 <__ssputs_r>
 800460e:	3001      	adds	r0, #1
 8004610:	f000 80aa 	beq.w	8004768 <_svfiprintf_r+0x1c8>
 8004614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004616:	445a      	add	r2, fp
 8004618:	9209      	str	r2, [sp, #36]	; 0x24
 800461a:	f89a 3000 	ldrb.w	r3, [sl]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a2 	beq.w	8004768 <_svfiprintf_r+0x1c8>
 8004624:	2300      	movs	r3, #0
 8004626:	f04f 32ff 	mov.w	r2, #4294967295
 800462a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462e:	f10a 0a01 	add.w	sl, sl, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	9307      	str	r3, [sp, #28]
 8004636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800463a:	931a      	str	r3, [sp, #104]	; 0x68
 800463c:	4654      	mov	r4, sl
 800463e:	2205      	movs	r2, #5
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	4851      	ldr	r0, [pc, #324]	; (800478c <_svfiprintf_r+0x1ec>)
 8004646:	f7fb fe53 	bl	80002f0 <memchr>
 800464a:	9a04      	ldr	r2, [sp, #16]
 800464c:	b9d8      	cbnz	r0, 8004686 <_svfiprintf_r+0xe6>
 800464e:	06d0      	lsls	r0, r2, #27
 8004650:	bf44      	itt	mi
 8004652:	2320      	movmi	r3, #32
 8004654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004658:	0711      	lsls	r1, r2, #28
 800465a:	bf44      	itt	mi
 800465c:	232b      	movmi	r3, #43	; 0x2b
 800465e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004662:	f89a 3000 	ldrb.w	r3, [sl]
 8004666:	2b2a      	cmp	r3, #42	; 0x2a
 8004668:	d015      	beq.n	8004696 <_svfiprintf_r+0xf6>
 800466a:	9a07      	ldr	r2, [sp, #28]
 800466c:	4654      	mov	r4, sl
 800466e:	2000      	movs	r0, #0
 8004670:	f04f 0c0a 	mov.w	ip, #10
 8004674:	4621      	mov	r1, r4
 8004676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800467a:	3b30      	subs	r3, #48	; 0x30
 800467c:	2b09      	cmp	r3, #9
 800467e:	d94e      	bls.n	800471e <_svfiprintf_r+0x17e>
 8004680:	b1b0      	cbz	r0, 80046b0 <_svfiprintf_r+0x110>
 8004682:	9207      	str	r2, [sp, #28]
 8004684:	e014      	b.n	80046b0 <_svfiprintf_r+0x110>
 8004686:	eba0 0308 	sub.w	r3, r0, r8
 800468a:	fa09 f303 	lsl.w	r3, r9, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	46a2      	mov	sl, r4
 8004694:	e7d2      	b.n	800463c <_svfiprintf_r+0x9c>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	1d19      	adds	r1, r3, #4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	9103      	str	r1, [sp, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfbb      	ittet	lt
 80046a2:	425b      	neglt	r3, r3
 80046a4:	f042 0202 	orrlt.w	r2, r2, #2
 80046a8:	9307      	strge	r3, [sp, #28]
 80046aa:	9307      	strlt	r3, [sp, #28]
 80046ac:	bfb8      	it	lt
 80046ae:	9204      	strlt	r2, [sp, #16]
 80046b0:	7823      	ldrb	r3, [r4, #0]
 80046b2:	2b2e      	cmp	r3, #46	; 0x2e
 80046b4:	d10c      	bne.n	80046d0 <_svfiprintf_r+0x130>
 80046b6:	7863      	ldrb	r3, [r4, #1]
 80046b8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ba:	d135      	bne.n	8004728 <_svfiprintf_r+0x188>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	9203      	str	r2, [sp, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bfb8      	it	lt
 80046c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80046cc:	3402      	adds	r4, #2
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800479c <_svfiprintf_r+0x1fc>
 80046d4:	7821      	ldrb	r1, [r4, #0]
 80046d6:	2203      	movs	r2, #3
 80046d8:	4650      	mov	r0, sl
 80046da:	f7fb fe09 	bl	80002f0 <memchr>
 80046de:	b140      	cbz	r0, 80046f2 <_svfiprintf_r+0x152>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	eba0 000a 	sub.w	r0, r0, sl
 80046e6:	fa03 f000 	lsl.w	r0, r3, r0
 80046ea:	9b04      	ldr	r3, [sp, #16]
 80046ec:	4303      	orrs	r3, r0
 80046ee:	3401      	adds	r4, #1
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f6:	4826      	ldr	r0, [pc, #152]	; (8004790 <_svfiprintf_r+0x1f0>)
 80046f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046fc:	2206      	movs	r2, #6
 80046fe:	f7fb fdf7 	bl	80002f0 <memchr>
 8004702:	2800      	cmp	r0, #0
 8004704:	d038      	beq.n	8004778 <_svfiprintf_r+0x1d8>
 8004706:	4b23      	ldr	r3, [pc, #140]	; (8004794 <_svfiprintf_r+0x1f4>)
 8004708:	bb1b      	cbnz	r3, 8004752 <_svfiprintf_r+0x1b2>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	3307      	adds	r3, #7
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	3308      	adds	r3, #8
 8004714:	9303      	str	r3, [sp, #12]
 8004716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004718:	4433      	add	r3, r6
 800471a:	9309      	str	r3, [sp, #36]	; 0x24
 800471c:	e767      	b.n	80045ee <_svfiprintf_r+0x4e>
 800471e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004722:	460c      	mov	r4, r1
 8004724:	2001      	movs	r0, #1
 8004726:	e7a5      	b.n	8004674 <_svfiprintf_r+0xd4>
 8004728:	2300      	movs	r3, #0
 800472a:	3401      	adds	r4, #1
 800472c:	9305      	str	r3, [sp, #20]
 800472e:	4619      	mov	r1, r3
 8004730:	f04f 0c0a 	mov.w	ip, #10
 8004734:	4620      	mov	r0, r4
 8004736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800473a:	3a30      	subs	r2, #48	; 0x30
 800473c:	2a09      	cmp	r2, #9
 800473e:	d903      	bls.n	8004748 <_svfiprintf_r+0x1a8>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0c5      	beq.n	80046d0 <_svfiprintf_r+0x130>
 8004744:	9105      	str	r1, [sp, #20]
 8004746:	e7c3      	b.n	80046d0 <_svfiprintf_r+0x130>
 8004748:	fb0c 2101 	mla	r1, ip, r1, r2
 800474c:	4604      	mov	r4, r0
 800474e:	2301      	movs	r3, #1
 8004750:	e7f0      	b.n	8004734 <_svfiprintf_r+0x194>
 8004752:	ab03      	add	r3, sp, #12
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	462a      	mov	r2, r5
 8004758:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <_svfiprintf_r+0x1f8>)
 800475a:	a904      	add	r1, sp, #16
 800475c:	4638      	mov	r0, r7
 800475e:	f3af 8000 	nop.w
 8004762:	1c42      	adds	r2, r0, #1
 8004764:	4606      	mov	r6, r0
 8004766:	d1d6      	bne.n	8004716 <_svfiprintf_r+0x176>
 8004768:	89ab      	ldrh	r3, [r5, #12]
 800476a:	065b      	lsls	r3, r3, #25
 800476c:	f53f af2c 	bmi.w	80045c8 <_svfiprintf_r+0x28>
 8004770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004772:	b01d      	add	sp, #116	; 0x74
 8004774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	ab03      	add	r3, sp, #12
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	462a      	mov	r2, r5
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <_svfiprintf_r+0x1f8>)
 8004780:	a904      	add	r1, sp, #16
 8004782:	4638      	mov	r0, r7
 8004784:	f000 f87a 	bl	800487c <_printf_i>
 8004788:	e7eb      	b.n	8004762 <_svfiprintf_r+0x1c2>
 800478a:	bf00      	nop
 800478c:	08004d78 	.word	0x08004d78
 8004790:	08004d82 	.word	0x08004d82
 8004794:	00000000 	.word	0x00000000
 8004798:	080044e9 	.word	0x080044e9
 800479c:	08004d7e 	.word	0x08004d7e

080047a0 <_printf_common>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	4616      	mov	r6, r2
 80047a6:	4699      	mov	r9, r3
 80047a8:	688a      	ldr	r2, [r1, #8]
 80047aa:	690b      	ldr	r3, [r1, #16]
 80047ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b0:	4293      	cmp	r3, r2
 80047b2:	bfb8      	it	lt
 80047b4:	4613      	movlt	r3, r2
 80047b6:	6033      	str	r3, [r6, #0]
 80047b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047bc:	4607      	mov	r7, r0
 80047be:	460c      	mov	r4, r1
 80047c0:	b10a      	cbz	r2, 80047c6 <_printf_common+0x26>
 80047c2:	3301      	adds	r3, #1
 80047c4:	6033      	str	r3, [r6, #0]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	0699      	lsls	r1, r3, #26
 80047ca:	bf42      	ittt	mi
 80047cc:	6833      	ldrmi	r3, [r6, #0]
 80047ce:	3302      	addmi	r3, #2
 80047d0:	6033      	strmi	r3, [r6, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	f015 0506 	ands.w	r5, r5, #6
 80047d8:	d106      	bne.n	80047e8 <_printf_common+0x48>
 80047da:	f104 0a19 	add.w	sl, r4, #25
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	6832      	ldr	r2, [r6, #0]
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dc26      	bgt.n	8004836 <_printf_common+0x96>
 80047e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ec:	1e13      	subs	r3, r2, #0
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	bf18      	it	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	0692      	lsls	r2, r2, #26
 80047f6:	d42b      	bmi.n	8004850 <_printf_common+0xb0>
 80047f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047fc:	4649      	mov	r1, r9
 80047fe:	4638      	mov	r0, r7
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d01e      	beq.n	8004844 <_printf_common+0xa4>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	68e5      	ldr	r5, [r4, #12]
 800480a:	6832      	ldr	r2, [r6, #0]
 800480c:	f003 0306 	and.w	r3, r3, #6
 8004810:	2b04      	cmp	r3, #4
 8004812:	bf08      	it	eq
 8004814:	1aad      	subeq	r5, r5, r2
 8004816:	68a3      	ldr	r3, [r4, #8]
 8004818:	6922      	ldr	r2, [r4, #16]
 800481a:	bf0c      	ite	eq
 800481c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004820:	2500      	movne	r5, #0
 8004822:	4293      	cmp	r3, r2
 8004824:	bfc4      	itt	gt
 8004826:	1a9b      	subgt	r3, r3, r2
 8004828:	18ed      	addgt	r5, r5, r3
 800482a:	2600      	movs	r6, #0
 800482c:	341a      	adds	r4, #26
 800482e:	42b5      	cmp	r5, r6
 8004830:	d11a      	bne.n	8004868 <_printf_common+0xc8>
 8004832:	2000      	movs	r0, #0
 8004834:	e008      	b.n	8004848 <_printf_common+0xa8>
 8004836:	2301      	movs	r3, #1
 8004838:	4652      	mov	r2, sl
 800483a:	4649      	mov	r1, r9
 800483c:	4638      	mov	r0, r7
 800483e:	47c0      	blx	r8
 8004840:	3001      	adds	r0, #1
 8004842:	d103      	bne.n	800484c <_printf_common+0xac>
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800484c:	3501      	adds	r5, #1
 800484e:	e7c6      	b.n	80047de <_printf_common+0x3e>
 8004850:	18e1      	adds	r1, r4, r3
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	2030      	movs	r0, #48	; 0x30
 8004856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485a:	4422      	add	r2, r4
 800485c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004864:	3302      	adds	r3, #2
 8004866:	e7c7      	b.n	80047f8 <_printf_common+0x58>
 8004868:	2301      	movs	r3, #1
 800486a:	4622      	mov	r2, r4
 800486c:	4649      	mov	r1, r9
 800486e:	4638      	mov	r0, r7
 8004870:	47c0      	blx	r8
 8004872:	3001      	adds	r0, #1
 8004874:	d0e6      	beq.n	8004844 <_printf_common+0xa4>
 8004876:	3601      	adds	r6, #1
 8004878:	e7d9      	b.n	800482e <_printf_common+0x8e>
	...

0800487c <_printf_i>:
 800487c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	460c      	mov	r4, r1
 8004882:	4691      	mov	r9, r2
 8004884:	7e27      	ldrb	r7, [r4, #24]
 8004886:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004888:	2f78      	cmp	r7, #120	; 0x78
 800488a:	4680      	mov	r8, r0
 800488c:	469a      	mov	sl, r3
 800488e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004892:	d807      	bhi.n	80048a4 <_printf_i+0x28>
 8004894:	2f62      	cmp	r7, #98	; 0x62
 8004896:	d80a      	bhi.n	80048ae <_printf_i+0x32>
 8004898:	2f00      	cmp	r7, #0
 800489a:	f000 80d8 	beq.w	8004a4e <_printf_i+0x1d2>
 800489e:	2f58      	cmp	r7, #88	; 0x58
 80048a0:	f000 80a3 	beq.w	80049ea <_printf_i+0x16e>
 80048a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048ac:	e03a      	b.n	8004924 <_printf_i+0xa8>
 80048ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048b2:	2b15      	cmp	r3, #21
 80048b4:	d8f6      	bhi.n	80048a4 <_printf_i+0x28>
 80048b6:	a001      	add	r0, pc, #4	; (adr r0, 80048bc <_printf_i+0x40>)
 80048b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048bc:	08004915 	.word	0x08004915
 80048c0:	08004929 	.word	0x08004929
 80048c4:	080048a5 	.word	0x080048a5
 80048c8:	080048a5 	.word	0x080048a5
 80048cc:	080048a5 	.word	0x080048a5
 80048d0:	080048a5 	.word	0x080048a5
 80048d4:	08004929 	.word	0x08004929
 80048d8:	080048a5 	.word	0x080048a5
 80048dc:	080048a5 	.word	0x080048a5
 80048e0:	080048a5 	.word	0x080048a5
 80048e4:	080048a5 	.word	0x080048a5
 80048e8:	08004a35 	.word	0x08004a35
 80048ec:	08004959 	.word	0x08004959
 80048f0:	08004a17 	.word	0x08004a17
 80048f4:	080048a5 	.word	0x080048a5
 80048f8:	080048a5 	.word	0x080048a5
 80048fc:	08004a57 	.word	0x08004a57
 8004900:	080048a5 	.word	0x080048a5
 8004904:	08004959 	.word	0x08004959
 8004908:	080048a5 	.word	0x080048a5
 800490c:	080048a5 	.word	0x080048a5
 8004910:	08004a1f 	.word	0x08004a1f
 8004914:	680b      	ldr	r3, [r1, #0]
 8004916:	1d1a      	adds	r2, r3, #4
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	600a      	str	r2, [r1, #0]
 800491c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004924:	2301      	movs	r3, #1
 8004926:	e0a3      	b.n	8004a70 <_printf_i+0x1f4>
 8004928:	6825      	ldr	r5, [r4, #0]
 800492a:	6808      	ldr	r0, [r1, #0]
 800492c:	062e      	lsls	r6, r5, #24
 800492e:	f100 0304 	add.w	r3, r0, #4
 8004932:	d50a      	bpl.n	800494a <_printf_i+0xce>
 8004934:	6805      	ldr	r5, [r0, #0]
 8004936:	600b      	str	r3, [r1, #0]
 8004938:	2d00      	cmp	r5, #0
 800493a:	da03      	bge.n	8004944 <_printf_i+0xc8>
 800493c:	232d      	movs	r3, #45	; 0x2d
 800493e:	426d      	negs	r5, r5
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004944:	485e      	ldr	r0, [pc, #376]	; (8004ac0 <_printf_i+0x244>)
 8004946:	230a      	movs	r3, #10
 8004948:	e019      	b.n	800497e <_printf_i+0x102>
 800494a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800494e:	6805      	ldr	r5, [r0, #0]
 8004950:	600b      	str	r3, [r1, #0]
 8004952:	bf18      	it	ne
 8004954:	b22d      	sxthne	r5, r5
 8004956:	e7ef      	b.n	8004938 <_printf_i+0xbc>
 8004958:	680b      	ldr	r3, [r1, #0]
 800495a:	6825      	ldr	r5, [r4, #0]
 800495c:	1d18      	adds	r0, r3, #4
 800495e:	6008      	str	r0, [r1, #0]
 8004960:	0628      	lsls	r0, r5, #24
 8004962:	d501      	bpl.n	8004968 <_printf_i+0xec>
 8004964:	681d      	ldr	r5, [r3, #0]
 8004966:	e002      	b.n	800496e <_printf_i+0xf2>
 8004968:	0669      	lsls	r1, r5, #25
 800496a:	d5fb      	bpl.n	8004964 <_printf_i+0xe8>
 800496c:	881d      	ldrh	r5, [r3, #0]
 800496e:	4854      	ldr	r0, [pc, #336]	; (8004ac0 <_printf_i+0x244>)
 8004970:	2f6f      	cmp	r7, #111	; 0x6f
 8004972:	bf0c      	ite	eq
 8004974:	2308      	moveq	r3, #8
 8004976:	230a      	movne	r3, #10
 8004978:	2100      	movs	r1, #0
 800497a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800497e:	6866      	ldr	r6, [r4, #4]
 8004980:	60a6      	str	r6, [r4, #8]
 8004982:	2e00      	cmp	r6, #0
 8004984:	bfa2      	ittt	ge
 8004986:	6821      	ldrge	r1, [r4, #0]
 8004988:	f021 0104 	bicge.w	r1, r1, #4
 800498c:	6021      	strge	r1, [r4, #0]
 800498e:	b90d      	cbnz	r5, 8004994 <_printf_i+0x118>
 8004990:	2e00      	cmp	r6, #0
 8004992:	d04d      	beq.n	8004a30 <_printf_i+0x1b4>
 8004994:	4616      	mov	r6, r2
 8004996:	fbb5 f1f3 	udiv	r1, r5, r3
 800499a:	fb03 5711 	mls	r7, r3, r1, r5
 800499e:	5dc7      	ldrb	r7, [r0, r7]
 80049a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049a4:	462f      	mov	r7, r5
 80049a6:	42bb      	cmp	r3, r7
 80049a8:	460d      	mov	r5, r1
 80049aa:	d9f4      	bls.n	8004996 <_printf_i+0x11a>
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d10b      	bne.n	80049c8 <_printf_i+0x14c>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	07df      	lsls	r7, r3, #31
 80049b4:	d508      	bpl.n	80049c8 <_printf_i+0x14c>
 80049b6:	6923      	ldr	r3, [r4, #16]
 80049b8:	6861      	ldr	r1, [r4, #4]
 80049ba:	4299      	cmp	r1, r3
 80049bc:	bfde      	ittt	le
 80049be:	2330      	movle	r3, #48	; 0x30
 80049c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049c8:	1b92      	subs	r2, r2, r6
 80049ca:	6122      	str	r2, [r4, #16]
 80049cc:	f8cd a000 	str.w	sl, [sp]
 80049d0:	464b      	mov	r3, r9
 80049d2:	aa03      	add	r2, sp, #12
 80049d4:	4621      	mov	r1, r4
 80049d6:	4640      	mov	r0, r8
 80049d8:	f7ff fee2 	bl	80047a0 <_printf_common>
 80049dc:	3001      	adds	r0, #1
 80049de:	d14c      	bne.n	8004a7a <_printf_i+0x1fe>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	b004      	add	sp, #16
 80049e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ea:	4835      	ldr	r0, [pc, #212]	; (8004ac0 <_printf_i+0x244>)
 80049ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	680e      	ldr	r6, [r1, #0]
 80049f4:	061f      	lsls	r7, r3, #24
 80049f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80049fa:	600e      	str	r6, [r1, #0]
 80049fc:	d514      	bpl.n	8004a28 <_printf_i+0x1ac>
 80049fe:	07d9      	lsls	r1, r3, #31
 8004a00:	bf44      	itt	mi
 8004a02:	f043 0320 	orrmi.w	r3, r3, #32
 8004a06:	6023      	strmi	r3, [r4, #0]
 8004a08:	b91d      	cbnz	r5, 8004a12 <_printf_i+0x196>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f023 0320 	bic.w	r3, r3, #32
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	2310      	movs	r3, #16
 8004a14:	e7b0      	b.n	8004978 <_printf_i+0xfc>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	f043 0320 	orr.w	r3, r3, #32
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	2378      	movs	r3, #120	; 0x78
 8004a20:	4828      	ldr	r0, [pc, #160]	; (8004ac4 <_printf_i+0x248>)
 8004a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a26:	e7e3      	b.n	80049f0 <_printf_i+0x174>
 8004a28:	065e      	lsls	r6, r3, #25
 8004a2a:	bf48      	it	mi
 8004a2c:	b2ad      	uxthmi	r5, r5
 8004a2e:	e7e6      	b.n	80049fe <_printf_i+0x182>
 8004a30:	4616      	mov	r6, r2
 8004a32:	e7bb      	b.n	80049ac <_printf_i+0x130>
 8004a34:	680b      	ldr	r3, [r1, #0]
 8004a36:	6826      	ldr	r6, [r4, #0]
 8004a38:	6960      	ldr	r0, [r4, #20]
 8004a3a:	1d1d      	adds	r5, r3, #4
 8004a3c:	600d      	str	r5, [r1, #0]
 8004a3e:	0635      	lsls	r5, r6, #24
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	d501      	bpl.n	8004a48 <_printf_i+0x1cc>
 8004a44:	6018      	str	r0, [r3, #0]
 8004a46:	e002      	b.n	8004a4e <_printf_i+0x1d2>
 8004a48:	0671      	lsls	r1, r6, #25
 8004a4a:	d5fb      	bpl.n	8004a44 <_printf_i+0x1c8>
 8004a4c:	8018      	strh	r0, [r3, #0]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	6123      	str	r3, [r4, #16]
 8004a52:	4616      	mov	r6, r2
 8004a54:	e7ba      	b.n	80049cc <_printf_i+0x150>
 8004a56:	680b      	ldr	r3, [r1, #0]
 8004a58:	1d1a      	adds	r2, r3, #4
 8004a5a:	600a      	str	r2, [r1, #0]
 8004a5c:	681e      	ldr	r6, [r3, #0]
 8004a5e:	6862      	ldr	r2, [r4, #4]
 8004a60:	2100      	movs	r1, #0
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7fb fc44 	bl	80002f0 <memchr>
 8004a68:	b108      	cbz	r0, 8004a6e <_printf_i+0x1f2>
 8004a6a:	1b80      	subs	r0, r0, r6
 8004a6c:	6060      	str	r0, [r4, #4]
 8004a6e:	6863      	ldr	r3, [r4, #4]
 8004a70:	6123      	str	r3, [r4, #16]
 8004a72:	2300      	movs	r3, #0
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a78:	e7a8      	b.n	80049cc <_printf_i+0x150>
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4640      	mov	r0, r8
 8004a82:	47d0      	blx	sl
 8004a84:	3001      	adds	r0, #1
 8004a86:	d0ab      	beq.n	80049e0 <_printf_i+0x164>
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	079b      	lsls	r3, r3, #30
 8004a8c:	d413      	bmi.n	8004ab6 <_printf_i+0x23a>
 8004a8e:	68e0      	ldr	r0, [r4, #12]
 8004a90:	9b03      	ldr	r3, [sp, #12]
 8004a92:	4298      	cmp	r0, r3
 8004a94:	bfb8      	it	lt
 8004a96:	4618      	movlt	r0, r3
 8004a98:	e7a4      	b.n	80049e4 <_printf_i+0x168>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	47d0      	blx	sl
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d09b      	beq.n	80049e0 <_printf_i+0x164>
 8004aa8:	3501      	adds	r5, #1
 8004aaa:	68e3      	ldr	r3, [r4, #12]
 8004aac:	9903      	ldr	r1, [sp, #12]
 8004aae:	1a5b      	subs	r3, r3, r1
 8004ab0:	42ab      	cmp	r3, r5
 8004ab2:	dcf2      	bgt.n	8004a9a <_printf_i+0x21e>
 8004ab4:	e7eb      	b.n	8004a8e <_printf_i+0x212>
 8004ab6:	2500      	movs	r5, #0
 8004ab8:	f104 0619 	add.w	r6, r4, #25
 8004abc:	e7f5      	b.n	8004aaa <_printf_i+0x22e>
 8004abe:	bf00      	nop
 8004ac0:	08004d89 	.word	0x08004d89
 8004ac4:	08004d9a 	.word	0x08004d9a

08004ac8 <memmove>:
 8004ac8:	4288      	cmp	r0, r1
 8004aca:	b510      	push	{r4, lr}
 8004acc:	eb01 0402 	add.w	r4, r1, r2
 8004ad0:	d902      	bls.n	8004ad8 <memmove+0x10>
 8004ad2:	4284      	cmp	r4, r0
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	d807      	bhi.n	8004ae8 <memmove+0x20>
 8004ad8:	1e43      	subs	r3, r0, #1
 8004ada:	42a1      	cmp	r1, r4
 8004adc:	d008      	beq.n	8004af0 <memmove+0x28>
 8004ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ae6:	e7f8      	b.n	8004ada <memmove+0x12>
 8004ae8:	4402      	add	r2, r0
 8004aea:	4601      	mov	r1, r0
 8004aec:	428a      	cmp	r2, r1
 8004aee:	d100      	bne.n	8004af2 <memmove+0x2a>
 8004af0:	bd10      	pop	{r4, pc}
 8004af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004afa:	e7f7      	b.n	8004aec <memmove+0x24>

08004afc <_free_r>:
 8004afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d048      	beq.n	8004b94 <_free_r+0x98>
 8004b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b06:	9001      	str	r0, [sp, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b0e:	bfb8      	it	lt
 8004b10:	18e4      	addlt	r4, r4, r3
 8004b12:	f000 f8d3 	bl	8004cbc <__malloc_lock>
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <_free_r+0x9c>)
 8004b18:	9801      	ldr	r0, [sp, #4]
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	4615      	mov	r5, r2
 8004b1e:	b933      	cbnz	r3, 8004b2e <_free_r+0x32>
 8004b20:	6063      	str	r3, [r4, #4]
 8004b22:	6014      	str	r4, [r2, #0]
 8004b24:	b003      	add	sp, #12
 8004b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b2a:	f000 b8cd 	b.w	8004cc8 <__malloc_unlock>
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	d90b      	bls.n	8004b4a <_free_r+0x4e>
 8004b32:	6821      	ldr	r1, [r4, #0]
 8004b34:	1862      	adds	r2, r4, r1
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bf04      	itt	eq
 8004b3a:	681a      	ldreq	r2, [r3, #0]
 8004b3c:	685b      	ldreq	r3, [r3, #4]
 8004b3e:	6063      	str	r3, [r4, #4]
 8004b40:	bf04      	itt	eq
 8004b42:	1852      	addeq	r2, r2, r1
 8004b44:	6022      	streq	r2, [r4, #0]
 8004b46:	602c      	str	r4, [r5, #0]
 8004b48:	e7ec      	b.n	8004b24 <_free_r+0x28>
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b10b      	cbz	r3, 8004b54 <_free_r+0x58>
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d9fa      	bls.n	8004b4a <_free_r+0x4e>
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	1855      	adds	r5, r2, r1
 8004b58:	42a5      	cmp	r5, r4
 8004b5a:	d10b      	bne.n	8004b74 <_free_r+0x78>
 8004b5c:	6824      	ldr	r4, [r4, #0]
 8004b5e:	4421      	add	r1, r4
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	42a3      	cmp	r3, r4
 8004b64:	6011      	str	r1, [r2, #0]
 8004b66:	d1dd      	bne.n	8004b24 <_free_r+0x28>
 8004b68:	681c      	ldr	r4, [r3, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	6053      	str	r3, [r2, #4]
 8004b6e:	4421      	add	r1, r4
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	e7d7      	b.n	8004b24 <_free_r+0x28>
 8004b74:	d902      	bls.n	8004b7c <_free_r+0x80>
 8004b76:	230c      	movs	r3, #12
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	e7d3      	b.n	8004b24 <_free_r+0x28>
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1961      	adds	r1, r4, r5
 8004b80:	428b      	cmp	r3, r1
 8004b82:	bf04      	itt	eq
 8004b84:	6819      	ldreq	r1, [r3, #0]
 8004b86:	685b      	ldreq	r3, [r3, #4]
 8004b88:	6063      	str	r3, [r4, #4]
 8004b8a:	bf04      	itt	eq
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	6054      	str	r4, [r2, #4]
 8004b92:	e7c7      	b.n	8004b24 <_free_r+0x28>
 8004b94:	b003      	add	sp, #12
 8004b96:	bd30      	pop	{r4, r5, pc}
 8004b98:	24000098 	.word	0x24000098

08004b9c <_malloc_r>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	1ccd      	adds	r5, r1, #3
 8004ba0:	f025 0503 	bic.w	r5, r5, #3
 8004ba4:	3508      	adds	r5, #8
 8004ba6:	2d0c      	cmp	r5, #12
 8004ba8:	bf38      	it	cc
 8004baa:	250c      	movcc	r5, #12
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	4606      	mov	r6, r0
 8004bb0:	db01      	blt.n	8004bb6 <_malloc_r+0x1a>
 8004bb2:	42a9      	cmp	r1, r5
 8004bb4:	d903      	bls.n	8004bbe <_malloc_r+0x22>
 8004bb6:	230c      	movs	r3, #12
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	2000      	movs	r0, #0
 8004bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bbe:	f000 f87d 	bl	8004cbc <__malloc_lock>
 8004bc2:	4921      	ldr	r1, [pc, #132]	; (8004c48 <_malloc_r+0xac>)
 8004bc4:	680a      	ldr	r2, [r1, #0]
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	b99c      	cbnz	r4, 8004bf2 <_malloc_r+0x56>
 8004bca:	4f20      	ldr	r7, [pc, #128]	; (8004c4c <_malloc_r+0xb0>)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b923      	cbnz	r3, 8004bda <_malloc_r+0x3e>
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 f862 	bl	8004c9c <_sbrk_r>
 8004bd8:	6038      	str	r0, [r7, #0]
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f000 f85d 	bl	8004c9c <_sbrk_r>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	d123      	bne.n	8004c2e <_malloc_r+0x92>
 8004be6:	230c      	movs	r3, #12
 8004be8:	6033      	str	r3, [r6, #0]
 8004bea:	4630      	mov	r0, r6
 8004bec:	f000 f86c 	bl	8004cc8 <__malloc_unlock>
 8004bf0:	e7e3      	b.n	8004bba <_malloc_r+0x1e>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	1b5b      	subs	r3, r3, r5
 8004bf6:	d417      	bmi.n	8004c28 <_malloc_r+0x8c>
 8004bf8:	2b0b      	cmp	r3, #11
 8004bfa:	d903      	bls.n	8004c04 <_malloc_r+0x68>
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	441c      	add	r4, r3
 8004c00:	6025      	str	r5, [r4, #0]
 8004c02:	e004      	b.n	8004c0e <_malloc_r+0x72>
 8004c04:	6863      	ldr	r3, [r4, #4]
 8004c06:	42a2      	cmp	r2, r4
 8004c08:	bf0c      	ite	eq
 8004c0a:	600b      	streq	r3, [r1, #0]
 8004c0c:	6053      	strne	r3, [r2, #4]
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f000 f85a 	bl	8004cc8 <__malloc_unlock>
 8004c14:	f104 000b 	add.w	r0, r4, #11
 8004c18:	1d23      	adds	r3, r4, #4
 8004c1a:	f020 0007 	bic.w	r0, r0, #7
 8004c1e:	1ac2      	subs	r2, r0, r3
 8004c20:	d0cc      	beq.n	8004bbc <_malloc_r+0x20>
 8004c22:	1a1b      	subs	r3, r3, r0
 8004c24:	50a3      	str	r3, [r4, r2]
 8004c26:	e7c9      	b.n	8004bbc <_malloc_r+0x20>
 8004c28:	4622      	mov	r2, r4
 8004c2a:	6864      	ldr	r4, [r4, #4]
 8004c2c:	e7cc      	b.n	8004bc8 <_malloc_r+0x2c>
 8004c2e:	1cc4      	adds	r4, r0, #3
 8004c30:	f024 0403 	bic.w	r4, r4, #3
 8004c34:	42a0      	cmp	r0, r4
 8004c36:	d0e3      	beq.n	8004c00 <_malloc_r+0x64>
 8004c38:	1a21      	subs	r1, r4, r0
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f000 f82e 	bl	8004c9c <_sbrk_r>
 8004c40:	3001      	adds	r0, #1
 8004c42:	d1dd      	bne.n	8004c00 <_malloc_r+0x64>
 8004c44:	e7cf      	b.n	8004be6 <_malloc_r+0x4a>
 8004c46:	bf00      	nop
 8004c48:	24000098 	.word	0x24000098
 8004c4c:	2400009c 	.word	0x2400009c

08004c50 <_realloc_r>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	4607      	mov	r7, r0
 8004c54:	4614      	mov	r4, r2
 8004c56:	460e      	mov	r6, r1
 8004c58:	b921      	cbnz	r1, 8004c64 <_realloc_r+0x14>
 8004c5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c5e:	4611      	mov	r1, r2
 8004c60:	f7ff bf9c 	b.w	8004b9c <_malloc_r>
 8004c64:	b922      	cbnz	r2, 8004c70 <_realloc_r+0x20>
 8004c66:	f7ff ff49 	bl	8004afc <_free_r>
 8004c6a:	4625      	mov	r5, r4
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c70:	f000 f830 	bl	8004cd4 <_malloc_usable_size_r>
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d20f      	bcs.n	8004c98 <_realloc_r+0x48>
 8004c78:	4621      	mov	r1, r4
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	f7ff ff8e 	bl	8004b9c <_malloc_r>
 8004c80:	4605      	mov	r5, r0
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d0f2      	beq.n	8004c6c <_realloc_r+0x1c>
 8004c86:	4631      	mov	r1, r6
 8004c88:	4622      	mov	r2, r4
 8004c8a:	f7ff fbf7 	bl	800447c <memcpy>
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4638      	mov	r0, r7
 8004c92:	f7ff ff33 	bl	8004afc <_free_r>
 8004c96:	e7e9      	b.n	8004c6c <_realloc_r+0x1c>
 8004c98:	4635      	mov	r5, r6
 8004c9a:	e7e7      	b.n	8004c6c <_realloc_r+0x1c>

08004c9c <_sbrk_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	4d06      	ldr	r5, [pc, #24]	; (8004cb8 <_sbrk_r+0x1c>)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fb fdc2 	bl	8000830 <_sbrk>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_sbrk_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_sbrk_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	240001a8 	.word	0x240001a8

08004cbc <__malloc_lock>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__malloc_lock+0x8>)
 8004cbe:	f000 b811 	b.w	8004ce4 <__retarget_lock_acquire_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	240001b0 	.word	0x240001b0

08004cc8 <__malloc_unlock>:
 8004cc8:	4801      	ldr	r0, [pc, #4]	; (8004cd0 <__malloc_unlock+0x8>)
 8004cca:	f000 b80c 	b.w	8004ce6 <__retarget_lock_release_recursive>
 8004cce:	bf00      	nop
 8004cd0:	240001b0 	.word	0x240001b0

08004cd4 <_malloc_usable_size_r>:
 8004cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd8:	1f18      	subs	r0, r3, #4
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bfbc      	itt	lt
 8004cde:	580b      	ldrlt	r3, [r1, r0]
 8004ce0:	18c0      	addlt	r0, r0, r3
 8004ce2:	4770      	bx	lr

08004ce4 <__retarget_lock_acquire_recursive>:
 8004ce4:	4770      	bx	lr

08004ce6 <__retarget_lock_release_recursive>:
 8004ce6:	4770      	bx	lr

08004ce8 <_init>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr

08004cf4 <_fini>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr
