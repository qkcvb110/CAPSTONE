
stlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b0  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001870  08001870  00011870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001884  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001884  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bd62  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000188d  00000000  00000000  0002bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000005f0  00000000  00000000  0002d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000558  00000000  00000000  0002dc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002d8be  00000000  00000000  0002e178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000687e  00000000  00000000  0005ba36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012a129  00000000  00000000  000622b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0018c3dd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000163c  00000000  00000000  0018c430  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08001844 	.word	0x08001844

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08001844 	.word	0x08001844

080002ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_GPIO_Init+0x50>)
 80002f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <MX_GPIO_Init+0x50>)
 80002fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_GPIO_Init+0x50>)
 8000304:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b0a      	ldr	r3, [pc, #40]	; (800033c <MX_GPIO_Init+0x50>)
 8000312:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000316:	4a09      	ldr	r2, [pc, #36]	; (800033c <MX_GPIO_Init+0x50>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_GPIO_Init+0x50>)
 8000322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]

}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	58024400 	.word	0x58024400

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000344:	f000 f94e 	bl	80005e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000348:	f000 f804 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034c:	f7ff ffce 	bl	80002ec <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	e7fe      	b.n	8000350 <main+0x10>
	...

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b09c      	sub	sp, #112	; 0x70
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035e:	224c      	movs	r2, #76	; 0x4c
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f001 fa66 	bl	8001834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2220      	movs	r2, #32
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f001 fa60 	bl	8001834 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000374:	2004      	movs	r0, #4
 8000376:	f000 faab 	bl	80008d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	4b22      	ldr	r3, [pc, #136]	; (8000408 <SystemClock_Config+0xb4>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a21      	ldr	r2, [pc, #132]	; (8000408 <SystemClock_Config+0xb4>)
 8000384:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <SystemClock_Config+0xb4>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000396:	bf00      	nop
 8000398:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <SystemClock_Config+0xb4>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a4:	d1f8      	bne.n	8000398 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a6:	2302      	movs	r3, #2
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ae:	2340      	movs	r3, #64	; 0x40
 80003b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fae2 	bl	8000984 <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x76>
  {
    Error_Handler();
 80003c6:	f000 f821 	bl	800040c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	233f      	movs	r3, #63	; 0x3f
 80003cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ce:	2300      	movs	r3, #0
 80003d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e6:	2300      	movs	r3, #0
 80003e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2102      	movs	r1, #2
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fecc 	bl	800118c <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003fa:	f000 f807 	bl	800040c <Error_Handler>
  }
}
 80003fe:	bf00      	nop
 8000400:	3770      	adds	r7, #112	; 0x70
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	58024800 	.word	0x58024800

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_MspInit+0x30>)
 8000420:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000424:	4a08      	ldr	r2, [pc, #32]	; (8000448 <HAL_MspInit+0x30>)
 8000426:	f043 0302 	orr.w	r3, r3, #2
 800042a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_MspInit+0x30>)
 8000430:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000434:	f003 0302 	and.w	r3, r3, #2
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	58024400 	.word	0x58024400

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000498:	f000 f916 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004a4:	4b32      	ldr	r3, [pc, #200]	; (8000570 <SystemInit+0xd0>)
 80004a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004aa:	4a31      	ldr	r2, [pc, #196]	; (8000570 <SystemInit+0xd0>)
 80004ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80004b4:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <SystemInit+0xd4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f003 030f 	and.w	r3, r3, #15
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d807      	bhi.n	80004d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80004c0:	4b2c      	ldr	r3, [pc, #176]	; (8000574 <SystemInit+0xd4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f023 030f 	bic.w	r3, r3, #15
 80004c8:	4a2a      	ldr	r2, [pc, #168]	; (8000574 <SystemInit+0xd4>)
 80004ca:	f043 0303 	orr.w	r3, r3, #3
 80004ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80004d0:	4b29      	ldr	r3, [pc, #164]	; (8000578 <SystemInit+0xd8>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a28      	ldr	r2, [pc, #160]	; (8000578 <SystemInit+0xd8>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <SystemInit+0xd8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <SystemInit+0xd8>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4924      	ldr	r1, [pc, #144]	; (8000578 <SystemInit+0xd8>)
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <SystemInit+0xdc>)
 80004ea:	4013      	ands	r3, r2
 80004ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <SystemInit+0xd4>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d007      	beq.n	800050a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <SystemInit+0xd4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f023 030f 	bic.w	r3, r3, #15
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <SystemInit+0xd4>)
 8000504:	f043 0303 	orr.w	r3, r3, #3
 8000508:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800050a:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <SystemInit+0xd8>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000510:	4b19      	ldr	r3, [pc, #100]	; (8000578 <SystemInit+0xd8>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <SystemInit+0xd8>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800051c:	4b16      	ldr	r3, [pc, #88]	; (8000578 <SystemInit+0xd8>)
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <SystemInit+0xe0>)
 8000520:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <SystemInit+0xd8>)
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <SystemInit+0xe4>)
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000528:	4b13      	ldr	r3, [pc, #76]	; (8000578 <SystemInit+0xd8>)
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <SystemInit+0xe8>)
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <SystemInit+0xd8>)
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <SystemInit+0xd8>)
 8000536:	4a14      	ldr	r2, [pc, #80]	; (8000588 <SystemInit+0xe8>)
 8000538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <SystemInit+0xd8>)
 800053c:	2200      	movs	r2, #0
 800053e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <SystemInit+0xd8>)
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <SystemInit+0xe8>)
 8000544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <SystemInit+0xd8>)
 8000548:	2200      	movs	r2, #0
 800054a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <SystemInit+0xd8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <SystemInit+0xd8>)
 8000552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <SystemInit+0xd8>)
 800055a:	2200      	movs	r2, #0
 800055c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <SystemInit+0xec>)
 8000560:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000564:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00
 8000574:	52002000 	.word	0x52002000
 8000578:	58024400 	.word	0x58024400
 800057c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000580:	02020200 	.word	0x02020200
 8000584:	01ff0000 	.word	0x01ff0000
 8000588:	01010280 	.word	0x01010280
 800058c:	52004000 	.word	0x52004000

08000590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f7ff ff84 	bl	80004a0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80005be:	f001 f915 	bl	80017ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005c2:	f7ff febd 	bl	8000340 <main>
  bx  lr
 80005c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005c8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80005cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80005d0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80005d4:	08001874 	.word	0x08001874
  ldr r2, =_sbss
 80005d8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80005dc:	24000030 	.word	0x24000030

080005e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>
	...

080005e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ea:	2003      	movs	r0, #3
 80005ec:	f000 f93e 	bl	800086c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80005f0:	f000 ff82 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <HAL_Init+0x68>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	0a1b      	lsrs	r3, r3, #8
 80005fc:	f003 030f 	and.w	r3, r3, #15
 8000600:	4913      	ldr	r1, [pc, #76]	; (8000650 <HAL_Init+0x6c>)
 8000602:	5ccb      	ldrb	r3, [r1, r3]
 8000604:	f003 031f 	and.w	r3, r3, #31
 8000608:	fa22 f303 	lsr.w	r3, r2, r3
 800060c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_Init+0x68>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_Init+0x6c>)
 8000618:	5cd3      	ldrb	r3, [r2, r3]
 800061a:	f003 031f 	and.w	r3, r3, #31
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	fa22 f303 	lsr.w	r3, r2, r3
 8000624:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <HAL_Init+0x70>)
 8000626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <HAL_Init+0x74>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	200f      	movs	r0, #15
 8000630:	f000 f814 	bl	800065c <HAL_InitTick>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e002      	b.n	8000644 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800063e:	f7ff feeb 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58024400 	.word	0x58024400
 8000650:	0800185c 	.word	0x0800185c
 8000654:	24000004 	.word	0x24000004
 8000658:	24000000 	.word	0x24000000

0800065c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000664:	4b15      	ldr	r3, [pc, #84]	; (80006bc <HAL_InitTick+0x60>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d101      	bne.n	8000670 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	e021      	b.n	80006b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <HAL_InitTick+0x64>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <HAL_InitTick+0x60>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000682:	fbb2 f3f3 	udiv	r3, r2, r3
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f915 	bl	80008b6 <HAL_SYSTICK_Config>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e00e      	b.n	80006b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b0f      	cmp	r3, #15
 800069a:	d80a      	bhi.n	80006b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	f04f 30ff 	mov.w	r0, #4294967295
 80006a4:	f000 f8ed 	bl	8000882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_InitTick+0x68>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e000      	b.n	80006b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2400000c 	.word	0x2400000c
 80006c0:	24000000 	.word	0x24000000
 80006c4:	24000008 	.word	0x24000008

080006c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <HAL_IncTick+0x20>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_IncTick+0x24>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <HAL_IncTick+0x24>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	2400000c 	.word	0x2400000c
 80006ec:	2400002c 	.word	0x2400002c

080006f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return uwTick;
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <HAL_GetTick+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	2400002c 	.word	0x2400002c

08000708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f003 0307 	and.w	r3, r3, #7
 8000716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <__NVIC_SetPriorityGrouping+0x40>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800071e:	68ba      	ldr	r2, [r7, #8]
 8000720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	4313      	orrs	r3, r2
 8000734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <__NVIC_SetPriorityGrouping+0x40>)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	60d3      	str	r3, [r2, #12]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00
 800074c:	05fa0000 	.word	0x05fa0000

08000750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <__NVIC_GetPriorityGrouping+0x18>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	f003 0307 	and.w	r3, r3, #7
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	6039      	str	r1, [r7, #0]
 8000776:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db0a      	blt.n	8000796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2da      	uxtb	r2, r3
 8000784:	490c      	ldr	r1, [pc, #48]	; (80007b8 <__NVIC_SetPriority+0x4c>)
 8000786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800078a:	0112      	lsls	r2, r2, #4
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	440b      	add	r3, r1
 8000790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000794:	e00a      	b.n	80007ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4908      	ldr	r1, [pc, #32]	; (80007bc <__NVIC_SetPriority+0x50>)
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	3b04      	subs	r3, #4
 80007a4:	0112      	lsls	r2, r2, #4
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	440b      	add	r3, r1
 80007aa:	761a      	strb	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100
 80007bc:	e000ed00 	.word	0xe000ed00

080007c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f003 0307 	and.w	r3, r3, #7
 80007d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	f1c3 0307 	rsb	r3, r3, #7
 80007da:	2b04      	cmp	r3, #4
 80007dc:	bf28      	it	cs
 80007de:	2304      	movcs	r3, #4
 80007e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3304      	adds	r3, #4
 80007e6:	2b06      	cmp	r3, #6
 80007e8:	d902      	bls.n	80007f0 <NVIC_EncodePriority+0x30>
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	3b03      	subs	r3, #3
 80007ee:	e000      	b.n	80007f2 <NVIC_EncodePriority+0x32>
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	f04f 32ff 	mov.w	r2, #4294967295
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	43da      	mvns	r2, r3
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	401a      	ands	r2, r3
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000808:	f04f 31ff 	mov.w	r1, #4294967295
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43d9      	mvns	r1, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	4313      	orrs	r3, r2
         );
}
 800081a:	4618      	mov	r0, r3
 800081c:	3724      	adds	r7, #36	; 0x24
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000838:	d301      	bcc.n	800083e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800083a:	2301      	movs	r3, #1
 800083c:	e00f      	b.n	800085e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <SysTick_Config+0x40>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3b01      	subs	r3, #1
 8000844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000846:	210f      	movs	r1, #15
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f7ff ff8e 	bl	800076c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <SysTick_Config+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <SysTick_Config+0x40>)
 8000858:	2207      	movs	r2, #7
 800085a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	e000e010 	.word	0xe000e010

0800086c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff47 	bl	8000708 <__NVIC_SetPriorityGrouping>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af00      	add	r7, sp, #0
 8000888:	4603      	mov	r3, r0
 800088a:	60b9      	str	r1, [r7, #8]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000890:	f7ff ff5e 	bl	8000750 <__NVIC_GetPriorityGrouping>
 8000894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	68b9      	ldr	r1, [r7, #8]
 800089a:	6978      	ldr	r0, [r7, #20]
 800089c:	f7ff ff90 	bl	80007c0 <NVIC_EncodePriority>
 80008a0:	4602      	mov	r2, r0
 80008a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff5f 	bl	800076c <__NVIC_SetPriority>
}
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ffb2 	bl	8000828 <SysTick_Config>
 80008c4:	4603      	mov	r3, r0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80008d8:	4b29      	ldr	r3, [pc, #164]	; (8000980 <HAL_PWREx_ConfigSupply+0xb0>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f003 0307 	and.w	r3, r3, #7
 80008e0:	2b06      	cmp	r3, #6
 80008e2:	d00a      	beq.n	80008fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <HAL_PWREx_ConfigSupply+0xb0>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d001      	beq.n	80008f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e040      	b.n	8000978 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e03e      	b.n	8000978 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_PWREx_ConfigSupply+0xb0>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000902:	491f      	ldr	r1, [pc, #124]	; (8000980 <HAL_PWREx_ConfigSupply+0xb0>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4313      	orrs	r3, r2
 8000908:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800090a:	f7ff fef1 	bl	80006f0 <HAL_GetTick>
 800090e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000910:	e009      	b.n	8000926 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000912:	f7ff feed 	bl	80006f0 <HAL_GetTick>
 8000916:	4602      	mov	r2, r0
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000920:	d901      	bls.n	8000926 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e028      	b.n	8000978 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000926:	4b16      	ldr	r3, [pc, #88]	; (8000980 <HAL_PWREx_ConfigSupply+0xb0>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800092e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000932:	d1ee      	bne.n	8000912 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b1e      	cmp	r3, #30
 8000938:	d008      	beq.n	800094c <HAL_PWREx_ConfigSupply+0x7c>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b2e      	cmp	r3, #46	; 0x2e
 800093e:	d005      	beq.n	800094c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b1d      	cmp	r3, #29
 8000944:	d002      	beq.n	800094c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b2d      	cmp	r3, #45	; 0x2d
 800094a:	d114      	bne.n	8000976 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800094c:	f7ff fed0 	bl	80006f0 <HAL_GetTick>
 8000950:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000952:	e009      	b.n	8000968 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000954:	f7ff fecc 	bl	80006f0 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000962:	d901      	bls.n	8000968 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	e007      	b.n	8000978 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_PWREx_ConfigSupply+0xb0>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000974:	d1ee      	bne.n	8000954 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024800 	.word	0x58024800

08000984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e3f3      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 80b3 	beq.w	8000b0a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009a4:	4b9e      	ldr	r3, [pc, #632]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80009ae:	4b9c      	ldr	r3, [pc, #624]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80009b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b6:	2b10      	cmp	r3, #16
 80009b8:	d007      	beq.n	80009ca <HAL_RCC_OscConfig+0x46>
 80009ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009bc:	2b18      	cmp	r3, #24
 80009be:	d112      	bne.n	80009e6 <HAL_RCC_OscConfig+0x62>
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	f003 0303 	and.w	r3, r3, #3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d10d      	bne.n	80009e6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ca:	4b95      	ldr	r3, [pc, #596]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 8098 	beq.w	8000b08 <HAL_RCC_OscConfig+0x184>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	f040 8093 	bne.w	8000b08 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e3cb      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ee:	d106      	bne.n	80009fe <HAL_RCC_OscConfig+0x7a>
 80009f0:	4b8b      	ldr	r3, [pc, #556]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a8a      	ldr	r2, [pc, #552]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 80009f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e058      	b.n	8000ab0 <HAL_RCC_OscConfig+0x12c>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d112      	bne.n	8000a2c <HAL_RCC_OscConfig+0xa8>
 8000a06:	4b86      	ldr	r3, [pc, #536]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a85      	ldr	r2, [pc, #532]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	4b83      	ldr	r3, [pc, #524]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a82      	ldr	r2, [pc, #520]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	4b80      	ldr	r3, [pc, #512]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a7f      	ldr	r2, [pc, #508]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a28:	6013      	str	r3, [r2, #0]
 8000a2a:	e041      	b.n	8000ab0 <HAL_RCC_OscConfig+0x12c>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a34:	d112      	bne.n	8000a5c <HAL_RCC_OscConfig+0xd8>
 8000a36:	4b7a      	ldr	r3, [pc, #488]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a79      	ldr	r2, [pc, #484]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	4b77      	ldr	r3, [pc, #476]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a76      	ldr	r2, [pc, #472]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	4b74      	ldr	r3, [pc, #464]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a73      	ldr	r2, [pc, #460]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e029      	b.n	8000ab0 <HAL_RCC_OscConfig+0x12c>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000a64:	d112      	bne.n	8000a8c <HAL_RCC_OscConfig+0x108>
 8000a66:	4b6e      	ldr	r3, [pc, #440]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a6d      	ldr	r2, [pc, #436]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a6a      	ldr	r2, [pc, #424]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	4b68      	ldr	r3, [pc, #416]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a67      	ldr	r2, [pc, #412]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a88:	6013      	str	r3, [r2, #0]
 8000a8a:	e011      	b.n	8000ab0 <HAL_RCC_OscConfig+0x12c>
 8000a8c:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a63      	ldr	r2, [pc, #396]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a60      	ldr	r2, [pc, #384]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a5d      	ldr	r2, [pc, #372]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000aaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d013      	beq.n	8000ae0 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fe1a 	bl	80006f0 <HAL_GetTick>
 8000abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000abe:	e008      	b.n	8000ad2 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac0:	f7ff fe16 	bl	80006f0 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	2b64      	cmp	r3, #100	; 0x64
 8000acc:	d901      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e355      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ad2:	4b53      	ldr	r3, [pc, #332]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0f0      	beq.n	8000ac0 <HAL_RCC_OscConfig+0x13c>
 8000ade:	e014      	b.n	8000b0a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ae0:	f7ff fe06 	bl	80006f0 <HAL_GetTick>
 8000ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ae6:	e008      	b.n	8000afa <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ae8:	f7ff fe02 	bl	80006f0 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	2b64      	cmp	r3, #100	; 0x64
 8000af4:	d901      	bls.n	8000afa <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8000af6:	2303      	movs	r3, #3
 8000af8:	e341      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000afa:	4b49      	ldr	r3, [pc, #292]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d1f0      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x164>
 8000b06:	e000      	b.n	8000b0a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	f000 808c 	beq.w	8000c30 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b18:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000b20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b22:	4b3f      	ldr	r3, [pc, #252]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d007      	beq.n	8000b3e <HAL_RCC_OscConfig+0x1ba>
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2b18      	cmp	r3, #24
 8000b32:	d137      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x220>
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d132      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d005      	beq.n	8000b56 <HAL_RCC_OscConfig+0x1d2>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e313      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f023 0219 	bic.w	r2, r3, #25
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	492f      	ldr	r1, [pc, #188]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b64:	4313      	orrs	r3, r2
 8000b66:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000b68:	f7ff fdc2 	bl	80006f0 <HAL_GetTick>
 8000b6c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b70:	f7ff fdbe 	bl	80006f0 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e2fd      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d0f0      	beq.n	8000b70 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	061b      	lsls	r3, r3, #24
 8000b9c:	4920      	ldr	r1, [pc, #128]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ba2:	e045      	b.n	8000c30 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d026      	beq.n	8000bfa <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bac:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f023 0219 	bic.w	r2, r3, #25
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4919      	ldr	r1, [pc, #100]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fd97 	bl	80006f0 <HAL_GetTick>
 8000bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fd93 	bl	80006f0 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e2d2      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f0      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	061b      	lsls	r3, r3, #24
 8000bf2:	490b      	ldr	r1, [pc, #44]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	e01a      	b.n	8000c30 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_RCC_OscConfig+0x29c>)
 8000c00:	f023 0301 	bic.w	r3, r3, #1
 8000c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c06:	f7ff fd73 	bl	80006f0 <HAL_GetTick>
 8000c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c0c:	e00a      	b.n	8000c24 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0e:	f7ff fd6f 	bl	80006f0 <HAL_GetTick>
 8000c12:	4602      	mov	r2, r0
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d903      	bls.n	8000c24 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	e2ae      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
 8000c20:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c24:	4b99      	ldr	r3, [pc, #612]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 0304 	and.w	r3, r3, #4
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1ee      	bne.n	8000c0e <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d06a      	beq.n	8000d12 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c3c:	4b93      	ldr	r3, [pc, #588]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000c46:	4b91      	ldr	r3, [pc, #580]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c4a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d007      	beq.n	8000c62 <HAL_RCC_OscConfig+0x2de>
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2b18      	cmp	r3, #24
 8000c56:	d11b      	bne.n	8000c90 <HAL_RCC_OscConfig+0x30c>
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d116      	bne.n	8000c90 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000c62:	4b8a      	ldr	r3, [pc, #552]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d005      	beq.n	8000c7a <HAL_RCC_OscConfig+0x2f6>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	2b80      	cmp	r3, #128	; 0x80
 8000c74:	d001      	beq.n	8000c7a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e281      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c7a:	4b84      	ldr	r3, [pc, #528]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	061b      	lsls	r3, r3, #24
 8000c88:	4980      	ldr	r1, [pc, #512]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000c8e:	e040      	b.n	8000d12 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d023      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000c98:	4b7c      	ldr	r3, [pc, #496]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a7b      	ldr	r2, [pc, #492]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fd24 	bl	80006f0 <HAL_GetTick>
 8000ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000cac:	f7ff fd20 	bl	80006f0 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e25f      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000cbe:	4b73      	ldr	r3, [pc, #460]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f0      	beq.n	8000cac <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000cca:	4b70      	ldr	r3, [pc, #448]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a1b      	ldr	r3, [r3, #32]
 8000cd6:	061b      	lsls	r3, r3, #24
 8000cd8:	496c      	ldr	r1, [pc, #432]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60cb      	str	r3, [r1, #12]
 8000cde:	e018      	b.n	8000d12 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000ce0:	4b6a      	ldr	r3, [pc, #424]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a69      	ldr	r2, [pc, #420]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cec:	f7ff fd00 	bl	80006f0 <HAL_GetTick>
 8000cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000cf2:	e008      	b.n	8000d06 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000cf4:	f7ff fcfc 	bl	80006f0 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e23b      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d06:	4b61      	ldr	r3, [pc, #388]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f0      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d036      	beq.n	8000d8c <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d019      	beq.n	8000d5a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d26:	4b59      	ldr	r3, [pc, #356]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d2a:	4a58      	ldr	r2, [pc, #352]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d32:	f7ff fcdd 	bl	80006f0 <HAL_GetTick>
 8000d36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d38:	e008      	b.n	8000d4c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3a:	f7ff fcd9 	bl	80006f0 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d901      	bls.n	8000d4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e218      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000d4c:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0f0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x3b6>
 8000d58:	e018      	b.n	8000d8c <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d5a:	4b4c      	ldr	r3, [pc, #304]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d66:	f7ff fcc3 	bl	80006f0 <HAL_GetTick>
 8000d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d6c:	e008      	b.n	8000d80 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d6e:	f7ff fcbf 	bl	80006f0 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d901      	bls.n	8000d80 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e1fe      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f0      	bne.n	8000d6e <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0320 	and.w	r3, r3, #32
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d036      	beq.n	8000e06 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d019      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a39      	ldr	r2, [pc, #228]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fca0 	bl	80006f0 <HAL_GetTick>
 8000db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000db4:	f7ff fc9c 	bl	80006f0 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e1db      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x430>
 8000dd2:	e018      	b.n	8000e06 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2c      	ldr	r2, [pc, #176]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc86 	bl	80006f0 <HAL_GetTick>
 8000de4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000de8:	f7ff fc82 	bl	80006f0 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e1c1      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80af 	beq.w	8000f72 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <HAL_RCC_OscConfig+0x50c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <HAL_RCC_OscConfig+0x50c>)
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000e20:	f7ff fc66 	bl	80006f0 <HAL_GetTick>
 8000e24:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e28:	f7ff fc62 	bl	80006f0 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	; 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1a1      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_RCC_OscConfig+0x50c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d106      	bne.n	8000e5c <HAL_RCC_OscConfig+0x4d8>
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5a:	e05b      	b.n	8000f14 <HAL_RCC_OscConfig+0x590>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d117      	bne.n	8000e94 <HAL_RCC_OscConfig+0x510>
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e80:	4a02      	ldr	r2, [pc, #8]	; (8000e8c <HAL_RCC_OscConfig+0x508>)
 8000e82:	f023 0304 	bic.w	r3, r3, #4
 8000e86:	6713      	str	r3, [r2, #112]	; 0x70
 8000e88:	e044      	b.n	8000f14 <HAL_RCC_OscConfig+0x590>
 8000e8a:	bf00      	nop
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58024800 	.word	0x58024800
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d112      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x53e>
 8000e9c:	4b95      	ldr	r3, [pc, #596]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea0:	4a94      	ldr	r2, [pc, #592]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eac:	4a91      	ldr	r2, [pc, #580]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb8:	4a8e      	ldr	r2, [pc, #568]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8000ec0:	e028      	b.n	8000f14 <HAL_RCC_OscConfig+0x590>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	2b85      	cmp	r3, #133	; 0x85
 8000ec8:	d112      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x56c>
 8000eca:	4b8a      	ldr	r3, [pc, #552]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ece:	4a89      	ldr	r2, [pc, #548]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ed6:	4b87      	ldr	r3, [pc, #540]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	4a86      	ldr	r2, [pc, #536]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee2:	4b84      	ldr	r3, [pc, #528]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee6:	4a83      	ldr	r2, [pc, #524]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6713      	str	r3, [r2, #112]	; 0x70
 8000eee:	e011      	b.n	8000f14 <HAL_RCC_OscConfig+0x590>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000ef6:	f023 0301 	bic.w	r3, r3, #1
 8000efa:	6713      	str	r3, [r2, #112]	; 0x70
 8000efc:	4b7d      	ldr	r3, [pc, #500]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	4a7c      	ldr	r2, [pc, #496]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f02:	f023 0304 	bic.w	r3, r3, #4
 8000f06:	6713      	str	r3, [r2, #112]	; 0x70
 8000f08:	4b7a      	ldr	r3, [pc, #488]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0c:	4a79      	ldr	r2, [pc, #484]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d015      	beq.n	8000f48 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f1c:	f7ff fbe8 	bl	80006f0 <HAL_GetTick>
 8000f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f22:	e00a      	b.n	8000f3a <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f24:	f7ff fbe4 	bl	80006f0 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e121      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f3a:	4b6e      	ldr	r3, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0ee      	beq.n	8000f24 <HAL_RCC_OscConfig+0x5a0>
 8000f46:	e014      	b.n	8000f72 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f48:	f7ff fbd2 	bl	80006f0 <HAL_GetTick>
 8000f4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f4e:	e00a      	b.n	8000f66 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f50:	f7ff fbce 	bl	80006f0 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e10b      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1ee      	bne.n	8000f50 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8100 	beq.w	800117c <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000f7c:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f84:	2b18      	cmp	r3, #24
 8000f86:	f000 80bb 	beq.w	8001100 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	f040 8095 	bne.w	80010be <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f94:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fba6 	bl	80006f0 <HAL_GetTick>
 8000fa4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa8:	f7ff fba2 	bl	80006f0 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e0e1      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000fba:	4b4e      	ldr	r3, [pc, #312]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fca:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <HAL_RCC_OscConfig+0x774>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	4946      	ldr	r1, [pc, #280]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	628b      	str	r3, [r1, #40]	; 0x28
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	025b      	lsls	r3, r3, #9
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001008:	3b01      	subs	r3, #1
 800100a:	061b      	lsls	r3, r3, #24
 800100c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001010:	4938      	ldr	r1, [pc, #224]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001012:	4313      	orrs	r3, r2
 8001014:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101a:	4a36      	ldr	r2, [pc, #216]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 800101c:	f023 0301 	bic.w	r3, r3, #1
 8001020:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001022:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_RCC_OscConfig+0x778>)
 8001028:	4013      	ands	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800102e:	00d2      	lsls	r2, r2, #3
 8001030:	4930      	ldr	r1, [pc, #192]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001032:	4313      	orrs	r3, r2
 8001034:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	f023 020c 	bic.w	r2, r3, #12
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	492c      	ldr	r1, [pc, #176]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001044:	4313      	orrs	r3, r2
 8001046:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 800104a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104c:	f023 0202 	bic.w	r2, r3, #2
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	4927      	ldr	r1, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001056:	4313      	orrs	r3, r2
 8001058:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800105a:	4b26      	ldr	r3, [pc, #152]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001066:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 8001090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001096:	f7ff fb2b 	bl	80006f0 <HAL_GetTick>
 800109a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fb27 	bl	80006f0 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e066      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x71a>
 80010bc:	e05e      	b.n	800117c <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 80010c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff fb11 	bl	80006f0 <HAL_GetTick>
 80010ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff fb0d 	bl	80006f0 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e04c      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_RCC_OscConfig+0x770>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1f0      	bne.n	80010d2 <HAL_RCC_OscConfig+0x74e>
 80010f0:	e044      	b.n	800117c <HAL_RCC_OscConfig+0x7f8>
 80010f2:	bf00      	nop
 80010f4:	58024400 	.word	0x58024400
 80010f8:	fffffc0c 	.word	0xfffffc0c
 80010fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_RCC_OscConfig+0x804>)
 8001102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001104:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <HAL_RCC_OscConfig+0x804>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2b01      	cmp	r3, #1
 8001112:	d031      	beq.n	8001178 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	f003 0203 	and.w	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800111e:	429a      	cmp	r2, r3
 8001120:	d12a      	bne.n	8001178 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	429a      	cmp	r2, r3
 8001130:	d122      	bne.n	8001178 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800113e:	429a      	cmp	r2, r3
 8001140:	d11a      	bne.n	8001178 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	0a5b      	lsrs	r3, r3, #9
 8001146:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001150:	429a      	cmp	r2, r3
 8001152:	d111      	bne.n	8001178 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0c1b      	lsrs	r3, r3, #16
 8001158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001160:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d108      	bne.n	8001178 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	0e1b      	lsrs	r3, r3, #24
 800116a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001172:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	58024400 	.word	0x58024400

0800118c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e19c      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011a0:	4b8a      	ldr	r3, [pc, #552]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 030f 	and.w	r3, r3, #15
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d910      	bls.n	80011d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ae:	4b87      	ldr	r3, [pc, #540]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 020f 	bic.w	r2, r3, #15
 80011b6:	4985      	ldr	r1, [pc, #532]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011be:	4b83      	ldr	r3, [pc, #524]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e184      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d010      	beq.n	80011fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691a      	ldr	r2, [r3, #16]
 80011e0:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d908      	bls.n	80011fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	4975      	ldr	r1, [pc, #468]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d010      	beq.n	800122c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001216:	429a      	cmp	r2, r3
 8001218:	d908      	bls.n	800122c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	496a      	ldr	r1, [pc, #424]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001228:	4313      	orrs	r3, r2
 800122a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	2b00      	cmp	r3, #0
 8001236:	d010      	beq.n	800125a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	4b64      	ldr	r3, [pc, #400]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001244:	429a      	cmp	r2, r3
 8001246:	d908      	bls.n	800125a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001248:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	495e      	ldr	r1, [pc, #376]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001256:	4313      	orrs	r3, r2
 8001258:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0320 	and.w	r3, r3, #32
 8001262:	2b00      	cmp	r3, #0
 8001264:	d010      	beq.n	8001288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69da      	ldr	r2, [r3, #28]
 800126a:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001272:	429a      	cmp	r2, r3
 8001274:	d908      	bls.n	8001288 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001276:	4b56      	ldr	r3, [pc, #344]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001278:	6a1b      	ldr	r3, [r3, #32]
 800127a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4953      	ldr	r1, [pc, #332]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001284:	4313      	orrs	r3, r2
 8001286:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d010      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d908      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f023 020f 	bic.w	r2, r3, #15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4947      	ldr	r1, [pc, #284]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d055      	beq.n	800136e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	4940      	ldr	r1, [pc, #256]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d107      	bne.n	80012ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d121      	bne.n	800132c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0f6      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80012f4:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d115      	bne.n	800132c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e0ea      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d107      	bne.n	800131c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001314:	2b00      	cmp	r3, #0
 8001316:	d109      	bne.n	800132c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e0de      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d101      	bne.n	800132c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e0d6      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	f023 0207 	bic.w	r2, r3, #7
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4925      	ldr	r1, [pc, #148]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800133a:	4313      	orrs	r3, r2
 800133c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff f9d7 	bl	80006f0 <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001344:	e00a      	b.n	800135c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001346:	f7ff f9d3 	bl	80006f0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0be      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	429a      	cmp	r2, r3
 800136c:	d1eb      	bne.n	8001346 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d010      	beq.n	800139c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	429a      	cmp	r2, r3
 8001388:	d208      	bcs.n	800139c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	f023 020f 	bic.w	r2, r3, #15
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	490e      	ldr	r1, [pc, #56]	; (80013d0 <HAL_RCC_ClockConfig+0x244>)
 8001398:	4313      	orrs	r3, r2
 800139a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d214      	bcs.n	80013d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 020f 	bic.w	r2, r3, #15
 80013b2:	4906      	ldr	r1, [pc, #24]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_RCC_ClockConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e086      	b.n	80014da <HAL_RCC_ClockConfig+0x34e>
 80013cc:	52002000 	.word	0x52002000
 80013d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d010      	beq.n	8001402 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	4b3f      	ldr	r3, [pc, #252]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d208      	bcs.n	8001402 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80013f0:	4b3c      	ldr	r3, [pc, #240]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	4939      	ldr	r1, [pc, #228]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800141a:	429a      	cmp	r2, r3
 800141c:	d208      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	492e      	ldr	r1, [pc, #184]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 800142c:	4313      	orrs	r3, r2
 800142e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d010      	beq.n	800145e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699a      	ldr	r2, [r3, #24]
 8001440:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001448:	429a      	cmp	r2, r3
 800144a:	d208      	bcs.n	800145e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4922      	ldr	r1, [pc, #136]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 800145a:	4313      	orrs	r3, r2
 800145c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001476:	429a      	cmp	r2, r3
 8001478:	d208      	bcs.n	800148c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4917      	ldr	r1, [pc, #92]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 8001488:	4313      	orrs	r3, r2
 800148a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800148c:	f000 f834 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 8001490:	4602      	mov	r2, r0
 8001492:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	4912      	ldr	r1, [pc, #72]	; (80014e8 <HAL_RCC_ClockConfig+0x35c>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_RCC_ClockConfig+0x358>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <HAL_RCC_ClockConfig+0x35c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	f003 031f 	and.w	r3, r3, #31
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x360>)
 80014c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_RCC_ClockConfig+0x364>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_RCC_ClockConfig+0x368>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f8c4 	bl	800065c <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	58024400 	.word	0x58024400
 80014e8:	0800185c 	.word	0x0800185c
 80014ec:	24000004 	.word	0x24000004
 80014f0:	24000000 	.word	0x24000000
 80014f4:	24000008 	.word	0x24000008

080014f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fe:	4bb3      	ldr	r3, [pc, #716]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001506:	2b18      	cmp	r3, #24
 8001508:	f200 8155 	bhi.w	80017b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800150c:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <HAL_RCC_GetSysClockFreq+0x1c>)
 800150e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001512:	bf00      	nop
 8001514:	08001579 	.word	0x08001579
 8001518:	080017b7 	.word	0x080017b7
 800151c:	080017b7 	.word	0x080017b7
 8001520:	080017b7 	.word	0x080017b7
 8001524:	080017b7 	.word	0x080017b7
 8001528:	080017b7 	.word	0x080017b7
 800152c:	080017b7 	.word	0x080017b7
 8001530:	080017b7 	.word	0x080017b7
 8001534:	0800159f 	.word	0x0800159f
 8001538:	080017b7 	.word	0x080017b7
 800153c:	080017b7 	.word	0x080017b7
 8001540:	080017b7 	.word	0x080017b7
 8001544:	080017b7 	.word	0x080017b7
 8001548:	080017b7 	.word	0x080017b7
 800154c:	080017b7 	.word	0x080017b7
 8001550:	080017b7 	.word	0x080017b7
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080017b7 	.word	0x080017b7
 800155c:	080017b7 	.word	0x080017b7
 8001560:	080017b7 	.word	0x080017b7
 8001564:	080017b7 	.word	0x080017b7
 8001568:	080017b7 	.word	0x080017b7
 800156c:	080017b7 	.word	0x080017b7
 8001570:	080017b7 	.word	0x080017b7
 8001574:	080015ab 	.word	0x080015ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001578:	4b94      	ldr	r3, [pc, #592]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001584:	4b91      	ldr	r3, [pc, #580]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	4a90      	ldr	r2, [pc, #576]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001590:	fa22 f303 	lsr.w	r3, r2, r3
 8001594:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001596:	e111      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001598:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800159a:	61bb      	str	r3, [r7, #24]
    break;
 800159c:	e10e      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800159e:	4b8d      	ldr	r3, [pc, #564]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80015a0:	61bb      	str	r3, [r7, #24]
    break;
 80015a2:	e10b      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80015a4:	4b8c      	ldr	r3, [pc, #560]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80015a6:	61bb      	str	r3, [r7, #24]
    break;
 80015a8:	e108      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80015aa:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80015b4:	4b85      	ldr	r3, [pc, #532]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80015c0:	4b82      	ldr	r3, [pc, #520]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80015ca:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80e1 	beq.w	80017b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	f000 8083 	beq.w	80016fc <HAL_RCC_GetSysClockFreq+0x204>
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	f200 80a1 	bhi.w	8001740 <HAL_RCC_GetSysClockFreq+0x248>
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_RCC_GetSysClockFreq+0x114>
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d056      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800160a:	e099      	b.n	8001740 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800160c:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	2b00      	cmp	r3, #0
 8001616:	d02d      	beq.n	8001674 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001618:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	08db      	lsrs	r3, r3, #3
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	4a6b      	ldr	r2, [pc, #428]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001624:	fa22 f303 	lsr.w	r3, r2, r3
 8001628:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	ee07 3a90 	vmov	s15, r3
 800163a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001642:	4b62      	ldr	r3, [pc, #392]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001652:	ed97 6a02 	vldr	s12, [r7, #8]
 8001656:	eddf 5a61 	vldr	s11, [pc, #388]	; 80017dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800165a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800165e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001672:	e087      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80017e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001686:	4b51      	ldr	r3, [pc, #324]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001696:	ed97 6a02 	vldr	s12, [r7, #8]
 800169a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80017dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800169e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80016b6:	e065      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80017e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80016c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016ca:	4b40      	ldr	r3, [pc, #256]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016da:	ed97 6a02 	vldr	s12, [r7, #8]
 80016de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80017dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80016e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80016fa:	e043      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001706:	eddf 6a38 	vldr	s13, [pc, #224]	; 80017e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800170a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800170e:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800171e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001722:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80017dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800172a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800172e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800173e:	e021      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80017e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800174e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001752:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001762:	ed97 6a02 	vldr	s12, [r7, #8]
 8001766:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80017dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800176a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800176e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800177a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001782:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	0a5b      	lsrs	r3, r3, #9
 800178a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800178e:	3301      	adds	r3, #1
 8001790:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800179c:	edd7 6a07 	vldr	s13, [r7, #28]
 80017a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a8:	ee17 3a90 	vmov	r3, s15
 80017ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80017ae:	e005      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
    break;
 80017b4:	e002      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80017b6:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80017b8:	61bb      	str	r3, [r7, #24]
    break;
 80017ba:	bf00      	nop
  }

  return sysclockfreq;
 80017bc:	69bb      	ldr	r3, [r7, #24]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	58024400 	.word	0x58024400
 80017d0:	03d09000 	.word	0x03d09000
 80017d4:	003d0900 	.word	0x003d0900
 80017d8:	016e3600 	.word	0x016e3600
 80017dc:	46000000 	.word	0x46000000
 80017e0:	4c742400 	.word	0x4c742400
 80017e4:	4a742400 	.word	0x4a742400
 80017e8:	4bb71b00 	.word	0x4bb71b00

080017ec <__libc_init_array>:
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	4d0d      	ldr	r5, [pc, #52]	; (8001824 <__libc_init_array+0x38>)
 80017f0:	4c0d      	ldr	r4, [pc, #52]	; (8001828 <__libc_init_array+0x3c>)
 80017f2:	1b64      	subs	r4, r4, r5
 80017f4:	10a4      	asrs	r4, r4, #2
 80017f6:	2600      	movs	r6, #0
 80017f8:	42a6      	cmp	r6, r4
 80017fa:	d109      	bne.n	8001810 <__libc_init_array+0x24>
 80017fc:	4d0b      	ldr	r5, [pc, #44]	; (800182c <__libc_init_array+0x40>)
 80017fe:	4c0c      	ldr	r4, [pc, #48]	; (8001830 <__libc_init_array+0x44>)
 8001800:	f000 f820 	bl	8001844 <_init>
 8001804:	1b64      	subs	r4, r4, r5
 8001806:	10a4      	asrs	r4, r4, #2
 8001808:	2600      	movs	r6, #0
 800180a:	42a6      	cmp	r6, r4
 800180c:	d105      	bne.n	800181a <__libc_init_array+0x2e>
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	f855 3b04 	ldr.w	r3, [r5], #4
 8001814:	4798      	blx	r3
 8001816:	3601      	adds	r6, #1
 8001818:	e7ee      	b.n	80017f8 <__libc_init_array+0xc>
 800181a:	f855 3b04 	ldr.w	r3, [r5], #4
 800181e:	4798      	blx	r3
 8001820:	3601      	adds	r6, #1
 8001822:	e7f2      	b.n	800180a <__libc_init_array+0x1e>
 8001824:	0800186c 	.word	0x0800186c
 8001828:	0800186c 	.word	0x0800186c
 800182c:	0800186c 	.word	0x0800186c
 8001830:	08001870 	.word	0x08001870

08001834 <memset>:
 8001834:	4402      	add	r2, r0
 8001836:	4603      	mov	r3, r0
 8001838:	4293      	cmp	r3, r2
 800183a:	d100      	bne.n	800183e <memset+0xa>
 800183c:	4770      	bx	lr
 800183e:	f803 1b01 	strb.w	r1, [r3], #1
 8001842:	e7f9      	b.n	8001838 <memset+0x4>

08001844 <_init>:
 8001844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001846:	bf00      	nop
 8001848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800184a:	bc08      	pop	{r3}
 800184c:	469e      	mov	lr, r3
 800184e:	4770      	bx	lr

08001850 <_fini>:
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001852:	bf00      	nop
 8001854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001856:	bc08      	pop	{r3}
 8001858:	469e      	mov	lr, r3
 800185a:	4770      	bx	lr
