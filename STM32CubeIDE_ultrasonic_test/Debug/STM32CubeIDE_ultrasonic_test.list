
STM32CubeIDE_ultrasonic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d98  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007120  08007120  00017120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007128  08007128  00017128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08007130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000011c  24000074  080071a4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000190  080071a4  00020190  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000222f4  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000355c  00000000  00000000  00042396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010f8  00000000  00000000  000458f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ff0  00000000  00000000  000469f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031a38  00000000  00000000  000479e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015fa0  00000000  00000000  00079418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00140dc7  00000000  00000000  0008f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d017f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e94  00000000  00000000  001d01d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007030 	.word	0x08007030

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08007030 	.word	0x08007030

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b33      	ldr	r3, [pc, #204]	; (800076c <MX_GPIO_Init+0xe4>)
 80006a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006a4:	4a31      	ldr	r2, [pc, #196]	; (800076c <MX_GPIO_Init+0xe4>)
 80006a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ae:	4b2f      	ldr	r3, [pc, #188]	; (800076c <MX_GPIO_Init+0xe4>)
 80006b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <MX_GPIO_Init+0xe4>)
 80006be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006c2:	4a2a      	ldr	r2, [pc, #168]	; (800076c <MX_GPIO_Init+0xe4>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_GPIO_Init+0xe4>)
 80006ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <MX_GPIO_Init+0xe4>)
 80006dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006e0:	4a22      	ldr	r2, [pc, #136]	; (800076c <MX_GPIO_Init+0xe4>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_GPIO_Init+0xe4>)
 80006ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0xe4>)
 80006fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_GPIO_Init+0xe4>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_GPIO_Init+0xe4>)
 800070a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	4815      	ldr	r0, [pc, #84]	; (8000770 <MX_GPIO_Init+0xe8>)
 800071c:	f000 ffb0 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	4813      	ldr	r0, [pc, #76]	; (8000774 <MX_GPIO_Init+0xec>)
 8000726:	f000 ffab 	bl	8001680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800072a:	2320      	movs	r3, #32
 800072c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <MX_GPIO_Init+0xe8>)
 8000742:	f000 fded 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000746:	2320      	movs	r3, #32
 8000748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0xec>)
 800075e:	f000 fddf 	bl	8001320 <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58024400 	.word	0x58024400
 8000770:	58020000 	.word	0x58020000
 8000774:	58020400 	.word	0x58020400

08000778 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000780:	1d39      	adds	r1, r7, #4
 8000782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000786:	2201      	movs	r2, #1
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <__io_putchar+0x20>)
 800078a:	f004 fb1d 	bl	8004dc8 <HAL_UART_Transmit>

  return ch;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240000ec 	.word	0x240000ec

0800079c <delay>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <delay+0x30>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 80007ae:	bf00      	nop
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <delay+0x30>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d3f9      	bcc.n	80007b0 <delay+0x14>
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	240000a0 	.word	0x240000a0

080007d0 <HCSR04_Read1>:
		}
	}
}

void HCSR04_Read1 (void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 80007d4:	2201      	movs	r2, #1
 80007d6:	2120      	movs	r1, #32
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <HCSR04_Read1+0x34>)
 80007da:	f000 ff51 	bl	8001680 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 80007de:	200a      	movs	r0, #10
 80007e0:	f7ff ffdc 	bl	800079c <delay>
	HAL_GPIO_WritePin(TRIG_PORT1, TRIG_PIN1, GPIO_PIN_RESET);  // pull the TRIG pin low
 80007e4:	2200      	movs	r2, #0
 80007e6:	2120      	movs	r1, #32
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <HCSR04_Read1+0x34>)
 80007ea:	f000 ff49 	bl	8001680 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HCSR04_Read1+0x38>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HCSR04_Read1+0x38>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f042 0202 	orr.w	r2, r2, #2
 80007fc:	60da      	str	r2, [r3, #12]
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58020000 	.word	0x58020000
 8000808:	240000a0 	.word	0x240000a0

0800080c <HCSR04_Read2>:
		}
	}
}

void HCSR04_Read2 (void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000810:	2201      	movs	r2, #1
 8000812:	2120      	movs	r1, #32
 8000814:	480a      	ldr	r0, [pc, #40]	; (8000840 <HCSR04_Read2+0x34>)
 8000816:	f000 ff33 	bl	8001680 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 800081a:	200a      	movs	r0, #10
 800081c:	f7ff ffbe 	bl	800079c <delay>
	HAL_GPIO_WritePin(TRIG_PORT2, TRIG_PIN2, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000820:	2200      	movs	r2, #0
 8000822:	2120      	movs	r1, #32
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <HCSR04_Read2+0x34>)
 8000826:	f000 ff2b 	bl	8001680 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HCSR04_Read2+0x38>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <HCSR04_Read2+0x38>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f042 0202 	orr.w	r2, r2, #2
 8000838:	60da      	str	r2, [r3, #12]
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	58020400 	.word	0x58020400
 8000844:	240000a0 	.word	0x240000a0

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084c:	f000 fba2 	bl	8000f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000850:	f000 f82a 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000854:	f7ff ff18 	bl	8000688 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000858:	f000 f9f2 	bl	8000c40 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800085c:	f000 fabe 	bl	8000ddc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000860:	2100      	movs	r1, #0
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <main+0x50>)
 8000864:	f003 faf6 	bl	8003e54 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000868:	2104      	movs	r1, #4
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <main+0x50>)
 800086c:	f003 faf2 	bl	8003e54 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read1();
 8000870:	f7ff ffae 	bl	80007d0 <HCSR04_Read1>
	  HCSR04_Read2();
 8000874:	f7ff ffca 	bl	800080c <HCSR04_Read2>
	  printf("%d cm\r\n",Distance1);
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <main+0x54>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <main+0x58>)
 8000880:	f005 fc80 	bl	8006184 <iprintf>
	  printf("%d cm\r\n",Distance2);
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <main+0x5c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <main+0x58>)
 800088c:	f005 fc7a 	bl	8006184 <iprintf>
	  HAL_Delay(200);
 8000890:	20c8      	movs	r0, #200	; 0xc8
 8000892:	f000 fc11 	bl	80010b8 <HAL_Delay>
	  HCSR04_Read1();
 8000896:	e7eb      	b.n	8000870 <main+0x28>
 8000898:	240000a0 	.word	0x240000a0
 800089c:	24000090 	.word	0x24000090
 80008a0:	08007048 	.word	0x08007048
 80008a4:	24000091 	.word	0x24000091

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09c      	sub	sp, #112	; 0x70
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	224c      	movs	r2, #76	; 0x4c
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fc5c 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2220      	movs	r2, #32
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fc56 	bl	8006174 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008c8:	2004      	movs	r0, #4
 80008ca:	f000 fef3 	bl	80016b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <SystemClock_Config+0xb4>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <SystemClock_Config+0xb4>)
 80008d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008dc:	6193      	str	r3, [r2, #24]
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <SystemClock_Config+0xb4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008ea:	bf00      	nop
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <SystemClock_Config+0xb4>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008f8:	d1f8      	bne.n	80008ec <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fa:	2302      	movs	r3, #2
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008fe:	2301      	movs	r3, #1
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000906:	2300      	movs	r3, #0
 8000908:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	4618      	mov	r0, r3
 8000910:	f000 ff2a 	bl	8001768 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800091a:	f000 f821 	bl	8000960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	233f      	movs	r3, #63	; 0x3f
 8000920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000932:	2340      	movs	r3, #64	; 0x40
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093c:	2340      	movs	r3, #64	; 0x40
 800093e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2102      	movs	r1, #2
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fb13 	bl	8001f70 <HAL_RCC_ClockConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000950:	f000 f806 	bl	8000960 <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3770      	adds	r7, #112	; 0x70
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	58024800 	.word	0x58024800

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <HAL_MspInit+0x30>)
 8000974:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_MspInit+0x30>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_MspInit+0x30>)
 8000984:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	58024400 	.word	0x58024400

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 fb44 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <TIM3_IRQHandler+0x10>)
 80009fa:	f003 fb7b 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	240000a0 	.word	0x240000a0

08000a08 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
	}

return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fe8b 	bl	8000778 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
	}
	return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <_isatty>:

int _isatty(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f005 fb04 	bl	8006120 <__errno>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <_sbrk+0x64>)
 8000b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	24100000 	.word	0x24100000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	24000094 	.word	0x24000094
 8000b4c:	24000190 	.word	0x24000190

08000b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <SystemInit+0xd0>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5a:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <SystemInit+0xd0>)
 8000b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <SystemInit+0xd4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d807      	bhi.n	8000b80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <SystemInit+0xd4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 030f 	bic.w	r3, r3, #15
 8000b78:	4a2a      	ldr	r2, [pc, #168]	; (8000c24 <SystemInit+0xd4>)
 8000b7a:	f043 0303 	orr.w	r3, r3, #3
 8000b7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b80:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <SystemInit+0xd8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <SystemInit+0xd8>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b8c:	4b26      	ldr	r3, [pc, #152]	; (8000c28 <SystemInit+0xd8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <SystemInit+0xd8>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4924      	ldr	r1, [pc, #144]	; (8000c28 <SystemInit+0xd8>)
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <SystemInit+0xdc>)
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <SystemInit+0xd4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <SystemInit+0xd4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f023 030f 	bic.w	r3, r3, #15
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <SystemInit+0xd4>)
 8000bb4:	f043 0303 	orr.w	r3, r3, #3
 8000bb8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <SystemInit+0xd8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <SystemInit+0xd8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <SystemInit+0xd8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <SystemInit+0xd8>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <SystemInit+0xe0>)
 8000bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <SystemInit+0xd8>)
 8000bd4:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <SystemInit+0xe4>)
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <SystemInit+0xd8>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <SystemInit+0xe8>)
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0xd8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <SystemInit+0xd8>)
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <SystemInit+0xe8>)
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <SystemInit+0xd8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <SystemInit+0xd8>)
 8000bf2:	4a11      	ldr	r2, [pc, #68]	; (8000c38 <SystemInit+0xe8>)
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <SystemInit+0xd8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0xd8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <SystemInit+0xd8>)
 8000c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SystemInit+0xd8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <SystemInit+0xec>)
 8000c10:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c14:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	52002000 	.word	0x52002000
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c30:	02020200 	.word	0x02020200
 8000c34:	01ff0000 	.word	0x01ff0000
 8000c38:	01010280 	.word	0x01010280
 8000c3c:	52004000 	.word	0x52004000

08000c40 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c6e:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <MX_TIM3_Init+0xf4>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000c72:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c74:	223f      	movs	r2, #63	; 0x3f
 8000c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000c84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c92:	4827      	ldr	r0, [pc, #156]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000c94:	f003 f826 	bl	8003ce4 <HAL_TIM_Base_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000c9e:	f7ff fe5f 	bl	8000960 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ca8:	f107 0320 	add.w	r3, r7, #32
 8000cac:	4619      	mov	r1, r3
 8000cae:	4820      	ldr	r0, [pc, #128]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000cb0:	f003 fbdc 	bl	800446c <HAL_TIM_ConfigClockSource>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cba:	f7ff fe51 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000cbe:	481c      	ldr	r0, [pc, #112]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000cc0:	f003 f867 	bl	8003d92 <HAL_TIM_IC_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000cca:	f7ff fe49 	bl	8000960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000cde:	f003 ff77 	bl	8004bd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8000ce8:	f7ff fe3a 	bl	8000960 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000d04:	f003 fb15 	bl	8004332 <HAL_TIM_IC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000d0e:	f7ff fe27 	bl	8000960 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2204      	movs	r2, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_TIM3_Init+0xf0>)
 8000d1a:	f003 fb0a 	bl	8004332 <HAL_TIM_IC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0xe8>
  {
    Error_Handler();
 8000d24:	f7ff fe1c 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	; 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	240000a0 	.word	0x240000a0
 8000d34:	40000400 	.word	0x40000400

08000d38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_TIM_Base_MspInit+0x98>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d135      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_TIM_Base_MspInit+0x9c>)
 8000d5c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d60:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_TIM_Base_MspInit+0x9c>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <HAL_TIM_Base_MspInit+0x9c>)
 8000d6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <HAL_TIM_Base_MspInit+0x9c>)
 8000d7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d7e:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <HAL_TIM_Base_MspInit+0x9c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_TIM_Base_MspInit+0x9c>)
 8000d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000da6:	2302      	movs	r3, #2
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <HAL_TIM_Base_MspInit+0xa0>)
 8000db2:	f000 fab5 	bl	8001320 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	201d      	movs	r0, #29
 8000dbc:	f000 fa7b 	bl	80012b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dc0:	201d      	movs	r0, #29
 8000dc2:	f000 fa92 	bl	80012ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40000400 	.word	0x40000400
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58020000 	.word	0x58020000

08000ddc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de0:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000de2:	4a23      	ldr	r2, [pc, #140]	; (8000e70 <MX_USART3_UART_Init+0x94>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de6:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e24:	4811      	ldr	r0, [pc, #68]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e26:	f003 ff7f 	bl	8004d28 <HAL_UART_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e30:	f7ff fd96 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e34:	2100      	movs	r1, #0
 8000e36:	480d      	ldr	r0, [pc, #52]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e38:	f005 f8a8 	bl	8005f8c <HAL_UARTEx_SetTxFifoThreshold>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e42:	f7ff fd8d 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e46:	2100      	movs	r1, #0
 8000e48:	4808      	ldr	r0, [pc, #32]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e4a:	f005 f8dd 	bl	8006008 <HAL_UARTEx_SetRxFifoThreshold>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e54:	f7ff fd84 	bl	8000960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e58:	4804      	ldr	r0, [pc, #16]	; (8000e6c <MX_USART3_UART_Init+0x90>)
 8000e5a:	f005 f85e 	bl	8005f1a <HAL_UARTEx_DisableFifoMode>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e64:	f7ff fd7c 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	240000ec 	.word	0x240000ec
 8000e70:	40004800 	.word	0x40004800

08000e74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0b8      	sub	sp, #224	; 0xe0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	22b8      	movs	r2, #184	; 0xb8
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 f96d 	bl	8006174 <memset>
  if(uartHandle->Instance==USART3)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a25      	ldr	r2, [pc, #148]	; (8000f34 <HAL_UART_MspInit+0xc0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d142      	bne.n	8000f2a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fbe8 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ebe:	f7ff fd4f 	bl	8000960 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ec4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ec8:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000eca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ece:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ed4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ee2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_UART_MspInit+0xc4>)
 8000ef2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f18:	2307      	movs	r3, #7
 8000f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f1e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_UART_MspInit+0xc8>)
 8000f26:	f000 f9fb 	bl	8001320 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	37e0      	adds	r7, #224	; 0xe0
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004800 	.word	0x40004800
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020c00 	.word	0x58020c00

08000f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f44:	f7ff fe04 	bl	8000b50 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f005 f8dd 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fc69 	bl	8000848 <main>
  bx  lr
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000f7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f80:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000f84:	08007130 	.word	0x08007130
  ldr r2, =_sbss
 8000f88:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000f8c:	24000190 	.word	0x24000190

08000f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f980 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000fa0:	f001 f99c 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_Init+0x68>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	4913      	ldr	r1, [pc, #76]	; (8001000 <HAL_Init+0x6c>)
 8000fb2:	5ccb      	ldrb	r3, [r1, r3]
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_Init+0x68>)
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_Init+0x6c>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x70>)
 8000fd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_Init+0x74>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	200f      	movs	r0, #15
 8000fe0:	f000 f814 	bl	800100c <HAL_InitTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e002      	b.n	8000ff4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fee:	f7ff fcbd 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	58024400 	.word	0x58024400
 8001000:	08007050 	.word	0x08007050
 8001004:	24000004 	.word	0x24000004
 8001008:	24000000 	.word	0x24000000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_InitTick+0x60>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e021      	b.n	8001064 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_InitTick+0x64>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_InitTick+0x60>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f965 	bl	8001306 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f92f 	bl	80012b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x68>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2400000c 	.word	0x2400000c
 8001070:	24000000 	.word	0x24000000
 8001074:	24000008 	.word	0x24000008

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2400000c 	.word	0x2400000c
 800109c:	2400017c 	.word	0x2400017c

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2400017c 	.word	0x2400017c

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	05fa0000 	.word	0x05fa0000

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800126c:	d301      	bcc.n	8001272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126e:	2301      	movs	r3, #1
 8001270:	e00f      	b.n	8001292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <SysTick_Config+0x40>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127a:	210f      	movs	r1, #15
 800127c:	f04f 30ff 	mov.w	r0, #4294967295
 8001280:	f7ff ff8e 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <SysTick_Config+0x40>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <SysTick_Config+0x40>)
 800128c:	2207      	movs	r2, #7
 800128e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000e010 	.word	0xe000e010

080012a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff29 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff40 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff90 	bl	80011f4 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5f 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff33 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa4 	bl	800125c <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800132e:	4b89      	ldr	r3, [pc, #548]	; (8001554 <HAL_GPIO_Init+0x234>)
 8001330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001332:	e194      	b.n	800165e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8186 	beq.w	8001658 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d005      	beq.n	8001364 <HAL_GPIO_Init+0x44>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d130      	bne.n	80013c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800139a:	2201      	movs	r2, #1
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 0201 	and.w	r2, r3, #1
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d017      	beq.n	8001402 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d123      	bne.n	8001456 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	69b9      	ldr	r1, [r7, #24]
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0203 	and.w	r2, r3, #3
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80e0 	beq.w	8001658 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <HAL_GPIO_Init+0x238>)
 800149a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800149e:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <HAL_GPIO_Init+0x238>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <HAL_GPIO_Init+0x238>)
 80014aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014b6:	4a29      	ldr	r2, [pc, #164]	; (800155c <HAL_GPIO_Init+0x23c>)
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <HAL_GPIO_Init+0x240>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d052      	beq.n	8001588 <HAL_GPIO_Init+0x268>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_GPIO_Init+0x244>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d031      	beq.n	800154e <HAL_GPIO_Init+0x22e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <HAL_GPIO_Init+0x248>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d02b      	beq.n	800154a <HAL_GPIO_Init+0x22a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_GPIO_Init+0x24c>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d025      	beq.n	8001546 <HAL_GPIO_Init+0x226>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_GPIO_Init+0x250>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d01f      	beq.n	8001542 <HAL_GPIO_Init+0x222>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_GPIO_Init+0x254>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d019      	beq.n	800153e <HAL_GPIO_Init+0x21e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <HAL_GPIO_Init+0x258>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0x21a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_GPIO_Init+0x25c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00d      	beq.n	8001536 <HAL_GPIO_Init+0x216>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_GPIO_Init+0x260>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d007      	beq.n	8001532 <HAL_GPIO_Init+0x212>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_GPIO_Init+0x264>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_GPIO_Init+0x20e>
 800152a:	2309      	movs	r3, #9
 800152c:	e02d      	b.n	800158a <HAL_GPIO_Init+0x26a>
 800152e:	230a      	movs	r3, #10
 8001530:	e02b      	b.n	800158a <HAL_GPIO_Init+0x26a>
 8001532:	2308      	movs	r3, #8
 8001534:	e029      	b.n	800158a <HAL_GPIO_Init+0x26a>
 8001536:	2307      	movs	r3, #7
 8001538:	e027      	b.n	800158a <HAL_GPIO_Init+0x26a>
 800153a:	2306      	movs	r3, #6
 800153c:	e025      	b.n	800158a <HAL_GPIO_Init+0x26a>
 800153e:	2305      	movs	r3, #5
 8001540:	e023      	b.n	800158a <HAL_GPIO_Init+0x26a>
 8001542:	2304      	movs	r3, #4
 8001544:	e021      	b.n	800158a <HAL_GPIO_Init+0x26a>
 8001546:	2303      	movs	r3, #3
 8001548:	e01f      	b.n	800158a <HAL_GPIO_Init+0x26a>
 800154a:	2302      	movs	r3, #2
 800154c:	e01d      	b.n	800158a <HAL_GPIO_Init+0x26a>
 800154e:	2301      	movs	r3, #1
 8001550:	e01b      	b.n	800158a <HAL_GPIO_Init+0x26a>
 8001552:	bf00      	nop
 8001554:	58000080 	.word	0x58000080
 8001558:	58024400 	.word	0x58024400
 800155c:	58000400 	.word	0x58000400
 8001560:	58020000 	.word	0x58020000
 8001564:	58020400 	.word	0x58020400
 8001568:	58020800 	.word	0x58020800
 800156c:	58020c00 	.word	0x58020c00
 8001570:	58021000 	.word	0x58021000
 8001574:	58021400 	.word	0x58021400
 8001578:	58021800 	.word	0x58021800
 800157c:	58021c00 	.word	0x58021c00
 8001580:	58022000 	.word	0x58022000
 8001584:	58022400 	.word	0x58022400
 8001588:	2300      	movs	r3, #0
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159a:	4938      	ldr	r1, [pc, #224]	; (800167c <HAL_GPIO_Init+0x35c>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	43db      	mvns	r3, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4013      	ands	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	f47f ae63 	bne.w	8001334 <HAL_GPIO_Init+0x14>
  }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	; 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	58000400 	.word	0x58000400

08001680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	460b      	mov	r3, r1
 800168a:	807b      	strh	r3, [r7, #2]
 800168c:	4613      	mov	r3, r2
 800168e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001690:	787b      	ldrb	r3, [r7, #1]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001696:	887a      	ldrh	r2, [r7, #2]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800169c:	e003      	b.n	80016a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800169e:	887b      	ldrh	r3, [r7, #2]
 80016a0:	041a      	lsls	r2, r3, #16
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	619a      	str	r2, [r3, #24]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_PWREx_ConfigSupply+0xb0>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	2b06      	cmp	r3, #6
 80016c6:	d00a      	beq.n	80016de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016c8:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d001      	beq.n	80016da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e040      	b.n	800175c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e03e      	b.n	800175c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_PWREx_ConfigSupply+0xb0>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80016e6:	491f      	ldr	r1, [pc, #124]	; (8001764 <HAL_PWREx_ConfigSupply+0xb0>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80016ee:	f7ff fcd7 	bl	80010a0 <HAL_GetTick>
 80016f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016f4:	e009      	b.n	800170a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016f6:	f7ff fcd3 	bl	80010a0 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001704:	d901      	bls.n	800170a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e028      	b.n	800175c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <HAL_PWREx_ConfigSupply+0xb0>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001716:	d1ee      	bne.n	80016f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b1e      	cmp	r3, #30
 800171c:	d008      	beq.n	8001730 <HAL_PWREx_ConfigSupply+0x7c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b2e      	cmp	r3, #46	; 0x2e
 8001722:	d005      	beq.n	8001730 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b1d      	cmp	r3, #29
 8001728:	d002      	beq.n	8001730 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b2d      	cmp	r3, #45	; 0x2d
 800172e:	d114      	bne.n	800175a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001730:	f7ff fcb6 	bl	80010a0 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001736:	e009      	b.n	800174c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001738:	f7ff fcb2 	bl	80010a0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001746:	d901      	bls.n	800174c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e007      	b.n	800175c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_PWREx_ConfigSupply+0xb0>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d1ee      	bne.n	8001738 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024800 	.word	0x58024800

08001768 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08c      	sub	sp, #48	; 0x30
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e3f3      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80b3 	beq.w	80018ee <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001788:	4b9e      	ldr	r3, [pc, #632]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001792:	4b9c      	ldr	r3, [pc, #624]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	2b10      	cmp	r3, #16
 800179c:	d007      	beq.n	80017ae <HAL_RCC_OscConfig+0x46>
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	2b18      	cmp	r3, #24
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_OscConfig+0x62>
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d10d      	bne.n	80017ca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ae:	4b95      	ldr	r3, [pc, #596]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8098 	beq.w	80018ec <HAL_RCC_OscConfig+0x184>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 8093 	bne.w	80018ec <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e3cb      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x7a>
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a8a      	ldr	r2, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e058      	b.n	8001894 <HAL_RCC_OscConfig+0x12c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0xa8>
 80017ea:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a85      	ldr	r2, [pc, #532]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b83      	ldr	r3, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a82      	ldr	r2, [pc, #520]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80017fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b80      	ldr	r3, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a7f      	ldr	r2, [pc, #508]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e041      	b.n	8001894 <HAL_RCC_OscConfig+0x12c>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d112      	bne.n	8001840 <HAL_RCC_OscConfig+0xd8>
 800181a:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b77      	ldr	r3, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a76      	ldr	r2, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800182c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b74      	ldr	r3, [pc, #464]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a73      	ldr	r2, [pc, #460]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e029      	b.n	8001894 <HAL_RCC_OscConfig+0x12c>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001848:	d112      	bne.n	8001870 <HAL_RCC_OscConfig+0x108>
 800184a:	4b6e      	ldr	r3, [pc, #440]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6d      	ldr	r2, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b6b      	ldr	r3, [pc, #428]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6a      	ldr	r2, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800185c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a67      	ldr	r2, [pc, #412]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e011      	b.n	8001894 <HAL_RCC_OscConfig+0x12c>
 8001870:	4b64      	ldr	r3, [pc, #400]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b61      	ldr	r3, [pc, #388]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a60      	ldr	r2, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800188e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff fc00 	bl	80010a0 <HAL_GetTick>
 80018a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff fbfc 	bl	80010a0 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e355      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b6:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x13c>
 80018c2:	e014      	b.n	80018ee <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fbec 	bl	80010a0 <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fbe8 	bl	80010a0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e341      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x164>
 80018ea:	e000      	b.n	80018ee <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 808c 	beq.w	8001a14 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001904:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <HAL_RCC_OscConfig+0x1ba>
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	2b18      	cmp	r3, #24
 8001916:	d137      	bne.n	8001988 <HAL_RCC_OscConfig+0x220>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d132      	bne.n	8001988 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <HAL_RCC_OscConfig+0x1d2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e313      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 0219 	bic.w	r2, r3, #25
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	492f      	ldr	r1, [pc, #188]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800194c:	f7ff fba8 	bl	80010a0 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001954:	f7ff fba4 	bl	80010a0 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e2fd      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	4920      	ldr	r1, [pc, #128]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001986:	e045      	b.n	8001a14 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d026      	beq.n	80019de <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001990:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 0219 	bic.w	r2, r3, #25
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4919      	ldr	r1, [pc, #100]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fb7d 	bl	80010a0 <HAL_GetTick>
 80019a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fb79 	bl	80010a0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e2d2      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	490b      	ldr	r1, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e01a      	b.n	8001a14 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_RCC_OscConfig+0x29c>)
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff fb59 	bl	80010a0 <HAL_GetTick>
 80019ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f2:	f7ff fb55 	bl	80010a0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d903      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e2ae      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
 8001a04:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a08:	4b99      	ldr	r3, [pc, #612]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d06a      	beq.n	8001af6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a20:	4b93      	ldr	r3, [pc, #588]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a28:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a2a:	4b91      	ldr	r3, [pc, #580]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d007      	beq.n	8001a46 <HAL_RCC_OscConfig+0x2de>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b18      	cmp	r3, #24
 8001a3a:	d11b      	bne.n	8001a74 <HAL_RCC_OscConfig+0x30c>
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d116      	bne.n	8001a74 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a46:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2f6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	2b80      	cmp	r3, #128	; 0x80
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e281      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a5e:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	061b      	lsls	r3, r3, #24
 8001a6c:	4980      	ldr	r1, [pc, #512]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a72:	e040      	b.n	8001af6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d023      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a7c:	4b7c      	ldr	r3, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a7b      	ldr	r2, [pc, #492]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff fb0a 	bl	80010a0 <HAL_GetTick>
 8001a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a90:	f7ff fb06 	bl	80010a0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e25f      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001aa2:	4b73      	ldr	r3, [pc, #460]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aae:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	061b      	lsls	r3, r3, #24
 8001abc:	496c      	ldr	r1, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60cb      	str	r3, [r1, #12]
 8001ac2:	e018      	b.n	8001af6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ac4:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a69      	ldr	r2, [pc, #420]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fae6 	bl	80010a0 <HAL_GetTick>
 8001ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fae2 	bl	80010a0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e23b      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d036      	beq.n	8001b70 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d019      	beq.n	8001b3e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b0e:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b16:	f7ff fac3 	bl	80010a0 <HAL_GetTick>
 8001b1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fabf 	bl	80010a0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e218      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b30:	4b4f      	ldr	r3, [pc, #316]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3b6>
 8001b3c:	e018      	b.n	8001b70 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b3e:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b42:	4a4b      	ldr	r2, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff faa9 	bl	80010a0 <HAL_GetTick>
 8001b4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b52:	f7ff faa5 	bl	80010a0 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1fe      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d036      	beq.n	8001bea <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a39      	ldr	r2, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001b8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b90:	f7ff fa86 	bl	80010a0 <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b98:	f7ff fa82 	bl	80010a0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e1db      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x430>
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb8:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a2c      	ldr	r2, [pc, #176]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fa6c 	bl	80010a0 <HAL_GetTick>
 8001bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bcc:	f7ff fa68 	bl	80010a0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1c1      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bde:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80af 	beq.w	8001d56 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_OscConfig+0x50c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_RCC_OscConfig+0x50c>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c04:	f7ff fa4c 	bl	80010a0 <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7ff fa48 	bl	80010a0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1a1      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_RCC_OscConfig+0x50c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4d8>
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e05b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x590>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d117      	bne.n	8001c78 <HAL_RCC_OscConfig+0x510>
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a02      	ldr	r2, [pc, #8]	; (8001c70 <HAL_RCC_OscConfig+0x508>)
 8001c66:	f023 0304 	bic.w	r3, r3, #4
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	e044      	b.n	8001cf8 <HAL_RCC_OscConfig+0x590>
 8001c6e:	bf00      	nop
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58024800 	.word	0x58024800
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x53e>
 8001c80:	4b95      	ldr	r3, [pc, #596]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a94      	ldr	r2, [pc, #592]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	4b92      	ldr	r3, [pc, #584]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a91      	ldr	r2, [pc, #580]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b8f      	ldr	r3, [pc, #572]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a8e      	ldr	r2, [pc, #568]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	e028      	b.n	8001cf8 <HAL_RCC_OscConfig+0x590>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b85      	cmp	r3, #133	; 0x85
 8001cac:	d112      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x56c>
 8001cae:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb2:	4a89      	ldr	r2, [pc, #548]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cb4:	f043 0304 	orr.w	r3, r3, #4
 8001cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cba:	4b87      	ldr	r3, [pc, #540]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a86      	ldr	r2, [pc, #536]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e011      	b.n	8001cf8 <HAL_RCC_OscConfig+0x590>
 8001cd4:	4b80      	ldr	r3, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a7f      	ldr	r2, [pc, #508]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	4b7d      	ldr	r3, [pc, #500]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a7c      	ldr	r2, [pc, #496]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001ce6:	f023 0304 	bic.w	r3, r3, #4
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a79      	ldr	r2, [pc, #484]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d015      	beq.n	8001d2c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7ff f9ce 	bl	80010a0 <HAL_GetTick>
 8001d04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff f9ca 	bl	80010a0 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e121      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0ee      	beq.n	8001d08 <HAL_RCC_OscConfig+0x5a0>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f9b8 	bl	80010a0 <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f9b4 	bl	80010a0 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e10b      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4a:	4b63      	ldr	r3, [pc, #396]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ee      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8100 	beq.w	8001f60 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d60:	4b5d      	ldr	r3, [pc, #372]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d68:	2b18      	cmp	r3, #24
 8001d6a:	f000 80bb 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	f040 8095 	bne.w	8001ea2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f98c 	bl	80010a0 <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f988 	bl	80010a0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0e1      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dae:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <HAL_RCC_OscConfig+0x774>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	4946      	ldr	r1, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	628b      	str	r3, [r1, #40]	; 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	025b      	lsls	r3, r3, #9
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	3b01      	subs	r3, #1
 8001dee:	061b      	lsls	r3, r3, #24
 8001df0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001df4:	4938      	ldr	r1, [pc, #224]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001dfa:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e06:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e0a:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0x778>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e12:	00d2      	lsls	r2, r2, #3
 8001e14:	4930      	ldr	r1, [pc, #192]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f023 020c 	bic.w	r2, r3, #12
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	492c      	ldr	r1, [pc, #176]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	f023 0202 	bic.w	r2, r3, #2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7ff f911 	bl	80010a0 <HAL_GetTick>
 8001e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff f90d 	bl	80010a0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e066      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x71a>
 8001ea0:	e05e      	b.n	8001f60 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f8f7 	bl	80010a0 <HAL_GetTick>
 8001eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7ff f8f3 	bl	80010a0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e04c      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_OscConfig+0x770>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x74e>
 8001ed4:	e044      	b.n	8001f60 <HAL_RCC_OscConfig+0x7f8>
 8001ed6:	bf00      	nop
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	fffffc0c 	.word	0xfffffc0c
 8001ee0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCC_OscConfig+0x804>)
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_RCC_OscConfig+0x804>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d031      	beq.n	8001f5c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0203 	and.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d12a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d122      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11a      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	0a5b      	lsrs	r3, r3, #9
 8001f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d111      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0e1b      	lsrs	r3, r3, #24
 8001f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3730      	adds	r7, #48	; 0x30
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	58024400 	.word	0x58024400

08001f70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e19c      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b8a      	ldr	r3, [pc, #552]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d910      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b87      	ldr	r3, [pc, #540]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	4985      	ldr	r1, [pc, #532]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b83      	ldr	r3, [pc, #524]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e184      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d010      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d908      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fd0:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4975      	ldr	r1, [pc, #468]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d010      	beq.n	8002010 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d908      	bls.n	8002010 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	496a      	ldr	r1, [pc, #424]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d010      	beq.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	4b64      	ldr	r3, [pc, #400]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002028:	429a      	cmp	r2, r3
 800202a:	d908      	bls.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800202c:	4b61      	ldr	r3, [pc, #388]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	495e      	ldr	r1, [pc, #376]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800203a:	4313      	orrs	r3, r2
 800203c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d010      	beq.n	800206c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002056:	429a      	cmp	r2, r3
 8002058:	d908      	bls.n	800206c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800205a:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4953      	ldr	r1, [pc, #332]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002068:	4313      	orrs	r3, r2
 800206a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d010      	beq.n	800209a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	429a      	cmp	r2, r3
 8002086:	d908      	bls.n	800209a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f023 020f 	bic.w	r2, r3, #15
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4947      	ldr	r1, [pc, #284]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002096:	4313      	orrs	r3, r2
 8002098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d055      	beq.n	8002152 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80020a6:	4b43      	ldr	r3, [pc, #268]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	4940      	ldr	r1, [pc, #256]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020c0:	4b3c      	ldr	r3, [pc, #240]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d121      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0f6      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020d8:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d115      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0ea      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020f0:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0de      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d6      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7fe ffbd 	bl	80010a0 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002128:	e00a      	b.n	8002140 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212a:	f7fe ffb9 	bl	80010a0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0be      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	429a      	cmp	r2, r3
 8002150:	d1eb      	bne.n	800212a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	429a      	cmp	r2, r3
 800216c:	d208      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f023 020f 	bic.w	r2, r3, #15
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_RCC_ClockConfig+0x244>)
 800217c:	4313      	orrs	r3, r2
 800217e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d214      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f023 020f 	bic.w	r2, r3, #15
 8002196:	4906      	ldr	r1, [pc, #24]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <HAL_RCC_ClockConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e086      	b.n	80022be <HAL_RCC_ClockConfig+0x34e>
 80021b0:	52002000 	.word	0x52002000
 80021b4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d208      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	4939      	ldr	r1, [pc, #228]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d010      	beq.n	8002214 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	4b34      	ldr	r3, [pc, #208]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021fe:	429a      	cmp	r2, r3
 8002200:	d208      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	492e      	ldr	r1, [pc, #184]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d010      	beq.n	8002242 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800222c:	429a      	cmp	r2, r3
 800222e:	d208      	bcs.n	8002242 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 800223e:	4313      	orrs	r3, r2
 8002240:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800225a:	429a      	cmp	r2, r3
 800225c:	d208      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	4917      	ldr	r1, [pc, #92]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 800226c:	4313      	orrs	r3, r2
 800226e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002270:	f000 f834 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	4912      	ldr	r1, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x35c>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCC_ClockConfig+0x358>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_RCC_ClockConfig+0x35c>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x360>)
 80022a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022a8:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_RCC_ClockConfig+0x364>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_RCC_ClockConfig+0x368>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe feaa 	bl	800100c <HAL_InitTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	58024400 	.word	0x58024400
 80022cc:	08007050 	.word	0x08007050
 80022d0:	24000004 	.word	0x24000004
 80022d4:	24000000 	.word	0x24000000
 80022d8:	24000008 	.word	0x24000008

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022e2:	4bb3      	ldr	r3, [pc, #716]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ea:	2b18      	cmp	r3, #24
 80022ec:	f200 8155 	bhi.w	800259a <HAL_RCC_GetSysClockFreq+0x2be>
 80022f0:	a201      	add	r2, pc, #4	; (adr r2, 80022f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f6:	bf00      	nop
 80022f8:	0800235d 	.word	0x0800235d
 80022fc:	0800259b 	.word	0x0800259b
 8002300:	0800259b 	.word	0x0800259b
 8002304:	0800259b 	.word	0x0800259b
 8002308:	0800259b 	.word	0x0800259b
 800230c:	0800259b 	.word	0x0800259b
 8002310:	0800259b 	.word	0x0800259b
 8002314:	0800259b 	.word	0x0800259b
 8002318:	08002383 	.word	0x08002383
 800231c:	0800259b 	.word	0x0800259b
 8002320:	0800259b 	.word	0x0800259b
 8002324:	0800259b 	.word	0x0800259b
 8002328:	0800259b 	.word	0x0800259b
 800232c:	0800259b 	.word	0x0800259b
 8002330:	0800259b 	.word	0x0800259b
 8002334:	0800259b 	.word	0x0800259b
 8002338:	08002389 	.word	0x08002389
 800233c:	0800259b 	.word	0x0800259b
 8002340:	0800259b 	.word	0x0800259b
 8002344:	0800259b 	.word	0x0800259b
 8002348:	0800259b 	.word	0x0800259b
 800234c:	0800259b 	.word	0x0800259b
 8002350:	0800259b 	.word	0x0800259b
 8002354:	0800259b 	.word	0x0800259b
 8002358:	0800238f 	.word	0x0800238f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800235c:	4b94      	ldr	r3, [pc, #592]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002368:	4b91      	ldr	r3, [pc, #580]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	4a90      	ldr	r2, [pc, #576]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
 8002378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800237a:	e111      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800237c:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800237e:	61bb      	str	r3, [r7, #24]
    break;
 8002380:	e10e      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002384:	61bb      	str	r3, [r7, #24]
    break;
 8002386:	e10b      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002388:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800238a:	61bb      	str	r3, [r7, #24]
    break;
 800238c:	e108      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800238e:	4b88      	ldr	r3, [pc, #544]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002398:	4b85      	ldr	r3, [pc, #532]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80023a4:	4b82      	ldr	r3, [pc, #520]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80023ae:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	08db      	lsrs	r3, r3, #3
 80023b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80e1 	beq.w	8002594 <HAL_RCC_GetSysClockFreq+0x2b8>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	f000 8083 	beq.w	80024e0 <HAL_RCC_GetSysClockFreq+0x204>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f200 80a1 	bhi.w	8002524 <HAL_RCC_GetSysClockFreq+0x248>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_RCC_GetSysClockFreq+0x114>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d056      	beq.n	800249c <HAL_RCC_GetSysClockFreq+0x1c0>
 80023ee:	e099      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f0:	4b6f      	ldr	r3, [pc, #444]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02d      	beq.n	8002458 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023fc:	4b6c      	ldr	r3, [pc, #432]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	4a6b      	ldr	r2, [pc, #428]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002408:	fa22 f303 	lsr.w	r3, r2, r3
 800240c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002426:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002436:	ed97 6a02 	vldr	s12, [r7, #8]
 800243a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800243e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800244e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002452:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002456:	e087      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	eddf 6a58 	vldr	s13, [pc, #352]	; 80025c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246a:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247a:	ed97 6a02 	vldr	s12, [r7, #8]
 800247e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800248e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800249a:	e065      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024be:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024de:	e043      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80025cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80024ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002502:	ed97 6a02 	vldr	s12, [r7, #8]
 8002506:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800250a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800250e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002522:	e021      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80025c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002546:	ed97 6a02 	vldr	s12, [r7, #8]
 800254a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80025c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800254e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800255a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002566:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	0a5b      	lsrs	r3, r3, #9
 800256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002572:	3301      	adds	r3, #1
 8002574:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002580:	edd7 6a07 	vldr	s13, [r7, #28]
 8002584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800258c:	ee17 3a90 	vmov	r3, s15
 8002590:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002592:	e005      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
    break;
 8002598:	e002      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800259c:	61bb      	str	r3, [r7, #24]
    break;
 800259e:	bf00      	nop
  }

  return sysclockfreq;
 80025a0:	69bb      	ldr	r3, [r7, #24]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	; 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	58024400 	.word	0x58024400
 80025b4:	03d09000 	.word	0x03d09000
 80025b8:	003d0900 	.word	0x003d0900
 80025bc:	016e3600 	.word	0x016e3600
 80025c0:	46000000 	.word	0x46000000
 80025c4:	4c742400 	.word	0x4c742400
 80025c8:	4a742400 	.word	0x4a742400
 80025cc:	4bb71b00 	.word	0x4bb71b00

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80025d6:	f7ff fe81 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 80025da:	4602      	mov	r2, r0
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <HAL_RCC_GetHCLKFreq+0x50>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_RCC_GetHCLKFreq+0x54>)
 80025e8:	5ccb      	ldrb	r3, [r1, r3]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <HAL_RCC_GetHCLKFreq+0x50>)
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_RCC_GetHCLKFreq+0x54>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_RCC_GetHCLKFreq+0x58>)
 800260c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_GetHCLKFreq+0x58>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	58024400 	.word	0x58024400
 8002624:	08007050 	.word	0x08007050
 8002628:	24000004 	.word	0x24000004
 800262c:	24000000 	.word	0x24000000

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002634:	f7ff ffcc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4904      	ldr	r1, [pc, #16]	; (8002658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	58024400 	.word	0x58024400
 8002658:	08007050 	.word	0x08007050

0800265c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002660:	f7ff ffb6 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	58024400 	.word	0x58024400
 8002684:	08007050 	.word	0x08007050

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002690:	2300      	movs	r3, #0
 8002692:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002694:	2300      	movs	r3, #0
 8002696:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d03f      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ac:	d02a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026b2:	d824      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026b8:	d018      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026be:	d81e      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c8:	d007      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026ca:	e018      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026cc:	4ba6      	ldr	r3, [pc, #664]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	4aa5      	ldr	r2, [pc, #660]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026d8:	e015      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	2102      	movs	r1, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 f99b 	bl	8003a1c <RCCEx_PLL2_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026ea:	e00c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3324      	adds	r3, #36	; 0x24
 80026f0:	2102      	movs	r1, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 fa44 	bl	8003b80 <RCCEx_PLL3_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	75fb      	strb	r3, [r7, #23]
      break;
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d109      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800270c:	4b96      	ldr	r3, [pc, #600]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002718:	4993      	ldr	r1, [pc, #588]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	650b      	str	r3, [r1, #80]	; 0x50
 800271e:	e001      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	7dfb      	ldrb	r3, [r7, #23]
 8002722:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03d      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	2b04      	cmp	r3, #4
 8002736:	d826      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002755 	.word	0x08002755
 8002744:	08002763 	.word	0x08002763
 8002748:	08002775 	.word	0x08002775
 800274c:	0800278d 	.word	0x0800278d
 8002750:	0800278d 	.word	0x0800278d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002754:	4b84      	ldr	r3, [pc, #528]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4a83      	ldr	r2, [pc, #524]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800275a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002760:	e015      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f001 f957 	bl	8003a1c <RCCEx_PLL2_Config>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002772:	e00c      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3324      	adds	r3, #36	; 0x24
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f001 fa00 	bl	8003b80 <RCCEx_PLL3_Config>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002784:	e003      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
      break;
 800278a:	e000      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800278c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002794:	4b74      	ldr	r3, [pc, #464]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002798:	f023 0207 	bic.w	r2, r3, #7
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	4971      	ldr	r1, [pc, #452]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	650b      	str	r3, [r1, #80]	; 0x50
 80027a6:	e001      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7dfb      	ldrb	r3, [r7, #23]
 80027aa:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027c0:	d031      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80027c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80027c6:	d82b      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027cc:	d02d      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80027ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027d2:	d825      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027d4:	2bc0      	cmp	r3, #192	; 0xc0
 80027d6:	d02a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027d8:	2bc0      	cmp	r3, #192	; 0xc0
 80027da:	d821      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d016      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80027e0:	2b80      	cmp	r3, #128	; 0x80
 80027e2:	d81d      	bhi.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d002      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d007      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x174>
 80027ec:	e018      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ee:	4b5e      	ldr	r3, [pc, #376]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	4a5d      	ldr	r2, [pc, #372]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80027fa:	e019      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3304      	adds	r3, #4
 8002800:	2100      	movs	r1, #0
 8002802:	4618      	mov	r0, r3
 8002804:	f001 f90a 	bl	8003a1c <RCCEx_PLL2_Config>
 8002808:	4603      	mov	r3, r0
 800280a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800280c:	e010      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3324      	adds	r3, #36	; 0x24
 8002812:	2100      	movs	r1, #0
 8002814:	4618      	mov	r0, r3
 8002816:	f001 f9b3 	bl	8003b80 <RCCEx_PLL3_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800281e:	e007      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	75fb      	strb	r3, [r7, #23]
      break;
 8002824:	e004      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002826:	bf00      	nop
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800282e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4949      	ldr	r1, [pc, #292]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	650b      	str	r3, [r1, #80]	; 0x50
 8002848:	e001      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002856:	2b00      	cmp	r3, #0
 8002858:	d04f      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002862:	d036      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002864:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002868:	d830      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800286a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800286e:	d032      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002874:	d82a      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002876:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800287a:	d02e      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x252>
 800287c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002880:	d824      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002886:	d018      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d81e      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x244>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002896:	d007      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002898:	e018      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800289a:	4b33      	ldr	r3, [pc, #204]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028a6:	e019      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3304      	adds	r3, #4
 80028ac:	2100      	movs	r1, #0
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 f8b4 	bl	8003a1c <RCCEx_PLL2_Config>
 80028b4:	4603      	mov	r3, r0
 80028b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028b8:	e010      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3324      	adds	r3, #36	; 0x24
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f001 f95d 	bl	8003b80 <RCCEx_PLL3_Config>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80028ca:	e007      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
      break;
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028d2:	bf00      	nop
 80028d4:	e002      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028d6:	bf00      	nop
 80028d8:	e000      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80028da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d109      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	491e      	ldr	r1, [pc, #120]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	650b      	str	r3, [r1, #80]	; 0x50
 80028f4:	e001      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d034      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290a:	2b30      	cmp	r3, #48	; 0x30
 800290c:	d01c      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800290e:	2b30      	cmp	r3, #48	; 0x30
 8002910:	d817      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002912:	2b20      	cmp	r3, #32
 8002914:	d00c      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002916:	2b20      	cmp	r3, #32
 8002918:	d813      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d016      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800291e:	2b10      	cmp	r3, #16
 8002920:	d10f      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800292e:	e00e      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3304      	adds	r3, #4
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f870 	bl	8003a1c <RCCEx_PLL2_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002940:	e005      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	4901      	ldr	r1, [pc, #4]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002962:	4313      	orrs	r3, r2
 8002964:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002966:	e003      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d047      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002984:	d030      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800298a:	d82a      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800298c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002990:	d02c      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002992:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002996:	d824      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299c:	d018      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800299e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a2:	d81e      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d007      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x336>
 80029ae:	e018      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b0:	4bb0      	ldr	r3, [pc, #704]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4aaf      	ldr	r2, [pc, #700]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029bc:	e017      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f829 	bl	8003a1c <RCCEx_PLL2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ce:	e00e      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f8d2 	bl	8003b80 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029e0:	e005      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80029ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029f4:	4b9f      	ldr	r3, [pc, #636]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	499c      	ldr	r1, [pc, #624]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	650b      	str	r3, [r1, #80]	; 0x50
 8002a06:	e001      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d049      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d02e      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002a22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a26:	d828      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a2c:	d02a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a32:	d822      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a38:	d026      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002a3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a3e:	d81c      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a44:	d010      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a4a:	d816      	bhi.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01d      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d111      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 ffdd 	bl	8003a1c <RCCEx_PLL2_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a66:	e012      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3324      	adds	r3, #36	; 0x24
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f886 	bl	8003b80 <RCCEx_PLL3_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a78:	e009      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7e:	e006      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a80:	bf00      	nop
 8002a82:	e004      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a84:	bf00      	nop
 8002a86:	e002      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a94:	4b77      	ldr	r3, [pc, #476]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aa0:	4974      	ldr	r1, [pc, #464]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8002aa6:	e001      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d053      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002abe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ac2:	d034      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ac4:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ac8:	d82e      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ace:	d030      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad4:	d828      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ada:	d02c      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d822      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002ae2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ae6:	d028      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002ae8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002aec:	d81c      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af2:	d010      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af8:	d816      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d01f      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b02:	d111      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 ff86 	bl	8003a1c <RCCEx_PLL2_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b14:	e014      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3324      	adds	r3, #36	; 0x24
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f82f 	bl	8003b80 <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002b26:	e00b      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b2c:	e008      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e006      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b32:	bf00      	nop
 8002b34:	e004      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b46:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b54:	4947      	ldr	r1, [pc, #284]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	658b      	str	r3, [r1, #88]	; 0x58
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d02f      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b74:	d00e      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7a:	d814      	bhi.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d015      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b84:	d10f      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b86:	4b3b      	ldr	r3, [pc, #236]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b92:	e00c      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 ff3e 	bl	8003a1c <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ba4:	e003      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8002baa:	e000      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bb4:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	492c      	ldr	r1, [pc, #176]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8002bc6:	e001      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d032      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d81b      	bhi.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002be0:	a201      	add	r2, pc, #4	; (adr r2, 8002be8 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002c1f 	.word	0x08002c1f
 8002bec:	08002bf9 	.word	0x08002bf9
 8002bf0:	08002c07 	.word	0x08002c07
 8002bf4:	08002c1f 	.word	0x08002c1f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c04:	e00c      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 ff05 	bl	8003a1c <RCCEx_PLL2_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c16:	e003      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	f023 0203 	bic.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4910      	ldr	r1, [pc, #64]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c38:	e001      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 808a 	beq.w	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fa22 	bl	80010a0 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fa1e 	bl	80010a0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b64      	cmp	r3, #100	; 0x64
 8002c6c:	d906      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	75fb      	strb	r3, [r7, #23]
        break;
 8002c72:	e009      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002c74:	58024400 	.word	0x58024400
 8002c78:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7c:	4bba      	ldr	r3, [pc, #744]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0eb      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d166      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c8e:	4bb7      	ldr	r3, [pc, #732]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c98:	4053      	eors	r3, r2
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d013      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca2:	4bb2      	ldr	r3, [pc, #712]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002caa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cac:	4baf      	ldr	r3, [pc, #700]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4aae      	ldr	r2, [pc, #696]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb8:	4bac      	ldr	r3, [pc, #688]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	4aab      	ldr	r2, [pc, #684]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cc4:	4aa9      	ldr	r2, [pc, #676]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd4:	d115      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe f9e3 	bl	80010a0 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe f9df 	bl	80010a0 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d902      	bls.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	75fb      	strb	r3, [r7, #23]
            break;
 8002cf4:	e005      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf6:	4b9d      	ldr	r3, [pc, #628]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ed      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d126      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d16:	d10d      	bne.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002d18:	4b94      	ldr	r3, [pc, #592]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d26:	0919      	lsrs	r1, r3, #4
 8002d28:	4b91      	ldr	r3, [pc, #580]	; (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	498f      	ldr	r1, [pc, #572]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	610b      	str	r3, [r1, #16]
 8002d32:	e005      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002d34:	4b8d      	ldr	r3, [pc, #564]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4a8c      	ldr	r2, [pc, #560]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d3e:	6113      	str	r3, [r2, #16]
 8002d40:	4b8a      	ldr	r3, [pc, #552]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	4987      	ldr	r1, [pc, #540]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	670b      	str	r3, [r1, #112]	; 0x70
 8002d54:	e004      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	75bb      	strb	r3, [r7, #22]
 8002d5a:	e001      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07f      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d72:	2b28      	cmp	r3, #40	; 0x28
 8002d74:	d866      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002e4b 	.word	0x08002e4b
 8002d80:	08002e45 	.word	0x08002e45
 8002d84:	08002e45 	.word	0x08002e45
 8002d88:	08002e45 	.word	0x08002e45
 8002d8c:	08002e45 	.word	0x08002e45
 8002d90:	08002e45 	.word	0x08002e45
 8002d94:	08002e45 	.word	0x08002e45
 8002d98:	08002e45 	.word	0x08002e45
 8002d9c:	08002e21 	.word	0x08002e21
 8002da0:	08002e45 	.word	0x08002e45
 8002da4:	08002e45 	.word	0x08002e45
 8002da8:	08002e45 	.word	0x08002e45
 8002dac:	08002e45 	.word	0x08002e45
 8002db0:	08002e45 	.word	0x08002e45
 8002db4:	08002e45 	.word	0x08002e45
 8002db8:	08002e45 	.word	0x08002e45
 8002dbc:	08002e33 	.word	0x08002e33
 8002dc0:	08002e45 	.word	0x08002e45
 8002dc4:	08002e45 	.word	0x08002e45
 8002dc8:	08002e45 	.word	0x08002e45
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e45 	.word	0x08002e45
 8002ddc:	08002e4b 	.word	0x08002e4b
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e45 	.word	0x08002e45
 8002de8:	08002e45 	.word	0x08002e45
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e45 	.word	0x08002e45
 8002dfc:	08002e4b 	.word	0x08002e4b
 8002e00:	08002e45 	.word	0x08002e45
 8002e04:	08002e45 	.word	0x08002e45
 8002e08:	08002e45 	.word	0x08002e45
 8002e0c:	08002e45 	.word	0x08002e45
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e45 	.word	0x08002e45
 8002e18:	08002e45 	.word	0x08002e45
 8002e1c:	08002e4b 	.word	0x08002e4b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fdf8 	bl	8003a1c <RCCEx_PLL2_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e30:	e00c      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3324      	adds	r3, #36	; 0x24
 8002e36:	2101      	movs	r1, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fea1 	bl	8003b80 <RCCEx_PLL3_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e42:	e003      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	75fb      	strb	r3, [r7, #23]
      break;
 8002e48:	e000      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e52:	4b46      	ldr	r3, [pc, #280]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e60:	4942      	ldr	r1, [pc, #264]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	654b      	str	r3, [r1, #84]	; 0x54
 8002e66:	e001      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d038      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d821      	bhi.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002e80:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002ecb 	.word	0x08002ecb
 8002e8c:	08002ea1 	.word	0x08002ea1
 8002e90:	08002eb3 	.word	0x08002eb3
 8002e94:	08002ecb 	.word	0x08002ecb
 8002e98:	08002ecb 	.word	0x08002ecb
 8002e9c:	08002ecb 	.word	0x08002ecb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fdb8 	bl	8003a1c <RCCEx_PLL2_Config>
 8002eac:	4603      	mov	r3, r0
 8002eae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002eb0:	e00c      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	3324      	adds	r3, #36	; 0x24
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fe61 	bl	8003b80 <RCCEx_PLL3_Config>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ec2:	e003      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ec8:	e000      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f023 0207 	bic.w	r2, r3, #7
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ede:	4923      	ldr	r1, [pc, #140]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	654b      	str	r3, [r1, #84]	; 0x54
 8002ee4:	e001      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee6:	7dfb      	ldrb	r3, [r7, #23]
 8002ee8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d040      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d821      	bhi.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f4b 	.word	0x08002f4b
 8002f0c:	08002f21 	.word	0x08002f21
 8002f10:	08002f33 	.word	0x08002f33
 8002f14:	08002f4b 	.word	0x08002f4b
 8002f18:	08002f4b 	.word	0x08002f4b
 8002f1c:	08002f4b 	.word	0x08002f4b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3304      	adds	r3, #4
 8002f24:	2101      	movs	r1, #1
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fd78 	bl	8003a1c <RCCEx_PLL2_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f30:	e00c      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3324      	adds	r3, #36	; 0x24
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fe21 	bl	8003b80 <RCCEx_PLL3_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f42:	e003      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	75fb      	strb	r3, [r7, #23]
      break;
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d110      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f60:	4902      	ldr	r1, [pc, #8]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	658b      	str	r3, [r1, #88]	; 0x58
 8002f66:	e007      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002f68:	58024800 	.word	0x58024800
 8002f6c:	58024400 	.word	0x58024400
 8002f70:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d04b      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f8e:	d02e      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f94:	d828      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9a:	d02a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d822      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fa6:	d026      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fac:	d81c      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb8:	d816      	bhi.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01d      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fc2:	d111      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fd26 	bl	8003a1c <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fd4:	e012      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3324      	adds	r3, #36	; 0x24
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fdcf 	bl	8003b80 <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fe6:	e009      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
      break;
 8002fec:	e006      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e004      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003002:	4bb3      	ldr	r3, [pc, #716]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003010:	49af      	ldr	r1, [pc, #700]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003012:	4313      	orrs	r3, r2
 8003014:	654b      	str	r3, [r1, #84]	; 0x54
 8003016:	e001      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d04b      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800302e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003032:	d02e      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003038:	d828      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800303a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303e:	d02a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003044:	d822      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800304a:	d026      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800304c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003050:	d81c      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003056:	d010      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800305c:	d816      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01d      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d111      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fcd4 	bl	8003a1c <RCCEx_PLL2_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003078:	e012      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3324      	adds	r3, #36	; 0x24
 800307e:	2102      	movs	r1, #2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fd7d 	bl	8003b80 <RCCEx_PLL3_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800308a:	e009      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003092:	bf00      	nop
 8003094:	e004      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003096:	bf00      	nop
 8003098:	e002      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800309a:	bf00      	nop
 800309c:	e000      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800309e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030a6:	4b8a      	ldr	r3, [pc, #552]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030b4:	4986      	ldr	r1, [pc, #536]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	658b      	str	r3, [r1, #88]	; 0x58
 80030ba:	e001      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
 80030be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d04b      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80030d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030d6:	d02e      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80030d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030dc:	d828      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e2:	d02a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80030e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e8:	d822      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030ee:	d026      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80030f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030f4:	d81c      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80030f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030fa:	d010      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80030fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003100:	d816      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01d      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310a:	d111      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fc82 	bl	8003a1c <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800311c:	e012      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3324      	adds	r3, #36	; 0x24
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fd2b 	bl	8003b80 <RCCEx_PLL3_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800312e:	e009      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003136:	bf00      	nop
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003158:	495d      	ldr	r1, [pc, #372]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800315a:	4313      	orrs	r3, r2
 800315c:	658b      	str	r3, [r1, #88]	; 0x58
 800315e:	e001      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01a      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800317a:	d10a      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3324      	adds	r3, #36	; 0x24
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fcfc 	bl	8003b80 <RCCEx_PLL3_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003192:	4b4f      	ldr	r3, [pc, #316]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	494b      	ldr	r1, [pc, #300]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031bc:	d10a      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3324      	adds	r3, #36	; 0x24
 80031c2:	2102      	movs	r1, #2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fcdb 	bl	8003b80 <RCCEx_PLL3_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d4:	4b3e      	ldr	r3, [pc, #248]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031e2:	493b      	ldr	r1, [pc, #236]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d034      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031fe:	d01d      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003204:	d817      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d009      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003210:	e011      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbff 	bl	8003a1c <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003222:	e00c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3324      	adds	r3, #36	; 0x24
 8003228:	2102      	movs	r1, #2
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fca8 	bl	8003b80 <RCCEx_PLL3_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	75fb      	strb	r3, [r7, #23]
      break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800323c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003252:	491f      	ldr	r1, [pc, #124]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003254:	4313      	orrs	r3, r2
 8003256:	658b      	str	r3, [r1, #88]	; 0x58
 8003258:	e001      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d036      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003270:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003274:	d01c      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003276:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800327a:	d816      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800327c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003280:	d003      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003286:	d007      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003288:	e00f      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	4a10      	ldr	r2, [pc, #64]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003294:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003296:	e00c      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3324      	adds	r3, #36	; 0x24
 800329c:	2101      	movs	r1, #1
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fc6e 	bl	8003b80 <RCCEx_PLL3_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032a8:	e003      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
      break;
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80032b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032c6:	4902      	ldr	r1, [pc, #8]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	654b      	str	r3, [r1, #84]	; 0x54
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d029      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f0:	d007      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80032f2:	e00f      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b69      	ldr	r3, [pc, #420]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a68      	ldr	r2, [pc, #416]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003300:	e00b      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fb87 	bl	8003a1c <RCCEx_PLL2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003312:	e002      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003320:	4b5e      	ldr	r3, [pc, #376]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003324:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332c:	495b      	ldr	r1, [pc, #364]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800332e:	4313      	orrs	r3, r2
 8003330:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003332:	e001      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3324      	adds	r3, #36	; 0x24
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fc18 	bl	8003b80 <RCCEx_PLL3_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d032      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003370:	d017      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8003372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003376:	d811      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800337c:	d013      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800337e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003382:	d80b      	bhi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d010      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d106      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	4a42      	ldr	r2, [pc, #264]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003398:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800339a:	e007      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	75fb      	strb	r3, [r7, #23]
      break;
 80033a0:	e004      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80033aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033b2:	4b3a      	ldr	r3, [pc, #232]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c0:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	654b      	str	r3, [r1, #84]	; 0x54
 80033c6:	e001      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d8:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033e4:	492d      	ldr	r1, [pc, #180]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80033f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003402:	4926      	ldr	r1, [pc, #152]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003404:	4313      	orrs	r3, r2
 8003406:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003414:	4b21      	ldr	r3, [pc, #132]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	491e      	ldr	r1, [pc, #120]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003422:	4313      	orrs	r3, r2
 8003424:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003432:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800343c:	6113      	str	r3, [r2, #16]
 800343e:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003448:	4914      	ldr	r1, [pc, #80]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800344a:	4313      	orrs	r3, r2
 800344c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	da08      	bge.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003462:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003464:	4313      	orrs	r3, r2
 8003466:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003484:	4313      	orrs	r3, r2
 8003486:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003488:	7dbb      	ldrb	r3, [r7, #22]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	58024400 	.word	0x58024400

080034a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80034a4:	f7ff f894 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4904      	ldr	r1, [pc, #16]	; (80034c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	58024400 	.word	0x58024400
 80034c8:	08007050 	.word	0x08007050

080034cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d4:	4ba1      	ldr	r3, [pc, #644]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034de:	4b9f      	ldr	r3, [pc, #636]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	0b1b      	lsrs	r3, r3, #12
 80034e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034ea:	4b9c      	ldr	r3, [pc, #624]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034f6:	4b99      	ldr	r3, [pc, #612]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8111 	beq.w	800373c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b02      	cmp	r3, #2
 800351e:	f000 8083 	beq.w	8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b02      	cmp	r3, #2
 8003526:	f200 80a1 	bhi.w	800366c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d056      	beq.n	80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003536:	e099      	b.n	800366c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003538:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02d      	beq.n	80035a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003544:	4b85      	ldr	r3, [pc, #532]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	4a84      	ldr	r2, [pc, #528]	; (8003760 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b7b      	ldr	r3, [pc, #492]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003582:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800359e:	e087      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003768 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80035ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b2:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035e2:	e065      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800376c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003606:	ed97 6a03 	vldr	s12, [r7, #12]
 800360a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800360e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003626:	e043      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363a:	4b48      	ldr	r3, [pc, #288]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a03 	vldr	s12, [r7, #12]
 800364e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800366a:	e021      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800376c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003692:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	0a5b      	lsrs	r3, r3, #9
 80036b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d6:	ee17 2a90 	vmov	r2, s15
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003704:	ee17 2a90 	vmov	r2, s15
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	0e1b      	lsrs	r3, r3, #24
 8003712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003726:	edd7 6a07 	vldr	s13, [r7, #28]
 800372a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003732:	ee17 2a90 	vmov	r2, s15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800373a:	e008      	b.n	800374e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	58024400 	.word	0x58024400
 8003760:	03d09000 	.word	0x03d09000
 8003764:	46000000 	.word	0x46000000
 8003768:	4c742400 	.word	0x4c742400
 800376c:	4a742400 	.word	0x4a742400
 8003770:	4bb71b00 	.word	0x4bb71b00

08003774 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800377c:	4ba1      	ldr	r3, [pc, #644]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003786:	4b9f      	ldr	r3, [pc, #636]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	0d1b      	lsrs	r3, r3, #20
 800378c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003790:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003792:	4b9c      	ldr	r3, [pc, #624]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800379e:	4b99      	ldr	r3, [pc, #612]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8111 	beq.w	80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f000 8083 	beq.w	80038d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f200 80a1 	bhi.w	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d056      	beq.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037de:	e099      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e0:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02d      	beq.n	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037ec:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	4a84      	ldr	r2, [pc, #528]	; (8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003846:	e087      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a03 	vldr	s12, [r7, #12]
 800386e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800388a:	e065      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b59      	ldr	r3, [pc, #356]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ce:	e043      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003912:	e021      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003926:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003936:	ed97 6a03 	vldr	s12, [r7, #12]
 800393a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003956:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003958:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	0a5b      	lsrs	r3, r3, #9
 800395e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800396e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003972:	edd7 6a07 	vldr	s13, [r7, #28]
 8003976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397e:	ee17 2a90 	vmov	r2, s15
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003986:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ac:	ee17 2a90 	vmov	r2, s15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	0e1b      	lsrs	r3, r3, #24
 80039ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80039d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039da:	ee17 2a90 	vmov	r2, s15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
 8003a08:	03d09000 	.word	0x03d09000
 8003a0c:	46000000 	.word	0x46000000
 8003a10:	4c742400 	.word	0x4c742400
 8003a14:	4a742400 	.word	0x4a742400
 8003a18:	4bb71b00 	.word	0x4bb71b00

08003a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a2a:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d101      	bne.n	8003a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e099      	b.n	8003b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a3a:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4e      	ldr	r2, [pc, #312]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a46:	f7fd fb2b 	bl	80010a0 <HAL_GetTick>
 8003a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a4e:	f7fd fb27 	bl	80010a0 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e086      	b.n	8003b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	493f      	ldr	r1, [pc, #252]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	025b      	lsls	r3, r3, #9
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ab0:	4931      	ldr	r1, [pc, #196]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ab6:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	492d      	ldr	r1, [pc, #180]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	f023 0220 	bic.w	r2, r3, #32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4928      	ldr	r1, [pc, #160]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ada:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <RCCEx_PLL2_Config+0x160>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	69d2      	ldr	r2, [r2, #28]
 8003af2:	00d2      	lsls	r2, r2, #3
 8003af4:	4920      	ldr	r1, [pc, #128]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b18:	e00f      	b.n	8003b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b20:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b2c:	e005      	b.n	8003b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd faab 	bl	80010a0 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b4c:	e008      	b.n	8003b60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b4e:	f7fd faa7 	bl	80010a0 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	ffff0007 	.word	0xffff0007

08003b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d101      	bne.n	8003b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e099      	b.n	8003cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003baa:	f7fd fa79 	bl	80010a0 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bb2:	f7fd fa75 	bl	80010a0 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e086      	b.n	8003cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bc4:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bd0:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	493f      	ldr	r1, [pc, #252]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	628b      	str	r3, [r1, #40]	; 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c14:	4931      	ldr	r1, [pc, #196]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c1a:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	492d      	ldr	r1, [pc, #180]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	4928      	ldr	r1, [pc, #160]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c3e:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <RCCEx_PLL3_Config+0x160>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	69d2      	ldr	r2, [r2, #28]
 8003c56:	00d2      	lsls	r2, r2, #3
 8003c58:	4920      	ldr	r1, [pc, #128]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c7c:	e00f      	b.n	8003c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c90:	e005      	b.n	8003c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd f9f9 	bl	80010a0 <HAL_GetTick>
 8003cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cb2:	f7fd f9f5 	bl	80010a0 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e006      	b.n	8003cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	ffff0007 	.word	0xffff0007

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e049      	b.n	8003d8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f814 	bl	8000d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 fccc 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e049      	b.n	8003e38 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f000 f841 	bl	8003e40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	4619      	mov	r1, r3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f000 fc75 	bl	80046c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_IC_Start_IT+0x1e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	e023      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x66>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_IC_Start_IT+0x2e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e01b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x66>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_IC_Start_IT+0x3e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e013      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x66>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_IC_Start_IT+0x4e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x66>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0x5e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e003      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x66>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <HAL_TIM_IC_Start_IT+0x78>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	e013      	b.n	8003ef4 <HAL_TIM_IC_Start_IT+0xa0>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d104      	bne.n	8003edc <HAL_TIM_IC_Start_IT+0x88>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e00b      	b.n	8003ef4 <HAL_TIM_IC_Start_IT+0xa0>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d104      	bne.n	8003eec <HAL_TIM_IC_Start_IT+0x98>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e003      	b.n	8003ef4 <HAL_TIM_IC_Start_IT+0xa0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef6:	7bbb      	ldrb	r3, [r7, #14]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d102      	bne.n	8003f02 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003efc:	7b7b      	ldrb	r3, [r7, #13]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d001      	beq.n	8003f06 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e0e2      	b.n	80040cc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_IC_Start_IT+0xc2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f14:	e023      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x10a>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d104      	bne.n	8003f26 <HAL_TIM_IC_Start_IT+0xd2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f24:	e01b      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x10a>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_IC_Start_IT+0xe2>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f34:	e013      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x10a>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_IC_Start_IT+0xf2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f44:	e00b      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x10a>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b10      	cmp	r3, #16
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_IC_Start_IT+0x102>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	e003      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x10a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_IC_Start_IT+0x11a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6c:	e013      	b.n	8003f96 <HAL_TIM_IC_Start_IT+0x142>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_IC_Start_IT+0x12a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7c:	e00b      	b.n	8003f96 <HAL_TIM_IC_Start_IT+0x142>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d104      	bne.n	8003f8e <HAL_TIM_IC_Start_IT+0x13a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f8c:	e003      	b.n	8003f96 <HAL_TIM_IC_Start_IT+0x142>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d841      	bhi.n	8004020 <HAL_TIM_IC_Start_IT+0x1cc>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <HAL_TIM_IC_Start_IT+0x150>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08004021 	.word	0x08004021
 8003fac:	08004021 	.word	0x08004021
 8003fb0:	08004021 	.word	0x08004021
 8003fb4:	08003feb 	.word	0x08003feb
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08004021 	.word	0x08004021
 8003fc0:	08004021 	.word	0x08004021
 8003fc4:	08003ffd 	.word	0x08003ffd
 8003fc8:	08004021 	.word	0x08004021
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08004021 	.word	0x08004021
 8003fd4:	0800400f 	.word	0x0800400f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0202 	orr.w	r2, r2, #2
 8003fe6:	60da      	str	r2, [r3, #12]
      break;
 8003fe8:	e01d      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0204 	orr.w	r2, r2, #4
 8003ff8:	60da      	str	r2, [r3, #12]
      break;
 8003ffa:	e014      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	60da      	str	r2, [r3, #12]
      break;
 800400c:	e00b      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0210 	orr.w	r2, r2, #16
 800401c:	60da      	str	r2, [r3, #12]
      break;
 800401e:	e002      	b.n	8004026 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	bf00      	nop
  }

  if (status == HAL_OK)
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d14e      	bne.n	80040ca <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fda5 	bl	8004b84 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <HAL_TIM_IC_Start_IT+0x280>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d01d      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <HAL_TIM_IC_Start_IT+0x284>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <HAL_TIM_IC_Start_IT+0x288>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_TIM_IC_Start_IT+0x28c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1c      	ldr	r2, [pc, #112]	; (80040e4 <HAL_TIM_IC_Start_IT+0x290>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <HAL_TIM_IC_Start_IT+0x294>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIM_IC_Start_IT+0x236>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_TIM_IC_Start_IT+0x298>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d115      	bne.n	80040b6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <HAL_TIM_IC_Start_IT+0x29c>)
 8004092:	4013      	ands	r3, r2
 8004094:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b06      	cmp	r3, #6
 800409a:	d015      	beq.n	80040c8 <HAL_TIM_IC_Start_IT+0x274>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a2:	d011      	beq.n	80040c8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b4:	e008      	b.n	80040c8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e000      	b.n	80040ca <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40001800 	.word	0x40001800
 80040ec:	40014000 	.word	0x40014000
 80040f0:	00010007 	.word	0x00010007

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0202 	mvn.w	r2, #2
 8004120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 faa4 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fa96 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 faa7 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fa7a 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fa6c 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa7d 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0208 	mvn.w	r2, #8
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2204      	movs	r2, #4
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa50 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa42 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa53 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa26 	bl	8004684 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fa18 	bl	8004670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa29 	bl	8004698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9f2 	bl	800465c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fd2e 	bl	8004d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d10e      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fd21 	bl	8004d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d10e      	bne.n	80042fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f9d7 	bl	80046ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b20      	cmp	r3, #32
 800430a:	d10e      	bne.n	800432a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b20      	cmp	r3, #32
 8004318:	d107      	bne.n	800432a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0220 	mvn.w	r2, #32
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fce1 	bl	8004cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIM_IC_ConfigChannel+0x1e>
 800434c:	2302      	movs	r3, #2
 800434e:	e088      	b.n	8004462 <HAL_TIM_IC_ConfigChannel+0x130>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d11b      	bne.n	8004396 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f000 fa41 	bl	80047f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 020c 	bic.w	r2, r2, #12
 8004380:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6999      	ldr	r1, [r3, #24]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	619a      	str	r2, [r3, #24]
 8004394:	e060      	b.n	8004458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d11c      	bne.n	80043d6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f000 fac5 	bl	800493a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699a      	ldr	r2, [r3, #24]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6999      	ldr	r1, [r3, #24]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	021a      	lsls	r2, r3, #8
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	619a      	str	r2, [r3, #24]
 80043d4:	e040      	b.n	8004458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d11b      	bne.n	8004414 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6819      	ldr	r1, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f000 fb12 	bl	8004a14 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 020c 	bic.w	r2, r2, #12
 80043fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69d9      	ldr	r1, [r3, #28]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	61da      	str	r2, [r3, #28]
 8004412:	e021      	b.n	8004458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d11c      	bne.n	8004454 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f000 fb2f 	bl	8004a8c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800443c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69d9      	ldr	r1, [r3, #28]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	61da      	str	r2, [r3, #28]
 8004452:	e001      	b.n	8004458 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_TIM_ConfigClockSource+0x1c>
 8004484:	2302      	movs	r3, #2
 8004486:	e0dc      	b.n	8004642 <HAL_TIM_ConfigClockSource+0x1d6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_TIM_ConfigClockSource+0x1e0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a64      	ldr	r2, [pc, #400]	; (8004650 <HAL_TIM_ConfigClockSource+0x1e4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	f000 80a9 	beq.w	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 80044c4:	4a62      	ldr	r2, [pc, #392]	; (8004650 <HAL_TIM_ConfigClockSource+0x1e4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	f200 80ae 	bhi.w	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 80044cc:	4a61      	ldr	r2, [pc, #388]	; (8004654 <HAL_TIM_ConfigClockSource+0x1e8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f000 80a1 	beq.w	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 80044d4:	4a5f      	ldr	r2, [pc, #380]	; (8004654 <HAL_TIM_ConfigClockSource+0x1e8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	f200 80a6 	bhi.w	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 80044dc:	4a5e      	ldr	r2, [pc, #376]	; (8004658 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f000 8099 	beq.w	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 80044e4:	4a5c      	ldr	r2, [pc, #368]	; (8004658 <HAL_TIM_ConfigClockSource+0x1ec>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f200 809e 	bhi.w	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 80044ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80044f0:	f000 8091 	beq.w	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 80044f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80044f8:	f200 8096 	bhi.w	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 80044fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004500:	f000 8089 	beq.w	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 8004504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004508:	f200 808e 	bhi.w	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 800450c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004510:	d03e      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x124>
 8004512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004516:	f200 8087 	bhi.w	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 800451a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451e:	f000 8086 	beq.w	800462e <HAL_TIM_ConfigClockSource+0x1c2>
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	d87f      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004528:	2b70      	cmp	r3, #112	; 0x70
 800452a:	d01a      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0xf6>
 800452c:	2b70      	cmp	r3, #112	; 0x70
 800452e:	d87b      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004530:	2b60      	cmp	r3, #96	; 0x60
 8004532:	d050      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0x16a>
 8004534:	2b60      	cmp	r3, #96	; 0x60
 8004536:	d877      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004538:	2b50      	cmp	r3, #80	; 0x50
 800453a:	d03c      	beq.n	80045b6 <HAL_TIM_ConfigClockSource+0x14a>
 800453c:	2b50      	cmp	r3, #80	; 0x50
 800453e:	d873      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004540:	2b40      	cmp	r3, #64	; 0x40
 8004542:	d058      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x18a>
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	d86f      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004548:	2b30      	cmp	r3, #48	; 0x30
 800454a:	d064      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 800454c:	2b30      	cmp	r3, #48	; 0x30
 800454e:	d86b      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004550:	2b20      	cmp	r3, #32
 8004552:	d060      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 8004554:	2b20      	cmp	r3, #32
 8004556:	d867      	bhi.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d05c      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 800455c:	2b10      	cmp	r3, #16
 800455e:	d05a      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x1aa>
 8004560:	e062      	b.n	8004628 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6899      	ldr	r1, [r3, #8]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f000 fae7 	bl	8004b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]
      break;
 800458e:	e04f      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6899      	ldr	r1, [r3, #8]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f000 fad0 	bl	8004b44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b2:	609a      	str	r2, [r3, #8]
      break;
 80045b4:	e03c      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f000 f98a 	bl	80048dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2150      	movs	r1, #80	; 0x50
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fa9a 	bl	8004b08 <TIM_ITRx_SetConfig>
      break;
 80045d4:	e02c      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f000 f9e6 	bl	80049b4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2160      	movs	r1, #96	; 0x60
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fa8a 	bl	8004b08 <TIM_ITRx_SetConfig>
      break;
 80045f4:	e01c      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	461a      	mov	r2, r3
 8004604:	f000 f96a 	bl	80048dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2140      	movs	r1, #64	; 0x40
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fa7a 	bl	8004b08 <TIM_ITRx_SetConfig>
      break;
 8004614:	e00c      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f000 fa71 	bl	8004b08 <TIM_ITRx_SetConfig>
      break;
 8004626:	e003      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      break;
 800462c:	e000      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800462e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	ffceff88 	.word	0xffceff88
 8004650:	00100040 	.word	0x00100040
 8004654:	00100030 	.word	0x00100030
 8004658:	00100020 	.word	0x00100020

0800465c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a40      	ldr	r2, [pc, #256]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d00f      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3d      	ldr	r2, [pc, #244]	; (80047d8 <TIM_Base_SetConfig+0x118>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00b      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a3c      	ldr	r2, [pc, #240]	; (80047dc <TIM_Base_SetConfig+0x11c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d007      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <TIM_Base_SetConfig+0x120>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d003      	beq.n	8004700 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a3a      	ldr	r2, [pc, #232]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d108      	bne.n	8004712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2f      	ldr	r2, [pc, #188]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01f      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004720:	d01b      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2c      	ldr	r2, [pc, #176]	; (80047d8 <TIM_Base_SetConfig+0x118>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d017      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2b      	ldr	r2, [pc, #172]	; (80047dc <TIM_Base_SetConfig+0x11c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2a      	ldr	r2, [pc, #168]	; (80047e0 <TIM_Base_SetConfig+0x120>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a29      	ldr	r2, [pc, #164]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a28      	ldr	r2, [pc, #160]	; (80047e8 <TIM_Base_SetConfig+0x128>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a27      	ldr	r2, [pc, #156]	; (80047ec <TIM_Base_SetConfig+0x12c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0x9a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <TIM_Base_SetConfig+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <TIM_Base_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00f      	beq.n	80047b8 <TIM_Base_SetConfig+0xf8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a12      	ldr	r2, [pc, #72]	; (80047e4 <TIM_Base_SetConfig+0x124>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_Base_SetConfig+0xf8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <TIM_Base_SetConfig+0x128>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_Base_SetConfig+0xf8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <TIM_Base_SetConfig+0x12c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_Base_SetConfig+0xf8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0f      	ldr	r2, [pc, #60]	; (80047f0 <TIM_Base_SetConfig+0x130>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	615a      	str	r2, [r3, #20]
}
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800

080047f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a28      	ldr	r2, [pc, #160]	; (80048c0 <TIM_TI1_SetConfig+0xcc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01b      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d017      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <TIM_TI1_SetConfig+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a24      	ldr	r2, [pc, #144]	; (80048c8 <TIM_TI1_SetConfig+0xd4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00f      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a23      	ldr	r2, [pc, #140]	; (80048cc <TIM_TI1_SetConfig+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <TIM_TI1_SetConfig+0xdc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <TIM_TI1_SetConfig+0xe0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <TIM_TI1_SetConfig+0x66>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a20      	ldr	r2, [pc, #128]	; (80048d8 <TIM_TI1_SetConfig+0xe4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <TIM_TI1_SetConfig+0x6a>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <TIM_TI1_SetConfig+0x6c>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e003      	b.n	800487e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	b2db      	uxtb	r3, r3
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f023 030a 	bic.w	r3, r3, #10
 8004898:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 030a 	and.w	r3, r3, #10
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40010400 	.word	0x40010400
 80048d4:	40001800 	.word	0x40001800
 80048d8:	40014000 	.word	0x40014000

080048dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 030a 	bic.w	r3, r3, #10
 8004918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800493a:	b480      	push	{r7}
 800493c:	b087      	sub	sp, #28
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f023 0210 	bic.w	r2, r3, #16
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004966:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	031b      	lsls	r3, r3, #12
 800497e:	b29b      	uxth	r3, r3
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800498c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	621a      	str	r2, [r3, #32]
}
 80049a8:	bf00      	nop
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f023 0210 	bic.w	r2, r3, #16
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	031b      	lsls	r3, r3, #12
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	621a      	str	r2, [r3, #32]
}
 8004a08:	bf00      	nop
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b087      	sub	sp, #28
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 0303 	bic.w	r3, r3, #3
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a64:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	031b      	lsls	r3, r3, #12
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ade:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	031b      	lsls	r3, r3, #12
 8004ae4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	621a      	str	r2, [r3, #32]
}
 8004afa:	bf00      	nop
 8004afc:	371c      	adds	r7, #28
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <TIM_ITRx_SetConfig+0x38>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f043 0307 	orr.w	r3, r3, #7
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	ffcfff8f 	.word	0xffcfff8f

08004b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	021a      	lsls	r2, r3, #8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 031f 	and.w	r3, r3, #31
 8004b96:	2201      	movs	r2, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1a      	ldr	r2, [r3, #32]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	401a      	ands	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1a      	ldr	r2, [r3, #32]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e06d      	b.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d108      	bne.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a20      	ldr	r2, [pc, #128]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d01d      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1a      	ldr	r2, [pc, #104]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d10c      	bne.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40010400 	.word	0x40010400
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40001800 	.word	0x40001800
 8004ce8:	40014000 	.word	0x40014000

08004cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e042      	b.n	8004dc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7fc f891 	bl	8000e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2224      	movs	r2, #36	; 0x24
 8004d56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8c2 	bl	8004ef4 <UART_SetConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e022      	b.n	8004dc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 ff14 	bl	8005bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 ff9b 	bl	8005cf4 <UART_CheckIdleState>
 8004dbe:	4603      	mov	r3, r0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af02      	add	r7, sp, #8
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	f040 8083 	bne.w	8004eea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_UART_Transmit+0x28>
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e07b      	b.n	8004eec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Transmit+0x3a>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e074      	b.n	8004eec <HAL_UART_Transmit+0x124>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fc f941 	bl	80010a0 <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e38:	d108      	bne.n	8004e4c <HAL_UART_Transmit+0x84>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e003      	b.n	8004e54 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004e5c:	e02c      	b.n	8004eb8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2200      	movs	r2, #0
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 ff8e 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e039      	b.n	8004eec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3302      	adds	r3, #2
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	e007      	b.n	8004ea6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1cc      	bne.n	8004e5e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 ff5b 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e000      	b.n	8004eec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004eea:	2302      	movs	r3, #2
  }
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b08e      	sub	sp, #56	; 0x38
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4bbf      	ldr	r3, [pc, #764]	; (8005220 <UART_SetConfig+0x32c>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4ab5      	ldr	r2, [pc, #724]	; (8005224 <UART_SetConfig+0x330>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	4bb0      	ldr	r3, [pc, #704]	; (8005228 <UART_SetConfig+0x334>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f023 010f 	bic.w	r1, r3, #15
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4aa7      	ldr	r2, [pc, #668]	; (800522c <UART_SetConfig+0x338>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d176      	bne.n	8005080 <UART_SetConfig+0x18c>
 8004f92:	4ba7      	ldr	r3, [pc, #668]	; (8005230 <UART_SetConfig+0x33c>)
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f9a:	2b28      	cmp	r3, #40	; 0x28
 8004f9c:	d86c      	bhi.n	8005078 <UART_SetConfig+0x184>
 8004f9e:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0xb0>)
 8004fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa4:	08005049 	.word	0x08005049
 8004fa8:	08005079 	.word	0x08005079
 8004fac:	08005079 	.word	0x08005079
 8004fb0:	08005079 	.word	0x08005079
 8004fb4:	08005079 	.word	0x08005079
 8004fb8:	08005079 	.word	0x08005079
 8004fbc:	08005079 	.word	0x08005079
 8004fc0:	08005079 	.word	0x08005079
 8004fc4:	08005051 	.word	0x08005051
 8004fc8:	08005079 	.word	0x08005079
 8004fcc:	08005079 	.word	0x08005079
 8004fd0:	08005079 	.word	0x08005079
 8004fd4:	08005079 	.word	0x08005079
 8004fd8:	08005079 	.word	0x08005079
 8004fdc:	08005079 	.word	0x08005079
 8004fe0:	08005079 	.word	0x08005079
 8004fe4:	08005059 	.word	0x08005059
 8004fe8:	08005079 	.word	0x08005079
 8004fec:	08005079 	.word	0x08005079
 8004ff0:	08005079 	.word	0x08005079
 8004ff4:	08005079 	.word	0x08005079
 8004ff8:	08005079 	.word	0x08005079
 8004ffc:	08005079 	.word	0x08005079
 8005000:	08005079 	.word	0x08005079
 8005004:	08005061 	.word	0x08005061
 8005008:	08005079 	.word	0x08005079
 800500c:	08005079 	.word	0x08005079
 8005010:	08005079 	.word	0x08005079
 8005014:	08005079 	.word	0x08005079
 8005018:	08005079 	.word	0x08005079
 800501c:	08005079 	.word	0x08005079
 8005020:	08005079 	.word	0x08005079
 8005024:	08005069 	.word	0x08005069
 8005028:	08005079 	.word	0x08005079
 800502c:	08005079 	.word	0x08005079
 8005030:	08005079 	.word	0x08005079
 8005034:	08005079 	.word	0x08005079
 8005038:	08005079 	.word	0x08005079
 800503c:	08005079 	.word	0x08005079
 8005040:	08005079 	.word	0x08005079
 8005044:	08005071 	.word	0x08005071
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e326      	b.n	800569e <UART_SetConfig+0x7aa>
 8005050:	2304      	movs	r3, #4
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e322      	b.n	800569e <UART_SetConfig+0x7aa>
 8005058:	2308      	movs	r3, #8
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505e:	e31e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005060:	2310      	movs	r3, #16
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005066:	e31a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005068:	2320      	movs	r3, #32
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800506e:	e316      	b.n	800569e <UART_SetConfig+0x7aa>
 8005070:	2340      	movs	r3, #64	; 0x40
 8005072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005076:	e312      	b.n	800569e <UART_SetConfig+0x7aa>
 8005078:	2380      	movs	r3, #128	; 0x80
 800507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800507e:	e30e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6b      	ldr	r2, [pc, #428]	; (8005234 <UART_SetConfig+0x340>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d130      	bne.n	80050ec <UART_SetConfig+0x1f8>
 800508a:	4b69      	ldr	r3, [pc, #420]	; (8005230 <UART_SetConfig+0x33c>)
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	2b05      	cmp	r3, #5
 8005094:	d826      	bhi.n	80050e4 <UART_SetConfig+0x1f0>
 8005096:	a201      	add	r2, pc, #4	; (adr r2, 800509c <UART_SetConfig+0x1a8>)
 8005098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050bd 	.word	0x080050bd
 80050a4:	080050c5 	.word	0x080050c5
 80050a8:	080050cd 	.word	0x080050cd
 80050ac:	080050d5 	.word	0x080050d5
 80050b0:	080050dd 	.word	0x080050dd
 80050b4:	2300      	movs	r3, #0
 80050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ba:	e2f0      	b.n	800569e <UART_SetConfig+0x7aa>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c2:	e2ec      	b.n	800569e <UART_SetConfig+0x7aa>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ca:	e2e8      	b.n	800569e <UART_SetConfig+0x7aa>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d2:	e2e4      	b.n	800569e <UART_SetConfig+0x7aa>
 80050d4:	2320      	movs	r3, #32
 80050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050da:	e2e0      	b.n	800569e <UART_SetConfig+0x7aa>
 80050dc:	2340      	movs	r3, #64	; 0x40
 80050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050e2:	e2dc      	b.n	800569e <UART_SetConfig+0x7aa>
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ea:	e2d8      	b.n	800569e <UART_SetConfig+0x7aa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <UART_SetConfig+0x344>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d130      	bne.n	8005158 <UART_SetConfig+0x264>
 80050f6:	4b4e      	ldr	r3, [pc, #312]	; (8005230 <UART_SetConfig+0x33c>)
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	2b05      	cmp	r3, #5
 8005100:	d826      	bhi.n	8005150 <UART_SetConfig+0x25c>
 8005102:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <UART_SetConfig+0x214>)
 8005104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005108:	08005121 	.word	0x08005121
 800510c:	08005129 	.word	0x08005129
 8005110:	08005131 	.word	0x08005131
 8005114:	08005139 	.word	0x08005139
 8005118:	08005141 	.word	0x08005141
 800511c:	08005149 	.word	0x08005149
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e2ba      	b.n	800569e <UART_SetConfig+0x7aa>
 8005128:	2304      	movs	r3, #4
 800512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512e:	e2b6      	b.n	800569e <UART_SetConfig+0x7aa>
 8005130:	2308      	movs	r3, #8
 8005132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005136:	e2b2      	b.n	800569e <UART_SetConfig+0x7aa>
 8005138:	2310      	movs	r3, #16
 800513a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513e:	e2ae      	b.n	800569e <UART_SetConfig+0x7aa>
 8005140:	2320      	movs	r3, #32
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	e2aa      	b.n	800569e <UART_SetConfig+0x7aa>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800514e:	e2a6      	b.n	800569e <UART_SetConfig+0x7aa>
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005156:	e2a2      	b.n	800569e <UART_SetConfig+0x7aa>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a37      	ldr	r2, [pc, #220]	; (800523c <UART_SetConfig+0x348>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d130      	bne.n	80051c4 <UART_SetConfig+0x2d0>
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <UART_SetConfig+0x33c>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b05      	cmp	r3, #5
 800516c:	d826      	bhi.n	80051bc <UART_SetConfig+0x2c8>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0x280>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	0800518d 	.word	0x0800518d
 8005178:	08005195 	.word	0x08005195
 800517c:	0800519d 	.word	0x0800519d
 8005180:	080051a5 	.word	0x080051a5
 8005184:	080051ad 	.word	0x080051ad
 8005188:	080051b5 	.word	0x080051b5
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005192:	e284      	b.n	800569e <UART_SetConfig+0x7aa>
 8005194:	2304      	movs	r3, #4
 8005196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519a:	e280      	b.n	800569e <UART_SetConfig+0x7aa>
 800519c:	2308      	movs	r3, #8
 800519e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a2:	e27c      	b.n	800569e <UART_SetConfig+0x7aa>
 80051a4:	2310      	movs	r3, #16
 80051a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051aa:	e278      	b.n	800569e <UART_SetConfig+0x7aa>
 80051ac:	2320      	movs	r3, #32
 80051ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b2:	e274      	b.n	800569e <UART_SetConfig+0x7aa>
 80051b4:	2340      	movs	r3, #64	; 0x40
 80051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ba:	e270      	b.n	800569e <UART_SetConfig+0x7aa>
 80051bc:	2380      	movs	r3, #128	; 0x80
 80051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051c2:	e26c      	b.n	800569e <UART_SetConfig+0x7aa>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <UART_SetConfig+0x34c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d142      	bne.n	8005254 <UART_SetConfig+0x360>
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <UART_SetConfig+0x33c>)
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d838      	bhi.n	800524c <UART_SetConfig+0x358>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x2ec>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	080051f9 	.word	0x080051f9
 80051e4:	08005201 	.word	0x08005201
 80051e8:	08005209 	.word	0x08005209
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005219 	.word	0x08005219
 80051f4:	08005245 	.word	0x08005245
 80051f8:	2300      	movs	r3, #0
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e24e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005200:	2304      	movs	r3, #4
 8005202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005206:	e24a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005208:	2308      	movs	r3, #8
 800520a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520e:	e246      	b.n	800569e <UART_SetConfig+0x7aa>
 8005210:	2310      	movs	r3, #16
 8005212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005216:	e242      	b.n	800569e <UART_SetConfig+0x7aa>
 8005218:	2320      	movs	r3, #32
 800521a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800521e:	e23e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005220:	cfff69f3 	.word	0xcfff69f3
 8005224:	58000c00 	.word	0x58000c00
 8005228:	11fff4ff 	.word	0x11fff4ff
 800522c:	40011000 	.word	0x40011000
 8005230:	58024400 	.word	0x58024400
 8005234:	40004400 	.word	0x40004400
 8005238:	40004800 	.word	0x40004800
 800523c:	40004c00 	.word	0x40004c00
 8005240:	40005000 	.word	0x40005000
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	e228      	b.n	800569e <UART_SetConfig+0x7aa>
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005252:	e224      	b.n	800569e <UART_SetConfig+0x7aa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4ab1      	ldr	r2, [pc, #708]	; (8005520 <UART_SetConfig+0x62c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d176      	bne.n	800534c <UART_SetConfig+0x458>
 800525e:	4bb1      	ldr	r3, [pc, #708]	; (8005524 <UART_SetConfig+0x630>)
 8005260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005266:	2b28      	cmp	r3, #40	; 0x28
 8005268:	d86c      	bhi.n	8005344 <UART_SetConfig+0x450>
 800526a:	a201      	add	r2, pc, #4	; (adr r2, 8005270 <UART_SetConfig+0x37c>)
 800526c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005270:	08005315 	.word	0x08005315
 8005274:	08005345 	.word	0x08005345
 8005278:	08005345 	.word	0x08005345
 800527c:	08005345 	.word	0x08005345
 8005280:	08005345 	.word	0x08005345
 8005284:	08005345 	.word	0x08005345
 8005288:	08005345 	.word	0x08005345
 800528c:	08005345 	.word	0x08005345
 8005290:	0800531d 	.word	0x0800531d
 8005294:	08005345 	.word	0x08005345
 8005298:	08005345 	.word	0x08005345
 800529c:	08005345 	.word	0x08005345
 80052a0:	08005345 	.word	0x08005345
 80052a4:	08005345 	.word	0x08005345
 80052a8:	08005345 	.word	0x08005345
 80052ac:	08005345 	.word	0x08005345
 80052b0:	08005325 	.word	0x08005325
 80052b4:	08005345 	.word	0x08005345
 80052b8:	08005345 	.word	0x08005345
 80052bc:	08005345 	.word	0x08005345
 80052c0:	08005345 	.word	0x08005345
 80052c4:	08005345 	.word	0x08005345
 80052c8:	08005345 	.word	0x08005345
 80052cc:	08005345 	.word	0x08005345
 80052d0:	0800532d 	.word	0x0800532d
 80052d4:	08005345 	.word	0x08005345
 80052d8:	08005345 	.word	0x08005345
 80052dc:	08005345 	.word	0x08005345
 80052e0:	08005345 	.word	0x08005345
 80052e4:	08005345 	.word	0x08005345
 80052e8:	08005345 	.word	0x08005345
 80052ec:	08005345 	.word	0x08005345
 80052f0:	08005335 	.word	0x08005335
 80052f4:	08005345 	.word	0x08005345
 80052f8:	08005345 	.word	0x08005345
 80052fc:	08005345 	.word	0x08005345
 8005300:	08005345 	.word	0x08005345
 8005304:	08005345 	.word	0x08005345
 8005308:	08005345 	.word	0x08005345
 800530c:	08005345 	.word	0x08005345
 8005310:	0800533d 	.word	0x0800533d
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531a:	e1c0      	b.n	800569e <UART_SetConfig+0x7aa>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005322:	e1bc      	b.n	800569e <UART_SetConfig+0x7aa>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532a:	e1b8      	b.n	800569e <UART_SetConfig+0x7aa>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005332:	e1b4      	b.n	800569e <UART_SetConfig+0x7aa>
 8005334:	2320      	movs	r3, #32
 8005336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533a:	e1b0      	b.n	800569e <UART_SetConfig+0x7aa>
 800533c:	2340      	movs	r3, #64	; 0x40
 800533e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005342:	e1ac      	b.n	800569e <UART_SetConfig+0x7aa>
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800534a:	e1a8      	b.n	800569e <UART_SetConfig+0x7aa>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a75      	ldr	r2, [pc, #468]	; (8005528 <UART_SetConfig+0x634>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d130      	bne.n	80053b8 <UART_SetConfig+0x4c4>
 8005356:	4b73      	ldr	r3, [pc, #460]	; (8005524 <UART_SetConfig+0x630>)
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	2b05      	cmp	r3, #5
 8005360:	d826      	bhi.n	80053b0 <UART_SetConfig+0x4bc>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x474>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005381 	.word	0x08005381
 800536c:	08005389 	.word	0x08005389
 8005370:	08005391 	.word	0x08005391
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005386:	e18a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538e:	e186      	b.n	800569e <UART_SetConfig+0x7aa>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005396:	e182      	b.n	800569e <UART_SetConfig+0x7aa>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539e:	e17e      	b.n	800569e <UART_SetConfig+0x7aa>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a6:	e17a      	b.n	800569e <UART_SetConfig+0x7aa>
 80053a8:	2340      	movs	r3, #64	; 0x40
 80053aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ae:	e176      	b.n	800569e <UART_SetConfig+0x7aa>
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	e172      	b.n	800569e <UART_SetConfig+0x7aa>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5b      	ldr	r2, [pc, #364]	; (800552c <UART_SetConfig+0x638>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d130      	bne.n	8005424 <UART_SetConfig+0x530>
 80053c2:	4b58      	ldr	r3, [pc, #352]	; (8005524 <UART_SetConfig+0x630>)
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d826      	bhi.n	800541c <UART_SetConfig+0x528>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <UART_SetConfig+0x4e0>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080053ed 	.word	0x080053ed
 80053d8:	080053f5 	.word	0x080053f5
 80053dc:	080053fd 	.word	0x080053fd
 80053e0:	08005405 	.word	0x08005405
 80053e4:	0800540d 	.word	0x0800540d
 80053e8:	08005415 	.word	0x08005415
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f2:	e154      	b.n	800569e <UART_SetConfig+0x7aa>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fa:	e150      	b.n	800569e <UART_SetConfig+0x7aa>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005402:	e14c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540a:	e148      	b.n	800569e <UART_SetConfig+0x7aa>
 800540c:	2320      	movs	r3, #32
 800540e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005412:	e144      	b.n	800569e <UART_SetConfig+0x7aa>
 8005414:	2340      	movs	r3, #64	; 0x40
 8005416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541a:	e140      	b.n	800569e <UART_SetConfig+0x7aa>
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005422:	e13c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a41      	ldr	r2, [pc, #260]	; (8005530 <UART_SetConfig+0x63c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f040 8082 	bne.w	8005534 <UART_SetConfig+0x640>
 8005430:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <UART_SetConfig+0x630>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005438:	2b28      	cmp	r3, #40	; 0x28
 800543a:	d86d      	bhi.n	8005518 <UART_SetConfig+0x624>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x550>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	080054e9 	.word	0x080054e9
 8005448:	08005519 	.word	0x08005519
 800544c:	08005519 	.word	0x08005519
 8005450:	08005519 	.word	0x08005519
 8005454:	08005519 	.word	0x08005519
 8005458:	08005519 	.word	0x08005519
 800545c:	08005519 	.word	0x08005519
 8005460:	08005519 	.word	0x08005519
 8005464:	080054f1 	.word	0x080054f1
 8005468:	08005519 	.word	0x08005519
 800546c:	08005519 	.word	0x08005519
 8005470:	08005519 	.word	0x08005519
 8005474:	08005519 	.word	0x08005519
 8005478:	08005519 	.word	0x08005519
 800547c:	08005519 	.word	0x08005519
 8005480:	08005519 	.word	0x08005519
 8005484:	080054f9 	.word	0x080054f9
 8005488:	08005519 	.word	0x08005519
 800548c:	08005519 	.word	0x08005519
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005501 	.word	0x08005501
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005509 	.word	0x08005509
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005519 	.word	0x08005519
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005511 	.word	0x08005511
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ee:	e0d6      	b.n	800569e <UART_SetConfig+0x7aa>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e0d2      	b.n	800569e <UART_SetConfig+0x7aa>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	e0ce      	b.n	800569e <UART_SetConfig+0x7aa>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005506:	e0ca      	b.n	800569e <UART_SetConfig+0x7aa>
 8005508:	2320      	movs	r3, #32
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e0c6      	b.n	800569e <UART_SetConfig+0x7aa>
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e0c2      	b.n	800569e <UART_SetConfig+0x7aa>
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	e0be      	b.n	800569e <UART_SetConfig+0x7aa>
 8005520:	40011400 	.word	0x40011400
 8005524:	58024400 	.word	0x58024400
 8005528:	40007800 	.word	0x40007800
 800552c:	40007c00 	.word	0x40007c00
 8005530:	40011800 	.word	0x40011800
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4aad      	ldr	r2, [pc, #692]	; (80057f0 <UART_SetConfig+0x8fc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d176      	bne.n	800562c <UART_SetConfig+0x738>
 800553e:	4bad      	ldr	r3, [pc, #692]	; (80057f4 <UART_SetConfig+0x900>)
 8005540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005546:	2b28      	cmp	r3, #40	; 0x28
 8005548:	d86c      	bhi.n	8005624 <UART_SetConfig+0x730>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <UART_SetConfig+0x65c>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	080055f5 	.word	0x080055f5
 8005554:	08005625 	.word	0x08005625
 8005558:	08005625 	.word	0x08005625
 800555c:	08005625 	.word	0x08005625
 8005560:	08005625 	.word	0x08005625
 8005564:	08005625 	.word	0x08005625
 8005568:	08005625 	.word	0x08005625
 800556c:	08005625 	.word	0x08005625
 8005570:	080055fd 	.word	0x080055fd
 8005574:	08005625 	.word	0x08005625
 8005578:	08005625 	.word	0x08005625
 800557c:	08005625 	.word	0x08005625
 8005580:	08005625 	.word	0x08005625
 8005584:	08005625 	.word	0x08005625
 8005588:	08005625 	.word	0x08005625
 800558c:	08005625 	.word	0x08005625
 8005590:	08005605 	.word	0x08005605
 8005594:	08005625 	.word	0x08005625
 8005598:	08005625 	.word	0x08005625
 800559c:	08005625 	.word	0x08005625
 80055a0:	08005625 	.word	0x08005625
 80055a4:	08005625 	.word	0x08005625
 80055a8:	08005625 	.word	0x08005625
 80055ac:	08005625 	.word	0x08005625
 80055b0:	0800560d 	.word	0x0800560d
 80055b4:	08005625 	.word	0x08005625
 80055b8:	08005625 	.word	0x08005625
 80055bc:	08005625 	.word	0x08005625
 80055c0:	08005625 	.word	0x08005625
 80055c4:	08005625 	.word	0x08005625
 80055c8:	08005625 	.word	0x08005625
 80055cc:	08005625 	.word	0x08005625
 80055d0:	08005615 	.word	0x08005615
 80055d4:	08005625 	.word	0x08005625
 80055d8:	08005625 	.word	0x08005625
 80055dc:	08005625 	.word	0x08005625
 80055e0:	08005625 	.word	0x08005625
 80055e4:	08005625 	.word	0x08005625
 80055e8:	08005625 	.word	0x08005625
 80055ec:	08005625 	.word	0x08005625
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	2301      	movs	r3, #1
 80055f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fa:	e050      	b.n	800569e <UART_SetConfig+0x7aa>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005602:	e04c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800560a:	e048      	b.n	800569e <UART_SetConfig+0x7aa>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e044      	b.n	800569e <UART_SetConfig+0x7aa>
 8005614:	2320      	movs	r3, #32
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e040      	b.n	800569e <UART_SetConfig+0x7aa>
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e03c      	b.n	800569e <UART_SetConfig+0x7aa>
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e038      	b.n	800569e <UART_SetConfig+0x7aa>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a71      	ldr	r2, [pc, #452]	; (80057f8 <UART_SetConfig+0x904>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d130      	bne.n	8005698 <UART_SetConfig+0x7a4>
 8005636:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <UART_SetConfig+0x900>)
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b05      	cmp	r3, #5
 8005640:	d826      	bhi.n	8005690 <UART_SetConfig+0x79c>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x754>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	08005661 	.word	0x08005661
 800564c:	08005669 	.word	0x08005669
 8005650:	08005671 	.word	0x08005671
 8005654:	08005679 	.word	0x08005679
 8005658:	08005681 	.word	0x08005681
 800565c:	08005689 	.word	0x08005689
 8005660:	2302      	movs	r3, #2
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e01a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005668:	2304      	movs	r3, #4
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	e016      	b.n	800569e <UART_SetConfig+0x7aa>
 8005670:	2308      	movs	r3, #8
 8005672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005676:	e012      	b.n	800569e <UART_SetConfig+0x7aa>
 8005678:	2310      	movs	r3, #16
 800567a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800567e:	e00e      	b.n	800569e <UART_SetConfig+0x7aa>
 8005680:	2320      	movs	r3, #32
 8005682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005686:	e00a      	b.n	800569e <UART_SetConfig+0x7aa>
 8005688:	2340      	movs	r3, #64	; 0x40
 800568a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800568e:	e006      	b.n	800569e <UART_SetConfig+0x7aa>
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005696:	e002      	b.n	800569e <UART_SetConfig+0x7aa>
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a55      	ldr	r2, [pc, #340]	; (80057f8 <UART_SetConfig+0x904>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	f040 80f0 	bne.w	800588a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	dc46      	bgt.n	8005740 <UART_SetConfig+0x84c>
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	db75      	blt.n	80057a2 <UART_SetConfig+0x8ae>
 80056b6:	3b02      	subs	r3, #2
 80056b8:	2b1e      	cmp	r3, #30
 80056ba:	d872      	bhi.n	80057a2 <UART_SetConfig+0x8ae>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x7d0>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	08005747 	.word	0x08005747
 80056c8:	080057a3 	.word	0x080057a3
 80056cc:	0800574f 	.word	0x0800574f
 80056d0:	080057a3 	.word	0x080057a3
 80056d4:	080057a3 	.word	0x080057a3
 80056d8:	080057a3 	.word	0x080057a3
 80056dc:	0800575f 	.word	0x0800575f
 80056e0:	080057a3 	.word	0x080057a3
 80056e4:	080057a3 	.word	0x080057a3
 80056e8:	080057a3 	.word	0x080057a3
 80056ec:	080057a3 	.word	0x080057a3
 80056f0:	080057a3 	.word	0x080057a3
 80056f4:	080057a3 	.word	0x080057a3
 80056f8:	080057a3 	.word	0x080057a3
 80056fc:	0800576f 	.word	0x0800576f
 8005700:	080057a3 	.word	0x080057a3
 8005704:	080057a3 	.word	0x080057a3
 8005708:	080057a3 	.word	0x080057a3
 800570c:	080057a3 	.word	0x080057a3
 8005710:	080057a3 	.word	0x080057a3
 8005714:	080057a3 	.word	0x080057a3
 8005718:	080057a3 	.word	0x080057a3
 800571c:	080057a3 	.word	0x080057a3
 8005720:	080057a3 	.word	0x080057a3
 8005724:	080057a3 	.word	0x080057a3
 8005728:	080057a3 	.word	0x080057a3
 800572c:	080057a3 	.word	0x080057a3
 8005730:	080057a3 	.word	0x080057a3
 8005734:	080057a3 	.word	0x080057a3
 8005738:	080057a3 	.word	0x080057a3
 800573c:	08005795 	.word	0x08005795
 8005740:	2b40      	cmp	r3, #64	; 0x40
 8005742:	d02a      	beq.n	800579a <UART_SetConfig+0x8a6>
 8005744:	e02d      	b.n	80057a2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005746:	f7fd feab 	bl	80034a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800574a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800574c:	e02f      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800574e:	f107 0314 	add.w	r3, r7, #20
 8005752:	4618      	mov	r0, r3
 8005754:	f7fd feba 	bl	80034cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800575c:	e027      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575e:	f107 0308 	add.w	r3, r7, #8
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe f806 	bl	8003774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800576c:	e01f      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800576e:	4b21      	ldr	r3, [pc, #132]	; (80057f4 <UART_SetConfig+0x900>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800577a:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <UART_SetConfig+0x900>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	08db      	lsrs	r3, r3, #3
 8005780:	f003 0303 	and.w	r3, r3, #3
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <UART_SetConfig+0x908>)
 8005786:	fa22 f303 	lsr.w	r3, r2, r3
 800578a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800578c:	e00f      	b.n	80057ae <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <UART_SetConfig+0x908>)
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005792:	e00c      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <UART_SetConfig+0x90c>)
 8005796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005798:	e009      	b.n	80057ae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80057a0:	e005      	b.n	80057ae <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80057ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 81e6 	beq.w	8005b82 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <UART_SetConfig+0x910>)
 80057bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057c0:	461a      	mov	r2, r3
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4413      	add	r3, r2
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d305      	bcc.n	80057e6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e0:	6a3a      	ldr	r2, [r7, #32]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d910      	bls.n	8005808 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80057ec:	e1c9      	b.n	8005b82 <UART_SetConfig+0xc8e>
 80057ee:	bf00      	nop
 80057f0:	40011c00 	.word	0x40011c00
 80057f4:	58024400 	.word	0x58024400
 80057f8:	58000c00 	.word	0x58000c00
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	003d0900 	.word	0x003d0900
 8005804:	08007060 	.word	0x08007060
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580a:	4618      	mov	r0, r3
 800580c:	f04f 0100 	mov.w	r1, #0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	4ac1      	ldr	r2, [pc, #772]	; (8005b1c <UART_SetConfig+0xc28>)
 8005816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800581a:	b29a      	uxth	r2, r3
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	f7fa fdb6 	bl	8000390 <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	020b      	lsls	r3, r1, #8
 8005836:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800583a:	0202      	lsls	r2, r0, #8
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	6849      	ldr	r1, [r1, #4]
 8005840:	0849      	lsrs	r1, r1, #1
 8005842:	4608      	mov	r0, r1
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	1814      	adds	r4, r2, r0
 800584a:	eb43 0501 	adc.w	r5, r3, r1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	461a      	mov	r2, r3
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	4620      	mov	r0, r4
 800585a:	4629      	mov	r1, r5
 800585c:	f7fa fd98 	bl	8000390 <__aeabi_uldivmod>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4613      	mov	r3, r2
 8005866:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800586e:	d308      	bcc.n	8005882 <UART_SetConfig+0x98e>
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005876:	d204      	bcs.n	8005882 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587e:	60da      	str	r2, [r3, #12]
 8005880:	e17f      	b.n	8005b82 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005888:	e17b      	b.n	8005b82 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005892:	f040 80bd 	bne.w	8005a10 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8005896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800589a:	2b20      	cmp	r3, #32
 800589c:	dc48      	bgt.n	8005930 <UART_SetConfig+0xa3c>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	db7b      	blt.n	800599a <UART_SetConfig+0xaa6>
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d879      	bhi.n	800599a <UART_SetConfig+0xaa6>
 80058a6:	a201      	add	r2, pc, #4	; (adr r2, 80058ac <UART_SetConfig+0x9b8>)
 80058a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ac:	08005937 	.word	0x08005937
 80058b0:	0800593f 	.word	0x0800593f
 80058b4:	0800599b 	.word	0x0800599b
 80058b8:	0800599b 	.word	0x0800599b
 80058bc:	08005947 	.word	0x08005947
 80058c0:	0800599b 	.word	0x0800599b
 80058c4:	0800599b 	.word	0x0800599b
 80058c8:	0800599b 	.word	0x0800599b
 80058cc:	08005957 	.word	0x08005957
 80058d0:	0800599b 	.word	0x0800599b
 80058d4:	0800599b 	.word	0x0800599b
 80058d8:	0800599b 	.word	0x0800599b
 80058dc:	0800599b 	.word	0x0800599b
 80058e0:	0800599b 	.word	0x0800599b
 80058e4:	0800599b 	.word	0x0800599b
 80058e8:	0800599b 	.word	0x0800599b
 80058ec:	08005967 	.word	0x08005967
 80058f0:	0800599b 	.word	0x0800599b
 80058f4:	0800599b 	.word	0x0800599b
 80058f8:	0800599b 	.word	0x0800599b
 80058fc:	0800599b 	.word	0x0800599b
 8005900:	0800599b 	.word	0x0800599b
 8005904:	0800599b 	.word	0x0800599b
 8005908:	0800599b 	.word	0x0800599b
 800590c:	0800599b 	.word	0x0800599b
 8005910:	0800599b 	.word	0x0800599b
 8005914:	0800599b 	.word	0x0800599b
 8005918:	0800599b 	.word	0x0800599b
 800591c:	0800599b 	.word	0x0800599b
 8005920:	0800599b 	.word	0x0800599b
 8005924:	0800599b 	.word	0x0800599b
 8005928:	0800599b 	.word	0x0800599b
 800592c:	0800598d 	.word	0x0800598d
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d02e      	beq.n	8005992 <UART_SetConfig+0xa9e>
 8005934:	e031      	b.n	800599a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005936:	f7fc fe7b 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 800593a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800593c:	e033      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800593e:	f7fc fe8d 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8005942:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005944:	e02f      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005946:	f107 0314 	add.w	r3, r7, #20
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd fdbe 	bl	80034cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005954:	e027      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005956:	f107 0308 	add.w	r3, r7, #8
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd ff0a 	bl	8003774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005964:	e01f      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005966:	4b6e      	ldr	r3, [pc, #440]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005972:	4b6b      	ldr	r3, [pc, #428]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	4a69      	ldr	r2, [pc, #420]	; (8005b24 <UART_SetConfig+0xc30>)
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005984:	e00f      	b.n	80059a6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005986:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <UART_SetConfig+0xc30>)
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800598a:	e00c      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800598c:	4b66      	ldr	r3, [pc, #408]	; (8005b28 <UART_SetConfig+0xc34>)
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005990:	e009      	b.n	80059a6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005998:	e005      	b.n	80059a6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80ea 	beq.w	8005b82 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b2:	4a5a      	ldr	r2, [pc, #360]	; (8005b1c <UART_SetConfig+0xc28>)
 80059b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059b8:	461a      	mov	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c0:	005a      	lsls	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	441a      	add	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	d916      	bls.n	8005a08 <UART_SetConfig+0xb14>
 80059da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e0:	d212      	bcs.n	8005a08 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f023 030f 	bic.w	r3, r3, #15
 80059ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	085b      	lsrs	r3, r3, #1
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059fa:	4313      	orrs	r3, r2
 80059fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a04:	60da      	str	r2, [r3, #12]
 8005a06:	e0bc      	b.n	8005b82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a0e:	e0b8      	b.n	8005b82 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a14:	2b20      	cmp	r3, #32
 8005a16:	dc4b      	bgt.n	8005ab0 <UART_SetConfig+0xbbc>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f2c0 8087 	blt.w	8005b2c <UART_SetConfig+0xc38>
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	f200 8084 	bhi.w	8005b2c <UART_SetConfig+0xc38>
 8005a24:	a201      	add	r2, pc, #4	; (adr r2, 8005a2c <UART_SetConfig+0xb38>)
 8005a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2a:	bf00      	nop
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005b2d 	.word	0x08005b2d
 8005a38:	08005b2d 	.word	0x08005b2d
 8005a3c:	08005ac7 	.word	0x08005ac7
 8005a40:	08005b2d 	.word	0x08005b2d
 8005a44:	08005b2d 	.word	0x08005b2d
 8005a48:	08005b2d 	.word	0x08005b2d
 8005a4c:	08005ad7 	.word	0x08005ad7
 8005a50:	08005b2d 	.word	0x08005b2d
 8005a54:	08005b2d 	.word	0x08005b2d
 8005a58:	08005b2d 	.word	0x08005b2d
 8005a5c:	08005b2d 	.word	0x08005b2d
 8005a60:	08005b2d 	.word	0x08005b2d
 8005a64:	08005b2d 	.word	0x08005b2d
 8005a68:	08005b2d 	.word	0x08005b2d
 8005a6c:	08005ae7 	.word	0x08005ae7
 8005a70:	08005b2d 	.word	0x08005b2d
 8005a74:	08005b2d 	.word	0x08005b2d
 8005a78:	08005b2d 	.word	0x08005b2d
 8005a7c:	08005b2d 	.word	0x08005b2d
 8005a80:	08005b2d 	.word	0x08005b2d
 8005a84:	08005b2d 	.word	0x08005b2d
 8005a88:	08005b2d 	.word	0x08005b2d
 8005a8c:	08005b2d 	.word	0x08005b2d
 8005a90:	08005b2d 	.word	0x08005b2d
 8005a94:	08005b2d 	.word	0x08005b2d
 8005a98:	08005b2d 	.word	0x08005b2d
 8005a9c:	08005b2d 	.word	0x08005b2d
 8005aa0:	08005b2d 	.word	0x08005b2d
 8005aa4:	08005b2d 	.word	0x08005b2d
 8005aa8:	08005b2d 	.word	0x08005b2d
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d02e      	beq.n	8005b12 <UART_SetConfig+0xc1e>
 8005ab4:	e03a      	b.n	8005b2c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fc fdbb 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8005aba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005abc:	e03c      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abe:	f7fc fdcd 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8005ac2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ac4:	e038      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac6:	f107 0314 	add.w	r3, r7, #20
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fd fcfe 	bl	80034cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ad4:	e030      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd fe4a 	bl	8003774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ae4:	e028      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae6:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005af2:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <UART_SetConfig+0xc2c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <UART_SetConfig+0xc30>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b04:	e018      	b.n	8005b38 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <UART_SetConfig+0xc30>)
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b0a:	e015      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <UART_SetConfig+0xc34>)
 8005b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b10:	e012      	b.n	8005b38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b18:	e00e      	b.n	8005b38 <UART_SetConfig+0xc44>
 8005b1a:	bf00      	nop
 8005b1c:	08007060 	.word	0x08007060
 8005b20:	58024400 	.word	0x58024400
 8005b24:	03d09000 	.word	0x03d09000
 8005b28:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005b36:	bf00      	nop
    }

    if (pclk != 0U)
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d021      	beq.n	8005b82 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <UART_SetConfig+0xcb8>)
 8005b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	085b      	lsrs	r3, r3, #1
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b60:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	2b0f      	cmp	r3, #15
 8005b66:	d909      	bls.n	8005b7c <UART_SetConfig+0xc88>
 8005b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b6e:	d205      	bcs.n	8005b7c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60da      	str	r2, [r3, #12]
 8005b7a:	e002      	b.n	8005b82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005b9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3738      	adds	r7, #56	; 0x38
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8005baa:	bf00      	nop
 8005bac:	08007060 	.word	0x08007060

08005bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01a      	beq.n	8005cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cae:	d10a      	bne.n	8005cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	430a      	orrs	r2, r1
 8005ce6:	605a      	str	r2, [r3, #4]
  }
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d04:	f7fb f9cc 	bl	80010a0 <HAL_GetTick>
 8005d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d10e      	bne.n	8005d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f82f 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e025      	b.n	8005d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d10e      	bne.n	8005d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f819 	bl	8005d8a <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e00f      	b.n	8005d82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b09c      	sub	sp, #112	; 0x70
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	603b      	str	r3, [r7, #0]
 8005d96:	4613      	mov	r3, r2
 8005d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9a:	e0a9      	b.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	f000 80a5 	beq.w	8005ef0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da6:	f7fb f97b 	bl	80010a0 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d302      	bcc.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8005db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d140      	bne.n	8005e3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ddc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e6      	bne.n	8005dbc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	663b      	str	r3, [r7, #96]	; 0x60
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e069      	b.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d051      	beq.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e5a:	d149      	bne.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
 8005e86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8c:	e841 2300 	strex	r3, r2, [r1]
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1e6      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	3308      	adds	r3, #8
 8005eb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005eb8:	623a      	str	r2, [r7, #32]
 8005eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	69f9      	ldr	r1, [r7, #28]
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e5      	bne.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e010      	b.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	461a      	mov	r2, r3
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	f43f af46 	beq.w	8005d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3770      	adds	r7, #112	; 0x70
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e027      	b.n	8005f80 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2224      	movs	r2, #36	; 0x24
 8005f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e02d      	b.n	8006000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f84f 	bl	8006084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800601c:	2302      	movs	r3, #2
 800601e:	e02d      	b.n	800607c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2224      	movs	r2, #36	; 0x24
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0201 	bic.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f811 	bl	8006084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006090:	2b00      	cmp	r3, #0
 8006092:	d108      	bne.n	80060a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060a4:	e031      	b.n	800610a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060a6:	2310      	movs	r3, #16
 80060a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060aa:	2310      	movs	r3, #16
 80060ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	0e5b      	lsrs	r3, r3, #25
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	0f5b      	lsrs	r3, r3, #29
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f003 0307 	and.w	r3, r3, #7
 80060cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060ce:	7bbb      	ldrb	r3, [r7, #14]
 80060d0:	7b3a      	ldrb	r2, [r7, #12]
 80060d2:	4911      	ldr	r1, [pc, #68]	; (8006118 <UARTEx_SetNbDataToProcess+0x94>)
 80060d4:	5c8a      	ldrb	r2, [r1, r2]
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060da:	7b3a      	ldrb	r2, [r7, #12]
 80060dc:	490f      	ldr	r1, [pc, #60]	; (800611c <UARTEx_SetNbDataToProcess+0x98>)
 80060de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	7b7a      	ldrb	r2, [r7, #13]
 80060f0:	4909      	ldr	r1, [pc, #36]	; (8006118 <UARTEx_SetNbDataToProcess+0x94>)
 80060f2:	5c8a      	ldrb	r2, [r1, r2]
 80060f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060f8:	7b7a      	ldrb	r2, [r7, #13]
 80060fa:	4908      	ldr	r1, [pc, #32]	; (800611c <UARTEx_SetNbDataToProcess+0x98>)
 80060fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006102:	b29a      	uxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	08007078 	.word	0x08007078
 800611c:	08007080 	.word	0x08007080

08006120 <__errno>:
 8006120:	4b01      	ldr	r3, [pc, #4]	; (8006128 <__errno+0x8>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	24000010 	.word	0x24000010

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4d0d      	ldr	r5, [pc, #52]	; (8006164 <__libc_init_array+0x38>)
 8006130:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006132:	1b64      	subs	r4, r4, r5
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	2600      	movs	r6, #0
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	4d0b      	ldr	r5, [pc, #44]	; (800616c <__libc_init_array+0x40>)
 800613e:	4c0c      	ldr	r4, [pc, #48]	; (8006170 <__libc_init_array+0x44>)
 8006140:	f000 ff76 	bl	8007030 <_init>
 8006144:	1b64      	subs	r4, r4, r5
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	2600      	movs	r6, #0
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08007128 	.word	0x08007128
 8006168:	08007128 	.word	0x08007128
 800616c:	08007128 	.word	0x08007128
 8006170:	0800712c 	.word	0x0800712c

08006174 <memset>:
 8006174:	4402      	add	r2, r0
 8006176:	4603      	mov	r3, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <iprintf>:
 8006184:	b40f      	push	{r0, r1, r2, r3}
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <iprintf+0x2c>)
 8006188:	b513      	push	{r0, r1, r4, lr}
 800618a:	681c      	ldr	r4, [r3, #0]
 800618c:	b124      	cbz	r4, 8006198 <iprintf+0x14>
 800618e:	69a3      	ldr	r3, [r4, #24]
 8006190:	b913      	cbnz	r3, 8006198 <iprintf+0x14>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f866 	bl	8006264 <__sinit>
 8006198:	ab05      	add	r3, sp, #20
 800619a:	9a04      	ldr	r2, [sp, #16]
 800619c:	68a1      	ldr	r1, [r4, #8]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	4620      	mov	r0, r4
 80061a2:	f000 f983 	bl	80064ac <_vfiprintf_r>
 80061a6:	b002      	add	sp, #8
 80061a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061ac:	b004      	add	sp, #16
 80061ae:	4770      	bx	lr
 80061b0:	24000010 	.word	0x24000010

080061b4 <std>:
 80061b4:	2300      	movs	r3, #0
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	e9c0 3300 	strd	r3, r3, [r0]
 80061be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061c2:	6083      	str	r3, [r0, #8]
 80061c4:	8181      	strh	r1, [r0, #12]
 80061c6:	6643      	str	r3, [r0, #100]	; 0x64
 80061c8:	81c2      	strh	r2, [r0, #14]
 80061ca:	6183      	str	r3, [r0, #24]
 80061cc:	4619      	mov	r1, r3
 80061ce:	2208      	movs	r2, #8
 80061d0:	305c      	adds	r0, #92	; 0x5c
 80061d2:	f7ff ffcf 	bl	8006174 <memset>
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <std+0x38>)
 80061d8:	6263      	str	r3, [r4, #36]	; 0x24
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <std+0x3c>)
 80061dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80061de:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <std+0x40>)
 80061e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x44>)
 80061e4:	6224      	str	r4, [r4, #32]
 80061e6:	6323      	str	r3, [r4, #48]	; 0x30
 80061e8:	bd10      	pop	{r4, pc}
 80061ea:	bf00      	nop
 80061ec:	08006a55 	.word	0x08006a55
 80061f0:	08006a77 	.word	0x08006a77
 80061f4:	08006aaf 	.word	0x08006aaf
 80061f8:	08006ad3 	.word	0x08006ad3

080061fc <_cleanup_r>:
 80061fc:	4901      	ldr	r1, [pc, #4]	; (8006204 <_cleanup_r+0x8>)
 80061fe:	f000 b8af 	b.w	8006360 <_fwalk_reent>
 8006202:	bf00      	nop
 8006204:	08006dad 	.word	0x08006dad

08006208 <__sfmoreglue>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	1e4a      	subs	r2, r1, #1
 800620c:	2568      	movs	r5, #104	; 0x68
 800620e:	4355      	muls	r5, r2
 8006210:	460e      	mov	r6, r1
 8006212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006216:	f000 f8c5 	bl	80063a4 <_malloc_r>
 800621a:	4604      	mov	r4, r0
 800621c:	b140      	cbz	r0, 8006230 <__sfmoreglue+0x28>
 800621e:	2100      	movs	r1, #0
 8006220:	e9c0 1600 	strd	r1, r6, [r0]
 8006224:	300c      	adds	r0, #12
 8006226:	60a0      	str	r0, [r4, #8]
 8006228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800622c:	f7ff ffa2 	bl	8006174 <memset>
 8006230:	4620      	mov	r0, r4
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <__sfp_lock_acquire>:
 8006234:	4801      	ldr	r0, [pc, #4]	; (800623c <__sfp_lock_acquire+0x8>)
 8006236:	f000 b8b3 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 800623a:	bf00      	nop
 800623c:	24000188 	.word	0x24000188

08006240 <__sfp_lock_release>:
 8006240:	4801      	ldr	r0, [pc, #4]	; (8006248 <__sfp_lock_release+0x8>)
 8006242:	f000 b8ae 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006246:	bf00      	nop
 8006248:	24000188 	.word	0x24000188

0800624c <__sinit_lock_acquire>:
 800624c:	4801      	ldr	r0, [pc, #4]	; (8006254 <__sinit_lock_acquire+0x8>)
 800624e:	f000 b8a7 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006252:	bf00      	nop
 8006254:	24000183 	.word	0x24000183

08006258 <__sinit_lock_release>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__sinit_lock_release+0x8>)
 800625a:	f000 b8a2 	b.w	80063a2 <__retarget_lock_release_recursive>
 800625e:	bf00      	nop
 8006260:	24000183 	.word	0x24000183

08006264 <__sinit>:
 8006264:	b510      	push	{r4, lr}
 8006266:	4604      	mov	r4, r0
 8006268:	f7ff fff0 	bl	800624c <__sinit_lock_acquire>
 800626c:	69a3      	ldr	r3, [r4, #24]
 800626e:	b11b      	cbz	r3, 8006278 <__sinit+0x14>
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	f7ff bff0 	b.w	8006258 <__sinit_lock_release>
 8006278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800627c:	6523      	str	r3, [r4, #80]	; 0x50
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <__sinit+0x68>)
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <__sinit+0x6c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	62a2      	str	r2, [r4, #40]	; 0x28
 8006286:	42a3      	cmp	r3, r4
 8006288:	bf04      	itt	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	61a3      	streq	r3, [r4, #24]
 800628e:	4620      	mov	r0, r4
 8006290:	f000 f820 	bl	80062d4 <__sfp>
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f81c 	bl	80062d4 <__sfp>
 800629c:	60a0      	str	r0, [r4, #8]
 800629e:	4620      	mov	r0, r4
 80062a0:	f000 f818 	bl	80062d4 <__sfp>
 80062a4:	2200      	movs	r2, #0
 80062a6:	60e0      	str	r0, [r4, #12]
 80062a8:	2104      	movs	r1, #4
 80062aa:	6860      	ldr	r0, [r4, #4]
 80062ac:	f7ff ff82 	bl	80061b4 <std>
 80062b0:	68a0      	ldr	r0, [r4, #8]
 80062b2:	2201      	movs	r2, #1
 80062b4:	2109      	movs	r1, #9
 80062b6:	f7ff ff7d 	bl	80061b4 <std>
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	2112      	movs	r1, #18
 80062c0:	f7ff ff78 	bl	80061b4 <std>
 80062c4:	2301      	movs	r3, #1
 80062c6:	61a3      	str	r3, [r4, #24]
 80062c8:	e7d2      	b.n	8006270 <__sinit+0xc>
 80062ca:	bf00      	nop
 80062cc:	08007088 	.word	0x08007088
 80062d0:	080061fd 	.word	0x080061fd

080062d4 <__sfp>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	4607      	mov	r7, r0
 80062d8:	f7ff ffac 	bl	8006234 <__sfp_lock_acquire>
 80062dc:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <__sfp+0x84>)
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	69b3      	ldr	r3, [r6, #24]
 80062e2:	b913      	cbnz	r3, 80062ea <__sfp+0x16>
 80062e4:	4630      	mov	r0, r6
 80062e6:	f7ff ffbd 	bl	8006264 <__sinit>
 80062ea:	3648      	adds	r6, #72	; 0x48
 80062ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	d503      	bpl.n	80062fc <__sfp+0x28>
 80062f4:	6833      	ldr	r3, [r6, #0]
 80062f6:	b30b      	cbz	r3, 800633c <__sfp+0x68>
 80062f8:	6836      	ldr	r6, [r6, #0]
 80062fa:	e7f7      	b.n	80062ec <__sfp+0x18>
 80062fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006300:	b9d5      	cbnz	r5, 8006338 <__sfp+0x64>
 8006302:	4b16      	ldr	r3, [pc, #88]	; (800635c <__sfp+0x88>)
 8006304:	60e3      	str	r3, [r4, #12]
 8006306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800630a:	6665      	str	r5, [r4, #100]	; 0x64
 800630c:	f000 f847 	bl	800639e <__retarget_lock_init_recursive>
 8006310:	f7ff ff96 	bl	8006240 <__sfp_lock_release>
 8006314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800631c:	6025      	str	r5, [r4, #0]
 800631e:	61a5      	str	r5, [r4, #24]
 8006320:	2208      	movs	r2, #8
 8006322:	4629      	mov	r1, r5
 8006324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006328:	f7ff ff24 	bl	8006174 <memset>
 800632c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006334:	4620      	mov	r0, r4
 8006336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006338:	3468      	adds	r4, #104	; 0x68
 800633a:	e7d9      	b.n	80062f0 <__sfp+0x1c>
 800633c:	2104      	movs	r1, #4
 800633e:	4638      	mov	r0, r7
 8006340:	f7ff ff62 	bl	8006208 <__sfmoreglue>
 8006344:	4604      	mov	r4, r0
 8006346:	6030      	str	r0, [r6, #0]
 8006348:	2800      	cmp	r0, #0
 800634a:	d1d5      	bne.n	80062f8 <__sfp+0x24>
 800634c:	f7ff ff78 	bl	8006240 <__sfp_lock_release>
 8006350:	230c      	movs	r3, #12
 8006352:	603b      	str	r3, [r7, #0]
 8006354:	e7ee      	b.n	8006334 <__sfp+0x60>
 8006356:	bf00      	nop
 8006358:	08007088 	.word	0x08007088
 800635c:	ffff0001 	.word	0xffff0001

08006360 <_fwalk_reent>:
 8006360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006364:	4606      	mov	r6, r0
 8006366:	4688      	mov	r8, r1
 8006368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800636c:	2700      	movs	r7, #0
 800636e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006372:	f1b9 0901 	subs.w	r9, r9, #1
 8006376:	d505      	bpl.n	8006384 <_fwalk_reent+0x24>
 8006378:	6824      	ldr	r4, [r4, #0]
 800637a:	2c00      	cmp	r4, #0
 800637c:	d1f7      	bne.n	800636e <_fwalk_reent+0xe>
 800637e:	4638      	mov	r0, r7
 8006380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006384:	89ab      	ldrh	r3, [r5, #12]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d907      	bls.n	800639a <_fwalk_reent+0x3a>
 800638a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800638e:	3301      	adds	r3, #1
 8006390:	d003      	beq.n	800639a <_fwalk_reent+0x3a>
 8006392:	4629      	mov	r1, r5
 8006394:	4630      	mov	r0, r6
 8006396:	47c0      	blx	r8
 8006398:	4307      	orrs	r7, r0
 800639a:	3568      	adds	r5, #104	; 0x68
 800639c:	e7e9      	b.n	8006372 <_fwalk_reent+0x12>

0800639e <__retarget_lock_init_recursive>:
 800639e:	4770      	bx	lr

080063a0 <__retarget_lock_acquire_recursive>:
 80063a0:	4770      	bx	lr

080063a2 <__retarget_lock_release_recursive>:
 80063a2:	4770      	bx	lr

080063a4 <_malloc_r>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	1ccd      	adds	r5, r1, #3
 80063a8:	f025 0503 	bic.w	r5, r5, #3
 80063ac:	3508      	adds	r5, #8
 80063ae:	2d0c      	cmp	r5, #12
 80063b0:	bf38      	it	cc
 80063b2:	250c      	movcc	r5, #12
 80063b4:	2d00      	cmp	r5, #0
 80063b6:	4606      	mov	r6, r0
 80063b8:	db01      	blt.n	80063be <_malloc_r+0x1a>
 80063ba:	42a9      	cmp	r1, r5
 80063bc:	d903      	bls.n	80063c6 <_malloc_r+0x22>
 80063be:	230c      	movs	r3, #12
 80063c0:	6033      	str	r3, [r6, #0]
 80063c2:	2000      	movs	r0, #0
 80063c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c6:	f000 fda3 	bl	8006f10 <__malloc_lock>
 80063ca:	4921      	ldr	r1, [pc, #132]	; (8006450 <_malloc_r+0xac>)
 80063cc:	680a      	ldr	r2, [r1, #0]
 80063ce:	4614      	mov	r4, r2
 80063d0:	b99c      	cbnz	r4, 80063fa <_malloc_r+0x56>
 80063d2:	4f20      	ldr	r7, [pc, #128]	; (8006454 <_malloc_r+0xb0>)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	b923      	cbnz	r3, 80063e2 <_malloc_r+0x3e>
 80063d8:	4621      	mov	r1, r4
 80063da:	4630      	mov	r0, r6
 80063dc:	f000 fb2a 	bl	8006a34 <_sbrk_r>
 80063e0:	6038      	str	r0, [r7, #0]
 80063e2:	4629      	mov	r1, r5
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 fb25 	bl	8006a34 <_sbrk_r>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d123      	bne.n	8006436 <_malloc_r+0x92>
 80063ee:	230c      	movs	r3, #12
 80063f0:	6033      	str	r3, [r6, #0]
 80063f2:	4630      	mov	r0, r6
 80063f4:	f000 fd92 	bl	8006f1c <__malloc_unlock>
 80063f8:	e7e3      	b.n	80063c2 <_malloc_r+0x1e>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	1b5b      	subs	r3, r3, r5
 80063fe:	d417      	bmi.n	8006430 <_malloc_r+0x8c>
 8006400:	2b0b      	cmp	r3, #11
 8006402:	d903      	bls.n	800640c <_malloc_r+0x68>
 8006404:	6023      	str	r3, [r4, #0]
 8006406:	441c      	add	r4, r3
 8006408:	6025      	str	r5, [r4, #0]
 800640a:	e004      	b.n	8006416 <_malloc_r+0x72>
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	42a2      	cmp	r2, r4
 8006410:	bf0c      	ite	eq
 8006412:	600b      	streq	r3, [r1, #0]
 8006414:	6053      	strne	r3, [r2, #4]
 8006416:	4630      	mov	r0, r6
 8006418:	f000 fd80 	bl	8006f1c <__malloc_unlock>
 800641c:	f104 000b 	add.w	r0, r4, #11
 8006420:	1d23      	adds	r3, r4, #4
 8006422:	f020 0007 	bic.w	r0, r0, #7
 8006426:	1ac2      	subs	r2, r0, r3
 8006428:	d0cc      	beq.n	80063c4 <_malloc_r+0x20>
 800642a:	1a1b      	subs	r3, r3, r0
 800642c:	50a3      	str	r3, [r4, r2]
 800642e:	e7c9      	b.n	80063c4 <_malloc_r+0x20>
 8006430:	4622      	mov	r2, r4
 8006432:	6864      	ldr	r4, [r4, #4]
 8006434:	e7cc      	b.n	80063d0 <_malloc_r+0x2c>
 8006436:	1cc4      	adds	r4, r0, #3
 8006438:	f024 0403 	bic.w	r4, r4, #3
 800643c:	42a0      	cmp	r0, r4
 800643e:	d0e3      	beq.n	8006408 <_malloc_r+0x64>
 8006440:	1a21      	subs	r1, r4, r0
 8006442:	4630      	mov	r0, r6
 8006444:	f000 faf6 	bl	8006a34 <_sbrk_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d1dd      	bne.n	8006408 <_malloc_r+0x64>
 800644c:	e7cf      	b.n	80063ee <_malloc_r+0x4a>
 800644e:	bf00      	nop
 8006450:	24000098 	.word	0x24000098
 8006454:	2400009c 	.word	0x2400009c

08006458 <__sfputc_r>:
 8006458:	6893      	ldr	r3, [r2, #8]
 800645a:	3b01      	subs	r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	b410      	push	{r4}
 8006460:	6093      	str	r3, [r2, #8]
 8006462:	da08      	bge.n	8006476 <__sfputc_r+0x1e>
 8006464:	6994      	ldr	r4, [r2, #24]
 8006466:	42a3      	cmp	r3, r4
 8006468:	db01      	blt.n	800646e <__sfputc_r+0x16>
 800646a:	290a      	cmp	r1, #10
 800646c:	d103      	bne.n	8006476 <__sfputc_r+0x1e>
 800646e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006472:	f000 bb33 	b.w	8006adc <__swbuf_r>
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	1c58      	adds	r0, r3, #1
 800647a:	6010      	str	r0, [r2, #0]
 800647c:	7019      	strb	r1, [r3, #0]
 800647e:	4608      	mov	r0, r1
 8006480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006484:	4770      	bx	lr

08006486 <__sfputs_r>:
 8006486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006488:	4606      	mov	r6, r0
 800648a:	460f      	mov	r7, r1
 800648c:	4614      	mov	r4, r2
 800648e:	18d5      	adds	r5, r2, r3
 8006490:	42ac      	cmp	r4, r5
 8006492:	d101      	bne.n	8006498 <__sfputs_r+0x12>
 8006494:	2000      	movs	r0, #0
 8006496:	e007      	b.n	80064a8 <__sfputs_r+0x22>
 8006498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800649c:	463a      	mov	r2, r7
 800649e:	4630      	mov	r0, r6
 80064a0:	f7ff ffda 	bl	8006458 <__sfputc_r>
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d1f3      	bne.n	8006490 <__sfputs_r+0xa>
 80064a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080064ac <_vfiprintf_r>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	460d      	mov	r5, r1
 80064b2:	b09d      	sub	sp, #116	; 0x74
 80064b4:	4614      	mov	r4, r2
 80064b6:	4698      	mov	r8, r3
 80064b8:	4606      	mov	r6, r0
 80064ba:	b118      	cbz	r0, 80064c4 <_vfiprintf_r+0x18>
 80064bc:	6983      	ldr	r3, [r0, #24]
 80064be:	b90b      	cbnz	r3, 80064c4 <_vfiprintf_r+0x18>
 80064c0:	f7ff fed0 	bl	8006264 <__sinit>
 80064c4:	4b89      	ldr	r3, [pc, #548]	; (80066ec <_vfiprintf_r+0x240>)
 80064c6:	429d      	cmp	r5, r3
 80064c8:	d11b      	bne.n	8006502 <_vfiprintf_r+0x56>
 80064ca:	6875      	ldr	r5, [r6, #4]
 80064cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064ce:	07d9      	lsls	r1, r3, #31
 80064d0:	d405      	bmi.n	80064de <_vfiprintf_r+0x32>
 80064d2:	89ab      	ldrh	r3, [r5, #12]
 80064d4:	059a      	lsls	r2, r3, #22
 80064d6:	d402      	bmi.n	80064de <_vfiprintf_r+0x32>
 80064d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064da:	f7ff ff61 	bl	80063a0 <__retarget_lock_acquire_recursive>
 80064de:	89ab      	ldrh	r3, [r5, #12]
 80064e0:	071b      	lsls	r3, r3, #28
 80064e2:	d501      	bpl.n	80064e8 <_vfiprintf_r+0x3c>
 80064e4:	692b      	ldr	r3, [r5, #16]
 80064e6:	b9eb      	cbnz	r3, 8006524 <_vfiprintf_r+0x78>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4630      	mov	r0, r6
 80064ec:	f000 fb5a 	bl	8006ba4 <__swsetup_r>
 80064f0:	b1c0      	cbz	r0, 8006524 <_vfiprintf_r+0x78>
 80064f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f4:	07dc      	lsls	r4, r3, #31
 80064f6:	d50e      	bpl.n	8006516 <_vfiprintf_r+0x6a>
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	b01d      	add	sp, #116	; 0x74
 80064fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	4b7b      	ldr	r3, [pc, #492]	; (80066f0 <_vfiprintf_r+0x244>)
 8006504:	429d      	cmp	r5, r3
 8006506:	d101      	bne.n	800650c <_vfiprintf_r+0x60>
 8006508:	68b5      	ldr	r5, [r6, #8]
 800650a:	e7df      	b.n	80064cc <_vfiprintf_r+0x20>
 800650c:	4b79      	ldr	r3, [pc, #484]	; (80066f4 <_vfiprintf_r+0x248>)
 800650e:	429d      	cmp	r5, r3
 8006510:	bf08      	it	eq
 8006512:	68f5      	ldreq	r5, [r6, #12]
 8006514:	e7da      	b.n	80064cc <_vfiprintf_r+0x20>
 8006516:	89ab      	ldrh	r3, [r5, #12]
 8006518:	0598      	lsls	r0, r3, #22
 800651a:	d4ed      	bmi.n	80064f8 <_vfiprintf_r+0x4c>
 800651c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800651e:	f7ff ff40 	bl	80063a2 <__retarget_lock_release_recursive>
 8006522:	e7e9      	b.n	80064f8 <_vfiprintf_r+0x4c>
 8006524:	2300      	movs	r3, #0
 8006526:	9309      	str	r3, [sp, #36]	; 0x24
 8006528:	2320      	movs	r3, #32
 800652a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800652e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006532:	2330      	movs	r3, #48	; 0x30
 8006534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066f8 <_vfiprintf_r+0x24c>
 8006538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800653c:	f04f 0901 	mov.w	r9, #1
 8006540:	4623      	mov	r3, r4
 8006542:	469a      	mov	sl, r3
 8006544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006548:	b10a      	cbz	r2, 800654e <_vfiprintf_r+0xa2>
 800654a:	2a25      	cmp	r2, #37	; 0x25
 800654c:	d1f9      	bne.n	8006542 <_vfiprintf_r+0x96>
 800654e:	ebba 0b04 	subs.w	fp, sl, r4
 8006552:	d00b      	beq.n	800656c <_vfiprintf_r+0xc0>
 8006554:	465b      	mov	r3, fp
 8006556:	4622      	mov	r2, r4
 8006558:	4629      	mov	r1, r5
 800655a:	4630      	mov	r0, r6
 800655c:	f7ff ff93 	bl	8006486 <__sfputs_r>
 8006560:	3001      	adds	r0, #1
 8006562:	f000 80aa 	beq.w	80066ba <_vfiprintf_r+0x20e>
 8006566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006568:	445a      	add	r2, fp
 800656a:	9209      	str	r2, [sp, #36]	; 0x24
 800656c:	f89a 3000 	ldrb.w	r3, [sl]
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80a2 	beq.w	80066ba <_vfiprintf_r+0x20e>
 8006576:	2300      	movs	r3, #0
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006580:	f10a 0a01 	add.w	sl, sl, #1
 8006584:	9304      	str	r3, [sp, #16]
 8006586:	9307      	str	r3, [sp, #28]
 8006588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800658c:	931a      	str	r3, [sp, #104]	; 0x68
 800658e:	4654      	mov	r4, sl
 8006590:	2205      	movs	r2, #5
 8006592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006596:	4858      	ldr	r0, [pc, #352]	; (80066f8 <_vfiprintf_r+0x24c>)
 8006598:	f7f9 feaa 	bl	80002f0 <memchr>
 800659c:	9a04      	ldr	r2, [sp, #16]
 800659e:	b9d8      	cbnz	r0, 80065d8 <_vfiprintf_r+0x12c>
 80065a0:	06d1      	lsls	r1, r2, #27
 80065a2:	bf44      	itt	mi
 80065a4:	2320      	movmi	r3, #32
 80065a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065aa:	0713      	lsls	r3, r2, #28
 80065ac:	bf44      	itt	mi
 80065ae:	232b      	movmi	r3, #43	; 0x2b
 80065b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b4:	f89a 3000 	ldrb.w	r3, [sl]
 80065b8:	2b2a      	cmp	r3, #42	; 0x2a
 80065ba:	d015      	beq.n	80065e8 <_vfiprintf_r+0x13c>
 80065bc:	9a07      	ldr	r2, [sp, #28]
 80065be:	4654      	mov	r4, sl
 80065c0:	2000      	movs	r0, #0
 80065c2:	f04f 0c0a 	mov.w	ip, #10
 80065c6:	4621      	mov	r1, r4
 80065c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065cc:	3b30      	subs	r3, #48	; 0x30
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d94e      	bls.n	8006670 <_vfiprintf_r+0x1c4>
 80065d2:	b1b0      	cbz	r0, 8006602 <_vfiprintf_r+0x156>
 80065d4:	9207      	str	r2, [sp, #28]
 80065d6:	e014      	b.n	8006602 <_vfiprintf_r+0x156>
 80065d8:	eba0 0308 	sub.w	r3, r0, r8
 80065dc:	fa09 f303 	lsl.w	r3, r9, r3
 80065e0:	4313      	orrs	r3, r2
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	46a2      	mov	sl, r4
 80065e6:	e7d2      	b.n	800658e <_vfiprintf_r+0xe2>
 80065e8:	9b03      	ldr	r3, [sp, #12]
 80065ea:	1d19      	adds	r1, r3, #4
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	9103      	str	r1, [sp, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bfbb      	ittet	lt
 80065f4:	425b      	neglt	r3, r3
 80065f6:	f042 0202 	orrlt.w	r2, r2, #2
 80065fa:	9307      	strge	r3, [sp, #28]
 80065fc:	9307      	strlt	r3, [sp, #28]
 80065fe:	bfb8      	it	lt
 8006600:	9204      	strlt	r2, [sp, #16]
 8006602:	7823      	ldrb	r3, [r4, #0]
 8006604:	2b2e      	cmp	r3, #46	; 0x2e
 8006606:	d10c      	bne.n	8006622 <_vfiprintf_r+0x176>
 8006608:	7863      	ldrb	r3, [r4, #1]
 800660a:	2b2a      	cmp	r3, #42	; 0x2a
 800660c:	d135      	bne.n	800667a <_vfiprintf_r+0x1ce>
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	1d1a      	adds	r2, r3, #4
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	9203      	str	r2, [sp, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfb8      	it	lt
 800661a:	f04f 33ff 	movlt.w	r3, #4294967295
 800661e:	3402      	adds	r4, #2
 8006620:	9305      	str	r3, [sp, #20]
 8006622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006708 <_vfiprintf_r+0x25c>
 8006626:	7821      	ldrb	r1, [r4, #0]
 8006628:	2203      	movs	r2, #3
 800662a:	4650      	mov	r0, sl
 800662c:	f7f9 fe60 	bl	80002f0 <memchr>
 8006630:	b140      	cbz	r0, 8006644 <_vfiprintf_r+0x198>
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	eba0 000a 	sub.w	r0, r0, sl
 8006638:	fa03 f000 	lsl.w	r0, r3, r0
 800663c:	9b04      	ldr	r3, [sp, #16]
 800663e:	4303      	orrs	r3, r0
 8006640:	3401      	adds	r4, #1
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006648:	482c      	ldr	r0, [pc, #176]	; (80066fc <_vfiprintf_r+0x250>)
 800664a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800664e:	2206      	movs	r2, #6
 8006650:	f7f9 fe4e 	bl	80002f0 <memchr>
 8006654:	2800      	cmp	r0, #0
 8006656:	d03f      	beq.n	80066d8 <_vfiprintf_r+0x22c>
 8006658:	4b29      	ldr	r3, [pc, #164]	; (8006700 <_vfiprintf_r+0x254>)
 800665a:	bb1b      	cbnz	r3, 80066a4 <_vfiprintf_r+0x1f8>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	3307      	adds	r3, #7
 8006660:	f023 0307 	bic.w	r3, r3, #7
 8006664:	3308      	adds	r3, #8
 8006666:	9303      	str	r3, [sp, #12]
 8006668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800666a:	443b      	add	r3, r7
 800666c:	9309      	str	r3, [sp, #36]	; 0x24
 800666e:	e767      	b.n	8006540 <_vfiprintf_r+0x94>
 8006670:	fb0c 3202 	mla	r2, ip, r2, r3
 8006674:	460c      	mov	r4, r1
 8006676:	2001      	movs	r0, #1
 8006678:	e7a5      	b.n	80065c6 <_vfiprintf_r+0x11a>
 800667a:	2300      	movs	r3, #0
 800667c:	3401      	adds	r4, #1
 800667e:	9305      	str	r3, [sp, #20]
 8006680:	4619      	mov	r1, r3
 8006682:	f04f 0c0a 	mov.w	ip, #10
 8006686:	4620      	mov	r0, r4
 8006688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800668c:	3a30      	subs	r2, #48	; 0x30
 800668e:	2a09      	cmp	r2, #9
 8006690:	d903      	bls.n	800669a <_vfiprintf_r+0x1ee>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0c5      	beq.n	8006622 <_vfiprintf_r+0x176>
 8006696:	9105      	str	r1, [sp, #20]
 8006698:	e7c3      	b.n	8006622 <_vfiprintf_r+0x176>
 800669a:	fb0c 2101 	mla	r1, ip, r1, r2
 800669e:	4604      	mov	r4, r0
 80066a0:	2301      	movs	r3, #1
 80066a2:	e7f0      	b.n	8006686 <_vfiprintf_r+0x1da>
 80066a4:	ab03      	add	r3, sp, #12
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	462a      	mov	r2, r5
 80066aa:	4b16      	ldr	r3, [pc, #88]	; (8006704 <_vfiprintf_r+0x258>)
 80066ac:	a904      	add	r1, sp, #16
 80066ae:	4630      	mov	r0, r6
 80066b0:	f3af 8000 	nop.w
 80066b4:	4607      	mov	r7, r0
 80066b6:	1c78      	adds	r0, r7, #1
 80066b8:	d1d6      	bne.n	8006668 <_vfiprintf_r+0x1bc>
 80066ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066bc:	07d9      	lsls	r1, r3, #31
 80066be:	d405      	bmi.n	80066cc <_vfiprintf_r+0x220>
 80066c0:	89ab      	ldrh	r3, [r5, #12]
 80066c2:	059a      	lsls	r2, r3, #22
 80066c4:	d402      	bmi.n	80066cc <_vfiprintf_r+0x220>
 80066c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066c8:	f7ff fe6b 	bl	80063a2 <__retarget_lock_release_recursive>
 80066cc:	89ab      	ldrh	r3, [r5, #12]
 80066ce:	065b      	lsls	r3, r3, #25
 80066d0:	f53f af12 	bmi.w	80064f8 <_vfiprintf_r+0x4c>
 80066d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066d6:	e711      	b.n	80064fc <_vfiprintf_r+0x50>
 80066d8:	ab03      	add	r3, sp, #12
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	462a      	mov	r2, r5
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <_vfiprintf_r+0x258>)
 80066e0:	a904      	add	r1, sp, #16
 80066e2:	4630      	mov	r0, r6
 80066e4:	f000 f880 	bl	80067e8 <_printf_i>
 80066e8:	e7e4      	b.n	80066b4 <_vfiprintf_r+0x208>
 80066ea:	bf00      	nop
 80066ec:	080070ac 	.word	0x080070ac
 80066f0:	080070cc 	.word	0x080070cc
 80066f4:	0800708c 	.word	0x0800708c
 80066f8:	080070ec 	.word	0x080070ec
 80066fc:	080070f6 	.word	0x080070f6
 8006700:	00000000 	.word	0x00000000
 8006704:	08006487 	.word	0x08006487
 8006708:	080070f2 	.word	0x080070f2

0800670c <_printf_common>:
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	4616      	mov	r6, r2
 8006712:	4699      	mov	r9, r3
 8006714:	688a      	ldr	r2, [r1, #8]
 8006716:	690b      	ldr	r3, [r1, #16]
 8006718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800671c:	4293      	cmp	r3, r2
 800671e:	bfb8      	it	lt
 8006720:	4613      	movlt	r3, r2
 8006722:	6033      	str	r3, [r6, #0]
 8006724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006728:	4607      	mov	r7, r0
 800672a:	460c      	mov	r4, r1
 800672c:	b10a      	cbz	r2, 8006732 <_printf_common+0x26>
 800672e:	3301      	adds	r3, #1
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	0699      	lsls	r1, r3, #26
 8006736:	bf42      	ittt	mi
 8006738:	6833      	ldrmi	r3, [r6, #0]
 800673a:	3302      	addmi	r3, #2
 800673c:	6033      	strmi	r3, [r6, #0]
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	f015 0506 	ands.w	r5, r5, #6
 8006744:	d106      	bne.n	8006754 <_printf_common+0x48>
 8006746:	f104 0a19 	add.w	sl, r4, #25
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	6832      	ldr	r2, [r6, #0]
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	42ab      	cmp	r3, r5
 8006752:	dc26      	bgt.n	80067a2 <_printf_common+0x96>
 8006754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006758:	1e13      	subs	r3, r2, #0
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	bf18      	it	ne
 800675e:	2301      	movne	r3, #1
 8006760:	0692      	lsls	r2, r2, #26
 8006762:	d42b      	bmi.n	80067bc <_printf_common+0xb0>
 8006764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006768:	4649      	mov	r1, r9
 800676a:	4638      	mov	r0, r7
 800676c:	47c0      	blx	r8
 800676e:	3001      	adds	r0, #1
 8006770:	d01e      	beq.n	80067b0 <_printf_common+0xa4>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	68e5      	ldr	r5, [r4, #12]
 8006776:	6832      	ldr	r2, [r6, #0]
 8006778:	f003 0306 	and.w	r3, r3, #6
 800677c:	2b04      	cmp	r3, #4
 800677e:	bf08      	it	eq
 8006780:	1aad      	subeq	r5, r5, r2
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	6922      	ldr	r2, [r4, #16]
 8006786:	bf0c      	ite	eq
 8006788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800678c:	2500      	movne	r5, #0
 800678e:	4293      	cmp	r3, r2
 8006790:	bfc4      	itt	gt
 8006792:	1a9b      	subgt	r3, r3, r2
 8006794:	18ed      	addgt	r5, r5, r3
 8006796:	2600      	movs	r6, #0
 8006798:	341a      	adds	r4, #26
 800679a:	42b5      	cmp	r5, r6
 800679c:	d11a      	bne.n	80067d4 <_printf_common+0xc8>
 800679e:	2000      	movs	r0, #0
 80067a0:	e008      	b.n	80067b4 <_printf_common+0xa8>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4652      	mov	r2, sl
 80067a6:	4649      	mov	r1, r9
 80067a8:	4638      	mov	r0, r7
 80067aa:	47c0      	blx	r8
 80067ac:	3001      	adds	r0, #1
 80067ae:	d103      	bne.n	80067b8 <_printf_common+0xac>
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b8:	3501      	adds	r5, #1
 80067ba:	e7c6      	b.n	800674a <_printf_common+0x3e>
 80067bc:	18e1      	adds	r1, r4, r3
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	2030      	movs	r0, #48	; 0x30
 80067c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067c6:	4422      	add	r2, r4
 80067c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d0:	3302      	adds	r3, #2
 80067d2:	e7c7      	b.n	8006764 <_printf_common+0x58>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4622      	mov	r2, r4
 80067d8:	4649      	mov	r1, r9
 80067da:	4638      	mov	r0, r7
 80067dc:	47c0      	blx	r8
 80067de:	3001      	adds	r0, #1
 80067e0:	d0e6      	beq.n	80067b0 <_printf_common+0xa4>
 80067e2:	3601      	adds	r6, #1
 80067e4:	e7d9      	b.n	800679a <_printf_common+0x8e>
	...

080067e8 <_printf_i>:
 80067e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	460c      	mov	r4, r1
 80067ee:	4691      	mov	r9, r2
 80067f0:	7e27      	ldrb	r7, [r4, #24]
 80067f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067f4:	2f78      	cmp	r7, #120	; 0x78
 80067f6:	4680      	mov	r8, r0
 80067f8:	469a      	mov	sl, r3
 80067fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067fe:	d807      	bhi.n	8006810 <_printf_i+0x28>
 8006800:	2f62      	cmp	r7, #98	; 0x62
 8006802:	d80a      	bhi.n	800681a <_printf_i+0x32>
 8006804:	2f00      	cmp	r7, #0
 8006806:	f000 80d8 	beq.w	80069ba <_printf_i+0x1d2>
 800680a:	2f58      	cmp	r7, #88	; 0x58
 800680c:	f000 80a3 	beq.w	8006956 <_printf_i+0x16e>
 8006810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006818:	e03a      	b.n	8006890 <_printf_i+0xa8>
 800681a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800681e:	2b15      	cmp	r3, #21
 8006820:	d8f6      	bhi.n	8006810 <_printf_i+0x28>
 8006822:	a001      	add	r0, pc, #4	; (adr r0, 8006828 <_printf_i+0x40>)
 8006824:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006828:	08006881 	.word	0x08006881
 800682c:	08006895 	.word	0x08006895
 8006830:	08006811 	.word	0x08006811
 8006834:	08006811 	.word	0x08006811
 8006838:	08006811 	.word	0x08006811
 800683c:	08006811 	.word	0x08006811
 8006840:	08006895 	.word	0x08006895
 8006844:	08006811 	.word	0x08006811
 8006848:	08006811 	.word	0x08006811
 800684c:	08006811 	.word	0x08006811
 8006850:	08006811 	.word	0x08006811
 8006854:	080069a1 	.word	0x080069a1
 8006858:	080068c5 	.word	0x080068c5
 800685c:	08006983 	.word	0x08006983
 8006860:	08006811 	.word	0x08006811
 8006864:	08006811 	.word	0x08006811
 8006868:	080069c3 	.word	0x080069c3
 800686c:	08006811 	.word	0x08006811
 8006870:	080068c5 	.word	0x080068c5
 8006874:	08006811 	.word	0x08006811
 8006878:	08006811 	.word	0x08006811
 800687c:	0800698b 	.word	0x0800698b
 8006880:	680b      	ldr	r3, [r1, #0]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	600a      	str	r2, [r1, #0]
 8006888:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800688c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006890:	2301      	movs	r3, #1
 8006892:	e0a3      	b.n	80069dc <_printf_i+0x1f4>
 8006894:	6825      	ldr	r5, [r4, #0]
 8006896:	6808      	ldr	r0, [r1, #0]
 8006898:	062e      	lsls	r6, r5, #24
 800689a:	f100 0304 	add.w	r3, r0, #4
 800689e:	d50a      	bpl.n	80068b6 <_printf_i+0xce>
 80068a0:	6805      	ldr	r5, [r0, #0]
 80068a2:	600b      	str	r3, [r1, #0]
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	da03      	bge.n	80068b0 <_printf_i+0xc8>
 80068a8:	232d      	movs	r3, #45	; 0x2d
 80068aa:	426d      	negs	r5, r5
 80068ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b0:	485e      	ldr	r0, [pc, #376]	; (8006a2c <_printf_i+0x244>)
 80068b2:	230a      	movs	r3, #10
 80068b4:	e019      	b.n	80068ea <_printf_i+0x102>
 80068b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068ba:	6805      	ldr	r5, [r0, #0]
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	bf18      	it	ne
 80068c0:	b22d      	sxthne	r5, r5
 80068c2:	e7ef      	b.n	80068a4 <_printf_i+0xbc>
 80068c4:	680b      	ldr	r3, [r1, #0]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	1d18      	adds	r0, r3, #4
 80068ca:	6008      	str	r0, [r1, #0]
 80068cc:	0628      	lsls	r0, r5, #24
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0xec>
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	e002      	b.n	80068da <_printf_i+0xf2>
 80068d4:	0669      	lsls	r1, r5, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0xe8>
 80068d8:	881d      	ldrh	r5, [r3, #0]
 80068da:	4854      	ldr	r0, [pc, #336]	; (8006a2c <_printf_i+0x244>)
 80068dc:	2f6f      	cmp	r7, #111	; 0x6f
 80068de:	bf0c      	ite	eq
 80068e0:	2308      	moveq	r3, #8
 80068e2:	230a      	movne	r3, #10
 80068e4:	2100      	movs	r1, #0
 80068e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ea:	6866      	ldr	r6, [r4, #4]
 80068ec:	60a6      	str	r6, [r4, #8]
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	bfa2      	ittt	ge
 80068f2:	6821      	ldrge	r1, [r4, #0]
 80068f4:	f021 0104 	bicge.w	r1, r1, #4
 80068f8:	6021      	strge	r1, [r4, #0]
 80068fa:	b90d      	cbnz	r5, 8006900 <_printf_i+0x118>
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	d04d      	beq.n	800699c <_printf_i+0x1b4>
 8006900:	4616      	mov	r6, r2
 8006902:	fbb5 f1f3 	udiv	r1, r5, r3
 8006906:	fb03 5711 	mls	r7, r3, r1, r5
 800690a:	5dc7      	ldrb	r7, [r0, r7]
 800690c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006910:	462f      	mov	r7, r5
 8006912:	42bb      	cmp	r3, r7
 8006914:	460d      	mov	r5, r1
 8006916:	d9f4      	bls.n	8006902 <_printf_i+0x11a>
 8006918:	2b08      	cmp	r3, #8
 800691a:	d10b      	bne.n	8006934 <_printf_i+0x14c>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07df      	lsls	r7, r3, #31
 8006920:	d508      	bpl.n	8006934 <_printf_i+0x14c>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	6861      	ldr	r1, [r4, #4]
 8006926:	4299      	cmp	r1, r3
 8006928:	bfde      	ittt	le
 800692a:	2330      	movle	r3, #48	; 0x30
 800692c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006930:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006934:	1b92      	subs	r2, r2, r6
 8006936:	6122      	str	r2, [r4, #16]
 8006938:	f8cd a000 	str.w	sl, [sp]
 800693c:	464b      	mov	r3, r9
 800693e:	aa03      	add	r2, sp, #12
 8006940:	4621      	mov	r1, r4
 8006942:	4640      	mov	r0, r8
 8006944:	f7ff fee2 	bl	800670c <_printf_common>
 8006948:	3001      	adds	r0, #1
 800694a:	d14c      	bne.n	80069e6 <_printf_i+0x1fe>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	b004      	add	sp, #16
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	4835      	ldr	r0, [pc, #212]	; (8006a2c <_printf_i+0x244>)
 8006958:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	680e      	ldr	r6, [r1, #0]
 8006960:	061f      	lsls	r7, r3, #24
 8006962:	f856 5b04 	ldr.w	r5, [r6], #4
 8006966:	600e      	str	r6, [r1, #0]
 8006968:	d514      	bpl.n	8006994 <_printf_i+0x1ac>
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	bf44      	itt	mi
 800696e:	f043 0320 	orrmi.w	r3, r3, #32
 8006972:	6023      	strmi	r3, [r4, #0]
 8006974:	b91d      	cbnz	r5, 800697e <_printf_i+0x196>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f023 0320 	bic.w	r3, r3, #32
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	2310      	movs	r3, #16
 8006980:	e7b0      	b.n	80068e4 <_printf_i+0xfc>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f043 0320 	orr.w	r3, r3, #32
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	2378      	movs	r3, #120	; 0x78
 800698c:	4828      	ldr	r0, [pc, #160]	; (8006a30 <_printf_i+0x248>)
 800698e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006992:	e7e3      	b.n	800695c <_printf_i+0x174>
 8006994:	065e      	lsls	r6, r3, #25
 8006996:	bf48      	it	mi
 8006998:	b2ad      	uxthmi	r5, r5
 800699a:	e7e6      	b.n	800696a <_printf_i+0x182>
 800699c:	4616      	mov	r6, r2
 800699e:	e7bb      	b.n	8006918 <_printf_i+0x130>
 80069a0:	680b      	ldr	r3, [r1, #0]
 80069a2:	6826      	ldr	r6, [r4, #0]
 80069a4:	6960      	ldr	r0, [r4, #20]
 80069a6:	1d1d      	adds	r5, r3, #4
 80069a8:	600d      	str	r5, [r1, #0]
 80069aa:	0635      	lsls	r5, r6, #24
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	d501      	bpl.n	80069b4 <_printf_i+0x1cc>
 80069b0:	6018      	str	r0, [r3, #0]
 80069b2:	e002      	b.n	80069ba <_printf_i+0x1d2>
 80069b4:	0671      	lsls	r1, r6, #25
 80069b6:	d5fb      	bpl.n	80069b0 <_printf_i+0x1c8>
 80069b8:	8018      	strh	r0, [r3, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	4616      	mov	r6, r2
 80069c0:	e7ba      	b.n	8006938 <_printf_i+0x150>
 80069c2:	680b      	ldr	r3, [r1, #0]
 80069c4:	1d1a      	adds	r2, r3, #4
 80069c6:	600a      	str	r2, [r1, #0]
 80069c8:	681e      	ldr	r6, [r3, #0]
 80069ca:	6862      	ldr	r2, [r4, #4]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7f9 fc8e 	bl	80002f0 <memchr>
 80069d4:	b108      	cbz	r0, 80069da <_printf_i+0x1f2>
 80069d6:	1b80      	subs	r0, r0, r6
 80069d8:	6060      	str	r0, [r4, #4]
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	2300      	movs	r3, #0
 80069e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e4:	e7a8      	b.n	8006938 <_printf_i+0x150>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	4632      	mov	r2, r6
 80069ea:	4649      	mov	r1, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	47d0      	blx	sl
 80069f0:	3001      	adds	r0, #1
 80069f2:	d0ab      	beq.n	800694c <_printf_i+0x164>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	079b      	lsls	r3, r3, #30
 80069f8:	d413      	bmi.n	8006a22 <_printf_i+0x23a>
 80069fa:	68e0      	ldr	r0, [r4, #12]
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	4298      	cmp	r0, r3
 8006a00:	bfb8      	it	lt
 8006a02:	4618      	movlt	r0, r3
 8006a04:	e7a4      	b.n	8006950 <_printf_i+0x168>
 8006a06:	2301      	movs	r3, #1
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	47d0      	blx	sl
 8006a10:	3001      	adds	r0, #1
 8006a12:	d09b      	beq.n	800694c <_printf_i+0x164>
 8006a14:	3501      	adds	r5, #1
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	9903      	ldr	r1, [sp, #12]
 8006a1a:	1a5b      	subs	r3, r3, r1
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dcf2      	bgt.n	8006a06 <_printf_i+0x21e>
 8006a20:	e7eb      	b.n	80069fa <_printf_i+0x212>
 8006a22:	2500      	movs	r5, #0
 8006a24:	f104 0619 	add.w	r6, r4, #25
 8006a28:	e7f5      	b.n	8006a16 <_printf_i+0x22e>
 8006a2a:	bf00      	nop
 8006a2c:	080070fd 	.word	0x080070fd
 8006a30:	0800710e 	.word	0x0800710e

08006a34 <_sbrk_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d06      	ldr	r5, [pc, #24]	; (8006a50 <_sbrk_r+0x1c>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	f7fa f850 	bl	8000ae4 <_sbrk>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_sbrk_r+0x1a>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_sbrk_r+0x1a>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	2400018c 	.word	0x2400018c

08006a54 <__sread>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5c:	f000 fab4 	bl	8006fc8 <_read_r>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	bfab      	itete	ge
 8006a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a66:	89a3      	ldrhlt	r3, [r4, #12]
 8006a68:	181b      	addge	r3, r3, r0
 8006a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a6e:	bfac      	ite	ge
 8006a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a72:	81a3      	strhlt	r3, [r4, #12]
 8006a74:	bd10      	pop	{r4, pc}

08006a76 <__swrite>:
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	461f      	mov	r7, r3
 8006a7c:	898b      	ldrh	r3, [r1, #12]
 8006a7e:	05db      	lsls	r3, r3, #23
 8006a80:	4605      	mov	r5, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	4616      	mov	r6, r2
 8006a86:	d505      	bpl.n	8006a94 <__swrite+0x1e>
 8006a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f000 f9c8 	bl	8006e24 <_lseek_r>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	4632      	mov	r2, r6
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aaa:	f000 b869 	b.w	8006b80 <_write_r>

08006aae <__sseek>:
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab6:	f000 f9b5 	bl	8006e24 <_lseek_r>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	bf15      	itete	ne
 8006ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aca:	81a3      	strheq	r3, [r4, #12]
 8006acc:	bf18      	it	ne
 8006ace:	81a3      	strhne	r3, [r4, #12]
 8006ad0:	bd10      	pop	{r4, pc}

08006ad2 <__sclose>:
 8006ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad6:	f000 b8d3 	b.w	8006c80 <_close_r>
	...

08006adc <__swbuf_r>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	460e      	mov	r6, r1
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	b118      	cbz	r0, 8006aee <__swbuf_r+0x12>
 8006ae6:	6983      	ldr	r3, [r0, #24]
 8006ae8:	b90b      	cbnz	r3, 8006aee <__swbuf_r+0x12>
 8006aea:	f7ff fbbb 	bl	8006264 <__sinit>
 8006aee:	4b21      	ldr	r3, [pc, #132]	; (8006b74 <__swbuf_r+0x98>)
 8006af0:	429c      	cmp	r4, r3
 8006af2:	d12b      	bne.n	8006b4c <__swbuf_r+0x70>
 8006af4:	686c      	ldr	r4, [r5, #4]
 8006af6:	69a3      	ldr	r3, [r4, #24]
 8006af8:	60a3      	str	r3, [r4, #8]
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	071a      	lsls	r2, r3, #28
 8006afe:	d52f      	bpl.n	8006b60 <__swbuf_r+0x84>
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	b36b      	cbz	r3, 8006b60 <__swbuf_r+0x84>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	6820      	ldr	r0, [r4, #0]
 8006b08:	1ac0      	subs	r0, r0, r3
 8006b0a:	6963      	ldr	r3, [r4, #20]
 8006b0c:	b2f6      	uxtb	r6, r6
 8006b0e:	4283      	cmp	r3, r0
 8006b10:	4637      	mov	r7, r6
 8006b12:	dc04      	bgt.n	8006b1e <__swbuf_r+0x42>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 f948 	bl	8006dac <_fflush_r>
 8006b1c:	bb30      	cbnz	r0, 8006b6c <__swbuf_r+0x90>
 8006b1e:	68a3      	ldr	r3, [r4, #8]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	60a3      	str	r3, [r4, #8]
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	701e      	strb	r6, [r3, #0]
 8006b2c:	6963      	ldr	r3, [r4, #20]
 8006b2e:	3001      	adds	r0, #1
 8006b30:	4283      	cmp	r3, r0
 8006b32:	d004      	beq.n	8006b3e <__swbuf_r+0x62>
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	07db      	lsls	r3, r3, #31
 8006b38:	d506      	bpl.n	8006b48 <__swbuf_r+0x6c>
 8006b3a:	2e0a      	cmp	r6, #10
 8006b3c:	d104      	bne.n	8006b48 <__swbuf_r+0x6c>
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4628      	mov	r0, r5
 8006b42:	f000 f933 	bl	8006dac <_fflush_r>
 8006b46:	b988      	cbnz	r0, 8006b6c <__swbuf_r+0x90>
 8006b48:	4638      	mov	r0, r7
 8006b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <__swbuf_r+0x9c>)
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d101      	bne.n	8006b56 <__swbuf_r+0x7a>
 8006b52:	68ac      	ldr	r4, [r5, #8]
 8006b54:	e7cf      	b.n	8006af6 <__swbuf_r+0x1a>
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <__swbuf_r+0xa0>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	bf08      	it	eq
 8006b5c:	68ec      	ldreq	r4, [r5, #12]
 8006b5e:	e7ca      	b.n	8006af6 <__swbuf_r+0x1a>
 8006b60:	4621      	mov	r1, r4
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 f81e 	bl	8006ba4 <__swsetup_r>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d0cb      	beq.n	8006b04 <__swbuf_r+0x28>
 8006b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b70:	e7ea      	b.n	8006b48 <__swbuf_r+0x6c>
 8006b72:	bf00      	nop
 8006b74:	080070ac 	.word	0x080070ac
 8006b78:	080070cc 	.word	0x080070cc
 8006b7c:	0800708c 	.word	0x0800708c

08006b80 <_write_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4d07      	ldr	r5, [pc, #28]	; (8006ba0 <_write_r+0x20>)
 8006b84:	4604      	mov	r4, r0
 8006b86:	4608      	mov	r0, r1
 8006b88:	4611      	mov	r1, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	602a      	str	r2, [r5, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f7f9 ff57 	bl	8000a42 <_write>
 8006b94:	1c43      	adds	r3, r0, #1
 8006b96:	d102      	bne.n	8006b9e <_write_r+0x1e>
 8006b98:	682b      	ldr	r3, [r5, #0]
 8006b9a:	b103      	cbz	r3, 8006b9e <_write_r+0x1e>
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ba0:	2400018c 	.word	0x2400018c

08006ba4 <__swsetup_r>:
 8006ba4:	4b32      	ldr	r3, [pc, #200]	; (8006c70 <__swsetup_r+0xcc>)
 8006ba6:	b570      	push	{r4, r5, r6, lr}
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	4606      	mov	r6, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	b125      	cbz	r5, 8006bba <__swsetup_r+0x16>
 8006bb0:	69ab      	ldr	r3, [r5, #24]
 8006bb2:	b913      	cbnz	r3, 8006bba <__swsetup_r+0x16>
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f7ff fb55 	bl	8006264 <__sinit>
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <__swsetup_r+0xd0>)
 8006bbc:	429c      	cmp	r4, r3
 8006bbe:	d10f      	bne.n	8006be0 <__swsetup_r+0x3c>
 8006bc0:	686c      	ldr	r4, [r5, #4]
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bc8:	0719      	lsls	r1, r3, #28
 8006bca:	d42c      	bmi.n	8006c26 <__swsetup_r+0x82>
 8006bcc:	06dd      	lsls	r5, r3, #27
 8006bce:	d411      	bmi.n	8006bf4 <__swsetup_r+0x50>
 8006bd0:	2309      	movs	r3, #9
 8006bd2:	6033      	str	r3, [r6, #0]
 8006bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295
 8006bde:	e03e      	b.n	8006c5e <__swsetup_r+0xba>
 8006be0:	4b25      	ldr	r3, [pc, #148]	; (8006c78 <__swsetup_r+0xd4>)
 8006be2:	429c      	cmp	r4, r3
 8006be4:	d101      	bne.n	8006bea <__swsetup_r+0x46>
 8006be6:	68ac      	ldr	r4, [r5, #8]
 8006be8:	e7eb      	b.n	8006bc2 <__swsetup_r+0x1e>
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <__swsetup_r+0xd8>)
 8006bec:	429c      	cmp	r4, r3
 8006bee:	bf08      	it	eq
 8006bf0:	68ec      	ldreq	r4, [r5, #12]
 8006bf2:	e7e6      	b.n	8006bc2 <__swsetup_r+0x1e>
 8006bf4:	0758      	lsls	r0, r3, #29
 8006bf6:	d512      	bpl.n	8006c1e <__swsetup_r+0x7a>
 8006bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bfa:	b141      	cbz	r1, 8006c0e <__swsetup_r+0x6a>
 8006bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c00:	4299      	cmp	r1, r3
 8006c02:	d002      	beq.n	8006c0a <__swsetup_r+0x66>
 8006c04:	4630      	mov	r0, r6
 8006c06:	f000 f98f 	bl	8006f28 <_free_r>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c14:	81a3      	strh	r3, [r4, #12]
 8006c16:	2300      	movs	r3, #0
 8006c18:	6063      	str	r3, [r4, #4]
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f043 0308 	orr.w	r3, r3, #8
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	b94b      	cbnz	r3, 8006c3e <__swsetup_r+0x9a>
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c34:	d003      	beq.n	8006c3e <__swsetup_r+0x9a>
 8006c36:	4621      	mov	r1, r4
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 f929 	bl	8006e90 <__smakebuf_r>
 8006c3e:	89a0      	ldrh	r0, [r4, #12]
 8006c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c44:	f010 0301 	ands.w	r3, r0, #1
 8006c48:	d00a      	beq.n	8006c60 <__swsetup_r+0xbc>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60a3      	str	r3, [r4, #8]
 8006c4e:	6963      	ldr	r3, [r4, #20]
 8006c50:	425b      	negs	r3, r3
 8006c52:	61a3      	str	r3, [r4, #24]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	b943      	cbnz	r3, 8006c6a <__swsetup_r+0xc6>
 8006c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c5c:	d1ba      	bne.n	8006bd4 <__swsetup_r+0x30>
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	0781      	lsls	r1, r0, #30
 8006c62:	bf58      	it	pl
 8006c64:	6963      	ldrpl	r3, [r4, #20]
 8006c66:	60a3      	str	r3, [r4, #8]
 8006c68:	e7f4      	b.n	8006c54 <__swsetup_r+0xb0>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e7f7      	b.n	8006c5e <__swsetup_r+0xba>
 8006c6e:	bf00      	nop
 8006c70:	24000010 	.word	0x24000010
 8006c74:	080070ac 	.word	0x080070ac
 8006c78:	080070cc 	.word	0x080070cc
 8006c7c:	0800708c 	.word	0x0800708c

08006c80 <_close_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d06      	ldr	r5, [pc, #24]	; (8006c9c <_close_r+0x1c>)
 8006c84:	2300      	movs	r3, #0
 8006c86:	4604      	mov	r4, r0
 8006c88:	4608      	mov	r0, r1
 8006c8a:	602b      	str	r3, [r5, #0]
 8006c8c:	f7f9 fef5 	bl	8000a7a <_close>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_close_r+0x1a>
 8006c94:	682b      	ldr	r3, [r5, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_close_r+0x1a>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	2400018c 	.word	0x2400018c

08006ca0 <__sflush_r>:
 8006ca0:	898a      	ldrh	r2, [r1, #12]
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	0710      	lsls	r0, r2, #28
 8006caa:	460c      	mov	r4, r1
 8006cac:	d458      	bmi.n	8006d60 <__sflush_r+0xc0>
 8006cae:	684b      	ldr	r3, [r1, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	dc05      	bgt.n	8006cc0 <__sflush_r+0x20>
 8006cb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dc02      	bgt.n	8006cc0 <__sflush_r+0x20>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc2:	2e00      	cmp	r6, #0
 8006cc4:	d0f9      	beq.n	8006cba <__sflush_r+0x1a>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ccc:	682f      	ldr	r7, [r5, #0]
 8006cce:	602b      	str	r3, [r5, #0]
 8006cd0:	d032      	beq.n	8006d38 <__sflush_r+0x98>
 8006cd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cd4:	89a3      	ldrh	r3, [r4, #12]
 8006cd6:	075a      	lsls	r2, r3, #29
 8006cd8:	d505      	bpl.n	8006ce6 <__sflush_r+0x46>
 8006cda:	6863      	ldr	r3, [r4, #4]
 8006cdc:	1ac0      	subs	r0, r0, r3
 8006cde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ce0:	b10b      	cbz	r3, 8006ce6 <__sflush_r+0x46>
 8006ce2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce4:	1ac0      	subs	r0, r0, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4602      	mov	r2, r0
 8006cea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cec:	6a21      	ldr	r1, [r4, #32]
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b0      	blx	r6
 8006cf2:	1c43      	adds	r3, r0, #1
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	d106      	bne.n	8006d06 <__sflush_r+0x66>
 8006cf8:	6829      	ldr	r1, [r5, #0]
 8006cfa:	291d      	cmp	r1, #29
 8006cfc:	d82c      	bhi.n	8006d58 <__sflush_r+0xb8>
 8006cfe:	4a2a      	ldr	r2, [pc, #168]	; (8006da8 <__sflush_r+0x108>)
 8006d00:	40ca      	lsrs	r2, r1
 8006d02:	07d6      	lsls	r6, r2, #31
 8006d04:	d528      	bpl.n	8006d58 <__sflush_r+0xb8>
 8006d06:	2200      	movs	r2, #0
 8006d08:	6062      	str	r2, [r4, #4]
 8006d0a:	04d9      	lsls	r1, r3, #19
 8006d0c:	6922      	ldr	r2, [r4, #16]
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	d504      	bpl.n	8006d1c <__sflush_r+0x7c>
 8006d12:	1c42      	adds	r2, r0, #1
 8006d14:	d101      	bne.n	8006d1a <__sflush_r+0x7a>
 8006d16:	682b      	ldr	r3, [r5, #0]
 8006d18:	b903      	cbnz	r3, 8006d1c <__sflush_r+0x7c>
 8006d1a:	6560      	str	r0, [r4, #84]	; 0x54
 8006d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d1e:	602f      	str	r7, [r5, #0]
 8006d20:	2900      	cmp	r1, #0
 8006d22:	d0ca      	beq.n	8006cba <__sflush_r+0x1a>
 8006d24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d28:	4299      	cmp	r1, r3
 8006d2a:	d002      	beq.n	8006d32 <__sflush_r+0x92>
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 f8fb 	bl	8006f28 <_free_r>
 8006d32:	2000      	movs	r0, #0
 8006d34:	6360      	str	r0, [r4, #52]	; 0x34
 8006d36:	e7c1      	b.n	8006cbc <__sflush_r+0x1c>
 8006d38:	6a21      	ldr	r1, [r4, #32]
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	1c41      	adds	r1, r0, #1
 8006d42:	d1c7      	bne.n	8006cd4 <__sflush_r+0x34>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0c4      	beq.n	8006cd4 <__sflush_r+0x34>
 8006d4a:	2b1d      	cmp	r3, #29
 8006d4c:	d001      	beq.n	8006d52 <__sflush_r+0xb2>
 8006d4e:	2b16      	cmp	r3, #22
 8006d50:	d101      	bne.n	8006d56 <__sflush_r+0xb6>
 8006d52:	602f      	str	r7, [r5, #0]
 8006d54:	e7b1      	b.n	8006cba <__sflush_r+0x1a>
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	e7ad      	b.n	8006cbc <__sflush_r+0x1c>
 8006d60:	690f      	ldr	r7, [r1, #16]
 8006d62:	2f00      	cmp	r7, #0
 8006d64:	d0a9      	beq.n	8006cba <__sflush_r+0x1a>
 8006d66:	0793      	lsls	r3, r2, #30
 8006d68:	680e      	ldr	r6, [r1, #0]
 8006d6a:	bf08      	it	eq
 8006d6c:	694b      	ldreq	r3, [r1, #20]
 8006d6e:	600f      	str	r7, [r1, #0]
 8006d70:	bf18      	it	ne
 8006d72:	2300      	movne	r3, #0
 8006d74:	eba6 0807 	sub.w	r8, r6, r7
 8006d78:	608b      	str	r3, [r1, #8]
 8006d7a:	f1b8 0f00 	cmp.w	r8, #0
 8006d7e:	dd9c      	ble.n	8006cba <__sflush_r+0x1a>
 8006d80:	6a21      	ldr	r1, [r4, #32]
 8006d82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d84:	4643      	mov	r3, r8
 8006d86:	463a      	mov	r2, r7
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b0      	blx	r6
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	dc06      	bgt.n	8006d9e <__sflush_r+0xfe>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d96:	81a3      	strh	r3, [r4, #12]
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e78e      	b.n	8006cbc <__sflush_r+0x1c>
 8006d9e:	4407      	add	r7, r0
 8006da0:	eba8 0800 	sub.w	r8, r8, r0
 8006da4:	e7e9      	b.n	8006d7a <__sflush_r+0xda>
 8006da6:	bf00      	nop
 8006da8:	20400001 	.word	0x20400001

08006dac <_fflush_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	690b      	ldr	r3, [r1, #16]
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b913      	cbnz	r3, 8006dbc <_fflush_r+0x10>
 8006db6:	2500      	movs	r5, #0
 8006db8:	4628      	mov	r0, r5
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	b118      	cbz	r0, 8006dc6 <_fflush_r+0x1a>
 8006dbe:	6983      	ldr	r3, [r0, #24]
 8006dc0:	b90b      	cbnz	r3, 8006dc6 <_fflush_r+0x1a>
 8006dc2:	f7ff fa4f 	bl	8006264 <__sinit>
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <_fflush_r+0x6c>)
 8006dc8:	429c      	cmp	r4, r3
 8006dca:	d11b      	bne.n	8006e04 <_fflush_r+0x58>
 8006dcc:	686c      	ldr	r4, [r5, #4]
 8006dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ef      	beq.n	8006db6 <_fflush_r+0xa>
 8006dd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dd8:	07d0      	lsls	r0, r2, #31
 8006dda:	d404      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006ddc:	0599      	lsls	r1, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_fflush_r+0x3a>
 8006de0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006de2:	f7ff fadd 	bl	80063a0 <__retarget_lock_acquire_recursive>
 8006de6:	4628      	mov	r0, r5
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7ff ff59 	bl	8006ca0 <__sflush_r>
 8006dee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006df0:	07da      	lsls	r2, r3, #31
 8006df2:	4605      	mov	r5, r0
 8006df4:	d4e0      	bmi.n	8006db8 <_fflush_r+0xc>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	059b      	lsls	r3, r3, #22
 8006dfa:	d4dd      	bmi.n	8006db8 <_fflush_r+0xc>
 8006dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfe:	f7ff fad0 	bl	80063a2 <__retarget_lock_release_recursive>
 8006e02:	e7d9      	b.n	8006db8 <_fflush_r+0xc>
 8006e04:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <_fflush_r+0x70>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	d101      	bne.n	8006e0e <_fflush_r+0x62>
 8006e0a:	68ac      	ldr	r4, [r5, #8]
 8006e0c:	e7df      	b.n	8006dce <_fflush_r+0x22>
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <_fflush_r+0x74>)
 8006e10:	429c      	cmp	r4, r3
 8006e12:	bf08      	it	eq
 8006e14:	68ec      	ldreq	r4, [r5, #12]
 8006e16:	e7da      	b.n	8006dce <_fflush_r+0x22>
 8006e18:	080070ac 	.word	0x080070ac
 8006e1c:	080070cc 	.word	0x080070cc
 8006e20:	0800708c 	.word	0x0800708c

08006e24 <_lseek_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_lseek_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7f9 fe48 	bl	8000ac8 <_lseek>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_lseek_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_lseek_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	2400018c 	.word	0x2400018c

08006e48 <__swhatbuf_r>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	460e      	mov	r6, r1
 8006e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e50:	2900      	cmp	r1, #0
 8006e52:	b096      	sub	sp, #88	; 0x58
 8006e54:	4614      	mov	r4, r2
 8006e56:	461d      	mov	r5, r3
 8006e58:	da07      	bge.n	8006e6a <__swhatbuf_r+0x22>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	602b      	str	r3, [r5, #0]
 8006e5e:	89b3      	ldrh	r3, [r6, #12]
 8006e60:	061a      	lsls	r2, r3, #24
 8006e62:	d410      	bmi.n	8006e86 <__swhatbuf_r+0x3e>
 8006e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e68:	e00e      	b.n	8006e88 <__swhatbuf_r+0x40>
 8006e6a:	466a      	mov	r2, sp
 8006e6c:	f000 f8be 	bl	8006fec <_fstat_r>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	dbf2      	blt.n	8006e5a <__swhatbuf_r+0x12>
 8006e74:	9a01      	ldr	r2, [sp, #4]
 8006e76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e7e:	425a      	negs	r2, r3
 8006e80:	415a      	adcs	r2, r3
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	e7ee      	b.n	8006e64 <__swhatbuf_r+0x1c>
 8006e86:	2340      	movs	r3, #64	; 0x40
 8006e88:	2000      	movs	r0, #0
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	b016      	add	sp, #88	; 0x58
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}

08006e90 <__smakebuf_r>:
 8006e90:	898b      	ldrh	r3, [r1, #12]
 8006e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e94:	079d      	lsls	r5, r3, #30
 8006e96:	4606      	mov	r6, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	d507      	bpl.n	8006eac <__smakebuf_r+0x1c>
 8006e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	6163      	str	r3, [r4, #20]
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}
 8006eac:	ab01      	add	r3, sp, #4
 8006eae:	466a      	mov	r2, sp
 8006eb0:	f7ff ffca 	bl	8006e48 <__swhatbuf_r>
 8006eb4:	9900      	ldr	r1, [sp, #0]
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff fa73 	bl	80063a4 <_malloc_r>
 8006ebe:	b948      	cbnz	r0, 8006ed4 <__smakebuf_r+0x44>
 8006ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d4ef      	bmi.n	8006ea8 <__smakebuf_r+0x18>
 8006ec8:	f023 0303 	bic.w	r3, r3, #3
 8006ecc:	f043 0302 	orr.w	r3, r3, #2
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	e7e3      	b.n	8006e9c <__smakebuf_r+0xc>
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <__smakebuf_r+0x7c>)
 8006ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	6020      	str	r0, [r4, #0]
 8006edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	9b00      	ldr	r3, [sp, #0]
 8006ee4:	6163      	str	r3, [r4, #20]
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	6120      	str	r0, [r4, #16]
 8006eea:	b15b      	cbz	r3, 8006f04 <__smakebuf_r+0x74>
 8006eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f88d 	bl	8007010 <_isatty_r>
 8006ef6:	b128      	cbz	r0, 8006f04 <__smakebuf_r+0x74>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	f023 0303 	bic.w	r3, r3, #3
 8006efe:	f043 0301 	orr.w	r3, r3, #1
 8006f02:	81a3      	strh	r3, [r4, #12]
 8006f04:	89a0      	ldrh	r0, [r4, #12]
 8006f06:	4305      	orrs	r5, r0
 8006f08:	81a5      	strh	r5, [r4, #12]
 8006f0a:	e7cd      	b.n	8006ea8 <__smakebuf_r+0x18>
 8006f0c:	080061fd 	.word	0x080061fd

08006f10 <__malloc_lock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	; (8006f18 <__malloc_lock+0x8>)
 8006f12:	f7ff ba45 	b.w	80063a0 <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	24000184 	.word	0x24000184

08006f1c <__malloc_unlock>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	; (8006f24 <__malloc_unlock+0x8>)
 8006f1e:	f7ff ba40 	b.w	80063a2 <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	24000184 	.word	0x24000184

08006f28 <_free_r>:
 8006f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	d048      	beq.n	8006fc0 <_free_r+0x98>
 8006f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f32:	9001      	str	r0, [sp, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f1a1 0404 	sub.w	r4, r1, #4
 8006f3a:	bfb8      	it	lt
 8006f3c:	18e4      	addlt	r4, r4, r3
 8006f3e:	f7ff ffe7 	bl	8006f10 <__malloc_lock>
 8006f42:	4a20      	ldr	r2, [pc, #128]	; (8006fc4 <_free_r+0x9c>)
 8006f44:	9801      	ldr	r0, [sp, #4]
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	4615      	mov	r5, r2
 8006f4a:	b933      	cbnz	r3, 8006f5a <_free_r+0x32>
 8006f4c:	6063      	str	r3, [r4, #4]
 8006f4e:	6014      	str	r4, [r2, #0]
 8006f50:	b003      	add	sp, #12
 8006f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f56:	f7ff bfe1 	b.w	8006f1c <__malloc_unlock>
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	d90b      	bls.n	8006f76 <_free_r+0x4e>
 8006f5e:	6821      	ldr	r1, [r4, #0]
 8006f60:	1862      	adds	r2, r4, r1
 8006f62:	4293      	cmp	r3, r2
 8006f64:	bf04      	itt	eq
 8006f66:	681a      	ldreq	r2, [r3, #0]
 8006f68:	685b      	ldreq	r3, [r3, #4]
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	bf04      	itt	eq
 8006f6e:	1852      	addeq	r2, r2, r1
 8006f70:	6022      	streq	r2, [r4, #0]
 8006f72:	602c      	str	r4, [r5, #0]
 8006f74:	e7ec      	b.n	8006f50 <_free_r+0x28>
 8006f76:	461a      	mov	r2, r3
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	b10b      	cbz	r3, 8006f80 <_free_r+0x58>
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	d9fa      	bls.n	8006f76 <_free_r+0x4e>
 8006f80:	6811      	ldr	r1, [r2, #0]
 8006f82:	1855      	adds	r5, r2, r1
 8006f84:	42a5      	cmp	r5, r4
 8006f86:	d10b      	bne.n	8006fa0 <_free_r+0x78>
 8006f88:	6824      	ldr	r4, [r4, #0]
 8006f8a:	4421      	add	r1, r4
 8006f8c:	1854      	adds	r4, r2, r1
 8006f8e:	42a3      	cmp	r3, r4
 8006f90:	6011      	str	r1, [r2, #0]
 8006f92:	d1dd      	bne.n	8006f50 <_free_r+0x28>
 8006f94:	681c      	ldr	r4, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	6053      	str	r3, [r2, #4]
 8006f9a:	4421      	add	r1, r4
 8006f9c:	6011      	str	r1, [r2, #0]
 8006f9e:	e7d7      	b.n	8006f50 <_free_r+0x28>
 8006fa0:	d902      	bls.n	8006fa8 <_free_r+0x80>
 8006fa2:	230c      	movs	r3, #12
 8006fa4:	6003      	str	r3, [r0, #0]
 8006fa6:	e7d3      	b.n	8006f50 <_free_r+0x28>
 8006fa8:	6825      	ldr	r5, [r4, #0]
 8006faa:	1961      	adds	r1, r4, r5
 8006fac:	428b      	cmp	r3, r1
 8006fae:	bf04      	itt	eq
 8006fb0:	6819      	ldreq	r1, [r3, #0]
 8006fb2:	685b      	ldreq	r3, [r3, #4]
 8006fb4:	6063      	str	r3, [r4, #4]
 8006fb6:	bf04      	itt	eq
 8006fb8:	1949      	addeq	r1, r1, r5
 8006fba:	6021      	streq	r1, [r4, #0]
 8006fbc:	6054      	str	r4, [r2, #4]
 8006fbe:	e7c7      	b.n	8006f50 <_free_r+0x28>
 8006fc0:	b003      	add	sp, #12
 8006fc2:	bd30      	pop	{r4, r5, pc}
 8006fc4:	24000098 	.word	0x24000098

08006fc8 <_read_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	; (8006fe8 <_read_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7f9 fd16 	bl	8000a08 <_read>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_read_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_read_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	2400018c 	.word	0x2400018c

08006fec <_fstat_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	; (800700c <_fstat_r+0x20>)
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	4608      	mov	r0, r1
 8006ff6:	4611      	mov	r1, r2
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f7f9 fd4a 	bl	8000a92 <_fstat>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d102      	bne.n	8007008 <_fstat_r+0x1c>
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	b103      	cbz	r3, 8007008 <_fstat_r+0x1c>
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	bd38      	pop	{r3, r4, r5, pc}
 800700a:	bf00      	nop
 800700c:	2400018c 	.word	0x2400018c

08007010 <_isatty_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d06      	ldr	r5, [pc, #24]	; (800702c <_isatty_r+0x1c>)
 8007014:	2300      	movs	r3, #0
 8007016:	4604      	mov	r4, r0
 8007018:	4608      	mov	r0, r1
 800701a:	602b      	str	r3, [r5, #0]
 800701c:	f7f9 fd49 	bl	8000ab2 <_isatty>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_isatty_r+0x1a>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_isatty_r+0x1a>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	2400018c 	.word	0x2400018c

08007030 <_init>:
 8007030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007032:	bf00      	nop
 8007034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007036:	bc08      	pop	{r3}
 8007038:	469e      	mov	lr, r3
 800703a:	4770      	bx	lr

0800703c <_fini>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	bf00      	nop
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr
