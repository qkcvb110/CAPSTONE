
tf-luna_CAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003dc0  08003dc0  00013dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003e2c  08003e2c  00013e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000198  24000010  08003e44  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001a8  08003e44  000201a8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cdfc  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d55  00000000  00000000  0003ce3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001058  00000000  00000000  0003fb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000f50  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031626  00000000  00000000  00041b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00012ca0  00000000  00000000  0007315e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001489cd  00000000  00000000  00085dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001ce7cb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004590  00000000  00000000  001ce820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08003da8 	.word	0x08003da8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08003da8 	.word	0x08003da8

080002ec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002f0:	4b3e      	ldr	r3, [pc, #248]	; (80003ec <MX_FDCAN1_Init+0x100>)
 80002f2:	4a3f      	ldr	r2, [pc, #252]	; (80003f0 <MX_FDCAN1_Init+0x104>)
 80002f4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80002f6:	4b3d      	ldr	r3, [pc, #244]	; (80003ec <MX_FDCAN1_Init+0x100>)
 80002f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002fe:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000300:	2200      	movs	r2, #0
 8000302:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000304:	4b39      	ldr	r3, [pc, #228]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000306:	2201      	movs	r2, #1
 8000308:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800030c:	2200      	movs	r2, #0
 800030e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000310:	4b36      	ldr	r3, [pc, #216]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000312:	2200      	movs	r2, #0
 8000314:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000316:	4b35      	ldr	r3, [pc, #212]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000318:	2201      	movs	r2, #1
 800031a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800031c:	4b33      	ldr	r3, [pc, #204]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800031e:	2201      	movs	r2, #1
 8000320:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 8000322:	4b32      	ldr	r3, [pc, #200]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000324:	2205      	movs	r2, #5
 8000326:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000328:	4b30      	ldr	r3, [pc, #192]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800032a:	2202      	movs	r2, #2
 800032c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000330:	2201      	movs	r2, #1
 8000332:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000334:	4b2d      	ldr	r3, [pc, #180]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000336:	2204      	movs	r2, #4
 8000338:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 800033a:	4b2c      	ldr	r3, [pc, #176]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800033c:	2205      	movs	r2, #5
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000340:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000342:	2204      	movs	r2, #4
 8000344:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000346:	4b29      	ldr	r3, [pc, #164]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800034c:	4b27      	ldr	r3, [pc, #156]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800034e:	2201      	movs	r2, #1
 8000350:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000352:	4b26      	ldr	r3, [pc, #152]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000354:	2200      	movs	r2, #0
 8000356:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800035a:	2201      	movs	r2, #1
 800035c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800035e:	4b23      	ldr	r3, [pc, #140]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000360:	2204      	movs	r2, #4
 8000362:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000364:	4b21      	ldr	r3, [pc, #132]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000366:	2200      	movs	r2, #0
 8000368:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800036a:	4b20      	ldr	r3, [pc, #128]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800036c:	2204      	movs	r2, #4
 800036e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000370:	4b1e      	ldr	r3, [pc, #120]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000372:	2201      	movs	r2, #1
 8000374:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000376:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000378:	2204      	movs	r2, #4
 800037a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800037c:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800037e:	2200      	movs	r2, #0
 8000380:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000384:	2200      	movs	r2, #0
 8000386:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000388:	4b18      	ldr	r3, [pc, #96]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800038a:	2201      	movs	r2, #1
 800038c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800038e:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000390:	2200      	movs	r2, #0
 8000392:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_FDCAN1_Init+0x100>)
 8000396:	2204      	movs	r2, #4
 8000398:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800039a:	4814      	ldr	r0, [pc, #80]	; (80003ec <MX_FDCAN1_Init+0x100>)
 800039c:	f000 fc22 	bl	8000be4 <HAL_FDCAN_Init>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80003a6:	f000 f98d 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID; //IdType ?? ?���??????? ID ?��?�� ?��?�� ID�??????? ?��?��?��?���??????? ?���???????�??????? ?��?��?��?��?�� .
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
     sFilterConfig.FilterIndex = 0; //Filterindex ?�� ?��?�� 개의 ?��?���??????? 구성?��?�� 경우?�� ?��?��?��?��?��. 1개의 ?��?���??????? ?��?��?���??????? ?���??????? ?��문에 0?���??????? ?��?��?��?��?��.
 80003b0:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
     sFilterConfig.FilterType = FDCAN_FILTER_MASK; //FilterType ?? ?��리�? ?��?��?��?�� ?��?�� ?��?��?��?��?��. ?��기서?�� MASK ?��?���??????? ?��?��?���??????? ?��?��?��?��
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	609a      	str	r2, [r3, #8]
     sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //FilterConfig ?�� ?��?���??????? ?��과하?�� 메시�????????�� ?��?��?��?�� ?��?�� ?��?��?�� 결정?��?��?��. RX FIFO 0?���??????? 보내?���??????? ?��?��?��?�� ?��?��?��?��.
 80003bc:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003be:	2201      	movs	r2, #1
 80003c0:	60da      	str	r2, [r3, #12]

     sFilterConfig.FilterID1 = 0x33; // ID Node2  //?�� MASK ?��?��?�� 경우 ID1( 0x22 )?�� ID�??????? ?��?��?���??????? ID2( 0x22 )�??????? 마스?�� 비트�??????? ?��?��?��?��?��.
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003c4:	2233      	movs	r2, #51	; 0x33
 80003c6:	611a      	str	r2, [r3, #16]
     sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 80003c8:	4b0a      	ldr	r3, [pc, #40]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80003ce:	615a      	str	r2, [r3, #20]
     sFilterConfig.RxBufferIndex = 0; //RxBufferIndex ?�� FIFO ???�� RX Buffer�??????? ?��?��?�� 경우 ?��?��?���???????�??????? 0?���??????? ?��?��?��?��.
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	619a      	str	r2, [r3, #24]
       if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80003d6:	4907      	ldr	r1, [pc, #28]	; (80003f4 <MX_FDCAN1_Init+0x108>)
 80003d8:	4804      	ldr	r0, [pc, #16]	; (80003ec <MX_FDCAN1_Init+0x100>)
 80003da:	f000 fde5 	bl	8000fa8 <HAL_FDCAN_ConfigFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_FDCAN1_Init+0xfc>
       {
         Error_Handler();
 80003e4:	f000 f96e 	bl	80006c4 <Error_Handler>
//                      /* Notification Error */
//                     Error_Handler();
//                    }
  /* USER CODE END FDCAN1_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	2400004c 	.word	0x2400004c
 80003f0:	4000a000 	.word	0x4000a000
 80003f4:	2400002c 	.word	0x2400002c

080003f8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b0b8      	sub	sp, #224	; 0xe0
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000400:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	22b8      	movs	r2, #184	; 0xb8
 8000416:	2100      	movs	r1, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f003 fcbd 	bl	8003d98 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <HAL_FDCAN_MspInit+0xc0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d143      	bne.n	80004b0 <HAL_FDCAN_MspInit+0xb8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800042c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800042e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000432:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fa9a 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000446:	f000 f93d 	bl	80006c4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800044a:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <HAL_FDCAN_MspInit+0xc4>)
 800044c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000450:	4a1a      	ldr	r2, [pc, #104]	; (80004bc <HAL_FDCAN_MspInit+0xc4>)
 8000452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000456:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <HAL_FDCAN_MspInit+0xc4>)
 800045c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000464:	613b      	str	r3, [r7, #16]
 8000466:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <HAL_FDCAN_MspInit+0xc4>)
 800046a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800046e:	4a13      	ldr	r2, [pc, #76]	; (80004bc <HAL_FDCAN_MspInit+0xc4>)
 8000470:	f043 0308 	orr.w	r3, r3, #8
 8000474:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <HAL_FDCAN_MspInit+0xc4>)
 800047a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800047e:	f003 0308 	and.w	r3, r3, #8
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000486:	2303      	movs	r3, #3
 8000488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048c:	2302      	movs	r3, #2
 800048e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000498:	2300      	movs	r3, #0
 800049a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800049e:	2309      	movs	r3, #9
 80004a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80004a8:	4619      	mov	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <HAL_FDCAN_MspInit+0xc8>)
 80004ac:	f001 f924 	bl	80016f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80004b0:	bf00      	nop
 80004b2:	37e0      	adds	r7, #224	; 0xe0
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	4000a000 	.word	0x4000a000
 80004bc:	58024400 	.word	0x58024400
 80004c0:	58020c00 	.word	0x58020c00

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <MX_GPIO_Init+0x6c>)
 80004cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004d0:	4a17      	ldr	r2, [pc, #92]	; (8000530 <MX_GPIO_Init+0x6c>)
 80004d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <MX_GPIO_Init+0x6c>)
 80004dc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_GPIO_Init+0x6c>)
 80004ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004ee:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_GPIO_Init+0x6c>)
 80004f0:	f043 0308 	orr.w	r3, r3, #8
 80004f4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <MX_GPIO_Init+0x6c>)
 80004fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80004fe:	f003 0308 	and.w	r3, r3, #8
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <MX_GPIO_Init+0x6c>)
 8000508:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <MX_GPIO_Init+0x6c>)
 800050e:	f043 0302 	orr.w	r3, r3, #2
 8000512:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_GPIO_Init+0x6c>)
 8000518:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]

}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	58024400 	.word	0x58024400

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 f9b9 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */
//  TF_Luna_init(&TF_Luna_1, &hi2c1, 0x10);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f853 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f7ff ffbf 	bl	80004c4 <MX_GPIO_Init>
//  MX_I2C1_Init();
//  MX_USART3_UART_Init();
  MX_FDCAN1_Init();
 8000546:	f7ff fed1 	bl	80002ec <MX_FDCAN1_Init>
     *   TF_Luna_init(&TF_Luna_3, &hi2c1, 0x12);
     *   TF_Luna_init(&TF_Luna_4, &hi2c1, 0x13);
     *   TF_Luna_init(&TF_Luna_5, &hi2c1, 0x14);
     */

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3,3,0,1); //원진추가
 800054a:	2301      	movs	r3, #1
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2203      	movs	r2, #3
 8000552:	2103      	movs	r1, #3
 8000554:	4821      	ldr	r0, [pc, #132]	; (80005dc <main+0xa8>)
 8000556:	f000 fd9d 	bl	8001094 <HAL_FDCAN_ConfigGlobalFilter>
    	if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 800055a:	4820      	ldr	r0, [pc, #128]	; (80005dc <main+0xa8>)
 800055c:	f000 fdc7 	bl	80010ee <HAL_FDCAN_Start>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <main+0x36>
        {
         Error_Handler();
 8000566:	f000 f8ad 	bl	80006c4 <Error_Handler>

        // STart FDCAN2


        // Activate the notification for new data in FIFO0 for FDCAN1
        if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	481b      	ldr	r0, [pc, #108]	; (80005dc <main+0xa8>)
 8000570:	f000 fe44 	bl	80011fc <HAL_FDCAN_ActivateNotification>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <main+0x4a>
        {
          /* Notification Error */
          Error_Handler();
 800057a:	f000 f8a3 	bl	80006c4 <Error_Handler>
        }


        // Configure TX Header for FDCAN1
        TxHeader.Identifier = 0x11;
 800057e:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <main+0xac>)
 8000580:	2211      	movs	r2, #17
 8000582:	601a      	str	r2, [r3, #0]
        TxHeader.IdType = FDCAN_STANDARD_ID;
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <main+0xac>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
        TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <main+0xac>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
        TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <main+0xac>)
 8000592:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000596:	60da      	str	r2, [r3, #12]
        TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <main+0xac>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
        TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <main+0xac>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
        TxHeader.FDFormat = FDCAN_FD_CAN;
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <main+0xac>)
 80005a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005aa:	619a      	str	r2, [r3, #24]
        TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <main+0xac>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
        TxHeader.MessageMarker = 0x0;
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <main+0xac>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
//	  int Distance100=Distance/100;
//	  int Distance10=Distance/10%10;
//	  int Distance1=Distance%10;
//	  printDataArray();
//	  printf("%d",tfDist); // Open your SVW ITM Data Console
	  HAL_Delay(4); // 250Hz/
 80005b8:	2004      	movs	r0, #4
 80005ba:	f000 fa0b 	bl	80009d4 <HAL_Delay>



//	  sprintf ((char *)TxData_Node1_To_Node3,"%d",tfDist);

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData_Node1_To_Node3)!= HAL_OK)
 80005be:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <main+0xb0>)
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <main+0xac>)
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <main+0xa8>)
 80005c4:	f000 fdbe 	bl	8001144 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <main+0x9e>
	  {
	  	Error_Handler();
 80005ce:	f000 f879 	bl	80006c4 <Error_Handler>
	  }
	  		     HAL_Delay (100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 f9fe 	bl	80009d4 <HAL_Delay>
	  HAL_Delay(4); // 250Hz/
 80005d8:	e7ee      	b.n	80005b8 <main+0x84>
 80005da:	bf00      	nop
 80005dc:	2400004c 	.word	0x2400004c
 80005e0:	2400010c 	.word	0x2400010c
 80005e4:	240000fc 	.word	0x240000fc

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	; 0x70
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f2:	224c      	movs	r2, #76	; 0x4c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fbce 	bl	8003d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2220      	movs	r2, #32
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fbc8 	bl	8003d98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000608:	2004      	movs	r0, #4
 800060a:	f001 fa25 	bl	8001a58 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <SystemClock_Config+0xd8>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	4a2a      	ldr	r2, [pc, #168]	; (80006c0 <SystemClock_Config+0xd8>)
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	6193      	str	r3, [r2, #24]
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xd8>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800062a:	bf00      	nop
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xd8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000638:	d1f8      	bne.n	800062c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2302      	movs	r3, #2
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800063e:	2301      	movs	r3, #1
 8000640:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2340      	movs	r3, #64	; 0x40
 8000644:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2300      	movs	r3, #0
 800064c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000652:	2308      	movs	r3, #8
 8000654:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000656:	2302      	movs	r3, #2
 8000658:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 800065a:	2320      	movs	r3, #32
 800065c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800065e:	2302      	movs	r3, #2
 8000660:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000662:	230c      	movs	r3, #12
 8000664:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000666:	2300      	movs	r3, #0
 8000668:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fa4a 	bl	8001b0c <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f000 f821 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	233f      	movs	r3, #63	; 0x3f
 8000684:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000692:	2340      	movs	r3, #64	; 0x40
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000696:	2340      	movs	r3, #64	; 0x40
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fe33 	bl	8002314 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006b4:	f000 f806 	bl	80006c4 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3770      	adds	r7, #112	; 0x70
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	58024800 	.word	0x58024800

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <HAL_MspInit+0x30>)
 80006d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006dc:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x30>)
 80006de:	f043 0302 	orr.w	r3, r3, #2
 80006e2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x30>)
 80006e8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80006ec:	f003 0302 	and.w	r3, r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	58024400 	.word	0x58024400

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f920 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <TIM3_IRQHandler+0x10>)
 800075e:	f003 f979 	bl	8003a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	24000158 	.word	0x24000158

0800076c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <SystemInit+0xd0>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000776:	4a31      	ldr	r2, [pc, #196]	; (800083c <SystemInit+0xd0>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <SystemInit+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f003 030f 	and.w	r3, r3, #15
 8000788:	2b02      	cmp	r3, #2
 800078a:	d807      	bhi.n	800079c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <SystemInit+0xd4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f023 030f 	bic.w	r3, r3, #15
 8000794:	4a2a      	ldr	r2, [pc, #168]	; (8000840 <SystemInit+0xd4>)
 8000796:	f043 0303 	orr.w	r3, r3, #3
 800079a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <SystemInit+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a28      	ldr	r2, [pc, #160]	; (8000844 <SystemInit+0xd8>)
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <SystemInit+0xd8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemInit+0xd8>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4924      	ldr	r1, [pc, #144]	; (8000844 <SystemInit+0xd8>)
 80007b4:	4b24      	ldr	r3, [pc, #144]	; (8000848 <SystemInit+0xdc>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <SystemInit+0xd4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 030c 	and.w	r3, r3, #12
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d007      	beq.n	80007d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <SystemInit+0xd4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f023 030f 	bic.w	r3, r3, #15
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <SystemInit+0xd4>)
 80007d0:	f043 0303 	orr.w	r3, r3, #3
 80007d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80007d6:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <SystemInit+0xd8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <SystemInit+0xd8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <SystemInit+0xd8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <SystemInit+0xd8>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <SystemInit+0xe0>)
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <SystemInit+0xd8>)
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <SystemInit+0xe4>)
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <SystemInit+0xd8>)
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <SystemInit+0xe8>)
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <SystemInit+0xd8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <SystemInit+0xd8>)
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <SystemInit+0xe8>)
 8000804:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <SystemInit+0xd8>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <SystemInit+0xd8>)
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <SystemInit+0xe8>)
 8000810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <SystemInit+0xd8>)
 8000814:	2200      	movs	r2, #0
 8000816:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <SystemInit+0xd8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <SystemInit+0xd8>)
 800081e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <SystemInit+0xd8>)
 8000826:	2200      	movs	r2, #0
 8000828:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <SystemInit+0xec>)
 800082c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000830:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000ed00 	.word	0xe000ed00
 8000840:	52002000 	.word	0x52002000
 8000844:	58024400 	.word	0x58024400
 8000848:	eaf6ed7f 	.word	0xeaf6ed7f
 800084c:	02020200 	.word	0x02020200
 8000850:	01ff0000 	.word	0x01ff0000
 8000854:	01010280 	.word	0x01010280
 8000858:	52004000 	.word	0x52004000

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000894 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f7ff ff84 	bl	800076c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	; (80008a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800088a:	f003 fa53 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff fe51 	bl	8000534 <main>
  bx  lr
 8000892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000894:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000898:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800089c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008a0:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 80008a4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008a8:	240001a8 	.word	0x240001a8

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b6:	2003      	movs	r0, #3
 80008b8:	f000 f962 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80008bc:	f001 fee0 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 80008c0:	4602      	mov	r2, r0
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_Init+0x68>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	4913      	ldr	r1, [pc, #76]	; (800091c <HAL_Init+0x6c>)
 80008ce:	5ccb      	ldrb	r3, [r1, r3]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_Init+0x68>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_Init+0x6c>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	f003 031f 	and.w	r3, r3, #31
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <HAL_Init+0x70>)
 80008f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <HAL_Init+0x74>)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008fa:	200f      	movs	r0, #15
 80008fc:	f000 f814 	bl	8000928 <HAL_InitTick>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e002      	b.n	8000910 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800090a:	f7ff fee1 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	58024400 	.word	0x58024400
 800091c:	08003e0c 	.word	0x08003e0c
 8000920:	24000004 	.word	0x24000004
 8000924:	24000000 	.word	0x24000000

08000928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <HAL_InitTick+0x60>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d101      	bne.n	800093c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e021      	b.n	8000980 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_InitTick+0x64>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_InitTick+0x60>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f939 	bl	8000bca <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f911 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x68>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2400000c 	.word	0x2400000c
 800098c:	24000000 	.word	0x24000000
 8000990:	24000008 	.word	0x24000008

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	2400000c 	.word	0x2400000c
 80009b8:	240001a4 	.word	0x240001a4

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	240001a4 	.word	0x240001a4

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <HAL_Delay+0x44>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2400000c 	.word	0x2400000c

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <__NVIC_SetPriorityGrouping+0x40>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x40>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	05fa0000 	.word	0x05fa0000

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff47 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff5e 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffb2 	bl	8000b3c <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b098      	sub	sp, #96	; 0x60
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000bec:	4a84      	ldr	r2, [pc, #528]	; (8000e00 <HAL_FDCAN_Init+0x21c>)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	224c      	movs	r2, #76	; 0x4c
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 f8c0 	bl	8003d7c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e1ca      	b.n	8000f9c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a7e      	ldr	r2, [pc, #504]	; (8000e04 <HAL_FDCAN_Init+0x220>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d106      	bne.n	8000c1e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c18:	461a      	mov	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fbe0 	bl	80003f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	699a      	ldr	r2, [r3, #24]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0210 	bic.w	r2, r2, #16
 8000c46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c48:	f7ff feb8 	bl	80009bc <HAL_GetTick>
 8000c4c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c4e:	e014      	b.n	8000c7a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c50:	f7ff feb4 	bl	80009bc <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d90d      	bls.n	8000c7a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c64:	f043 0201 	orr.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e190      	b.n	8000f9c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d0e3      	beq.n	8000c50 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0201 	orr.w	r2, r2, #1
 8000c96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c98:	f7ff fe90 	bl	80009bc <HAL_GetTick>
 8000c9c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c9e:	e014      	b.n	8000cca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ca0:	f7ff fe8c 	bl	80009bc <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b0a      	cmp	r3, #10
 8000cac:	d90d      	bls.n	8000cca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e168      	b.n	8000f9c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0e3      	beq.n	8000ca0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	699a      	ldr	r2, [r3, #24]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0202 	orr.w	r2, r2, #2
 8000ce6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7c1b      	ldrb	r3, [r3, #16]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d108      	bne.n	8000d02 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	699a      	ldr	r2, [r3, #24]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cfe:	619a      	str	r2, [r3, #24]
 8000d00:	e007      	b.n	8000d12 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	699a      	ldr	r2, [r3, #24]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d10:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	7c5b      	ldrb	r3, [r3, #17]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d108      	bne.n	8000d2c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d28:	619a      	str	r2, [r3, #24]
 8000d2a:	e007      	b.n	8000d3c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d3a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7c9b      	ldrb	r3, [r3, #18]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d108      	bne.n	8000d56 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d52:	619a      	str	r2, [r3, #24]
 8000d54:	e007      	b.n	8000d66 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	699a      	ldr	r2, [r3, #24]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d64:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	699a      	ldr	r2, [r3, #24]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000d8a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	691a      	ldr	r2, [r3, #16]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f022 0210 	bic.w	r2, r2, #16
 8000d9a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d108      	bne.n	8000db6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	699a      	ldr	r2, [r3, #24]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f042 0204 	orr.w	r2, r2, #4
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	e030      	b.n	8000e18 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d02c      	beq.n	8000e18 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d020      	beq.n	8000e08 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	699a      	ldr	r2, [r3, #24]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dd4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f042 0210 	orr.w	r2, r2, #16
 8000de4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d114      	bne.n	8000e18 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0220 	orr.w	r2, r2, #32
 8000dfc:	619a      	str	r2, [r3, #24]
 8000dfe:	e00b      	b.n	8000e18 <HAL_FDCAN_Init+0x234>
 8000e00:	08003dc0 	.word	0x08003dc0
 8000e04:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0220 	orr.w	r2, r2, #32
 8000e16:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e28:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e30:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e40:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e42:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e4c:	d115      	bne.n	8000e7a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e5c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	3b01      	subs	r3, #1
 8000e64:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000e66:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000e76:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e78:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d012      	beq.n	8000ecc <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000eae:	f023 0107 	bic.w	r1, r3, #7
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ebc:	4413      	add	r3, r2
 8000ebe:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000edc:	f023 0107 	bic.w	r1, r3, #7
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000eea:	4413      	add	r3, r2
 8000eec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d013      	beq.n	8000f2a <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000f0a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f18:	4413      	add	r3, r2
 8000f1a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f1e:	011a      	lsls	r2, r3, #4
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d013      	beq.n	8000f5a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000f3a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f48:	4413      	add	r3, r2
 8000f4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f4e:	021a      	lsls	r2, r3, #8
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_FDCAN_Init+0x3c0>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d107      	bne.n	8000f74 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f022 0203 	bic.w	r2, r2, #3
 8000f72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 f9af 	bl	80012f0 <FDCAN_CalcultateRamBlockAddresses>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8000f98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3760      	adds	r7, #96	; 0x60
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	4000a000 	.word	0x4000a000

08000fa8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000fb8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d002      	beq.n	8000fc6 <HAL_FDCAN_ConfigFilter+0x1e>
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d157      	bne.n	8001076 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d12b      	bne.n	8001026 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	d10d      	bne.n	8000ff2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8000fe2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8000fe8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8000fea:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	e00e      	b.n	8001010 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ffe:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001006:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800100c:	4313      	orrs	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e025      	b.n	8001072 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	075a      	lsls	r2, r3, #29
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b07      	cmp	r3, #7
 800103a:	d103      	bne.n	8001044 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e006      	b.n	8001052 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	079a      	lsls	r2, r3, #30
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3304      	adds	r3, #4
 800106a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e008      	b.n	8001088 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800107c:	f043 0202 	orr.w	r2, r3, #2
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
  }
}
 8001088:	4618      	mov	r0, r3
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d110      	bne.n	80010d0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80010b6:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80010bc:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80010c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	e008      	b.n	80010e2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010d6:	f043 0204 	orr.w	r2, r3, #4
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
  }
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d111      	bne.n	8001126 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2202      	movs	r2, #2
 8001106:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e008      	b.n	8001138 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800112c:	f043 0204 	orr.w	r2, r3, #4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
  }
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d141      	bne.n	80011e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001164:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d109      	bne.n	8001180 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001172:	f043 0220 	orr.w	r2, r3, #32
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e038      	b.n	80011f2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d009      	beq.n	80011a4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e026      	b.n	80011f2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 fa1e 	bl	80015fc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80011d0:	2201      	movs	r2, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	409a      	lsls	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	e008      	b.n	80011f2 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011e6:	f043 0208 	orr.w	r2, r3, #8
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
  }
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800120e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d002      	beq.n	800121c <HAL_FDCAN_ActivateNotification+0x20>
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d155      	bne.n	80012c8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d108      	bne.n	800123c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	65da      	str	r2, [r3, #92]	; 0x5c
 800123a:	e014      	b.n	8001266 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	4013      	ands	r3, r2
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	429a      	cmp	r2, r3
 800124a:	d108      	bne.n	800125e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0202 	orr.w	r2, r2, #2
 800125a:	65da      	str	r2, [r3, #92]	; 0x5c
 800125c:	e003      	b.n	8001266 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2203      	movs	r2, #3
 8001264:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800126c:	2b00      	cmp	r3, #0
 800126e:	d009      	beq.n	8001284 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	430a      	orrs	r2, r1
 8001280:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128a:	2b00      	cmp	r3, #0
 800128c:	d009      	beq.n	80012a2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	430a      	orrs	r2, r1
 800129e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_FDCAN_ActivateNotification+0xec>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	430b      	orrs	r3, r1
 80012b4:	6553      	str	r3, [r2, #84]	; 0x54
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_FDCAN_ActivateNotification+0xf0>)
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	0f9b      	lsrs	r3, r3, #30
 80012be:	490b      	ldr	r1, [pc, #44]	; (80012ec <HAL_FDCAN_ActivateNotification+0xf0>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e008      	b.n	80012da <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012ce:	f043 0202 	orr.w	r2, r3, #2
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
  }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	3fcfffff 	.word	0x3fcfffff
 80012ec:	4000a800 	.word	0x4000a800

080012f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001306:	4ba7      	ldr	r3, [pc, #668]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001308:	4013      	ands	r3, r2
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	0091      	lsls	r1, r2, #2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6812      	ldr	r2, [r2, #0]
 8001312:	430b      	orrs	r3, r1
 8001314:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001320:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	4413      	add	r3, r2
 800133c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001346:	4b97      	ldr	r3, [pc, #604]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001348:	4013      	ands	r3, r2
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	0091      	lsls	r1, r2, #2
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	430b      	orrs	r3, r1
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001360:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	4413      	add	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001388:	4b86      	ldr	r3, [pc, #536]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800138a:	4013      	ands	r3, r2
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	0091      	lsls	r1, r2, #2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	430b      	orrs	r3, r1
 8001396:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	041a      	lsls	r2, r3, #16
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013be:	fb02 f303 	mul.w	r3, r2, r3
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4413      	add	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013d0:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	0091      	lsls	r1, r2, #2
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	041a      	lsls	r2, r3, #16
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	4413      	add	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001418:	4b62      	ldr	r3, [pc, #392]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800141a:	4013      	ands	r3, r2
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	0091      	lsls	r1, r2, #2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001444:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001446:	4013      	ands	r3, r2
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	0091      	lsls	r1, r2, #2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	430b      	orrs	r3, r1
 8001452:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800145e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	041a      	lsls	r2, r3, #16
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	68ba      	ldr	r2, [r7, #8]
 800147a:	4413      	add	r3, r2
 800147c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001488:	4013      	ands	r3, r2
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	0091      	lsls	r1, r2, #2
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	430b      	orrs	r3, r1
 8001494:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014a0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80014bc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c4:	061a      	lsls	r2, r3, #24
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d4:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80014d6:	4413      	add	r3, r2
 80014d8:	009a      	lsls	r2, r3, #2
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	441a      	add	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	441a      	add	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	441a      	add	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800153a:	fb01 f303 	mul.w	r3, r1, r3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	441a      	add	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	441a      	add	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	6879      	ldr	r1, [r7, #4]
 8001568:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800156a:	fb01 f303 	mul.w	r3, r1, r3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	441a      	add	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	441a      	add	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	4a04      	ldr	r2, [pc, #16]	; (80015ac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d915      	bls.n	80015cc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80015a0:	e006      	b.n	80015b0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80015a2:	bf00      	nop
 80015a4:	ffff0003 	.word	0xffff0003
 80015a8:	10002b00 	.word	0x10002b00
 80015ac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015b6:	f043 0220 	orr.w	r2, r3, #32
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2203      	movs	r2, #3
 80015c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e010      	b.n	80015ee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	e005      	b.n	80015e0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3f3      	bcc.n	80015d4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop

080015fc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10a      	bne.n	8001628 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800161a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001622:	4313      	orrs	r3, r2
 8001624:	61fb      	str	r3, [r7, #28]
 8001626:	e00a      	b.n	800163e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001630:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001636:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800163c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001648:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800164e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001654:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	fb01 f303 	mul.w	r3, r1, r3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	3304      	adds	r3, #4
 800167e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	3304      	adds	r3, #4
 800168a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e020      	b.n	80016d4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3303      	adds	r3, #3
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3302      	adds	r3, #2
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	440b      	add	r3, r1
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80016aa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	440b      	add	r3, r1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80016b8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	440a      	add	r2, r1
 80016c0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80016c2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	3304      	adds	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <FDCAN_CopyMessageToRAM+0xf8>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	461a      	mov	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d3d5      	bcc.n	8001692 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3724      	adds	r7, #36	; 0x24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	08003e1c 	.word	0x08003e1c

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_GPIO_Init+0x234>)
 8001708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800170a:	e194      	b.n	8001a36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8186 	beq.w	8001a30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d005      	beq.n	800173c <HAL_GPIO_Init+0x44>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 0201 	and.w	r2, r3, #1
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d017      	beq.n	80017da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d123      	bne.n	800182e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	69b9      	ldr	r1, [r7, #24]
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0203 	and.w	r2, r3, #3
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80e0 	beq.w	8001a30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x238>)
 8001872:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001876:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <HAL_GPIO_Init+0x238>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_GPIO_Init+0x238>)
 8001882:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a29      	ldr	r2, [pc, #164]	; (8001934 <HAL_GPIO_Init+0x23c>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_GPIO_Init+0x240>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d052      	beq.n	8001960 <HAL_GPIO_Init+0x268>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_GPIO_Init+0x244>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d031      	beq.n	8001926 <HAL_GPIO_Init+0x22e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <HAL_GPIO_Init+0x248>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d02b      	beq.n	8001922 <HAL_GPIO_Init+0x22a>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_GPIO_Init+0x24c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d025      	beq.n	800191e <HAL_GPIO_Init+0x226>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a1c      	ldr	r2, [pc, #112]	; (8001948 <HAL_GPIO_Init+0x250>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01f      	beq.n	800191a <HAL_GPIO_Init+0x222>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_GPIO_Init+0x254>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d019      	beq.n	8001916 <HAL_GPIO_Init+0x21e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a1a      	ldr	r2, [pc, #104]	; (8001950 <HAL_GPIO_Init+0x258>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0x21a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a19      	ldr	r2, [pc, #100]	; (8001954 <HAL_GPIO_Init+0x25c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_GPIO_Init+0x216>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_GPIO_Init+0x260>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x212>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_GPIO_Init+0x264>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_GPIO_Init+0x20e>
 8001902:	2309      	movs	r3, #9
 8001904:	e02d      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001906:	230a      	movs	r3, #10
 8001908:	e02b      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800190a:	2308      	movs	r3, #8
 800190c:	e029      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800190e:	2307      	movs	r3, #7
 8001910:	e027      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001912:	2306      	movs	r3, #6
 8001914:	e025      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001916:	2305      	movs	r3, #5
 8001918:	e023      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800191a:	2304      	movs	r3, #4
 800191c:	e021      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800191e:	2303      	movs	r3, #3
 8001920:	e01f      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001922:	2302      	movs	r3, #2
 8001924:	e01d      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 8001926:	2301      	movs	r3, #1
 8001928:	e01b      	b.n	8001962 <HAL_GPIO_Init+0x26a>
 800192a:	bf00      	nop
 800192c:	58000080 	.word	0x58000080
 8001930:	58024400 	.word	0x58024400
 8001934:	58000400 	.word	0x58000400
 8001938:	58020000 	.word	0x58020000
 800193c:	58020400 	.word	0x58020400
 8001940:	58020800 	.word	0x58020800
 8001944:	58020c00 	.word	0x58020c00
 8001948:	58021000 	.word	0x58021000
 800194c:	58021400 	.word	0x58021400
 8001950:	58021800 	.word	0x58021800
 8001954:	58021c00 	.word	0x58021c00
 8001958:	58022000 	.word	0x58022000
 800195c:	58022400 	.word	0x58022400
 8001960:	2300      	movs	r3, #0
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001972:	4938      	ldr	r1, [pc, #224]	; (8001a54 <HAL_GPIO_Init+0x35c>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80019d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f47f ae63 	bne.w	800170c <HAL_GPIO_Init+0x14>
  }
}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3724      	adds	r7, #36	; 0x24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	58000400 	.word	0x58000400

08001a58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a60:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	2b06      	cmp	r3, #6
 8001a6a:	d00a      	beq.n	8001a82 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e040      	b.n	8001b00 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e03e      	b.n	8001b00 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001a8a:	491f      	ldr	r1, [pc, #124]	; (8001b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a92:	f7fe ff93 	bl	80009bc <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a98:	e009      	b.n	8001aae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a9a:	f7fe ff8f 	bl	80009bc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa8:	d901      	bls.n	8001aae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e028      	b.n	8001b00 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d1ee      	bne.n	8001a9a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b1e      	cmp	r3, #30
 8001ac0:	d008      	beq.n	8001ad4 <HAL_PWREx_ConfigSupply+0x7c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ac6:	d005      	beq.n	8001ad4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b1d      	cmp	r3, #29
 8001acc:	d002      	beq.n	8001ad4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b2d      	cmp	r3, #45	; 0x2d
 8001ad2:	d114      	bne.n	8001afe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ad4:	f7fe ff72 	bl	80009bc <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ada:	e009      	b.n	8001af0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001adc:	f7fe ff6e 	bl	80009bc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aea:	d901      	bls.n	8001af0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e007      	b.n	8001b00 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d1ee      	bne.n	8001adc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024800 	.word	0x58024800

08001b0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e3f3      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80b3 	beq.w	8001c92 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2c:	4b9e      	ldr	r3, [pc, #632]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b36:	4b9c      	ldr	r3, [pc, #624]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d007      	beq.n	8001b52 <HAL_RCC_OscConfig+0x46>
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	2b18      	cmp	r3, #24
 8001b46:	d112      	bne.n	8001b6e <HAL_RCC_OscConfig+0x62>
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d10d      	bne.n	8001b6e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b52:	4b95      	ldr	r3, [pc, #596]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8098 	beq.w	8001c90 <HAL_RCC_OscConfig+0x184>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 8093 	bne.w	8001c90 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e3cb      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x7a>
 8001b78:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8a      	ldr	r2, [pc, #552]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e058      	b.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xa8>
 8001b8e:	4b86      	ldr	r3, [pc, #536]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a85      	ldr	r2, [pc, #532]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b83      	ldr	r3, [pc, #524]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a82      	ldr	r2, [pc, #520]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001ba0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e041      	b.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bbc:	d112      	bne.n	8001be4 <HAL_RCC_OscConfig+0xd8>
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a79      	ldr	r2, [pc, #484]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a76      	ldr	r2, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b74      	ldr	r3, [pc, #464]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a73      	ldr	r2, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e029      	b.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001bec:	d112      	bne.n	8001c14 <HAL_RCC_OscConfig+0x108>
 8001bee:	4b6e      	ldr	r3, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6d      	ldr	r2, [pc, #436]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e011      	b.n	8001c38 <HAL_RCC_OscConfig+0x12c>
 8001c14:	4b64      	ldr	r3, [pc, #400]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a63      	ldr	r2, [pc, #396]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a60      	ldr	r2, [pc, #384]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b5e      	ldr	r3, [pc, #376]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7fe febc 	bl	80009bc <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c48:	f7fe feb8 	bl	80009bc <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e355      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x13c>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7fe fea8 	bl	80009bc <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7fe fea4 	bl	80009bc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e341      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x164>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 808c 	beq.w	8001db8 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca0:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001caa:	4b3f      	ldr	r3, [pc, #252]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x1ba>
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b18      	cmp	r3, #24
 8001cba:	d137      	bne.n	8001d2c <HAL_RCC_OscConfig+0x220>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d132      	bne.n	8001d2c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x1d2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e313      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0219 	bic.w	r2, r3, #25
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	492f      	ldr	r1, [pc, #188]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf0:	f7fe fe64 	bl	80009bc <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fe60 	bl	80009bc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e2fd      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	4920      	ldr	r1, [pc, #128]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2a:	e045      	b.n	8001db8 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d026      	beq.n	8001d82 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0219 	bic.w	r2, r3, #25
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4919      	ldr	r1, [pc, #100]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7fe fe39 	bl	80009bc <HAL_GetTick>
 8001d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7fe fe35 	bl	80009bc <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2d2      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	490b      	ldr	r1, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e01a      	b.n	8001db8 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_RCC_OscConfig+0x29c>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fe15 	bl	80009bc <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d96:	f7fe fe11 	bl	80009bc <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d903      	bls.n	8001dac <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e2ae      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
 8001da8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dac:	4b99      	ldr	r3, [pc, #612]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d06a      	beq.n	8001e9a <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc4:	4b93      	ldr	r3, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dce:	4b91      	ldr	r3, [pc, #580]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d007      	beq.n	8001dea <HAL_RCC_OscConfig+0x2de>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b18      	cmp	r3, #24
 8001dde:	d11b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x30c>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dea:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2f6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b80      	cmp	r3, #128	; 0x80
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e281      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e02:	4b84      	ldr	r3, [pc, #528]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	061b      	lsls	r3, r3, #24
 8001e10:	4980      	ldr	r1, [pc, #512]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e20:	4b7c      	ldr	r3, [pc, #496]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7b      	ldr	r2, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fdc6 	bl	80009bc <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e34:	f7fe fdc2 	bl	80009bc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e25f      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e52:	4b70      	ldr	r3, [pc, #448]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	496c      	ldr	r1, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60cb      	str	r3, [r1, #12]
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7fe fda2 	bl	80009bc <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e7c:	f7fe fd9e 	bl	80009bc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e23b      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e8e:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d036      	beq.n	8001f14 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7fe fd7f 	bl	80009bc <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7fe fd7b 	bl	80009bc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e218      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3b6>
 8001ee0:	e018      	b.n	8001f14 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7fe fd65 	bl	80009bc <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7fe fd61 	bl	80009bc <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1fe      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d036      	beq.n	8001f8e <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d019      	beq.n	8001f5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a39      	ldr	r2, [pc, #228]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f34:	f7fe fd42 	bl	80009bc <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f3c:	f7fe fd3e 	bl	80009bc <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1db      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x430>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f68:	f7fe fd28 	bl	80009bc <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f70:	f7fe fd24 	bl	80009bc <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1c1      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80af 	beq.w	80020fa <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_RCC_OscConfig+0x50c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x50c>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa8:	f7fe fd08 	bl	80009bc <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7fe fd04 	bl	80009bc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	; 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1a1      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fc2:	4b15      	ldr	r3, [pc, #84]	; (8002018 <HAL_RCC_OscConfig+0x50c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4d8>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	e05b      	b.n	800209c <HAL_RCC_OscConfig+0x590>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d117      	bne.n	800201c <HAL_RCC_OscConfig+0x510>
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a08      	ldr	r2, [pc, #32]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8001ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002002:	6713      	str	r3, [r2, #112]	; 0x70
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a02      	ldr	r2, [pc, #8]	; (8002014 <HAL_RCC_OscConfig+0x508>)
 800200a:	f023 0304 	bic.w	r3, r3, #4
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	e044      	b.n	800209c <HAL_RCC_OscConfig+0x590>
 8002012:	bf00      	nop
 8002014:	58024400 	.word	0x58024400
 8002018:	58024800 	.word	0x58024800
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d112      	bne.n	800204a <HAL_RCC_OscConfig+0x53e>
 8002024:	4b95      	ldr	r3, [pc, #596]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	4a94      	ldr	r2, [pc, #592]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6713      	str	r3, [r2, #112]	; 0x70
 8002030:	4b92      	ldr	r3, [pc, #584]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	4a91      	ldr	r2, [pc, #580]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002036:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800203a:	6713      	str	r3, [r2, #112]	; 0x70
 800203c:	4b8f      	ldr	r3, [pc, #572]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	4a8e      	ldr	r2, [pc, #568]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	; 0x70
 8002048:	e028      	b.n	800209c <HAL_RCC_OscConfig+0x590>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b85      	cmp	r3, #133	; 0x85
 8002050:	d112      	bne.n	8002078 <HAL_RCC_OscConfig+0x56c>
 8002052:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a89      	ldr	r2, [pc, #548]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	4b87      	ldr	r3, [pc, #540]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a86      	ldr	r2, [pc, #536]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
 800206a:	4b84      	ldr	r3, [pc, #528]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a83      	ldr	r2, [pc, #524]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
 8002076:	e011      	b.n	800209c <HAL_RCC_OscConfig+0x590>
 8002078:	4b80      	ldr	r3, [pc, #512]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	4a7f      	ldr	r2, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6713      	str	r3, [r2, #112]	; 0x70
 8002084:	4b7d      	ldr	r3, [pc, #500]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	4a7c      	ldr	r2, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6713      	str	r3, [r2, #112]	; 0x70
 8002090:	4b7a      	ldr	r3, [pc, #488]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002094:	4a79      	ldr	r2, [pc, #484]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800209a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d015      	beq.n	80020d0 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a4:	f7fe fc8a 	bl	80009bc <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7fe fc86 	bl	80009bc <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e121      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020c2:	4b6e      	ldr	r3, [pc, #440]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0ee      	beq.n	80020ac <HAL_RCC_OscConfig+0x5a0>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fc74 	bl	80009bc <HAL_GetTick>
 80020d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7fe fc70 	bl	80009bc <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e10b      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ee      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8100 	beq.w	8002304 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002104:	4b5d      	ldr	r3, [pc, #372]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800210c:	2b18      	cmp	r3, #24
 800210e:	f000 80bb 	beq.w	8002288 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	2b02      	cmp	r3, #2
 8002118:	f040 8095 	bne.w	8002246 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211c:	4b57      	ldr	r3, [pc, #348]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a56      	ldr	r2, [pc, #344]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe fc48 	bl	80009bc <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002130:	f7fe fc44 	bl	80009bc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0e1      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002142:	4b4e      	ldr	r3, [pc, #312]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214e:	4b4b      	ldr	r3, [pc, #300]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <HAL_RCC_OscConfig+0x774>)
 8002154:	4013      	ands	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	430a      	orrs	r2, r1
 8002162:	4946      	ldr	r1, [pc, #280]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002164:	4313      	orrs	r3, r2
 8002166:	628b      	str	r3, [r1, #40]	; 0x28
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	3b01      	subs	r3, #1
 800216e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	3b01      	subs	r3, #1
 8002178:	025b      	lsls	r3, r3, #9
 800217a:	b29b      	uxth	r3, r3
 800217c:	431a      	orrs	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002182:	3b01      	subs	r3, #1
 8002184:	041b      	lsls	r3, r3, #16
 8002186:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	3b01      	subs	r3, #1
 8002192:	061b      	lsls	r3, r3, #24
 8002194:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002198:	4938      	ldr	r1, [pc, #224]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800219a:	4313      	orrs	r3, r2
 800219c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800219e:	4b37      	ldr	r3, [pc, #220]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	4a36      	ldr	r2, [pc, #216]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021aa:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <HAL_RCC_OscConfig+0x778>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021b6:	00d2      	lsls	r2, r2, #3
 80021b8:	4930      	ldr	r1, [pc, #192]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f023 020c 	bic.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	492c      	ldr	r1, [pc, #176]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f023 0202 	bic.w	r2, r3, #2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	4927      	ldr	r1, [pc, #156]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	4a25      	ldr	r2, [pc, #148]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	4a22      	ldr	r2, [pc, #136]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_OscConfig+0x770>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	4a1f      	ldr	r2, [pc, #124]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221e:	f7fe fbcd 	bl	80009bc <HAL_GetTick>
 8002222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fbc9 	bl	80009bc <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e066      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x71a>
 8002244:	e05e      	b.n	8002304 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_RCC_OscConfig+0x770>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800224c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002250:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7fe fbb3 	bl	80009bc <HAL_GetTick>
 8002256:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe fbaf 	bl	80009bc <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e04c      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RCC_OscConfig+0x770>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x74e>
 8002278:	e044      	b.n	8002304 <HAL_RCC_OscConfig+0x7f8>
 800227a:	bf00      	nop
 800227c:	58024400 	.word	0x58024400
 8002280:	fffffc0c 	.word	0xfffffc0c
 8002284:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <HAL_RCC_OscConfig+0x804>)
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x804>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2b01      	cmp	r3, #1
 800229a:	d031      	beq.n	8002300 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f003 0203 	and.w	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d12a      	bne.n	8002300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d122      	bne.n	8002300 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11a      	bne.n	8002300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0a5b      	lsrs	r3, r3, #9
 80022ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d111      	bne.n	8002300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	0c1b      	lsrs	r3, r3, #16
 80022e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d108      	bne.n	8002300 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	0e1b      	lsrs	r3, r3, #24
 80022f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	58024400 	.word	0x58024400

08002314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e19c      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d910      	bls.n	8002358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b87      	ldr	r3, [pc, #540]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 020f 	bic.w	r2, r3, #15
 800233e:	4985      	ldr	r1, [pc, #532]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b83      	ldr	r3, [pc, #524]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e184      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	4b7b      	ldr	r3, [pc, #492]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002370:	429a      	cmp	r2, r3
 8002372:	d908      	bls.n	8002386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002374:	4b78      	ldr	r3, [pc, #480]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	4975      	ldr	r1, [pc, #468]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002382:	4313      	orrs	r3, r2
 8002384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d010      	beq.n	80023b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239e:	429a      	cmp	r2, r3
 80023a0:	d908      	bls.n	80023b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	496a      	ldr	r1, [pc, #424]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d908      	bls.n	80023e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023d0:	4b61      	ldr	r3, [pc, #388]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	495e      	ldr	r1, [pc, #376]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0320 	and.w	r3, r3, #32
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d010      	beq.n	8002410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69da      	ldr	r2, [r3, #28]
 80023f2:	4b59      	ldr	r3, [pc, #356]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d908      	bls.n	8002410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023fe:	4b56      	ldr	r3, [pc, #344]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4953      	ldr	r1, [pc, #332]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 800240c:	4313      	orrs	r3, r2
 800240e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	429a      	cmp	r2, r3
 800242a:	d908      	bls.n	800243e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f023 020f 	bic.w	r2, r3, #15
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4947      	ldr	r1, [pc, #284]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 800243a:	4313      	orrs	r3, r2
 800243c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d055      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800244a:	4b43      	ldr	r3, [pc, #268]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4940      	ldr	r1, [pc, #256]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002458:	4313      	orrs	r3, r2
 800245a:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d107      	bne.n	8002474 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002464:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d121      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0f6      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800247c:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d115      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0ea      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002494:	4b30      	ldr	r3, [pc, #192]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0de      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a4:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0d6      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b4:	4b28      	ldr	r3, [pc, #160]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f023 0207 	bic.w	r2, r3, #7
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	4925      	ldr	r1, [pc, #148]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fa79 	bl	80009bc <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ce:	f7fe fa75 	bl	80009bc <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e0be      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e4:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d1eb      	bne.n	80024ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	429a      	cmp	r2, r3
 8002510:	d208      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f023 020f 	bic.w	r2, r3, #15
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	490e      	ldr	r1, [pc, #56]	; (8002558 <HAL_RCC_ClockConfig+0x244>)
 8002520:	4313      	orrs	r3, r2
 8002522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d214      	bcs.n	800255c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 020f 	bic.w	r2, r3, #15
 800253a:	4906      	ldr	r1, [pc, #24]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_RCC_ClockConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e086      	b.n	8002662 <HAL_RCC_ClockConfig+0x34e>
 8002554:	52002000 	.word	0x52002000
 8002558:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d010      	beq.n	800258a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	4b3f      	ldr	r3, [pc, #252]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002574:	429a      	cmp	r2, r3
 8002576:	d208      	bcs.n	800258a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002578:	4b3c      	ldr	r3, [pc, #240]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	4939      	ldr	r1, [pc, #228]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 8002586:	4313      	orrs	r3, r2
 8002588:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d010      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d208      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	492e      	ldr	r1, [pc, #184]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d208      	bcs.n	80025e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4922      	ldr	r1, [pc, #136]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d010      	beq.n	8002614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025fe:	429a      	cmp	r2, r3
 8002600:	d208      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4917      	ldr	r1, [pc, #92]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 8002610:	4313      	orrs	r3, r2
 8002612:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002614:	f000 f834 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <HAL_RCC_ClockConfig+0x35c>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
 8002630:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_RCC_ClockConfig+0x358>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <HAL_RCC_ClockConfig+0x35c>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <HAL_RCC_ClockConfig+0x360>)
 800264a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800264c:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_RCC_ClockConfig+0x364>)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002652:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x368>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe f966 	bl	8000928 <HAL_InitTick>
 800265c:	4603      	mov	r3, r0
 800265e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	58024400 	.word	0x58024400
 8002670:	08003e0c 	.word	0x08003e0c
 8002674:	24000004 	.word	0x24000004
 8002678:	24000000 	.word	0x24000000
 800267c:	24000008 	.word	0x24000008

08002680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002686:	4bb3      	ldr	r3, [pc, #716]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800268e:	2b18      	cmp	r3, #24
 8002690:	f200 8155 	bhi.w	800293e <HAL_RCC_GetSysClockFreq+0x2be>
 8002694:	a201      	add	r2, pc, #4	; (adr r2, 800269c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269a:	bf00      	nop
 800269c:	08002701 	.word	0x08002701
 80026a0:	0800293f 	.word	0x0800293f
 80026a4:	0800293f 	.word	0x0800293f
 80026a8:	0800293f 	.word	0x0800293f
 80026ac:	0800293f 	.word	0x0800293f
 80026b0:	0800293f 	.word	0x0800293f
 80026b4:	0800293f 	.word	0x0800293f
 80026b8:	0800293f 	.word	0x0800293f
 80026bc:	08002727 	.word	0x08002727
 80026c0:	0800293f 	.word	0x0800293f
 80026c4:	0800293f 	.word	0x0800293f
 80026c8:	0800293f 	.word	0x0800293f
 80026cc:	0800293f 	.word	0x0800293f
 80026d0:	0800293f 	.word	0x0800293f
 80026d4:	0800293f 	.word	0x0800293f
 80026d8:	0800293f 	.word	0x0800293f
 80026dc:	0800272d 	.word	0x0800272d
 80026e0:	0800293f 	.word	0x0800293f
 80026e4:	0800293f 	.word	0x0800293f
 80026e8:	0800293f 	.word	0x0800293f
 80026ec:	0800293f 	.word	0x0800293f
 80026f0:	0800293f 	.word	0x0800293f
 80026f4:	0800293f 	.word	0x0800293f
 80026f8:	0800293f 	.word	0x0800293f
 80026fc:	08002733 	.word	0x08002733
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002700:	4b94      	ldr	r3, [pc, #592]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d009      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800270c:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	4a90      	ldr	r2, [pc, #576]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800271e:	e111      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002720:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002722:	61bb      	str	r3, [r7, #24]
    break;
 8002724:	e10e      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002726:	4b8d      	ldr	r3, [pc, #564]	; (800295c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002728:	61bb      	str	r3, [r7, #24]
    break;
 800272a:	e10b      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800272c:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800272e:	61bb      	str	r3, [r7, #24]
    break;
 8002730:	e108      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800273c:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002746:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002748:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002752:	4b80      	ldr	r3, [pc, #512]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	08db      	lsrs	r3, r3, #3
 8002758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80e1 	beq.w	8002938 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b02      	cmp	r3, #2
 800277a:	f000 8083 	beq.w	8002884 <HAL_RCC_GetSysClockFreq+0x204>
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b02      	cmp	r3, #2
 8002782:	f200 80a1 	bhi.w	80028c8 <HAL_RCC_GetSysClockFreq+0x248>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x114>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d056      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002792:	e099      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002794:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027a0:	4b6c      	ldr	r3, [pc, #432]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	08db      	lsrs	r3, r3, #3
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	4a6b      	ldr	r2, [pc, #428]	; (8002958 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ca:	4b62      	ldr	r3, [pc, #392]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027da:	ed97 6a02 	vldr	s12, [r7, #8]
 80027de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80027fa:	e087      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002806:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002968 <HAL_RCC_GetSysClockFreq+0x2e8>
 800280a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800281e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002822:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002964 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800282e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800283e:	e065      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800296c <HAL_RCC_GetSysClockFreq+0x2ec>
 800284e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002852:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002862:	ed97 6a02 	vldr	s12, [r7, #8]
 8002866:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002964 <HAL_RCC_GetSysClockFreq+0x2e4>
 800286a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800286e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002882:	e043      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002970 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80028aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028c6:	e021      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800296c <HAL_RCC_GetSysClockFreq+0x2ec>
 80028d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e2:	ee07 3a90 	vmov	s15, r3
 80028e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002964 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800290a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	0a5b      	lsrs	r3, r3, #9
 8002912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002916:	3301      	adds	r3, #1
 8002918:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002924:	edd7 6a07 	vldr	s13, [r7, #28]
 8002928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002930:	ee17 3a90 	vmov	r3, s15
 8002934:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002936:	e005      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    break;
 800293c:	e002      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800293e:	4b07      	ldr	r3, [pc, #28]	; (800295c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002940:	61bb      	str	r3, [r7, #24]
    break;
 8002942:	bf00      	nop
  }

  return sysclockfreq;
 8002944:	69bb      	ldr	r3, [r7, #24]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400
 8002958:	03d09000 	.word	0x03d09000
 800295c:	003d0900 	.word	0x003d0900
 8002960:	016e3600 	.word	0x016e3600
 8002964:	46000000 	.word	0x46000000
 8002968:	4c742400 	.word	0x4c742400
 800296c:	4a742400 	.word	0x4a742400
 8002970:	4bb71b00 	.word	0x4bb71b00

08002974 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002980:	2300      	movs	r3, #0
 8002982:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d03f      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002994:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002998:	d02a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800299a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800299e:	d824      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029a4:	d018      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029aa:	d81e      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b4:	d007      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029b6:	e018      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b8:	4ba6      	ldr	r3, [pc, #664]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	4aa5      	ldr	r2, [pc, #660]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029c4:	e015      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fedd 	bl	800378c <RCCEx_PLL2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029d6:	e00c      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3324      	adds	r3, #36	; 0x24
 80029dc:	2102      	movs	r1, #2
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 ff86 	bl	80038f0 <RCCEx_PLL3_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80029e8:	e003      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
      break;
 80029ee:	e000      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029f8:	4b96      	ldr	r3, [pc, #600]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a04:	4993      	ldr	r1, [pc, #588]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	650b      	str	r3, [r1, #80]	; 0x50
 8002a0a:	e001      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0c:	7dfb      	ldrb	r3, [r7, #23]
 8002a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d03d      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d826      	bhi.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a41 	.word	0x08002a41
 8002a30:	08002a4f 	.word	0x08002a4f
 8002a34:	08002a61 	.word	0x08002a61
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a79 	.word	0x08002a79
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	4a83      	ldr	r2, [pc, #524]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a4c:	e015      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fe99 	bl	800378c <RCCEx_PLL2_Config>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a5e:	e00c      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3324      	adds	r3, #36	; 0x24
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 ff42 	bl	80038f0 <RCCEx_PLL3_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a70:	e003      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	75fb      	strb	r3, [r7, #23]
      break;
 8002a76:	e000      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a80:	4b74      	ldr	r3, [pc, #464]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a84:	f023 0207 	bic.w	r2, r3, #7
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8c:	4971      	ldr	r1, [pc, #452]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	650b      	str	r3, [r1, #80]	; 0x50
 8002a92:	e001      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d04a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002aac:	d031      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002aae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ab2:	d82b      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab8:	d02d      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002abe:	d825      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ac0:	2bc0      	cmp	r3, #192	; 0xc0
 8002ac2:	d02a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ac4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ac6:	d821      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ac8:	2b80      	cmp	r3, #128	; 0x80
 8002aca:	d016      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d81d      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d002      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002ad4:	2b40      	cmp	r3, #64	; 0x40
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002ad8:	e018      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	4a5d      	ldr	r2, [pc, #372]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002ae6:	e019      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fe4c 	bl	800378c <RCCEx_PLL2_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002af8:	e010      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fef5 	bl	80038f0 <RCCEx_PLL3_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002b0a:	e007      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b10:	e004      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e000      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002b22:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2e:	4949      	ldr	r1, [pc, #292]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	650b      	str	r3, [r1, #80]	; 0x50
 8002b34:	e001      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	7dfb      	ldrb	r3, [r7, #23]
 8002b38:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d04f      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b4e:	d036      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002b50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b54:	d830      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b5a:	d032      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b60:	d82a      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002b62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b66:	d02e      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002b68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b6c:	d824      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b72:	d018      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b78:	d81e      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002b7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b82:	d007      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002b84:	e018      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b86:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	4a32      	ldr	r2, [pc, #200]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002b92:	e019      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fdf6 	bl	800378c <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002ba4:	e010      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3324      	adds	r3, #36	; 0x24
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fe9f 	bl	80038f0 <RCCEx_PLL3_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002bb6:	e007      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	75fb      	strb	r3, [r7, #23]
      break;
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002bce:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bda:	491e      	ldr	r1, [pc, #120]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	650b      	str	r3, [r1, #80]	; 0x50
 8002be0:	e001      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be2:	7dfb      	ldrb	r3, [r7, #23]
 8002be4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d034      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf6:	2b30      	cmp	r3, #48	; 0x30
 8002bf8:	d01c      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002bfa:	2b30      	cmp	r3, #48	; 0x30
 8002bfc:	d817      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d00c      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d813      	bhi.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d10f      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002c1a:	e00e      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	2102      	movs	r1, #2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fdb2 	bl	800378c <RCCEx_PLL2_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002c2c:	e005      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10b      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4c:	4901      	ldr	r1, [pc, #4]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c52:	e003      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d047      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c70:	d030      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c76:	d82a      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c7c:	d02c      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c82:	d824      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c88:	d018      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8e:	d81e      	bhi.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c98:	d007      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002c9a:	e018      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c9c:	4bb0      	ldr	r3, [pc, #704]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	4aaf      	ldr	r2, [pc, #700]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ca8:	e017      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fd6b 	bl	800378c <RCCEx_PLL2_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cba:	e00e      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3324      	adds	r3, #36	; 0x24
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fe14 	bl	80038f0 <RCCEx_PLL3_Config>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ccc:	e005      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd2:	e002      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ce0:	4b9f      	ldr	r3, [pc, #636]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	499c      	ldr	r1, [pc, #624]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	650b      	str	r3, [r1, #80]	; 0x50
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d049      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d0c:	d02e      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d12:	d828      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d18:	d02a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d1e:	d822      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d24:	d026      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d2a:	d81c      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d30:	d010      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d36:	d816      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01d      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d111      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3304      	adds	r3, #4
 8002d46:	2101      	movs	r1, #1
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fd1f 	bl	800378c <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d52:	e012      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	2101      	movs	r1, #1
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fdc8 	bl	80038f0 <RCCEx_PLL3_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d64:	e009      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
      break;
 8002d6a:	e006      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002d6c:	bf00      	nop
 8002d6e:	e004      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002d70:	bf00      	nop
 8002d72:	e002      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002d74:	bf00      	nop
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7a:	7dfb      	ldrb	r3, [r7, #23]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d80:	4b77      	ldr	r3, [pc, #476]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d8c:	4974      	ldr	r1, [pc, #464]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	650b      	str	r3, [r1, #80]	; 0x50
 8002d92:	e001      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d053      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002daa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002dae:	d034      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002db0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002db4:	d82e      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dba:	d030      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc0:	d828      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc6:	d02c      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d822      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dd2:	d028      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002dd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dd8:	d81c      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dde:	d010      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002de4:	d816      	bhi.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01f      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dee:	d111      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fcc8 	bl	800378c <RCCEx_PLL2_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e00:	e014      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3324      	adds	r3, #36	; 0x24
 8002e06:	2101      	movs	r1, #1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fd71 	bl	80038f0 <RCCEx_PLL3_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e12:	e00b      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	75fb      	strb	r3, [r7, #23]
      break;
 8002e18:	e008      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e006      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e004      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002e2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e40:	4947      	ldr	r1, [pc, #284]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	658b      	str	r3, [r1, #88]	; 0x58
 8002e46:	e001      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d02f      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e60:	d00e      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e66:	d814      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e72:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2101      	movs	r1, #1
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fc80 	bl	800378c <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
      break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ea0:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ea4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	492c      	ldr	r1, [pc, #176]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	650b      	str	r3, [r1, #80]	; 0x50
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d032      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d81b      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002f0b 	.word	0x08002f0b
 8002ed8:	08002ee5 	.word	0x08002ee5
 8002edc:	08002ef3 	.word	0x08002ef3
 8002ee0:	08002f0b 	.word	0x08002f0b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4a1d      	ldr	r2, [pc, #116]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002ef0:	e00c      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fc47 	bl	800378c <RCCEx_PLL2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f02:	e003      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	4910      	ldr	r1, [pc, #64]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f24:	e001      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 808a 	beq.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f44:	f7fd fd3a 	bl	80009bc <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4a:	e00d      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4c:	f7fd fd36 	bl	80009bc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d906      	bls.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	75fb      	strb	r3, [r7, #23]
        break;
 8002f5e:	e009      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002f60:	58024400 	.word	0x58024400
 8002f64:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f68:	4bba      	ldr	r3, [pc, #744]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0eb      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d166      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f7a:	4bb7      	ldr	r3, [pc, #732]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f84:	4053      	eors	r3, r2
 8002f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d013      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f8e:	4bb2      	ldr	r3, [pc, #712]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f96:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f98:	4baf      	ldr	r3, [pc, #700]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9c:	4aae      	ldr	r2, [pc, #696]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa4:	4bac      	ldr	r3, [pc, #688]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa8:	4aab      	ldr	r2, [pc, #684]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fb0:	4aa9      	ldr	r2, [pc, #676]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc0:	d115      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fcfb 	bl	80009bc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fcf7 	bl	80009bc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d902      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	75fb      	strb	r3, [r7, #23]
            break;
 8002fe0:	e005      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fe2:	4b9d      	ldr	r3, [pc, #628]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ed      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002fee:	7dfb      	ldrb	r3, [r7, #23]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d126      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003002:	d10d      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003004:	4b94      	ldr	r3, [pc, #592]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003012:	0919      	lsrs	r1, r3, #4
 8003014:	4b91      	ldr	r3, [pc, #580]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003016:	400b      	ands	r3, r1
 8003018:	498f      	ldr	r1, [pc, #572]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	610b      	str	r3, [r1, #16]
 800301e:	e005      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003020:	4b8d      	ldr	r3, [pc, #564]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4a8c      	ldr	r2, [pc, #560]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003026:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800302a:	6113      	str	r3, [r2, #16]
 800302c:	4b8a      	ldr	r3, [pc, #552]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800302e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	4987      	ldr	r1, [pc, #540]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	670b      	str	r3, [r1, #112]	; 0x70
 8003040:	e004      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	75bb      	strb	r3, [r7, #22]
 8003046:	e001      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	7dfb      	ldrb	r3, [r7, #23]
 800304a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d07f      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800305e:	2b28      	cmp	r3, #40	; 0x28
 8003060:	d866      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003137 	.word	0x08003137
 800306c:	08003131 	.word	0x08003131
 8003070:	08003131 	.word	0x08003131
 8003074:	08003131 	.word	0x08003131
 8003078:	08003131 	.word	0x08003131
 800307c:	08003131 	.word	0x08003131
 8003080:	08003131 	.word	0x08003131
 8003084:	08003131 	.word	0x08003131
 8003088:	0800310d 	.word	0x0800310d
 800308c:	08003131 	.word	0x08003131
 8003090:	08003131 	.word	0x08003131
 8003094:	08003131 	.word	0x08003131
 8003098:	08003131 	.word	0x08003131
 800309c:	08003131 	.word	0x08003131
 80030a0:	08003131 	.word	0x08003131
 80030a4:	08003131 	.word	0x08003131
 80030a8:	0800311f 	.word	0x0800311f
 80030ac:	08003131 	.word	0x08003131
 80030b0:	08003131 	.word	0x08003131
 80030b4:	08003131 	.word	0x08003131
 80030b8:	08003131 	.word	0x08003131
 80030bc:	08003131 	.word	0x08003131
 80030c0:	08003131 	.word	0x08003131
 80030c4:	08003131 	.word	0x08003131
 80030c8:	08003137 	.word	0x08003137
 80030cc:	08003131 	.word	0x08003131
 80030d0:	08003131 	.word	0x08003131
 80030d4:	08003131 	.word	0x08003131
 80030d8:	08003131 	.word	0x08003131
 80030dc:	08003131 	.word	0x08003131
 80030e0:	08003131 	.word	0x08003131
 80030e4:	08003131 	.word	0x08003131
 80030e8:	08003137 	.word	0x08003137
 80030ec:	08003131 	.word	0x08003131
 80030f0:	08003131 	.word	0x08003131
 80030f4:	08003131 	.word	0x08003131
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003131 	.word	0x08003131
 8003104:	08003131 	.word	0x08003131
 8003108:	08003137 	.word	0x08003137
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3304      	adds	r3, #4
 8003110:	2101      	movs	r1, #1
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fb3a 	bl	800378c <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800311c:	e00c      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3324      	adds	r3, #36	; 0x24
 8003122:	2101      	movs	r1, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fbe3 	bl	80038f0 <RCCEx_PLL3_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800312e:	e003      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
      break;
 8003134:	e000      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003138:	7dfb      	ldrb	r3, [r7, #23]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800313e:	4b46      	ldr	r3, [pc, #280]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003142:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314c:	4942      	ldr	r1, [pc, #264]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	654b      	str	r3, [r1, #84]	; 0x54
 8003152:	e001      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	7dfb      	ldrb	r3, [r7, #23]
 8003156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d038      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003168:	2b05      	cmp	r3, #5
 800316a:	d821      	bhi.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031b7 	.word	0x080031b7
 8003178:	0800318d 	.word	0x0800318d
 800317c:	0800319f 	.word	0x0800319f
 8003180:	080031b7 	.word	0x080031b7
 8003184:	080031b7 	.word	0x080031b7
 8003188:	080031b7 	.word	0x080031b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fafa 	bl	800378c <RCCEx_PLL2_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800319c:	e00c      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3324      	adds	r3, #36	; 0x24
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fba3 	bl	80038f0 <RCCEx_PLL3_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80031ae:	e003      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
      break;
 80031b4:	e000      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 80031b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b8:	7dfb      	ldrb	r3, [r7, #23]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80031be:	4b26      	ldr	r3, [pc, #152]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f023 0207 	bic.w	r2, r3, #7
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ca:	4923      	ldr	r1, [pc, #140]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	654b      	str	r3, [r1, #84]	; 0x54
 80031d0:	e001      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
 80031d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d040      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e8:	2b05      	cmp	r3, #5
 80031ea:	d821      	bhi.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003237 	.word	0x08003237
 80031f8:	0800320d 	.word	0x0800320d
 80031fc:	0800321f 	.word	0x0800321f
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	2101      	movs	r1, #1
 8003212:	4618      	mov	r0, r3
 8003214:	f000 faba 	bl	800378c <RCCEx_PLL2_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800321c:	e00c      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3324      	adds	r3, #36	; 0x24
 8003222:	2101      	movs	r1, #1
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fb63 	bl	80038f0 <RCCEx_PLL3_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800322e:	e003      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	75fb      	strb	r3, [r7, #23]
      break;
 8003234:	e000      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003236:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d110      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800324c:	4902      	ldr	r1, [pc, #8]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	658b      	str	r3, [r1, #88]	; 0x58
 8003252:	e007      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003254:	58024800 	.word	0x58024800
 8003258:	58024400 	.word	0x58024400
 800325c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b00      	cmp	r3, #0
 800326e:	d04b      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800327a:	d02e      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x966>
 800327c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003280:	d828      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d02a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d822      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800328e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003292:	d026      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003298:	d81c      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800329a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329e:	d010      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 80032a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a4:	d816      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01d      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80032aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ae:	d111      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fa68 	bl	800378c <RCCEx_PLL2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032c0:	e012      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3324      	adds	r3, #36	; 0x24
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fb11 	bl	80038f0 <RCCEx_PLL3_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80032d2:	e009      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
      break;
 80032d8:	e006      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80032da:	bf00      	nop
 80032dc:	e004      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 80032e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e8:	7dfb      	ldrb	r3, [r7, #23]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10a      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ee:	4bb3      	ldr	r3, [pc, #716]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fc:	49af      	ldr	r1, [pc, #700]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	654b      	str	r3, [r1, #84]	; 0x54
 8003302:	e001      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d04b      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800331a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800331e:	d02e      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003320:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003324:	d828      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332a:	d02a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003330:	d822      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003332:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003336:	d026      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800333c:	d81c      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800333e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003342:	d010      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d816      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01d      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d111      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fa16 	bl	800378c <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003364:	e012      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3324      	adds	r3, #36	; 0x24
 800336a:	2102      	movs	r1, #2
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fabf 	bl	80038f0 <RCCEx_PLL3_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003376:	e009      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	75fb      	strb	r3, [r7, #23]
      break;
 800337c:	e006      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800337e:	bf00      	nop
 8003380:	e004      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800338a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800338c:	7dfb      	ldrb	r3, [r7, #23]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003392:	4b8a      	ldr	r3, [pc, #552]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003396:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033a0:	4986      	ldr	r1, [pc, #536]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	658b      	str	r3, [r1, #88]	; 0x58
 80033a6:	e001      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
 80033aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d04b      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033c2:	d02e      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80033c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80033c8:	d828      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ce:	d02a      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d822      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80033d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033da:	d026      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80033dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80033e0:	d81c      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80033e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033e6:	d010      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 80033e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ec:	d816      	bhi.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d01d      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80033f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f6:	d111      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f9c4 	bl	800378c <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003408:	e012      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3324      	adds	r3, #36	; 0x24
 800340e:	2102      	movs	r1, #2
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fa6d 	bl	80038f0 <RCCEx_PLL3_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800341a:	e009      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
      break;
 8003420:	e006      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003422:	bf00      	nop
 8003424:	e004      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003426:	bf00      	nop
 8003428:	e002      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800342e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003436:	4b61      	ldr	r3, [pc, #388]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003444:	495d      	ldr	r1, [pc, #372]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003446:	4313      	orrs	r3, r2
 8003448:	658b      	str	r3, [r1, #88]	; 0x58
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	d10a      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3324      	adds	r3, #36	; 0x24
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fa3e 	bl	80038f0 <RCCEx_PLL3_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800347e:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	494b      	ldr	r1, [pc, #300]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800348e:	4313      	orrs	r3, r2
 8003490:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a8:	d10a      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3324      	adds	r3, #36	; 0x24
 80034ae:	2102      	movs	r1, #2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fa1d 	bl	80038f0 <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034c0:	4b3e      	ldr	r3, [pc, #248]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ce:	493b      	ldr	r1, [pc, #236]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d034      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ea:	d01d      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80034ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f0:	d817      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d009      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80034fc:	e011      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	2100      	movs	r1, #0
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f941 	bl	800378c <RCCEx_PLL2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800350e:	e00c      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	2102      	movs	r1, #2
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f9ea 	bl	80038f0 <RCCEx_PLL3_Config>
 800351c:	4603      	mov	r3, r0
 800351e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
      break;
 8003526:	e000      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800353e:	491f      	ldr	r1, [pc, #124]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003540:	4313      	orrs	r3, r2
 8003542:	658b      	str	r3, [r1, #88]	; 0x58
 8003544:	e001      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d036      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800355c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003560:	d01c      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003562:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003566:	d816      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800356e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003572:	d007      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003574:	e00f      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003582:	e00c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3324      	adds	r3, #36	; 0x24
 8003588:	2101      	movs	r1, #1
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f9b0 	bl	80038f0 <RCCEx_PLL3_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	75fb      	strb	r3, [r7, #23]
      break;
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800359c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359e:	7dfb      	ldrb	r3, [r7, #23]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b2:	4902      	ldr	r1, [pc, #8]	; (80035bc <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	654b      	str	r3, [r1, #84]	; 0x54
 80035b8:	e004      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d029      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d007      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80035de:	e00f      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b69      	ldr	r3, [pc, #420]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a68      	ldr	r2, [pc, #416]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035ec:	e00b      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f8c9 	bl	800378c <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
      break;
 8003604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800360c:	4b5e      	ldr	r3, [pc, #376]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	495b      	ldr	r1, [pc, #364]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800361a:	4313      	orrs	r3, r2
 800361c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800361e:	e001      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2102      	movs	r1, #2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f95a 	bl	80038f0 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d032      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365c:	d017      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800365e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003662:	d811      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003668:	d013      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 800366a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800366e:	d80b      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003678:	d106      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367a:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	4a42      	ldr	r2, [pc, #264]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003686:	e007      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
      break;
 800368c:	e004      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800368e:	bf00      	nop
 8003690:	e002      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003696:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003698:	7dfb      	ldrb	r3, [r7, #23]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ac:	4936      	ldr	r1, [pc, #216]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	654b      	str	r3, [r1, #84]	; 0x54
 80036b2:	e001      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036c4:	4b30      	ldr	r3, [pc, #192]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036d0:	492d      	ldr	r1, [pc, #180]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036e2:	4b29      	ldr	r3, [pc, #164]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ee:	4926      	ldr	r1, [pc, #152]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	491e      	ldr	r1, [pc, #120]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800370e:	4313      	orrs	r3, r2
 8003710:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00d      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371e:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003724:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003728:	6113      	str	r3, [r2, #16]
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003734:	4914      	ldr	r1, [pc, #80]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003736:	4313      	orrs	r3, r2
 8003738:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	da08      	bge.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003750:	4313      	orrs	r3, r2
 8003752:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d009      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	4906      	ldr	r1, [pc, #24]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003770:	4313      	orrs	r3, r2
 8003772:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003774:	7dbb      	ldrb	r3, [r7, #22]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	e000      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	58024400 	.word	0x58024400

0800378c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d101      	bne.n	80037aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e099      	b.n	80038de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80037aa:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a4e      	ldr	r2, [pc, #312]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80037b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fd f901 	bl	80009bc <HAL_GetTick>
 80037ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037bc:	e008      	b.n	80037d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80037be:	f7fd f8fd 	bl	80009bc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e086      	b.n	80038de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80037d0:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80037dc:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	493f      	ldr	r1, [pc, #252]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	628b      	str	r3, [r1, #40]	; 0x28
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	3b01      	subs	r3, #1
 8003800:	025b      	lsls	r3, r3, #9
 8003802:	b29b      	uxth	r3, r3
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	3b01      	subs	r3, #1
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	3b01      	subs	r3, #1
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003820:	4931      	ldr	r1, [pc, #196]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	492d      	ldr	r1, [pc, #180]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003834:	4313      	orrs	r3, r2
 8003836:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003838:	4b2b      	ldr	r3, [pc, #172]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f023 0220 	bic.w	r2, r3, #32
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	4928      	ldr	r1, [pc, #160]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003846:	4313      	orrs	r3, r2
 8003848:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4a26      	ldr	r2, [pc, #152]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003850:	f023 0310 	bic.w	r3, r3, #16
 8003854:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <RCCEx_PLL2_Config+0x160>)
 800385c:	4013      	ands	r3, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	69d2      	ldr	r2, [r2, #28]
 8003862:	00d2      	lsls	r2, r2, #3
 8003864:	4920      	ldr	r1, [pc, #128]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003870:	f043 0310 	orr.w	r3, r3, #16
 8003874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003886:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003888:	e00f      	b.n	80038aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d106      	bne.n	800389e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 8003896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800389c:	e005      	b.n	80038aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80038a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80038b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b6:	f7fd f881 	bl	80009bc <HAL_GetTick>
 80038ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80038be:	f7fd f87d 	bl	80009bc <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e006      	b.n	80038de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <RCCEx_PLL2_Config+0x15c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400
 80038ec:	ffff0007 	.word	0xffff0007

080038f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80038fe:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b03      	cmp	r3, #3
 8003908:	d101      	bne.n	800390e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e099      	b.n	8003a42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800390e:	4b4f      	ldr	r3, [pc, #316]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003918:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391a:	f7fd f84f 	bl	80009bc <HAL_GetTick>
 800391e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003920:	e008      	b.n	8003934 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003922:	f7fd f84b 	bl	80009bc <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e086      	b.n	8003a42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003934:	4b45      	ldr	r3, [pc, #276]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003940:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	051b      	lsls	r3, r3, #20
 800394e:	493f      	ldr	r1, [pc, #252]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003950:	4313      	orrs	r3, r2
 8003952:	628b      	str	r3, [r1, #40]	; 0x28
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	3b01      	subs	r3, #1
 800395a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	3b01      	subs	r3, #1
 8003964:	025b      	lsls	r3, r3, #9
 8003966:	b29b      	uxth	r3, r3
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	3b01      	subs	r3, #1
 8003970:	041b      	lsls	r3, r3, #16
 8003972:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	3b01      	subs	r3, #1
 800397e:	061b      	lsls	r3, r3, #24
 8003980:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003984:	4931      	ldr	r1, [pc, #196]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003986:	4313      	orrs	r3, r2
 8003988:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	492d      	ldr	r1, [pc, #180]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003998:	4313      	orrs	r3, r2
 800399a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	4928      	ldr	r1, [pc, #160]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80039ae:	4b27      	ldr	r3, [pc, #156]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80039ba:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039be:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <RCCEx_PLL3_Config+0x160>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	69d2      	ldr	r2, [r2, #28]
 80039c6:	00d2      	lsls	r2, r2, #3
 80039c8:	4920      	ldr	r1, [pc, #128]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80039ec:	e00f      	b.n	8003a0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d106      	bne.n	8003a02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 80039fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a00:	e005      	b.n	8003a0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1a:	f7fc ffcf 	bl	80009bc <HAL_GetTick>
 8003a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a20:	e008      	b.n	8003a34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a22:	f7fc ffcb 	bl	80009bc <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e006      	b.n	8003a42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <RCCEx_PLL3_Config+0x15c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
 8003a50:	ffff0007 	.word	0xffff0007

08003a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0202 	mvn.w	r2, #2
 8003a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f90f 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f901 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f912 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0204 	mvn.w	r2, #4
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8e5 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8d7 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8e8 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0208 	mvn.w	r2, #8
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f8bb 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8ad 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8be 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d122      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d11b      	bne.n	8003bac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0210 	mvn.w	r2, #16
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2208      	movs	r2, #8
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f891 	bl	8003cba <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f883 	bl	8003ca6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f894 	bl	8003cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0201 	mvn.w	r2, #1
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f85d 	bl	8003c92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f883 	bl	8003d0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c12:	d10e      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d107      	bne.n	8003c32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f876 	bl	8003d1e <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b40      	cmp	r3, #64	; 0x40
 8003c3e:	d10e      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d107      	bne.n	8003c5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f842 	bl	8003ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d10e      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d107      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0220 	mvn.w	r2, #32
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f836 	bl	8003cf6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
	...

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f82e 	bl	8003da8 <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003e2c 	.word	0x08003e2c
 8003d70:	08003e2c 	.word	0x08003e2c
 8003d74:	08003e2c 	.word	0x08003e2c
 8003d78:	08003e30 	.word	0x08003e30

08003d7c <memcpy>:
 8003d7c:	440a      	add	r2, r1
 8003d7e:	4291      	cmp	r1, r2
 8003d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d84:	d100      	bne.n	8003d88 <memcpy+0xc>
 8003d86:	4770      	bx	lr
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d92:	4291      	cmp	r1, r2
 8003d94:	d1f9      	bne.n	8003d8a <memcpy+0xe>
 8003d96:	bd10      	pop	{r4, pc}

08003d98 <memset>:
 8003d98:	4402      	add	r2, r0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d100      	bne.n	8003da2 <memset+0xa>
 8003da0:	4770      	bx	lr
 8003da2:	f803 1b01 	strb.w	r1, [r3], #1
 8003da6:	e7f9      	b.n	8003d9c <memset+0x4>

08003da8 <_init>:
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003daa:	bf00      	nop
 8003dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dae:	bc08      	pop	{r3}
 8003db0:	469e      	mov	lr, r3
 8003db2:	4770      	bx	lr

08003db4 <_fini>:
 8003db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db6:	bf00      	nop
 8003db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dba:	bc08      	pop	{r3}
 8003dbc:	469e      	mov	lr, r3
 8003dbe:	4770      	bx	lr
