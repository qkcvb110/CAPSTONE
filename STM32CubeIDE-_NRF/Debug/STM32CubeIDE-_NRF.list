
STM32CubeIDE-_NRF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080045b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  24000010  080045c8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000b8  080045c8  000200b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00014d11  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002785  00000000  00000000  00034d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a30  00000000  00000000  000374d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000948  00000000  00000000  00037f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002ef16  00000000  00000000  00038850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c75f  00000000  00000000  00067766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012f8cc  00000000  00000000  00073ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001a3791  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027e8  00000000  00000000  001a37e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08004588 	.word	0x08004588

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08004588 	.word	0x08004588

080002ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b08a      	sub	sp, #40	; 0x28
 80002f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000302:	4b43      	ldr	r3, [pc, #268]	; (8000410 <MX_GPIO_Init+0x124>)
 8000304:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000308:	4a41      	ldr	r2, [pc, #260]	; (8000410 <MX_GPIO_Init+0x124>)
 800030a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000312:	4b3f      	ldr	r3, [pc, #252]	; (8000410 <MX_GPIO_Init+0x124>)
 8000314:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800031c:	613b      	str	r3, [r7, #16]
 800031e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000320:	4b3b      	ldr	r3, [pc, #236]	; (8000410 <MX_GPIO_Init+0x124>)
 8000322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000326:	4a3a      	ldr	r2, [pc, #232]	; (8000410 <MX_GPIO_Init+0x124>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000330:	4b37      	ldr	r3, [pc, #220]	; (8000410 <MX_GPIO_Init+0x124>)
 8000332:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033e:	4b34      	ldr	r3, [pc, #208]	; (8000410 <MX_GPIO_Init+0x124>)
 8000340:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000344:	4a32      	ldr	r2, [pc, #200]	; (8000410 <MX_GPIO_Init+0x124>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800034e:	4b30      	ldr	r3, [pc, #192]	; (8000410 <MX_GPIO_Init+0x124>)
 8000350:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <MX_GPIO_Init+0x124>)
 800035e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000362:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <MX_GPIO_Init+0x124>)
 8000364:	f043 0304 	orr.w	r3, r3, #4
 8000368:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800036c:	4b28      	ldr	r3, [pc, #160]	; (8000410 <MX_GPIO_Init+0x124>)
 800036e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000372:	f003 0304 	and.w	r3, r3, #4
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800037a:	4b25      	ldr	r3, [pc, #148]	; (8000410 <MX_GPIO_Init+0x124>)
 800037c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000380:	4a23      	ldr	r2, [pc, #140]	; (8000410 <MX_GPIO_Init+0x124>)
 8000382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000386:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_GPIO_Init+0x124>)
 800038c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800039e:	481d      	ldr	r0, [pc, #116]	; (8000414 <MX_GPIO_Init+0x128>)
 80003a0:	f000 ffee 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003aa:	481b      	ldr	r0, [pc, #108]	; (8000418 <MX_GPIO_Init+0x12c>)
 80003ac:	f000 ffe8 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80003b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2300      	movs	r3, #0
 80003c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <MX_GPIO_Init+0x128>)
 80003ca:	f000 fe29 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2300      	movs	r3, #0
 80003de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003e0:	f107 0314 	add.w	r3, r7, #20
 80003e4:	4619      	mov	r1, r3
 80003e6:	480c      	ldr	r0, [pc, #48]	; (8000418 <MX_GPIO_Init+0x12c>)
 80003e8:	f000 fe1a 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80003ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80003fc:	f107 0314 	add.w	r3, r7, #20
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <MX_GPIO_Init+0x130>)
 8000404:	f000 fe0c 	bl	8001020 <HAL_GPIO_Init>

}
 8000408:	bf00      	nop
 800040a:	3728      	adds	r7, #40	; 0x28
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	58024400 	.word	0x58024400
 8000414:	58020c00 	.word	0x58020c00
 8000418:	58020800 	.word	0x58020800
 800041c:	58021800 	.word	0x58021800

08000420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f000 fc62 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000428:	f000 f812 	bl	8000450 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  nrf24l01p_rx_init(2500, _1Mbps);
 800042c:	2100      	movs	r1, #0
 800042e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000432:	f000 f905 	bl	8000640 <nrf24l01p_rx_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000436:	f7ff ff59 	bl	80002ec <MX_GPIO_Init>
  MX_SPI1_Init();
 800043a:	f000 fabd 	bl	80009b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
#ifdef RECEIVER
  	nrf24l01p_rx_init(2500, _1Mbps);
 800043e:	2100      	movs	r1, #0
 8000440:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000444:	f000 f8fc 	bl	8000640 <nrf24l01p_rx_init>
//
//
//	  nrf24l01p_tx_transmit(tx_data);
//#endif
//
	  HAL_Delay(100);
 8000448:	2064      	movs	r0, #100	; 0x64
 800044a:	f000 fce1 	bl	8000e10 <HAL_Delay>
 800044e:	e7fb      	b.n	8000448 <main+0x28>

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b09c      	sub	sp, #112	; 0x70
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800045a:	224c      	movs	r2, #76	; 0x4c
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f004 f88a 	bl	8004578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2220      	movs	r2, #32
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f004 f884 	bl	8004578 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000470:	2004      	movs	r0, #4
 8000472:	f000 ff9f 	bl	80013b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000476:	2300      	movs	r3, #0
 8000478:	603b      	str	r3, [r7, #0]
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <SystemClock_Config+0xd8>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	4a2a      	ldr	r2, [pc, #168]	; (8000528 <SystemClock_Config+0xd8>)
 8000480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000484:	6193      	str	r3, [r2, #24]
 8000486:	4b28      	ldr	r3, [pc, #160]	; (8000528 <SystemClock_Config+0xd8>)
 8000488:	699b      	ldr	r3, [r3, #24]
 800048a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000492:	bf00      	nop
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <SystemClock_Config+0xd8>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800049c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004a0:	d1f8      	bne.n	8000494 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a2:	2302      	movs	r3, #2
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004a6:	2301      	movs	r3, #1
 80004a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004aa:	2340      	movs	r3, #64	; 0x40
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ae:	2302      	movs	r3, #2
 80004b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b2:	2300      	movs	r3, #0
 80004b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004be:	2302      	movs	r3, #2
 80004c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80004c2:	2301      	movs	r3, #1
 80004c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004ca:	230c      	movs	r3, #12
 80004cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 ffc4 	bl	8001468 <HAL_RCC_OscConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004e6:	f000 f821 	bl	800052c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ea:	233f      	movs	r3, #63	; 0x3f
 80004ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004fa:	2340      	movs	r3, #64	; 0x40
 80004fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004fe:	2340      	movs	r3, #64	; 0x40
 8000500:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000506:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000508:	2340      	movs	r3, #64	; 0x40
 800050a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2102      	movs	r1, #2
 8000510:	4618      	mov	r0, r3
 8000512:	f001 fbad 	bl	8001c70 <HAL_RCC_ClockConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800051c:	f000 f806 	bl	800052c <Error_Handler>
  }
}
 8000520:	bf00      	nop
 8000522:	3770      	adds	r7, #112	; 0x70
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	58024800 	.word	0x58024800

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <cs_high>:

#include "nrf24l01p.h"


static void cs_high()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000542:	4802      	ldr	r0, [pc, #8]	; (800054c <cs_high+0x14>)
 8000544:	f000 ff1c 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	58020c00 	.word	0x58020c00

08000550 <cs_low>:

static void cs_low()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_SPI_CS_PIN_PORT, NRF24L01P_SPI_CS_PIN_NUMBER, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055a:	4802      	ldr	r0, [pc, #8]	; (8000564 <cs_low+0x14>)
 800055c:	f000 ff10 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}
 8000564:	58020c00 	.word	0x58020c00

08000568 <ce_high>:

static void ce_high()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000572:	4802      	ldr	r0, [pc, #8]	; (800057c <ce_high+0x14>)
 8000574:	f000 ff04 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	58020c00 	.word	0x58020c00

08000580 <ce_low>:

static void ce_low()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NRF24L01P_CE_PIN_PORT, NRF24L01P_CE_PIN_NUMBER, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4802      	ldr	r0, [pc, #8]	; (8000594 <ce_low+0x14>)
 800058c:	f000 fef8 	bl	8001380 <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	58020c00 	.word	0x58020c00

08000598 <read_register>:

static uint8_t read_register(uint8_t reg)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
    uint8_t command = NRF24L01P_CMD_R_REGISTER | reg;
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t read_val;

    cs_low();
 80005a6:	f7ff ffd3 	bl	8000550 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80005aa:	f107 020e 	add.w	r2, r7, #14
 80005ae:	f107 010f 	add.w	r1, r7, #15
 80005b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	4809      	ldr	r0, [pc, #36]	; (80005e0 <read_register+0x48>)
 80005bc:	f003 fbe2 	bl	8003d84 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(NRF24L01P_SPI, &read_val, 1, 2000);
 80005c0:	f107 010d 	add.w	r1, r7, #13
 80005c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80005c8:	2201      	movs	r2, #1
 80005ca:	4805      	ldr	r0, [pc, #20]	; (80005e0 <read_register+0x48>)
 80005cc:	f003 f9e8 	bl	80039a0 <HAL_SPI_Receive>
    cs_high();
 80005d0:	f7ff ffb2 	bl	8000538 <cs_high>

    return read_val;
 80005d4:	7b7b      	ldrb	r3, [r7, #13]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2400002c 	.word	0x2400002c

080005e4 <write_register>:

static uint8_t write_register(uint8_t reg, uint8_t value)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
    uint8_t command = NRF24L01P_CMD_W_REGISTER | reg;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f043 0320 	orr.w	r3, r3, #32
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	73fb      	strb	r3, [r7, #15]
    uint8_t status;
    uint8_t write_val = value;
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	737b      	strb	r3, [r7, #13]

    cs_low();
 8000602:	f7ff ffa5 	bl	8000550 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 8000606:	f107 020e 	add.w	r2, r7, #14
 800060a:	f107 010f 	add.w	r1, r7, #15
 800060e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2301      	movs	r3, #1
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <write_register+0x58>)
 8000618:	f003 fbb4 	bl	8003d84 <HAL_SPI_TransmitReceive>
    HAL_SPI_Transmit(NRF24L01P_SPI, &write_val, 1, 2000);
 800061c:	f107 010d 	add.w	r1, r7, #13
 8000620:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000624:	2201      	movs	r2, #1
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <write_register+0x58>)
 8000628:	f002 ffc8 	bl	80035bc <HAL_SPI_Transmit>
    cs_high();
 800062c:	f7ff ff84 	bl	8000538 <cs_high>

    return write_val;
 8000630:	7b7b      	ldrb	r3, [r7, #13]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2400002c 	.word	0x2400002c

08000640 <nrf24l01p_rx_init>:


/* nRF24L01+ Main Functions */
void nrf24l01p_rx_init(channel MHz, air_data_rate bps)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	460a      	mov	r2, r1
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4613      	mov	r3, r2
 800064e:	717b      	strb	r3, [r7, #5]
    nrf24l01p_reset();
 8000650:	f000 f824 	bl	800069c <nrf24l01p_reset>

    nrf24l01p_prx_mode();
 8000654:	f000 f876 	bl	8000744 <nrf24l01p_prx_mode>
    nrf24l01p_power_up();
 8000658:	f000 f8c8 	bl	80007ec <nrf24l01p_power_up>

    nrf24l01p_rx_set_payload_widths(NRF24L01P_PAYLOAD_LENGTH);
 800065c:	2008      	movs	r0, #8
 800065e:	f000 f8b7 	bl	80007d0 <nrf24l01p_rx_set_payload_widths>

    nrf24l01p_set_rf_channel(MHz);
 8000662:	88fb      	ldrh	r3, [r7, #6]
 8000664:	4618      	mov	r0, r3
 8000666:	f000 f94d 	bl	8000904 <nrf24l01p_set_rf_channel>
    nrf24l01p_set_rf_air_data_rate(bps);
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f979 	bl	8000964 <nrf24l01p_set_rf_air_data_rate>
    nrf24l01p_set_rf_tx_output_power(_0dBm);
 8000672:	2003      	movs	r0, #3
 8000674:	f000 f959 	bl	800092a <nrf24l01p_set_rf_tx_output_power>

    nrf24l01p_set_crc_length(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f8cc 	bl	8000816 <nrf24l01p_set_crc_length>
    nrf24l01p_set_address_widths(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f000 f8ec 	bl	800085c <nrf24l01p_set_address_widths>

    nrf24l01p_auto_retransmit_count(3);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f8f9 	bl	800087c <nrf24l01p_auto_retransmit_count>
    nrf24l01p_auto_retransmit_delay(250);
 800068a:	20fa      	movs	r0, #250	; 0xfa
 800068c:	f000 f912 	bl	80008b4 <nrf24l01p_auto_retransmit_delay>

    ce_high();
 8000690:	f7ff ff6a 	bl	8000568 <ce_high>
}
 8000694:	bf00      	nop
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <nrf24l01p_reset>:
    }
}

/* nRF24L01+ Sub Functions */
void nrf24l01p_reset()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    // Reset pins
    cs_high();
 80006a0:	f7ff ff4a 	bl	8000538 <cs_high>
    ce_low();
 80006a4:	f7ff ff6c 	bl	8000580 <ce_low>

    // Reset registers
    write_register(NRF24L01P_REG_CONFIG, 0x08);
 80006a8:	2108      	movs	r1, #8
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff ff9a 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_EN_AA, 0x3F);
 80006b0:	213f      	movs	r1, #63	; 0x3f
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff96 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_EN_RXADDR, 0x03);
 80006b8:	2103      	movs	r1, #3
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff ff92 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_SETUP_AW, 0x03);
 80006c0:	2103      	movs	r1, #3
 80006c2:	2003      	movs	r0, #3
 80006c4:	f7ff ff8e 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_SETUP_RETR, 0x03);
 80006c8:	2103      	movs	r1, #3
 80006ca:	2004      	movs	r0, #4
 80006cc:	f7ff ff8a 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RF_CH, 0x02);
 80006d0:	2102      	movs	r1, #2
 80006d2:	2005      	movs	r0, #5
 80006d4:	f7ff ff86 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RF_SETUP, 0x07);
 80006d8:	2107      	movs	r1, #7
 80006da:	2006      	movs	r0, #6
 80006dc:	f7ff ff82 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_STATUS, 0x7E);
 80006e0:	217e      	movs	r1, #126	; 0x7e
 80006e2:	2007      	movs	r0, #7
 80006e4:	f7ff ff7e 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2011      	movs	r0, #17
 80006ec:	f7ff ff7a 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P0, 0x00);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2011      	movs	r0, #17
 80006f4:	f7ff ff76 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P1, 0x00);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2012      	movs	r0, #18
 80006fc:	f7ff ff72 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P2, 0x00);
 8000700:	2100      	movs	r1, #0
 8000702:	2013      	movs	r0, #19
 8000704:	f7ff ff6e 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P3, 0x00);
 8000708:	2100      	movs	r1, #0
 800070a:	2014      	movs	r0, #20
 800070c:	f7ff ff6a 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P4, 0x00);
 8000710:	2100      	movs	r1, #0
 8000712:	2015      	movs	r0, #21
 8000714:	f7ff ff66 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_RX_PW_P5, 0x00);
 8000718:	2100      	movs	r1, #0
 800071a:	2016      	movs	r0, #22
 800071c:	f7ff ff62 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_FIFO_STATUS, 0x11);
 8000720:	2111      	movs	r1, #17
 8000722:	2017      	movs	r0, #23
 8000724:	f7ff ff5e 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_DYNPD, 0x00);
 8000728:	2100      	movs	r1, #0
 800072a:	201c      	movs	r0, #28
 800072c:	f7ff ff5a 	bl	80005e4 <write_register>
    write_register(NRF24L01P_REG_FEATURE, 0x00);
 8000730:	2100      	movs	r1, #0
 8000732:	201d      	movs	r0, #29
 8000734:	f7ff ff56 	bl	80005e4 <write_register>

    // Reset FIFO
    nrf24l01p_flush_rx_fifo();
 8000738:	f000 f81a 	bl	8000770 <nrf24l01p_flush_rx_fifo>
    nrf24l01p_flush_tx_fifo();
 800073c:	f000 f830 	bl	80007a0 <nrf24l01p_flush_tx_fifo>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <nrf24l01p_prx_mode>:

void nrf24l01p_prx_mode()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff ff24 	bl	8000598 <read_register>
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 0;
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4619      	mov	r1, r3
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff ff3f 	bl	80005e4 <write_register>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <nrf24l01p_flush_rx_fifo>:

    return status;
}

void nrf24l01p_flush_rx_fifo()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_RX;
 8000776:	23e2      	movs	r3, #226	; 0xe2
 8000778:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 800077a:	f7ff fee9 	bl	8000550 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 800077e:	1dba      	adds	r2, r7, #6
 8000780:	1df9      	adds	r1, r7, #7
 8000782:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2301      	movs	r3, #1
 800078a:	4804      	ldr	r0, [pc, #16]	; (800079c <nrf24l01p_flush_rx_fifo+0x2c>)
 800078c:	f003 fafa 	bl	8003d84 <HAL_SPI_TransmitReceive>
    cs_high();
 8000790:	f7ff fed2 	bl	8000538 <cs_high>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2400002c 	.word	0x2400002c

080007a0 <nrf24l01p_flush_tx_fifo>:

void nrf24l01p_flush_tx_fifo()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af02      	add	r7, sp, #8
    uint8_t command = NRF24L01P_CMD_FLUSH_TX;
 80007a6:	23e1      	movs	r3, #225	; 0xe1
 80007a8:	71fb      	strb	r3, [r7, #7]
    uint8_t status;

    cs_low();
 80007aa:	f7ff fed1 	bl	8000550 <cs_low>
    HAL_SPI_TransmitReceive(NRF24L01P_SPI, &command, &status, 1, 2000);
 80007ae:	1dba      	adds	r2, r7, #6
 80007b0:	1df9      	adds	r1, r7, #7
 80007b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	2301      	movs	r3, #1
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <nrf24l01p_flush_tx_fifo+0x2c>)
 80007bc:	f003 fae2 	bl	8003d84 <HAL_SPI_TransmitReceive>
    cs_high();
 80007c0:	f7ff feba 	bl	8000538 <cs_high>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2400002c 	.word	0x2400002c

080007d0 <nrf24l01p_rx_set_payload_widths>:
{
    return read_register(NRF24L01P_REG_FIFO_STATUS);
}

void nrf24l01p_rx_set_payload_widths(widths bytes)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_RX_PW_P0, bytes);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4619      	mov	r1, r3
 80007de:	2011      	movs	r0, #17
 80007e0:	f7ff ff00 	bl	80005e4 <write_register>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <nrf24l01p_power_up>:

    write_register(NRF24L01P_REG_STATUS, new_status);
}

void nrf24l01p_power_up()
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fed0 	bl	8000598 <read_register>
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
    new_config |= 1 << 1;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f043 0302 	orr.w	r3, r3, #2
 8000802:	71fb      	strb	r3, [r7, #7]

    write_register(NRF24L01P_REG_CONFIG, new_config);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4619      	mov	r1, r3
 8000808:	2000      	movs	r0, #0
 800080a:	f7ff feeb 	bl	80005e4 <write_register>
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <nrf24l01p_set_crc_length>:

    write_register(NRF24L01P_REG_CONFIG, new_config);
}

void nrf24l01p_set_crc_length(length bytes)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	b084      	sub	sp, #16
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
    uint8_t new_config = read_register(NRF24L01P_REG_CONFIG);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff feb9 	bl	8000598 <read_register>
 8000826:	4603      	mov	r3, r0
 8000828:	73fb      	strb	r3, [r7, #15]

    switch(bytes)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d002      	beq.n	8000836 <nrf24l01p_set_crc_length+0x20>
 8000830:	2b02      	cmp	r3, #2
 8000832:	d005      	beq.n	8000840 <nrf24l01p_set_crc_length+0x2a>
 8000834:	e009      	b.n	800084a <nrf24l01p_set_crc_length+0x34>
    {
        // CRCO bit in CONFIG resiger set 0
        case 1:
            new_config &= 0xFB;
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	f023 0304 	bic.w	r3, r3, #4
 800083c:	73fb      	strb	r3, [r7, #15]
            break;
 800083e:	e004      	b.n	800084a <nrf24l01p_set_crc_length+0x34>
        // CRCO bit in CONFIG resiger set 1
        case 2:
            new_config |= 1 << 2;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	73fb      	strb	r3, [r7, #15]
            break;
 8000848:	bf00      	nop
    }

    write_register(NRF24L01P_REG_CONFIG, new_config);
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	4619      	mov	r1, r3
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fec8 	bl	80005e4 <write_register>
}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <nrf24l01p_set_address_widths>:

void nrf24l01p_set_address_widths(widths bytes)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
    write_register(NRF24L01P_REG_SETUP_AW, bytes - 2);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3b02      	subs	r3, #2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	2003      	movs	r0, #3
 8000870:	f7ff feb8 	bl	80005e4 <write_register>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <nrf24l01p_auto_retransmit_count>:

void nrf24l01p_auto_retransmit_count(count cnt)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 8000886:	2004      	movs	r0, #4
 8000888:	f7ff fe86 	bl	8000598 <read_register>
 800088c:	4603      	mov	r3, r0
 800088e:	73fb      	strb	r3, [r7, #15]

    // Reset ARC register 0
    new_setup_retr |= 0xF0;
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	f063 030f 	orn	r3, r3, #15
 8000896:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= cnt;
 8000898:	7bfa      	ldrb	r2, [r7, #15]
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4313      	orrs	r3, r2
 800089e:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4619      	mov	r1, r3
 80008a4:	2004      	movs	r0, #4
 80008a6:	f7ff fe9d 	bl	80005e4 <write_register>
}
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <nrf24l01p_auto_retransmit_delay>:

void nrf24l01p_auto_retransmit_delay(delay us)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
    uint8_t new_setup_retr = read_register(NRF24L01P_REG_SETUP_RETR);
 80008be:	2004      	movs	r0, #4
 80008c0:	f7ff fe6a 	bl	8000598 <read_register>
 80008c4:	4603      	mov	r3, r0
 80008c6:	73fb      	strb	r3, [r7, #15]

    // Reset ARD register 0
    new_setup_retr |= 0x0F;
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	f043 030f 	orr.w	r3, r3, #15
 80008ce:	73fb      	strb	r3, [r7, #15]
    new_setup_retr |= ((us / 250) - 1) << 4;
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <nrf24l01p_auto_retransmit_delay+0x4c>)
 80008d4:	fba2 2303 	umull	r2, r3, r2, r3
 80008d8:	091b      	lsrs	r3, r3, #4
 80008da:	b29b      	uxth	r3, r3
 80008dc:	3b01      	subs	r3, #1
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b25b      	sxtb	r3, r3
 80008ea:	73fb      	strb	r3, [r7, #15]
    write_register(NRF24L01P_REG_SETUP_RETR, new_setup_retr);
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	4619      	mov	r1, r3
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff fe77 	bl	80005e4 <write_register>
}
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	10624dd3 	.word	0x10624dd3

08000904 <nrf24l01p_set_rf_channel>:

void nrf24l01p_set_rf_channel(channel MHz)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
	uint16_t new_rf_ch = MHz - 2400;
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	f5a3 6316 	sub.w	r3, r3, #2400	; 0x960
 8000914:	81fb      	strh	r3, [r7, #14]
    write_register(NRF24L01P_REG_RF_CH, new_rf_ch);
 8000916:	89fb      	ldrh	r3, [r7, #14]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4619      	mov	r1, r3
 800091c:	2005      	movs	r0, #5
 800091e:	f7ff fe61 	bl	80005e4 <write_register>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <nrf24l01p_set_rf_tx_output_power>:

void nrf24l01p_set_rf_tx_output_power(output_power dBm)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b084      	sub	sp, #16
 800092e:	af00      	add	r7, sp, #0
 8000930:	4603      	mov	r3, r0
 8000932:	71fb      	strb	r3, [r7, #7]
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xF9;
 8000934:	2006      	movs	r0, #6
 8000936:	f7ff fe2f 	bl	8000598 <read_register>
 800093a:	4603      	mov	r3, r0
 800093c:	f023 0306 	bic.w	r3, r3, #6
 8000940:	73fb      	strb	r3, [r7, #15]
    new_rf_setup |= (dBm << 1);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	b25a      	sxtb	r2, r3
 8000948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094c:	4313      	orrs	r3, r2
 800094e:	b25b      	sxtb	r3, r3
 8000950:	73fb      	strb	r3, [r7, #15]

    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4619      	mov	r1, r3
 8000956:	2006      	movs	r0, #6
 8000958:	f7ff fe44 	bl	80005e4 <write_register>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <nrf24l01p_set_rf_air_data_rate>:

void nrf24l01p_set_rf_air_data_rate(air_data_rate bps)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    // Set value to 0
    uint8_t new_rf_setup = read_register(NRF24L01P_REG_RF_SETUP) & 0xD7;
 800096e:	2006      	movs	r0, #6
 8000970:	f7ff fe12 	bl	8000598 <read_register>
 8000974:	4603      	mov	r3, r0
 8000976:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800097a:	73fb      	strb	r3, [r7, #15]

    switch(bps)
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d00a      	beq.n	8000998 <nrf24l01p_set_rf_air_data_rate+0x34>
 8000982:	2b02      	cmp	r3, #2
 8000984:	dc0e      	bgt.n	80009a4 <nrf24l01p_set_rf_air_data_rate+0x40>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00b      	beq.n	80009a2 <nrf24l01p_set_rf_air_data_rate+0x3e>
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10a      	bne.n	80009a4 <nrf24l01p_set_rf_air_data_rate+0x40>
    {
        case _1Mbps:
            break;
        case _2Mbps:
            new_rf_setup |= 1 << 3;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	73fb      	strb	r3, [r7, #15]
            break;
 8000996:	e005      	b.n	80009a4 <nrf24l01p_set_rf_air_data_rate+0x40>
        case _250kbps:
            new_rf_setup |= 1 << 5;
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	f043 0320 	orr.w	r3, r3, #32
 800099e:	73fb      	strb	r3, [r7, #15]
            break;
 80009a0:	e000      	b.n	80009a4 <nrf24l01p_set_rf_air_data_rate+0x40>
            break;
 80009a2:	bf00      	nop
    }
    write_register(NRF24L01P_REG_RF_SETUP, new_rf_setup);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4619      	mov	r1, r3
 80009a8:	2006      	movs	r0, #6
 80009aa:	f7ff fe1b 	bl	80005e4 <write_register>
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80009bc:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009be:	4a25      	ldr	r2, [pc, #148]	; (8000a54 <MX_SPI1_Init+0x9c>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009d0:	2203      	movs	r2, #3
 80009d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_SPI1_Init+0x98>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_SPI1_Init+0x98>)
 8000a3e:	f002 fcb7 	bl	80033b0 <HAL_SPI_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_SPI1_Init+0x94>
  {
    Error_Handler();
 8000a48:	f7ff fd70 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2400002c 	.word	0x2400002c
 8000a54:	40013000 	.word	0x40013000

08000a58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0b8      	sub	sp, #224	; 0xe0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	22b8      	movs	r2, #184	; 0xb8
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fd7d 	bl	8004578 <memset>
  if(spiHandle->Instance==SPI1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a24      	ldr	r2, [pc, #144]	; (8000b14 <HAL_SPI_MspInit+0xbc>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d141      	bne.n	8000b0c <HAL_SPI_MspInit+0xb4>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fc1a 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000aa2:	f7ff fd43 	bl	800052c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000aa8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000aac:	4a1a      	ldr	r2, [pc, #104]	; (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000aae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ab2:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000ab8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000ac6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aca:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_SPI_MspInit+0xc0>)
 8000ad6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ae2:	23e0      	movs	r3, #224	; 0xe0
 8000ae4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afa:	2305      	movs	r3, #5
 8000afc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b04:	4619      	mov	r1, r3
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_SPI_MspInit+0xc4>)
 8000b08:	f000 fa8a 	bl	8001020 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	37e0      	adds	r7, #224	; 0xe0
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40013000 	.word	0x40013000
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58020000 	.word	0x58020000

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_MspInit+0x30>)
 8000b28:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x30>)
 8000b2e:	f043 0302 	orr.w	r3, r3, #2
 8000b32:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x30>)
 8000b38:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b3c:	f003 0302 	and.w	r3, r3, #2
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	58024400 	.word	0x58024400

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler+0x4>

08000b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <MemManage_Handler+0x4>

08000b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <BusFault_Handler+0x4>

08000b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <UsageFault_Handler+0x4>

08000b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba0:	f000 f916 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <SystemInit+0xd0>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a31      	ldr	r2, [pc, #196]	; (8000c78 <SystemInit+0xd0>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <SystemInit+0xd4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d807      	bhi.n	8000bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <SystemInit+0xd4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 030f 	bic.w	r3, r3, #15
 8000bd0:	4a2a      	ldr	r2, [pc, #168]	; (8000c7c <SystemInit+0xd4>)
 8000bd2:	f043 0303 	orr.w	r3, r3, #3
 8000bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <SystemInit+0xd8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <SystemInit+0xd8>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SystemInit+0xd8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <SystemInit+0xd8>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4924      	ldr	r1, [pc, #144]	; (8000c80 <SystemInit+0xd8>)
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <SystemInit+0xdc>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <SystemInit+0xd4>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c02:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <SystemInit+0xd4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f023 030f 	bic.w	r3, r3, #15
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <SystemInit+0xd4>)
 8000c0c:	f043 0303 	orr.w	r3, r3, #3
 8000c10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <SystemInit+0xd8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000c18:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <SystemInit+0xd8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <SystemInit+0xd8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <SystemInit+0xd8>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <SystemInit+0xe0>)
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <SystemInit+0xd8>)
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <SystemInit+0xe4>)
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <SystemInit+0xd8>)
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <SystemInit+0xe8>)
 8000c34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <SystemInit+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <SystemInit+0xd8>)
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <SystemInit+0xe8>)
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <SystemInit+0xd8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <SystemInit+0xd8>)
 8000c4a:	4a11      	ldr	r2, [pc, #68]	; (8000c90 <SystemInit+0xe8>)
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <SystemInit+0xd8>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <SystemInit+0xd8>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <SystemInit+0xd8>)
 8000c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <SystemInit+0xd8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <SystemInit+0xec>)
 8000c68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c6c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	52002000 	.word	0x52002000
 8000c80:	58024400 	.word	0x58024400
 8000c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c88:	02020200 	.word	0x02020200
 8000c8c:	01ff0000 	.word	0x01ff0000
 8000c90:	01010280 	.word	0x01010280
 8000c94:	52004000 	.word	0x52004000

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c9c:	f7ff ff84 	bl	8000ba8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f003 fc33 	bl	8004530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fba9 	bl	8000420 <main>
  bx  lr
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cdc:	080045b8 	.word	0x080045b8
  ldr r2, =_sbss
 8000ce0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ce4:	240000b8 	.word	0x240000b8

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f962 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000cf8:	f001 f970 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_Init+0x68>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	4913      	ldr	r1, [pc, #76]	; (8000d58 <HAL_Init+0x6c>)
 8000d0a:	5ccb      	ldrb	r3, [r1, r3]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_Init+0x68>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_Init+0x6c>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <HAL_Init+0x70>)
 8000d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <HAL_Init+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f814 	bl	8000d64 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e002      	b.n	8000d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff feeb 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	080045a0 	.word	0x080045a0
 8000d5c:	24000004 	.word	0x24000004
 8000d60:	24000000 	.word	0x24000000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e021      	b.n	8000dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <HAL_InitTick+0x64>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f939 	bl	8001006 <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f911 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <HAL_InitTick+0x68>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400000c 	.word	0x2400000c
 8000dc8:	24000000 	.word	0x24000000
 8000dcc:	24000008 	.word	0x24000008

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2400000c 	.word	0x2400000c
 8000df4:	240000b4 	.word	0x240000b4

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	240000b4 	.word	0x240000b4

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2400000c 	.word	0x2400000c

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <__NVIC_SetPriorityGrouping+0x40>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x40>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	05fa0000 	.word	0x05fa0000

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff47 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff5e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff90 	bl	8000f10 <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5f 	bl	8000ebc <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb2 	bl	8000f78 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800102e:	4b89      	ldr	r3, [pc, #548]	; (8001254 <HAL_GPIO_Init+0x234>)
 8001030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001032:	e194      	b.n	800135e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 8186 	beq.w	8001358 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <HAL_GPIO_Init+0x44>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d130      	bne.n	80010c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109a:	2201      	movs	r2, #1
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 0201 	and.w	r2, r3, #1
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d017      	beq.n	8001102 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	2203      	movs	r2, #3
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0303 	and.w	r3, r3, #3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d123      	bne.n	8001156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	220f      	movs	r2, #15
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4313      	orrs	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	08da      	lsrs	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3208      	adds	r2, #8
 8001150:	69b9      	ldr	r1, [r7, #24]
 8001152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0203 	and.w	r2, r3, #3
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80e0 	beq.w	8001358 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <HAL_GPIO_Init+0x238>)
 800119a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800119e:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_GPIO_Init+0x238>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011a8:	4b2b      	ldr	r3, [pc, #172]	; (8001258 <HAL_GPIO_Init+0x238>)
 80011aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a29      	ldr	r2, [pc, #164]	; (800125c <HAL_GPIO_Init+0x23c>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <HAL_GPIO_Init+0x240>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d052      	beq.n	8001288 <HAL_GPIO_Init+0x268>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <HAL_GPIO_Init+0x244>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d031      	beq.n	800124e <HAL_GPIO_Init+0x22e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	; (8001268 <HAL_GPIO_Init+0x248>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x22a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <HAL_GPIO_Init+0x24c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x226>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <HAL_GPIO_Init+0x250>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x222>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1b      	ldr	r2, [pc, #108]	; (8001274 <HAL_GPIO_Init+0x254>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x21e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <HAL_GPIO_Init+0x258>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x21a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_GPIO_Init+0x25c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x216>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a18      	ldr	r2, [pc, #96]	; (8001280 <HAL_GPIO_Init+0x260>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x212>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_GPIO_Init+0x264>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x20e>
 800122a:	2309      	movs	r3, #9
 800122c:	e02d      	b.n	800128a <HAL_GPIO_Init+0x26a>
 800122e:	230a      	movs	r3, #10
 8001230:	e02b      	b.n	800128a <HAL_GPIO_Init+0x26a>
 8001232:	2308      	movs	r3, #8
 8001234:	e029      	b.n	800128a <HAL_GPIO_Init+0x26a>
 8001236:	2307      	movs	r3, #7
 8001238:	e027      	b.n	800128a <HAL_GPIO_Init+0x26a>
 800123a:	2306      	movs	r3, #6
 800123c:	e025      	b.n	800128a <HAL_GPIO_Init+0x26a>
 800123e:	2305      	movs	r3, #5
 8001240:	e023      	b.n	800128a <HAL_GPIO_Init+0x26a>
 8001242:	2304      	movs	r3, #4
 8001244:	e021      	b.n	800128a <HAL_GPIO_Init+0x26a>
 8001246:	2303      	movs	r3, #3
 8001248:	e01f      	b.n	800128a <HAL_GPIO_Init+0x26a>
 800124a:	2302      	movs	r3, #2
 800124c:	e01d      	b.n	800128a <HAL_GPIO_Init+0x26a>
 800124e:	2301      	movs	r3, #1
 8001250:	e01b      	b.n	800128a <HAL_GPIO_Init+0x26a>
 8001252:	bf00      	nop
 8001254:	58000080 	.word	0x58000080
 8001258:	58024400 	.word	0x58024400
 800125c:	58000400 	.word	0x58000400
 8001260:	58020000 	.word	0x58020000
 8001264:	58020400 	.word	0x58020400
 8001268:	58020800 	.word	0x58020800
 800126c:	58020c00 	.word	0x58020c00
 8001270:	58021000 	.word	0x58021000
 8001274:	58021400 	.word	0x58021400
 8001278:	58021800 	.word	0x58021800
 800127c:	58021c00 	.word	0x58021c00
 8001280:	58022000 	.word	0x58022000
 8001284:	58022400 	.word	0x58022400
 8001288:	2300      	movs	r3, #0
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129a:	4938      	ldr	r1, [pc, #224]	; (800137c <HAL_GPIO_Init+0x35c>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f47f ae63 	bne.w	8001034 <HAL_GPIO_Init+0x14>
  }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3724      	adds	r7, #36	; 0x24
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58000400 	.word	0x58000400

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013bc:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_PWREx_ConfigSupply+0xb0>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	2b06      	cmp	r3, #6
 80013c6:	d00a      	beq.n	80013de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013c8:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d001      	beq.n	80013da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e040      	b.n	800145c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e03e      	b.n	800145c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_PWREx_ConfigSupply+0xb0>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013e6:	491f      	ldr	r1, [pc, #124]	; (8001464 <HAL_PWREx_ConfigSupply+0xb0>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013ee:	f7ff fd03 	bl	8000df8 <HAL_GetTick>
 80013f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013f4:	e009      	b.n	800140a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013f6:	f7ff fcff 	bl	8000df8 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001404:	d901      	bls.n	800140a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e028      	b.n	800145c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_PWREx_ConfigSupply+0xb0>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001416:	d1ee      	bne.n	80013f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b1e      	cmp	r3, #30
 800141c:	d008      	beq.n	8001430 <HAL_PWREx_ConfigSupply+0x7c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b2e      	cmp	r3, #46	; 0x2e
 8001422:	d005      	beq.n	8001430 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b1d      	cmp	r3, #29
 8001428:	d002      	beq.n	8001430 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b2d      	cmp	r3, #45	; 0x2d
 800142e:	d114      	bne.n	800145a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001430:	f7ff fce2 	bl	8000df8 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001436:	e009      	b.n	800144c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001438:	f7ff fcde 	bl	8000df8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001446:	d901      	bls.n	800144c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e007      	b.n	800145c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_PWREx_ConfigSupply+0xb0>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d1ee      	bne.n	8001438 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	58024800 	.word	0x58024800

08001468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e3f3      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80b3 	beq.w	80015ee <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001488:	4b9e      	ldr	r3, [pc, #632]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001492:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	2b10      	cmp	r3, #16
 800149c:	d007      	beq.n	80014ae <HAL_RCC_OscConfig+0x46>
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	2b18      	cmp	r3, #24
 80014a2:	d112      	bne.n	80014ca <HAL_RCC_OscConfig+0x62>
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d10d      	bne.n	80014ca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b95      	ldr	r3, [pc, #596]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8098 	beq.w	80015ec <HAL_RCC_OscConfig+0x184>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f040 8093 	bne.w	80015ec <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e3cb      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d106      	bne.n	80014e2 <HAL_RCC_OscConfig+0x7a>
 80014d4:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a8a      	ldr	r2, [pc, #552]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e058      	b.n	8001594 <HAL_RCC_OscConfig+0x12c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0xa8>
 80014ea:	4b86      	ldr	r3, [pc, #536]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a85      	ldr	r2, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b83      	ldr	r3, [pc, #524]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a82      	ldr	r2, [pc, #520]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80014fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b80      	ldr	r3, [pc, #512]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a7f      	ldr	r2, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001508:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e041      	b.n	8001594 <HAL_RCC_OscConfig+0x12c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001518:	d112      	bne.n	8001540 <HAL_RCC_OscConfig+0xd8>
 800151a:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a76      	ldr	r2, [pc, #472]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800152c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b74      	ldr	r3, [pc, #464]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a73      	ldr	r2, [pc, #460]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	e029      	b.n	8001594 <HAL_RCC_OscConfig+0x12c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001548:	d112      	bne.n	8001570 <HAL_RCC_OscConfig+0x108>
 800154a:	4b6e      	ldr	r3, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6d      	ldr	r2, [pc, #436]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6a      	ldr	r2, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800155c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b68      	ldr	r3, [pc, #416]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a67      	ldr	r2, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e011      	b.n	8001594 <HAL_RCC_OscConfig+0x12c>
 8001570:	4b64      	ldr	r3, [pc, #400]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a63      	ldr	r2, [pc, #396]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a60      	ldr	r2, [pc, #384]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a5d      	ldr	r2, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800158e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fc2c 	bl	8000df8 <HAL_GetTick>
 80015a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fc28 	bl	8000df8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e355      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015b6:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x13c>
 80015c2:	e014      	b.n	80015ee <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c4:	f7ff fc18 	bl	8000df8 <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc14 	bl	8000df8 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e341      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x164>
 80015ea:	e000      	b.n	80015ee <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 808c 	beq.w	8001714 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fc:	4b41      	ldr	r3, [pc, #260]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001604:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_RCC_OscConfig+0x1ba>
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	2b18      	cmp	r3, #24
 8001616:	d137      	bne.n	8001688 <HAL_RCC_OscConfig+0x220>
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d132      	bne.n	8001688 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x1d2>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e313      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800163a:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0219 	bic.w	r2, r3, #25
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	492f      	ldr	r1, [pc, #188]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800164c:	f7ff fbd4 	bl	8000df8 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fbd0 	bl	8000df8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e2fd      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	4920      	ldr	r1, [pc, #128]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001686:	e045      	b.n	8001714 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d026      	beq.n	80016de <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001690:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 0219 	bic.w	r2, r3, #25
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	4919      	ldr	r1, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fba9 	bl	8000df8 <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fba5 	bl	8000df8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e2d2      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	490b      	ldr	r1, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e01a      	b.n	8001714 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x29c>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fb85 	bl	8000df8 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fb81 	bl	8000df8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d903      	bls.n	8001708 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e2ae      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
 8001704:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001708:	4b99      	ldr	r3, [pc, #612]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	d06a      	beq.n	80017f6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001720:	4b93      	ldr	r3, [pc, #588]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001728:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800172a:	4b91      	ldr	r3, [pc, #580]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d007      	beq.n	8001746 <HAL_RCC_OscConfig+0x2de>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b18      	cmp	r3, #24
 800173a:	d11b      	bne.n	8001774 <HAL_RCC_OscConfig+0x30c>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001746:	4b8a      	ldr	r3, [pc, #552]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x2f6>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b80      	cmp	r3, #128	; 0x80
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e281      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800175e:	4b84      	ldr	r3, [pc, #528]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	061b      	lsls	r3, r3, #24
 800176c:	4980      	ldr	r1, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001772:	e040      	b.n	80017f6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7b      	ldr	r2, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff fb36 	bl	8000df8 <HAL_GetTick>
 800178c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001790:	f7ff fb32 	bl	8000df8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e25f      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017a2:	4b73      	ldr	r3, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ae:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	061b      	lsls	r3, r3, #24
 80017bc:	496c      	ldr	r1, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60cb      	str	r3, [r1, #12]
 80017c2:	e018      	b.n	80017f6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017c4:	4b6a      	ldr	r3, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a69      	ldr	r2, [pc, #420]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80017ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff fb12 	bl	8000df8 <HAL_GetTick>
 80017d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017d8:	f7ff fb0e 	bl	8000df8 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e23b      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d036      	beq.n	8001870 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d019      	beq.n	800183e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff faef 	bl	8000df8 <HAL_GetTick>
 800181a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181e:	f7ff faeb 	bl	8000df8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e218      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x3b6>
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800183e:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001842:	4a4b      	ldr	r2, [pc, #300]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fad5 	bl	8000df8 <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001852:	f7ff fad1 	bl	8000df8 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e1fe      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	2b00      	cmp	r3, #0
 800187a:	d036      	beq.n	80018ea <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d019      	beq.n	80018b8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001884:	4b3a      	ldr	r3, [pc, #232]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a39      	ldr	r2, [pc, #228]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800188a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800188e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001890:	f7ff fab2 	bl	8000df8 <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001898:	f7ff faae 	bl	8000df8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e1db      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80018aa:	4b31      	ldr	r3, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x430>
 80018b6:	e018      	b.n	80018ea <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018b8:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a2c      	ldr	r2, [pc, #176]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80018be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa98 	bl	8000df8 <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80018cc:	f7ff fa94 	bl	8000df8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e1c1      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80af 	beq.w	8001a56 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018f8:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <HAL_RCC_OscConfig+0x50c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_RCC_OscConfig+0x50c>)
 80018fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001902:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001904:	f7ff fa78 	bl	8000df8 <HAL_GetTick>
 8001908:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800190c:	f7ff fa74 	bl	8000df8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1a1      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x50c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x4d8>
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6713      	str	r3, [r2, #112]	; 0x70
 800193e:	e05b      	b.n	80019f8 <HAL_RCC_OscConfig+0x590>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d117      	bne.n	8001978 <HAL_RCC_OscConfig+0x510>
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 800195a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800195e:	6713      	str	r3, [r2, #112]	; 0x70
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a02      	ldr	r2, [pc, #8]	; (8001970 <HAL_RCC_OscConfig+0x508>)
 8001966:	f023 0304 	bic.w	r3, r3, #4
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	e044      	b.n	80019f8 <HAL_RCC_OscConfig+0x590>
 800196e:	bf00      	nop
 8001970:	58024400 	.word	0x58024400
 8001974:	58024800 	.word	0x58024800
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d112      	bne.n	80019a6 <HAL_RCC_OscConfig+0x53e>
 8001980:	4b95      	ldr	r3, [pc, #596]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a94      	ldr	r2, [pc, #592]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
 800198c:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a91      	ldr	r2, [pc, #580]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a8e      	ldr	r2, [pc, #568]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
 80019a4:	e028      	b.n	80019f8 <HAL_RCC_OscConfig+0x590>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b85      	cmp	r3, #133	; 0x85
 80019ac:	d112      	bne.n	80019d4 <HAL_RCC_OscConfig+0x56c>
 80019ae:	4b8a      	ldr	r3, [pc, #552]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	4a89      	ldr	r2, [pc, #548]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ba:	4b87      	ldr	r3, [pc, #540]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019be:	4a86      	ldr	r2, [pc, #536]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c4:	6713      	str	r3, [r2, #112]	; 0x70
 80019c6:	4b84      	ldr	r3, [pc, #528]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ca:	4a83      	ldr	r2, [pc, #524]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6713      	str	r3, [r2, #112]	; 0x70
 80019d2:	e011      	b.n	80019f8 <HAL_RCC_OscConfig+0x590>
 80019d4:	4b80      	ldr	r3, [pc, #512]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a7f      	ldr	r2, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	4b7d      	ldr	r3, [pc, #500]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a7c      	ldr	r2, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019e6:	f023 0304 	bic.w	r3, r3, #4
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	4b7a      	ldr	r3, [pc, #488]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a79      	ldr	r2, [pc, #484]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 80019f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d015      	beq.n	8001a2c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff f9fa 	bl	8000df8 <HAL_GetTick>
 8001a04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f7ff f9f6 	bl	8000df8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e121      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a1e:	4b6e      	ldr	r3, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0ee      	beq.n	8001a08 <HAL_RCC_OscConfig+0x5a0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f9e4 	bl	8000df8 <HAL_GetTick>
 8001a30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f9e0 	bl	8000df8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e10b      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1ee      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8100 	beq.w	8001c60 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a60:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a68:	2b18      	cmp	r3, #24
 8001a6a:	f000 80bb 	beq.w	8001be4 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	f040 8095 	bne.w	8001ba2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b57      	ldr	r3, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f9b8 	bl	8000df8 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a8c:	f7ff f9b4 	bl	8000df8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0e1      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aae:	4b4b      	ldr	r3, [pc, #300]	; (8001bdc <HAL_RCC_OscConfig+0x774>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	430a      	orrs	r2, r1
 8001abe:	4946      	ldr	r1, [pc, #280]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	3b01      	subs	r3, #1
 8001aee:	061b      	lsls	r3, r3, #24
 8001af0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001af4:	4938      	ldr	r1, [pc, #224]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001afa:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_RCC_OscConfig+0x778>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b12:	00d2      	lsls	r2, r2, #3
 8001b14:	4930      	ldr	r1, [pc, #192]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f023 020c 	bic.w	r2, r3, #12
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	492c      	ldr	r1, [pc, #176]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	f023 0202 	bic.w	r2, r3, #2
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	4927      	ldr	r1, [pc, #156]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	4a22      	ldr	r2, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f93d 	bl	8000df8 <HAL_GetTick>
 8001b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f939 	bl	8000df8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e066      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b94:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x71a>
 8001ba0:	e05e      	b.n	8001c60 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f923 	bl	8000df8 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f91f 	bl	8000df8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e04c      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_OscConfig+0x770>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x74e>
 8001bd4:	e044      	b.n	8001c60 <HAL_RCC_OscConfig+0x7f8>
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	fffffc0c 	.word	0xfffffc0c
 8001be0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_RCC_OscConfig+0x804>)
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001bea:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_RCC_OscConfig+0x804>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d031      	beq.n	8001c5c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0203 	and.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d12a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d122      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d11a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	0a5b      	lsrs	r3, r3, #9
 8001c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d111      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	0c1b      	lsrs	r3, r3, #16
 8001c3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d108      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0e1b      	lsrs	r3, r3, #24
 8001c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3730      	adds	r7, #48	; 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400

08001c70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e19c      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b8a      	ldr	r3, [pc, #552]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d910      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b87      	ldr	r3, [pc, #540]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 020f 	bic.w	r2, r3, #15
 8001c9a:	4985      	ldr	r1, [pc, #532]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b83      	ldr	r3, [pc, #524]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e184      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	4b7b      	ldr	r3, [pc, #492]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d908      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd0:	4b78      	ldr	r3, [pc, #480]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	4975      	ldr	r1, [pc, #468]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d010      	beq.n	8001d10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d908      	bls.n	8001d10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	496a      	ldr	r1, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699a      	ldr	r2, [r3, #24]
 8001d20:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d908      	bls.n	8001d3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d2c:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	495e      	ldr	r1, [pc, #376]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d908      	bls.n	8001d6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001d5a:	4b56      	ldr	r3, [pc, #344]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4953      	ldr	r1, [pc, #332]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d010      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d908      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f023 020f 	bic.w	r2, r3, #15
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4947      	ldr	r1, [pc, #284]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d055      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001da6:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4940      	ldr	r1, [pc, #256]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d121      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0f6      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b03      	cmp	r3, #3
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd8:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d115      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0ea      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0de      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0d6      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f023 0207 	bic.w	r2, r3, #7
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4925      	ldr	r1, [pc, #148]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7fe ffe9 	bl	8000df8 <HAL_GetTick>
 8001e26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7fe ffe5 	bl	8000df8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0be      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d1eb      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d208      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f023 020f 	bic.w	r2, r3, #15
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	490e      	ldr	r1, [pc, #56]	; (8001eb4 <HAL_RCC_ClockConfig+0x244>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d214      	bcs.n	8001eb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 020f 	bic.w	r2, r3, #15
 8001e96:	4906      	ldr	r1, [pc, #24]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_ClockConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e086      	b.n	8001fbe <HAL_RCC_ClockConfig+0x34e>
 8001eb0:	52002000 	.word	0x52002000
 8001eb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d208      	bcs.n	8001ee6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	4939      	ldr	r1, [pc, #228]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	4b34      	ldr	r3, [pc, #208]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d208      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f02:	4b31      	ldr	r3, [pc, #196]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d208      	bcs.n	8001f42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	4922      	ldr	r1, [pc, #136]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0320 	and.w	r3, r3, #32
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d208      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4917      	ldr	r1, [pc, #92]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f70:	f000 f834 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <HAL_RCC_ClockConfig+0x35c>)
 8001f82:	5ccb      	ldrb	r3, [r1, r3]
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_RCC_ClockConfig+0x358>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <HAL_RCC_ClockConfig+0x35c>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <HAL_RCC_ClockConfig+0x360>)
 8001fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x364>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001fae:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x368>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fed6 	bl	8000d64 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	080045a0 	.word	0x080045a0
 8001fd0:	24000004 	.word	0x24000004
 8001fd4:	24000000 	.word	0x24000000
 8001fd8:	24000008 	.word	0x24000008

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe2:	4bb3      	ldr	r3, [pc, #716]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fea:	2b18      	cmp	r3, #24
 8001fec:	f200 8155 	bhi.w	800229a <HAL_RCC_GetSysClockFreq+0x2be>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	0800205d 	.word	0x0800205d
 8001ffc:	0800229b 	.word	0x0800229b
 8002000:	0800229b 	.word	0x0800229b
 8002004:	0800229b 	.word	0x0800229b
 8002008:	0800229b 	.word	0x0800229b
 800200c:	0800229b 	.word	0x0800229b
 8002010:	0800229b 	.word	0x0800229b
 8002014:	0800229b 	.word	0x0800229b
 8002018:	08002083 	.word	0x08002083
 800201c:	0800229b 	.word	0x0800229b
 8002020:	0800229b 	.word	0x0800229b
 8002024:	0800229b 	.word	0x0800229b
 8002028:	0800229b 	.word	0x0800229b
 800202c:	0800229b 	.word	0x0800229b
 8002030:	0800229b 	.word	0x0800229b
 8002034:	0800229b 	.word	0x0800229b
 8002038:	08002089 	.word	0x08002089
 800203c:	0800229b 	.word	0x0800229b
 8002040:	0800229b 	.word	0x0800229b
 8002044:	0800229b 	.word	0x0800229b
 8002048:	0800229b 	.word	0x0800229b
 800204c:	0800229b 	.word	0x0800229b
 8002050:	0800229b 	.word	0x0800229b
 8002054:	0800229b 	.word	0x0800229b
 8002058:	0800208f 	.word	0x0800208f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800205c:	4b94      	ldr	r3, [pc, #592]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002068:	4b91      	ldr	r3, [pc, #580]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	4a90      	ldr	r2, [pc, #576]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002074:	fa22 f303 	lsr.w	r3, r2, r3
 8002078:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800207a:	e111      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800207c:	4b8d      	ldr	r3, [pc, #564]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800207e:	61bb      	str	r3, [r7, #24]
    break;
 8002080:	e10e      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002082:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002084:	61bb      	str	r3, [r7, #24]
    break;
 8002086:	e10b      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002088:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800208a:	61bb      	str	r3, [r7, #24]
    break;
 800208c:	e108      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002098:	4b85      	ldr	r3, [pc, #532]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020a4:	4b82      	ldr	r3, [pc, #520]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80020ae:	4b80      	ldr	r3, [pc, #512]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b2:	08db      	lsrs	r3, r3, #3
 80020b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80e1 	beq.w	8002294 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	f000 8083 	beq.w	80021e0 <HAL_RCC_GetSysClockFreq+0x204>
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	f200 80a1 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x248>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x114>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d056      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x1c0>
 80020ee:	e099      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020f0:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d02d      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80020fc:	4b6c      	ldr	r3, [pc, #432]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	4a6b      	ldr	r2, [pc, #428]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002126:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212e:	ee07 3a90 	vmov	s15, r3
 8002132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002136:	ed97 6a02 	vldr	s12, [r7, #8]
 800213a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800213e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800214a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002156:	e087      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002162:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216a:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217a:	ed97 6a02 	vldr	s12, [r7, #8]
 800217e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800218a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800218e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800219a:	e065      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ae:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021be:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021de:	e043      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80021ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021f2:	4b2f      	ldr	r3, [pc, #188]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002202:	ed97 6a02 	vldr	s12, [r7, #8]
 8002206:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800220a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800220e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002222:	e021      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800222e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002236:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800223e:	ee07 3a90 	vmov	s15, r3
 8002242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002246:	ed97 6a02 	vldr	s12, [r7, #8]
 800224a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800224e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002266:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226c:	0a5b      	lsrs	r3, r3, #9
 800226e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002272:	3301      	adds	r3, #1
 8002274:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002280:	edd7 6a07 	vldr	s13, [r7, #28]
 8002284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800228c:	ee17 3a90 	vmov	r3, s15
 8002290:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002292:	e005      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	61bb      	str	r3, [r7, #24]
    break;
 8002298:	e002      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800229c:	61bb      	str	r3, [r7, #24]
    break;
 800229e:	bf00      	nop
  }

  return sysclockfreq;
 80022a0:	69bb      	ldr	r3, [r7, #24]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	58024400 	.word	0x58024400
 80022b4:	03d09000 	.word	0x03d09000
 80022b8:	003d0900 	.word	0x003d0900
 80022bc:	016e3600 	.word	0x016e3600
 80022c0:	46000000 	.word	0x46000000
 80022c4:	4c742400 	.word	0x4c742400
 80022c8:	4a742400 	.word	0x4a742400
 80022cc:	4bb71b00 	.word	0x4bb71b00

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022dc:	2300      	movs	r3, #0
 80022de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03f      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022f4:	d02a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022fa:	d824      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002300:	d018      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002306:	d81e      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800230c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002310:	d007      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002312:	e018      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002314:	4ba6      	ldr	r3, [pc, #664]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	4aa5      	ldr	r2, [pc, #660]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800231a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002320:	e015      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2102      	movs	r1, #2
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fedd 	bl	80030e8 <RCCEx_PLL2_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002332:	e00c      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3324      	adds	r3, #36	; 0x24
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f000 ff86 	bl	800324c <RCCEx_PLL3_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	75fb      	strb	r3, [r7, #23]
      break;
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800234c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002354:	4b96      	ldr	r3, [pc, #600]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002360:	4993      	ldr	r1, [pc, #588]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002362:	4313      	orrs	r3, r2
 8002364:	650b      	str	r3, [r1, #80]	; 0x50
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7dfb      	ldrb	r3, [r7, #23]
 800236a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03d      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	2b04      	cmp	r3, #4
 800237e:	d826      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002380:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002386:	bf00      	nop
 8002388:	0800239d 	.word	0x0800239d
 800238c:	080023ab 	.word	0x080023ab
 8002390:	080023bd 	.word	0x080023bd
 8002394:	080023d5 	.word	0x080023d5
 8002398:	080023d5 	.word	0x080023d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800239c:	4b84      	ldr	r3, [pc, #528]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	4a83      	ldr	r2, [pc, #524]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80023a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023a8:	e015      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fe99 	bl	80030e8 <RCCEx_PLL2_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023ba:	e00c      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3324      	adds	r3, #36	; 0x24
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 ff42 	bl	800324c <RCCEx_PLL3_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80023cc:	e003      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	75fb      	strb	r3, [r7, #23]
      break;
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023dc:	4b74      	ldr	r3, [pc, #464]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80023de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e0:	f023 0207 	bic.w	r2, r3, #7
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	4971      	ldr	r1, [pc, #452]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	650b      	str	r3, [r1, #80]	; 0x50
 80023ee:	e001      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d04a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002408:	d031      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800240a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800240e:	d82b      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002414:	d02d      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241a:	d825      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800241c:	2bc0      	cmp	r3, #192	; 0xc0
 800241e:	d02a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002420:	2bc0      	cmp	r3, #192	; 0xc0
 8002422:	d821      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d016      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	d81d      	bhi.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d007      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002434:	e018      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002436:	4b5e      	ldr	r3, [pc, #376]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800243c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002440:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002442:	e019      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3304      	adds	r3, #4
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fe4c 	bl	80030e8 <RCCEx_PLL2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002454:	e010      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3324      	adds	r3, #36	; 0x24
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fef5 	bl	800324c <RCCEx_PLL3_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002466:	e007      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]
      break;
 800246c:	e004      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800246e:	bf00      	nop
 8002470:	e002      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002472:	bf00      	nop
 8002474:	e000      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800247e:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002482:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4949      	ldr	r1, [pc, #292]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	650b      	str	r3, [r1, #80]	; 0x50
 8002490:	e001      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d04f      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80024aa:	d036      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80024ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80024b0:	d830      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024b6:	d032      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80024b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024bc:	d82a      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024c2:	d02e      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80024c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024c8:	d824      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ce:	d018      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80024d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d4:	d81e      	bhi.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80024da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024de:	d007      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80024e0:	e018      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80024ee:	e019      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdf6 	bl	80030e8 <RCCEx_PLL2_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002500:	e010      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3324      	adds	r3, #36	; 0x24
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fe9f 	bl	800324c <RCCEx_PLL3_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002512:	e007      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
      break;
 8002518:	e004      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800252c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	491e      	ldr	r1, [pc, #120]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002538:	4313      	orrs	r3, r2
 800253a:	650b      	str	r3, [r1, #80]	; 0x50
 800253c:	e001      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d034      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	2b30      	cmp	r3, #48	; 0x30
 8002554:	d01c      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002556:	2b30      	cmp	r3, #48	; 0x30
 8002558:	d817      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800255a:	2b20      	cmp	r3, #32
 800255c:	d00c      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800255e:	2b20      	cmp	r3, #32
 8002560:	d813      	bhi.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002566:	2b10      	cmp	r3, #16
 8002568:	d10f      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002576:	e00e      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	2102      	movs	r1, #2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fdb2 	bl	80030e8 <RCCEx_PLL2_Config>
 8002584:	4603      	mov	r3, r0
 8002586:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002588:	e005      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	75fb      	strb	r3, [r7, #23]
      break;
 800258e:	e002      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002590:	bf00      	nop
 8002592:	e000      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002596:	7dfb      	ldrb	r3, [r7, #23]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a8:	4901      	ldr	r1, [pc, #4]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025ae:	e003      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80025b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d047      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025cc:	d030      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80025ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d2:	d82a      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80025d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025d8:	d02c      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80025da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025de:	d824      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80025e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e4:	d018      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ea:	d81e      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80025f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f4:	d007      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80025f6:	e018      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f8:	4bb0      	ldr	r3, [pc, #704]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	4aaf      	ldr	r2, [pc, #700]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80025fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002604:	e017      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fd6b 	bl	80030e8 <RCCEx_PLL2_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002616:	e00e      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3324      	adds	r3, #36	; 0x24
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fe14 	bl	800324c <RCCEx_PLL3_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002628:	e005      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
      break;
 800262e:	e002      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800263c:	4b9f      	ldr	r3, [pc, #636]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002640:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002648:	499c      	ldr	r1, [pc, #624]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800264a:	4313      	orrs	r3, r2
 800264c:	650b      	str	r3, [r1, #80]	; 0x50
 800264e:	e001      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d049      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d02e      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800266a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266e:	d828      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002674:	d02a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267a:	d822      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800267c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002680:	d026      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002686:	d81c      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800268c:	d010      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800268e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002692:	d816      	bhi.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01d      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d111      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fd1f 	bl	80030e8 <RCCEx_PLL2_Config>
 80026aa:	4603      	mov	r3, r0
 80026ac:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026ae:	e012      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	2101      	movs	r1, #1
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fdc8 	bl	800324c <RCCEx_PLL3_Config>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026c0:	e009      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
      break;
 80026c6:	e006      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80026c8:	bf00      	nop
 80026ca:	e004      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80026cc:	bf00      	nop
 80026ce:	e002      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80026d0:	bf00      	nop
 80026d2:	e000      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80026d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026dc:	4b77      	ldr	r3, [pc, #476]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026e8:	4974      	ldr	r1, [pc, #464]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	650b      	str	r3, [r1, #80]	; 0x50
 80026ee:	e001      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
 80026f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d053      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002706:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800270a:	d034      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800270c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002710:	d82e      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002712:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002716:	d030      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800271c:	d828      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002722:	d02c      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002728:	d822      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800272a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800272e:	d028      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002730:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002734:	d81c      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273a:	d010      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800273c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002740:	d816      	bhi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01f      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800274a:	d111      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3304      	adds	r3, #4
 8002750:	2101      	movs	r1, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fcc8 	bl	80030e8 <RCCEx_PLL2_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800275c:	e014      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3324      	adds	r3, #36	; 0x24
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fd71 	bl	800324c <RCCEx_PLL3_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800276e:	e00b      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	75fb      	strb	r3, [r7, #23]
      break;
 8002774:	e008      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002776:	bf00      	nop
 8002778:	e006      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800277a:	bf00      	nop
 800277c:	e004      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800278e:	4b4b      	ldr	r3, [pc, #300]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800279c:	4947      	ldr	r1, [pc, #284]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	658b      	str	r3, [r1, #88]	; 0x58
 80027a2:	e001      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d02f      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027bc:	d00e      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80027be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027c2:	d814      	bhi.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d015      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80027c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027cc:	d10f      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	4a3a      	ldr	r2, [pc, #232]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027da:	e00c      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3304      	adds	r3, #4
 80027e0:	2101      	movs	r1, #1
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fc80 	bl	80030e8 <RCCEx_PLL2_Config>
 80027e8:	4603      	mov	r3, r0
 80027ea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027ec:	e003      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
      break;
 80027f2:	e000      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80027f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80027fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002800:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002808:	492c      	ldr	r1, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	650b      	str	r3, [r1, #80]	; 0x50
 800280e:	e001      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d032      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	2b03      	cmp	r3, #3
 8002826:	d81b      	bhi.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002828:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800282a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282e:	bf00      	nop
 8002830:	08002867 	.word	0x08002867
 8002834:	08002841 	.word	0x08002841
 8002838:	0800284f 	.word	0x0800284f
 800283c:	08002867 	.word	0x08002867
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b1e      	ldr	r3, [pc, #120]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800284c:	e00c      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3304      	adds	r3, #4
 8002852:	2102      	movs	r1, #2
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fc47 	bl	80030e8 <RCCEx_PLL2_Config>
 800285a:	4603      	mov	r3, r0
 800285c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800285e:	e003      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	75fb      	strb	r3, [r7, #23]
      break;
 8002864:	e000      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002866:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002868:	7dfb      	ldrb	r3, [r7, #23]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d109      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4910      	ldr	r1, [pc, #64]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002880:	e001      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 808a 	beq.w	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028a0:	f7fe faaa 	bl	8000df8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a6:	e00d      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a8:	f7fe faa6 	bl	8000df8 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d906      	bls.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	75fb      	strb	r3, [r7, #23]
        break;
 80028ba:	e009      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80028bc:	58024400 	.word	0x58024400
 80028c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c4:	4bba      	ldr	r3, [pc, #744]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0eb      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d166      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028d6:	4bb7      	ldr	r3, [pc, #732]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80028d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028e0:	4053      	eors	r3, r2
 80028e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d013      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028ea:	4bb2      	ldr	r3, [pc, #712]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028f4:	4baf      	ldr	r3, [pc, #700]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4aae      	ldr	r2, [pc, #696]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002900:	4bac      	ldr	r3, [pc, #688]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4aab      	ldr	r2, [pc, #684]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800290c:	4aa9      	ldr	r2, [pc, #676]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291c:	d115      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fa6b 	bl	8000df8 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002924:	e00b      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fa67 	bl	8000df8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d902      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	75fb      	strb	r3, [r7, #23]
            break;
 800293c:	e005      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800293e:	4b9d      	ldr	r3, [pc, #628]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ed      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d126      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800295a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295e:	d10d      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002960:	4b94      	ldr	r3, [pc, #592]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800296e:	0919      	lsrs	r1, r3, #4
 8002970:	4b91      	ldr	r3, [pc, #580]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002972:	400b      	ands	r3, r1
 8002974:	498f      	ldr	r1, [pc, #572]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	610b      	str	r3, [r1, #16]
 800297a:	e005      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800297c:	4b8d      	ldr	r3, [pc, #564]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a8c      	ldr	r2, [pc, #560]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002982:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002986:	6113      	str	r3, [r2, #16]
 8002988:	4b8a      	ldr	r3, [pc, #552]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800298a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	4987      	ldr	r1, [pc, #540]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	670b      	str	r3, [r1, #112]	; 0x70
 800299c:	e004      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	75bb      	strb	r3, [r7, #22]
 80029a2:	e001      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d07f      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ba:	2b28      	cmp	r3, #40	; 0x28
 80029bc:	d866      	bhi.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	08002a93 	.word	0x08002a93
 80029c8:	08002a8d 	.word	0x08002a8d
 80029cc:	08002a8d 	.word	0x08002a8d
 80029d0:	08002a8d 	.word	0x08002a8d
 80029d4:	08002a8d 	.word	0x08002a8d
 80029d8:	08002a8d 	.word	0x08002a8d
 80029dc:	08002a8d 	.word	0x08002a8d
 80029e0:	08002a8d 	.word	0x08002a8d
 80029e4:	08002a69 	.word	0x08002a69
 80029e8:	08002a8d 	.word	0x08002a8d
 80029ec:	08002a8d 	.word	0x08002a8d
 80029f0:	08002a8d 	.word	0x08002a8d
 80029f4:	08002a8d 	.word	0x08002a8d
 80029f8:	08002a8d 	.word	0x08002a8d
 80029fc:	08002a8d 	.word	0x08002a8d
 8002a00:	08002a8d 	.word	0x08002a8d
 8002a04:	08002a7b 	.word	0x08002a7b
 8002a08:	08002a8d 	.word	0x08002a8d
 8002a0c:	08002a8d 	.word	0x08002a8d
 8002a10:	08002a8d 	.word	0x08002a8d
 8002a14:	08002a8d 	.word	0x08002a8d
 8002a18:	08002a8d 	.word	0x08002a8d
 8002a1c:	08002a8d 	.word	0x08002a8d
 8002a20:	08002a8d 	.word	0x08002a8d
 8002a24:	08002a93 	.word	0x08002a93
 8002a28:	08002a8d 	.word	0x08002a8d
 8002a2c:	08002a8d 	.word	0x08002a8d
 8002a30:	08002a8d 	.word	0x08002a8d
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a8d 	.word	0x08002a8d
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a8d 	.word	0x08002a8d
 8002a44:	08002a93 	.word	0x08002a93
 8002a48:	08002a8d 	.word	0x08002a8d
 8002a4c:	08002a8d 	.word	0x08002a8d
 8002a50:	08002a8d 	.word	0x08002a8d
 8002a54:	08002a8d 	.word	0x08002a8d
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002a8d 	.word	0x08002a8d
 8002a60:	08002a8d 	.word	0x08002a8d
 8002a64:	08002a93 	.word	0x08002a93
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 fb3a 	bl	80030e8 <RCCEx_PLL2_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a78:	e00c      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3324      	adds	r3, #36	; 0x24
 8002a7e:	2101      	movs	r1, #1
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fbe3 	bl	800324c <RCCEx_PLL3_Config>
 8002a86:	4603      	mov	r3, r0
 8002a88:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a8a:	e003      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	e000      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10a      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a9a:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa8:	4942      	ldr	r1, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	654b      	str	r3, [r1, #84]	; 0x54
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d038      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d821      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b13 	.word	0x08002b13
 8002ad4:	08002ae9 	.word	0x08002ae9
 8002ad8:	08002afb 	.word	0x08002afb
 8002adc:	08002b13 	.word	0x08002b13
 8002ae0:	08002b13 	.word	0x08002b13
 8002ae4:	08002b13 	.word	0x08002b13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fafa 	bl	80030e8 <RCCEx_PLL2_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002af8:	e00c      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fba3 	bl	800324c <RCCEx_PLL3_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b10:	e000      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b26:	4923      	ldr	r1, [pc, #140]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002b2c:	e001      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d040      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d821      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b93 	.word	0x08002b93
 8002b54:	08002b69 	.word	0x08002b69
 8002b58:	08002b7b 	.word	0x08002b7b
 8002b5c:	08002b93 	.word	0x08002b93
 8002b60:	08002b93 	.word	0x08002b93
 8002b64:	08002b93 	.word	0x08002b93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 faba 	bl	80030e8 <RCCEx_PLL2_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b78:	e00c      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3324      	adds	r3, #36	; 0x24
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fb63 	bl	800324c <RCCEx_PLL3_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d110      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ba8:	4902      	ldr	r1, [pc, #8]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	658b      	str	r3, [r1, #88]	; 0x58
 8002bae:	e007      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002bb0:	58024800 	.word	0x58024800
 8002bb4:	58024400 	.word	0x58024400
 8002bb8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d04b      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd6:	d02e      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bdc:	d828      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be2:	d02a      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d822      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002bea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bee:	d026      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002bf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf4:	d81c      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c00:	d816      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01d      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fa68 	bl	80030e8 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c1c:	e012      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fb11 	bl	800324c <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c2e:	e009      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	e006      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002c36:	bf00      	nop
 8002c38:	e004      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e002      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10a      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4a:	4bb3      	ldr	r3, [pc, #716]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c58:	49af      	ldr	r1, [pc, #700]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	654b      	str	r3, [r1, #84]	; 0x54
 8002c5e:	e001      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
 8002c62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d04b      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c7a:	d02e      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002c7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c80:	d828      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c86:	d02a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8c:	d822      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002c8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c92:	d026      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c98:	d81c      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca4:	d816      	bhi.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01d      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d111      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3304      	adds	r3, #4
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fa16 	bl	80030e8 <RCCEx_PLL2_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cc0:	e012      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3324      	adds	r3, #36	; 0x24
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fabf 	bl	800324c <RCCEx_PLL3_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd8:	e006      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce8:	7dfb      	ldrb	r3, [r7, #23]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cee:	4b8a      	ldr	r3, [pc, #552]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cfc:	4986      	ldr	r1, [pc, #536]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	658b      	str	r3, [r1, #88]	; 0x58
 8002d02:	e001      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d04b      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d1e:	d02e      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002d20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d24:	d828      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d2a:	d02a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d30:	d822      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002d32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d36:	d026      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002d38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d3c:	d81c      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d42:	d010      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d48:	d816      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	d111      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3304      	adds	r3, #4
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f9c4 	bl	80030e8 <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d64:	e012      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3324      	adds	r3, #36	; 0x24
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fa6d 	bl	800324c <RCCEx_PLL3_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d76:	e009      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e004      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8002d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d92:	4b61      	ldr	r3, [pc, #388]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002da0:	495d      	ldr	r1, [pc, #372]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	658b      	str	r3, [r1, #88]	; 0x58
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d01a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc2:	d10a      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3324      	adds	r3, #36	; 0x24
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fa3e 	bl	800324c <RCCEx_PLL3_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	494b      	ldr	r1, [pc, #300]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e04:	d10a      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3324      	adds	r3, #36	; 0x24
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fa1d 	bl	800324c <RCCEx_PLL3_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e1c:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e2a:	493b      	ldr	r1, [pc, #236]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d034      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e46:	d01d      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8002e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e4c:	d817      	bhi.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8002e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e56:	d009      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8002e58:	e011      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f941 	bl	80030e8 <RCCEx_PLL2_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e6a:	e00c      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3324      	adds	r3, #36	; 0x24
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f9ea 	bl	800324c <RCCEx_PLL3_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e7c:	e003      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	75fb      	strb	r3, [r7, #23]
      break;
 8002e82:	e000      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8002e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e8c:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e9a:	491f      	ldr	r1, [pc, #124]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	658b      	str	r3, [r1, #88]	; 0x58
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d036      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ebc:	d01c      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002ebe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ec2:	d816      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec8:	d003      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ece:	d007      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002ed0:	e00f      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ede:	e00c      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3324      	adds	r3, #36	; 0x24
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f9b0 	bl	800324c <RCCEx_PLL3_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef6:	e000      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f0e:	4902      	ldr	r1, [pc, #8]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	654b      	str	r3, [r1, #84]	; 0x54
 8002f14:	e004      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8002f16:	bf00      	nop
 8002f18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7dfb      	ldrb	r3, [r7, #23]
 8002f1e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d029      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d007      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8002f3a:	e00f      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f3c:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f48:	e00b      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2102      	movs	r1, #2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 f8c9 	bl	80030e8 <RCCEx_PLL2_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f68:	4b5e      	ldr	r3, [pc, #376]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	495b      	ldr	r1, [pc, #364]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f7a:	e001      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3324      	adds	r3, #36	; 0x24
 8002f90:	2102      	movs	r1, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f95a 	bl	800324c <RCCEx_PLL3_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d032      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fb8:	d017      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 8002fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fbe:	d811      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d013      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fca:	d80b      	bhi.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8002fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd6:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	4a42      	ldr	r2, [pc, #264]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002fe2:	e007      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8002ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ffa:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003008:	4936      	ldr	r1, [pc, #216]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800300a:	4313      	orrs	r3, r2
 800300c:	654b      	str	r3, [r1, #84]	; 0x54
 800300e:	e001      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003020:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003024:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302c:	492d      	ldr	r1, [pc, #180]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800302e:	4313      	orrs	r3, r2
 8003030:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d008      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800303e:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003040:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003042:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304a:	4926      	ldr	r1, [pc, #152]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800304c:	4313      	orrs	r3, r2
 800304e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800305c:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	491e      	ldr	r1, [pc, #120]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800306a:	4313      	orrs	r3, r2
 800306c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003084:	6113      	str	r3, [r2, #16]
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003090:	4914      	ldr	r1, [pc, #80]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003092:	4313      	orrs	r3, r2
 8003094:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	da08      	bge.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800309e:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030aa:	490e      	ldr	r1, [pc, #56]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030bc:	4b09      	ldr	r3, [pc, #36]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80030d0:	7dbb      	ldrb	r3, [r7, #22]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e000      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58024400 	.word	0x58024400

080030e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d101      	bne.n	8003106 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e099      	b.n	800323a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003106:	4b4f      	ldr	r3, [pc, #316]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a4e      	ldr	r2, [pc, #312]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800310c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003112:	f7fd fe71 	bl	8000df8 <HAL_GetTick>
 8003116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003118:	e008      	b.n	800312c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800311a:	f7fd fe6d 	bl	8000df8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e086      	b.n	800323a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800312c:	4b45      	ldr	r3, [pc, #276]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f0      	bne.n	800311a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003138:	4b42      	ldr	r3, [pc, #264]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	031b      	lsls	r3, r3, #12
 8003146:	493f      	ldr	r1, [pc, #252]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	628b      	str	r3, [r1, #40]	; 0x28
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3b01      	subs	r3, #1
 8003152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	3b01      	subs	r3, #1
 800315c:	025b      	lsls	r3, r3, #9
 800315e:	b29b      	uxth	r3, r3
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	3b01      	subs	r3, #1
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800317c:	4931      	ldr	r1, [pc, #196]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	492d      	ldr	r1, [pc, #180]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003194:	4b2b      	ldr	r3, [pc, #172]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	f023 0220 	bic.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4928      	ldr	r1, [pc, #160]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b6:	4b24      	ldr	r3, [pc, #144]	; (8003248 <RCCEx_PLL2_Config+0x160>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	69d2      	ldr	r2, [r2, #28]
 80031be:	00d2      	lsls	r2, r2, #3
 80031c0:	4920      	ldr	r1, [pc, #128]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d106      	bne.n	80031e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031e4:	e00f      	b.n	8003206 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d106      	bne.n	80031fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80031ec:	4b15      	ldr	r3, [pc, #84]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031f8:	e005      	b.n	8003206 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80031fa:	4b12      	ldr	r3, [pc, #72]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800320c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003212:	f7fd fdf1 	bl	8000df8 <HAL_GetTick>
 8003216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003218:	e008      	b.n	800322c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800321a:	f7fd fded 	bl	8000df8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e006      	b.n	800323a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <RCCEx_PLL2_Config+0x15c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	58024400 	.word	0x58024400
 8003248:	ffff0007 	.word	0xffff0007

0800324c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800325a:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f003 0303 	and.w	r3, r3, #3
 8003262:	2b03      	cmp	r3, #3
 8003264:	d101      	bne.n	800326a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e099      	b.n	800339e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800326a:	4b4f      	ldr	r3, [pc, #316]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4e      	ldr	r2, [pc, #312]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003276:	f7fd fdbf 	bl	8000df8 <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800327c:	e008      	b.n	8003290 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800327e:	f7fd fdbb 	bl	8000df8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e086      	b.n	800339e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1f0      	bne.n	800327e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800329c:	4b42      	ldr	r3, [pc, #264]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	051b      	lsls	r3, r3, #20
 80032aa:	493f      	ldr	r1, [pc, #252]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	628b      	str	r3, [r1, #40]	; 0x28
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	025b      	lsls	r3, r3, #9
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	3b01      	subs	r3, #1
 80032da:	061b      	lsls	r3, r3, #24
 80032dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032e0:	4931      	ldr	r1, [pc, #196]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80032e6:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	492d      	ldr	r1, [pc, #180]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	4928      	ldr	r1, [pc, #160]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800330a:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <RCCEx_PLL3_Config+0x160>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	69d2      	ldr	r2, [r2, #28]
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	4920      	ldr	r1, [pc, #128]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d106      	bne.n	800334a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003348:	e00f      	b.n	800336a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d106      	bne.n	800335e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003350:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003356:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800335a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800335c:	e005      	b.n	800336a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	4a11      	ldr	r2, [pc, #68]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003376:	f7fd fd3f 	bl	8000df8 <HAL_GetTick>
 800337a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800337c:	e008      	b.n	8003390 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800337e:	f7fd fd3b 	bl	8000df8 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <RCCEx_PLL3_Config+0x15c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
 80033ac:	ffff0007 	.word	0xffff0007

080033b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0f1      	b.n	80035a6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a78      	ldr	r2, [pc, #480]	; (80035b0 <HAL_SPI_Init+0x200>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00f      	beq.n	80033f2 <HAL_SPI_Init+0x42>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a77      	ldr	r2, [pc, #476]	; (80035b4 <HAL_SPI_Init+0x204>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00a      	beq.n	80033f2 <HAL_SPI_Init+0x42>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_SPI_Init+0x208>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d005      	beq.n	80033f2 <HAL_SPI_Init+0x42>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d901      	bls.n	80033f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0d9      	b.n	80035a6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f001 f880 	bl	80044f8 <SPI_GetPacketSize>
 80033f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6c      	ldr	r2, [pc, #432]	; (80035b0 <HAL_SPI_Init+0x200>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00c      	beq.n	800341e <HAL_SPI_Init+0x6e>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6a      	ldr	r2, [pc, #424]	; (80035b4 <HAL_SPI_Init+0x204>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <HAL_SPI_Init+0x6e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a69      	ldr	r2, [pc, #420]	; (80035b8 <HAL_SPI_Init+0x208>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d002      	beq.n	800341e <HAL_SPI_Init+0x6e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d811      	bhi.n	8003442 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003422:	4a63      	ldr	r2, [pc, #396]	; (80035b0 <HAL_SPI_Init+0x200>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <HAL_SPI_Init+0x204>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_SPI_Init+0x8c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a60      	ldr	r2, [pc, #384]	; (80035b8 <HAL_SPI_Init+0x208>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d104      	bne.n	8003446 <HAL_SPI_Init+0x96>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d901      	bls.n	8003446 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e0af      	b.n	80035a6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7fd fafc 	bl	8000a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0201 	bic.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8003482:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348c:	d119      	bne.n	80034c2 <HAL_SPI_Init+0x112>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003496:	d103      	bne.n	80034a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10c      	bne.n	80034c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80034ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b0:	d107      	bne.n	80034c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	431a      	orrs	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	ea42 0103 	orr.w	r1, r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003522:	ea42 0103 	orr.w	r1, r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d113      	bne.n	8003562 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003560:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40013000 	.word	0x40013000
 80035b4:	40003800 	.word	0x40003800
 80035b8:	40003c00 	.word	0x40003c00

080035bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3320      	adds	r3, #32
 80035d2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_SPI_Transmit+0x2a>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e1d7      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035ee:	f7fd fc03 	bl	8000df8 <HAL_GetTick>
 80035f2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d007      	beq.n	8003610 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800360c:	7efb      	ldrb	r3, [r7, #27]
 800360e:	e1c2      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_SPI_Transmit+0x60>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d107      	bne.n	800362c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003628:	7efb      	ldrb	r3, [r7, #27]
 800362a:	e1b4      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	88fa      	ldrh	r2, [r7, #6]
 8003646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	88fa      	ldrh	r2, [r7, #6]
 800364e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800367c:	d107      	bne.n	800368e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800368c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4b96      	ldr	r3, [pc, #600]	; (80038f0 <HAL_SPI_Transmit+0x334>)
 8003696:	4013      	ands	r3, r2
 8003698:	88f9      	ldrh	r1, [r7, #6]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	430b      	orrs	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ba:	d107      	bne.n	80036cc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b0f      	cmp	r3, #15
 80036d2:	d947      	bls.n	8003764 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80036d4:	e03f      	b.n	8003756 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d114      	bne.n	800370e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6812      	ldr	r2, [r2, #0]
 80036ee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f4:	1d1a      	adds	r2, r3, #4
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800370c:	e023      	b.n	8003756 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370e:	f7fd fb73 	bl	8000df8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d803      	bhi.n	8003726 <HAL_SPI_Transmit+0x16a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d102      	bne.n	800372c <HAL_SPI_Transmit+0x170>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d114      	bne.n	8003756 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fe15 	bl	800435c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003740:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e11f      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1b9      	bne.n	80036d6 <HAL_SPI_Transmit+0x11a>
 8003762:	e0f2      	b.n	800394a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b07      	cmp	r3, #7
 800376a:	f240 80e7 	bls.w	800393c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800376e:	e05d      	b.n	800382c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d132      	bne.n	80037e4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	d918      	bls.n	80037bc <HAL_SPI_Transmit+0x200>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d014      	beq.n	80037bc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	1d1a      	adds	r2, r3, #4
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b02      	subs	r3, #2
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80037ba:	e037      	b.n	800382c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	1c9a      	adds	r2, r3, #2
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80037e2:	e023      	b.n	800382c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037e4:	f7fd fb08 	bl	8000df8 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d803      	bhi.n	80037fc <HAL_SPI_Transmit+0x240>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fa:	d102      	bne.n	8003802 <HAL_SPI_Transmit+0x246>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fdaa 	bl	800435c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003816:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0b4      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d19b      	bne.n	8003770 <HAL_SPI_Transmit+0x1b4>
 8003838:	e087      	b.n	800394a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d155      	bne.n	80038f4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b03      	cmp	r3, #3
 8003852:	d918      	bls.n	8003886 <HAL_SPI_Transmit+0x2ca>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d914      	bls.n	8003886 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	1d1a      	adds	r2, r3, #4
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b04      	subs	r3, #4
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8003884:	e05a      	b.n	800393c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b01      	cmp	r3, #1
 8003890:	d917      	bls.n	80038c2 <HAL_SPI_Transmit+0x306>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d013      	beq.n	80038c2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	1c9a      	adds	r2, r3, #2
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b02      	subs	r3, #2
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80038c0:	e03c      	b.n	800393c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3320      	adds	r3, #32
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80038ec:	e026      	b.n	800393c <HAL_SPI_Transmit+0x380>
 80038ee:	bf00      	nop
 80038f0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f4:	f7fd fa80 	bl	8000df8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d803      	bhi.n	800390c <HAL_SPI_Transmit+0x350>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d102      	bne.n	8003912 <HAL_SPI_Transmit+0x356>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d114      	bne.n	800393c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 fd22 	bl	800435c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e02c      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	f47f af78 	bne.w	800383a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2200      	movs	r2, #0
 8003952:	2108      	movs	r1, #8
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fda1 	bl	800449c <SPI_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fcf3 	bl	800435c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8003994:	7efb      	ldrb	r3, [r7, #27]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop

080039a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	; 0x28
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3330      	adds	r3, #48	; 0x30
 80039ba:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c4:	d112      	bne.n	80039ec <HAL_SPI_Receive+0x4c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10e      	bne.n	80039ec <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2204      	movs	r2, #4
 80039d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	68ba      	ldr	r2, [r7, #8]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f9ce 	bl	8003d84 <HAL_SPI_TransmitReceive>
 80039e8:	4603      	mov	r3, r0
 80039ea:	e1c7      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_SPI_Receive+0x5a>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e1c0      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a02:	f7fd f9f9 	bl	8000df8 <HAL_GetTick>
 8003a06:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d007      	beq.n	8003a24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
 8003a16:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003a20:	7ffb      	ldrb	r3, [r7, #31]
 8003a22:	e1ab      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_Receive+0x90>
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003a3c:	7ffb      	ldrb	r3, [r7, #31]
 8003a3e:	e19d      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2204      	movs	r2, #4
 8003a44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003a90:	d107      	bne.n	8003aa2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	4b94      	ldr	r3, [pc, #592]	; (8003cfc <HAL_SPI_Receive+0x35c>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	88f9      	ldrh	r1, [r7, #6]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ace:	d107      	bne.n	8003ae0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d948      	bls.n	8003b7a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8003ae8:	e040      	b.n	8003b6c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695a      	ldr	r2, [r3, #20]
 8003af0:	f248 0308 	movw	r3, #32776	; 0x8008
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d014      	beq.n	8003b24 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b04:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003b22:	e023      	b.n	8003b6c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b24:	f7fd f968 	bl	8000df8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d803      	bhi.n	8003b3c <HAL_SPI_Receive+0x19c>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d102      	bne.n	8003b42 <HAL_SPI_Receive+0x1a2>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d114      	bne.n	8003b6c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fc0a 	bl	800435c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e107      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1b8      	bne.n	8003aea <HAL_SPI_Receive+0x14a>
 8003b78:	e0ed      	b.n	8003d56 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b07      	cmp	r3, #7
 8003b80:	f240 80e2 	bls.w	8003d48 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8003b84:	e05b      	b.n	8003c3e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d030      	beq.n	8003bf6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d014      	beq.n	8003bcc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003baa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003bac:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bb2:	1d1a      	adds	r2, r3, #4
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b02      	subs	r3, #2
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003bca:	e038      	b.n	8003c3e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	8812      	ldrh	r2, [r2, #0]
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003bf4:	e023      	b.n	8003c3e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf6:	f7fd f8ff 	bl	8000df8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d803      	bhi.n	8003c0e <HAL_SPI_Receive+0x26e>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d102      	bne.n	8003c14 <HAL_SPI_Receive+0x274>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d114      	bne.n	8003c3e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fba1 	bl	800435c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e09e      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d19d      	bne.n	8003b86 <HAL_SPI_Receive+0x1e6>
 8003c4a:	e084      	b.n	8003d56 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d052      	beq.n	8003d00 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d014      	beq.n	8003c92 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c72:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b04      	subs	r3, #4
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003c90:	e05a      	b.n	8003d48 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	d914      	bls.n	8003ccc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	8812      	ldrh	r2, [r2, #0]
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b02      	subs	r3, #2
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003cca:	e03d      	b.n	8003d48 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8003cfa:	e025      	b.n	8003d48 <HAL_SPI_Receive+0x3a8>
 8003cfc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fd f87a 	bl	8000df8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_Receive+0x378>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Receive+0x37e>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d114      	bne.n	8003d48 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fb1c 	bl	800435c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e019      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f47f af7b 	bne.w	8003c4c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb00 	bl	800435c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8003d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	; 0x38
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3320      	adds	r3, #32
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3330      	adds	r3, #48	; 0x30
 8003da6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x32>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e2ce      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dbe:	f7fd f81b 	bl	8000df8 <HAL_GetTick>
 8003dc2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8003dc8:	887b      	ldrh	r3, [r7, #2]
 8003dca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003dd2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dda:	7efb      	ldrb	r3, [r7, #27]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d014      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x86>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d106      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8003df0:	7efb      	ldrb	r3, [r7, #27]
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d009      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
 8003df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003e04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e08:	e2a4      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x98>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_SPI_TransmitReceive+0x98>
 8003e16:	887b      	ldrh	r3, [r7, #2]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8003e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e2e:	e291      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d003      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2205      	movs	r2, #5
 8003e40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	887a      	ldrh	r2, [r7, #2]
 8003e56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	887a      	ldrh	r2, [r7, #2]
 8003e5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	4b9f      	ldr	r3, [pc, #636]	; (8004108 <HAL_SPI_TransmitReceive+0x384>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	8879      	ldrh	r1, [r7, #2]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eb0:	d107      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b0f      	cmp	r3, #15
 8003ec8:	d970      	bls.n	8003fac <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003eca:	e068      	b.n	8003f9e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d11a      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x18c>
 8003eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d017      	beq.n	8003f10 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef0:	1d1a      	adds	r2, r3, #4
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003f0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	f248 0308 	movw	r3, #32776	; 0x8008
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01a      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x1d2>
 8003f20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d017      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003f30:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f36:	1d1a      	adds	r2, r3, #4
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003f54:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f56:	f7fc ff4f 	bl	8000df8 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d803      	bhi.n	8003f6e <HAL_SPI_TransmitReceive+0x1ea>
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d102      	bne.n	8003f74 <HAL_SPI_TransmitReceive+0x1f0>
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d114      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f9f1 	bl	800435c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1da      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003f9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d193      	bne.n	8003ecc <HAL_SPI_TransmitReceive+0x148>
 8003fa4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d190      	bne.n	8003ecc <HAL_SPI_TransmitReceive+0x148>
 8003faa:	e1ac      	b.n	8004306 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	2b07      	cmp	r3, #7
 8003fb2:	f240 81a0 	bls.w	80042f6 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8003fb6:	e0a9      	b.n	800410c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d139      	bne.n	800403a <HAL_SPI_TransmitReceive+0x2b6>
 8003fc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d036      	beq.n	800403a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8003fcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d91c      	bls.n	800400c <HAL_SPI_TransmitReceive+0x288>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6812      	ldr	r2, [r2, #0]
 8003fe4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b02      	subs	r3, #2
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004008:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800400a:	e016      	b.n	800403a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004038:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03a      	beq.n	80040be <HAL_SPI_TransmitReceive+0x33a>
 8004048:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d037      	beq.n	80040be <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d018      	beq.n	800408e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004064:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004066:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b02      	subs	r3, #2
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800408a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800408c:	e017      	b.n	80040be <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	8812      	ldrh	r2, [r2, #0]
 8004096:	b292      	uxth	r2, r2
 8004098:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409e:	1c9a      	adds	r2, r3, #2
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80040bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040be:	f7fc fe9b 	bl	8000df8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d803      	bhi.n	80040d6 <HAL_SPI_TransmitReceive+0x352>
 80040ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d102      	bne.n	80040dc <HAL_SPI_TransmitReceive+0x358>
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d117      	bne.n	800410c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f93d 	bl	800435c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e126      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
 8004106:	bf00      	nop
 8004108:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800410c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800410e:	2b00      	cmp	r3, #0
 8004110:	f47f af52 	bne.w	8003fb8 <HAL_SPI_TransmitReceive+0x234>
 8004114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004116:	2b00      	cmp	r3, #0
 8004118:	f47f af4e 	bne.w	8003fb8 <HAL_SPI_TransmitReceive+0x234>
 800411c:	e0f3      	b.n	8004306 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d15a      	bne.n	80041e2 <HAL_SPI_TransmitReceive+0x45e>
 800412c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800412e:	2b00      	cmp	r3, #0
 8004130:	d057      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004134:	2b03      	cmp	r3, #3
 8004136:	d91c      	bls.n	8004172 <HAL_SPI_TransmitReceive+0x3ee>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	2b40      	cmp	r3, #64	; 0x40
 800413e:	d918      	bls.n	8004172 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b04      	subs	r3, #4
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800416e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004170:	e037      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004172:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004174:	2b01      	cmp	r3, #1
 8004176:	d91b      	bls.n	80041b0 <HAL_SPI_TransmitReceive+0x42c>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d017      	beq.n	80041b0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b02      	subs	r3, #2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041ae:	e018      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3320      	adds	r3, #32
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80041e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05e      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x52a>
 80041f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d05b      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d018      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800420e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004214:	1d1a      	adds	r2, r3, #4
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b04      	subs	r3, #4
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004232:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004234:	e03b      	b.n	80042ae <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004244:	d918      	bls.n	8004278 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	8812      	ldrh	r2, [r2, #0]
 800424e:	b292      	uxth	r2, r2
 8004250:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b02      	subs	r3, #2
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004274:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004276:	e01a      	b.n	80042ae <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80042ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ae:	f7fc fda3 	bl	8000df8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d803      	bhi.n	80042c6 <HAL_SPI_TransmitReceive+0x542>
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x548>
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d114      	bne.n	80042f6 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f845 	bl	800435c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e02e      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80042f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f af10 	bne.w	800411e <HAL_SPI_TransmitReceive+0x39a>
 80042fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af0c 	bne.w	800411e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	2200      	movs	r2, #0
 800430e:	2108      	movs	r1, #8
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f8c3 	bl	800449c <SPI_WaitOnFlagUntilTimeout>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f815 	bl	800435c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e001      	b.n	8004354 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8004350:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004354:	4618      	mov	r0, r3
 8004356:	3730      	adds	r7, #48	; 0x30
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0208 	orr.w	r2, r2, #8
 800437a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0210 	orr.w	r2, r2, #16
 800438a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6919      	ldr	r1, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <SPI_CloseTransfer+0x13c>)
 80043a8:	400b      	ands	r3, r1
 80043aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80043ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d014      	beq.n	80043f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00f      	beq.n	80043f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699a      	ldr	r2, [r3, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0220 	orr.w	r2, r2, #32
 80043f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d014      	beq.n	8004428 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00f      	beq.n	8004428 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	f043 0204 	orr.w	r2, r3, #4
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004426:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00f      	beq.n	8004452 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004438:	f043 0201 	orr.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00f      	beq.n	800447c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	f043 0208 	orr.w	r2, r3, #8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800447a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	fffffc90 	.word	0xfffffc90

0800449c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044ac:	e010      	b.n	80044d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ae:	f7fc fca3 	bl	8000df8 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d803      	bhi.n	80044c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d102      	bne.n	80044cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e00f      	b.n	80044f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4013      	ands	r3, r2
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	429a      	cmp	r2, r3
 80044de:	bf0c      	ite	eq
 80044e0:	2301      	moveq	r3, #1
 80044e2:	2300      	movne	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d0df      	beq.n	80044ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	095b      	lsrs	r3, r3, #5
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	3301      	adds	r3, #1
 8004510:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	3307      	adds	r3, #7
 8004516:	08db      	lsrs	r3, r3, #3
 8004518:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <__libc_init_array>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4d0d      	ldr	r5, [pc, #52]	; (8004568 <__libc_init_array+0x38>)
 8004534:	4c0d      	ldr	r4, [pc, #52]	; (800456c <__libc_init_array+0x3c>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	2600      	movs	r6, #0
 800453c:	42a6      	cmp	r6, r4
 800453e:	d109      	bne.n	8004554 <__libc_init_array+0x24>
 8004540:	4d0b      	ldr	r5, [pc, #44]	; (8004570 <__libc_init_array+0x40>)
 8004542:	4c0c      	ldr	r4, [pc, #48]	; (8004574 <__libc_init_array+0x44>)
 8004544:	f000 f820 	bl	8004588 <_init>
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	2600      	movs	r6, #0
 800454e:	42a6      	cmp	r6, r4
 8004550:	d105      	bne.n	800455e <__libc_init_array+0x2e>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	f855 3b04 	ldr.w	r3, [r5], #4
 8004558:	4798      	blx	r3
 800455a:	3601      	adds	r6, #1
 800455c:	e7ee      	b.n	800453c <__libc_init_array+0xc>
 800455e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004562:	4798      	blx	r3
 8004564:	3601      	adds	r6, #1
 8004566:	e7f2      	b.n	800454e <__libc_init_array+0x1e>
 8004568:	080045b0 	.word	0x080045b0
 800456c:	080045b0 	.word	0x080045b0
 8004570:	080045b0 	.word	0x080045b0
 8004574:	080045b4 	.word	0x080045b4

08004578 <memset>:
 8004578:	4402      	add	r2, r0
 800457a:	4603      	mov	r3, r0
 800457c:	4293      	cmp	r3, r2
 800457e:	d100      	bne.n	8004582 <memset+0xa>
 8004580:	4770      	bx	lr
 8004582:	f803 1b01 	strb.w	r1, [r3], #1
 8004586:	e7f9      	b.n	800457c <memset+0x4>

08004588 <_init>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr

08004594 <_fini>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr
