
STM32H7_cantest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003440  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08003750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c0  24000010  08003760  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000d0  08003760  000200d0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013e92  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000225c  00000000  00000000  00033ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ad0  00000000  00000000  00036130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a08  00000000  00000000  00036c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002efd6  00000000  00000000  00037608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b8c5  00000000  00000000  000665de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00134ff1  00000000  00000000  00071ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001a6e94  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c78  00000000  00000000  001a6ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	080036d4 	.word	0x080036d4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	080036d4 	.word	0x080036d4

080002ec <LED_On_Red>:
#include "main.h"
#include "led.h"
void LED_On_Red (void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f6:	4802      	ldr	r0, [pc, #8]	; (8000300 <LED_On_Red+0x14>)
 80002f8:	f001 f99a 	bl	8001630 <HAL_GPIO_WritePin>
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	58020c00 	.word	0x58020c00

08000304 <LED_Off_Red>:
void LED_Off_Red (void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <LED_Off_Red+0x14>)
 8000310:	f001 f98e 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	58020c00 	.word	0x58020c00

0800031c <LED_On_Yellow>:
void LED_On_Yellow (void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000326:	4802      	ldr	r0, [pc, #8]	; (8000330 <LED_On_Yellow+0x14>)
 8000328:	f001 f982 	bl	8001630 <HAL_GPIO_WritePin>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	58020c00 	.word	0x58020c00

08000334 <LED_Off_Yellow>:
void LED_Off_Yellow (void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033e:	4802      	ldr	r0, [pc, #8]	; (8000348 <LED_Off_Yellow+0x14>)
 8000340:	f001 f976 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}
 8000348:	58020c00 	.word	0x58020c00

0800034c <LED_On_Blue>:
void LED_On_Blue (void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	4802      	ldr	r0, [pc, #8]	; (8000360 <LED_On_Blue+0x14>)
 8000358:	f001 f96a 	bl	8001630 <HAL_GPIO_WritePin>
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	58020c00 	.word	0x58020c00

08000364 <LED_Off_Blue>:
void LED_Off_Blue (void) {
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, SET);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036e:	4802      	ldr	r0, [pc, #8]	; (8000378 <LED_Off_Blue+0x14>)
 8000370:	f001 f95e 	bl	8001630 <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}
 8000378:	58020c00 	.word	0x58020c00

0800037c <LED_Test>:
}
void LED_Off_All (void) {
LED_Off_Red(); LED_Off_Yellow(); LED_Off_Blue();
}
void LED_Test(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
LED_On_Yellow(); HAL_Delay(500);
 8000380:	f7ff ffcc 	bl	800031c <LED_On_Yellow>
 8000384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000388:	f000 fb32 	bl	80009f0 <HAL_Delay>
LED_Off_Yellow (); HAL_Delay(500);
 800038c:	f7ff ffd2 	bl	8000334 <LED_Off_Yellow>
 8000390:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000394:	f000 fb2c 	bl	80009f0 <HAL_Delay>
LED_On_Red(); HAL_Delay(500);
 8000398:	f7ff ffa8 	bl	80002ec <LED_On_Red>
 800039c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a0:	f000 fb26 	bl	80009f0 <HAL_Delay>
LED_Off_Red(); HAL_Delay(500);
 80003a4:	f7ff ffae 	bl	8000304 <LED_Off_Red>
 80003a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ac:	f000 fb20 	bl	80009f0 <HAL_Delay>
LED_On_Blue(); HAL_Delay(500);
 80003b0:	f7ff ffcc 	bl	800034c <LED_On_Blue>
 80003b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003b8:	f000 fb1a 	bl	80009f0 <HAL_Delay>
LED_Off_Blue(); HAL_Delay(500);
 80003bc:	f7ff ffd2 	bl	8000364 <LED_Off_Blue>
 80003c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003c4:	f000 fb14 	bl	80009f0 <HAL_Delay>
}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}

080003cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d0:	f000 fa7c 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003d4:	f000 f810 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003d8:	f000 f8e0 	bl	800059c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80003dc:	f000 f87a 	bl	80004d4 <MX_FDCAN1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e6:	4803      	ldr	r0, [pc, #12]	; (80003f4 <main+0x28>)
 80003e8:	f001 f922 	bl	8001630 <HAL_GPIO_WritePin>
	  LED_Test();
 80003ec:	f7ff ffc6 	bl	800037c <LED_Test>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, RESET);
 80003f0:	e7f6      	b.n	80003e0 <main+0x14>
 80003f2:	bf00      	nop
 80003f4:	58020c00 	.word	0x58020c00

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b09c      	sub	sp, #112	; 0x70
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000402:	224c      	movs	r2, #76	; 0x4c
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 f95c 	bl	80036c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2220      	movs	r2, #32
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f003 f956 	bl	80036c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000418:	2004      	movs	r0, #4
 800041a:	f001 f923 	bl	8001664 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800041e:	2300      	movs	r3, #0
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	4b2b      	ldr	r3, [pc, #172]	; (80004d0 <SystemClock_Config+0xd8>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a2a      	ldr	r2, [pc, #168]	; (80004d0 <SystemClock_Config+0xd8>)
 8000428:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <SystemClock_Config+0xd8>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800043a:	bf00      	nop
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <SystemClock_Config+0xd8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000448:	d1f8      	bne.n	800043c <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044a:	2302      	movs	r3, #2
 800044c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800044e:	2301      	movs	r3, #1
 8000450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800045a:	2300      	movs	r3, #0
 800045c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800045e:	2304      	movs	r3, #4
 8000460:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000462:	2308      	movs	r3, #8
 8000464:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000466:	2302      	movs	r3, #2
 8000468:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 800046a:	2301      	movs	r3, #1
 800046c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800046e:	2302      	movs	r3, #2
 8000470:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000472:	230c      	movs	r3, #12
 8000474:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000476:	2300      	movs	r3, #0
 8000478:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000482:	4618      	mov	r0, r3
 8000484:	f001 f948 	bl	8001718 <HAL_RCC_OscConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800048e:	f000 f8cb 	bl	8000628 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	233f      	movs	r3, #63	; 0x3f
 8000494:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004a2:	2340      	movs	r3, #64	; 0x40
 80004a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004a6:	2340      	movs	r3, #64	; 0x40
 80004a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004b0:	2340      	movs	r3, #64	; 0x40
 80004b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	2102      	movs	r1, #2
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 fd31 	bl	8001f20 <HAL_RCC_ClockConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80004c4:	f000 f8b0 	bl	8000628 <Error_Handler>
  }
}
 80004c8:	bf00      	nop
 80004ca:	3770      	adds	r7, #112	; 0x70
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	58024800 	.word	0x58024800

080004d4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004d8:	4b2e      	ldr	r3, [pc, #184]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004da:	4a2f      	ldr	r2, [pc, #188]	; (8000598 <MX_FDCAN1_Init+0xc4>)
 80004dc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80004de:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80004ea:	4b2a      	ldr	r3, [pc, #168]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80004f6:	4b27      	ldr	r3, [pc, #156]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80004fc:	4b25      	ldr	r3, [pc, #148]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 80004fe:	2201      	movs	r2, #1
 8000500:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000504:	2201      	movs	r2, #1
 8000506:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000508:	4b22      	ldr	r3, [pc, #136]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800050a:	2202      	movs	r2, #2
 800050c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000510:	2202      	movs	r2, #2
 8000512:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000516:	2201      	movs	r2, #1
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800051a:	4b1e      	ldr	r3, [pc, #120]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800051c:	2201      	movs	r2, #1
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000520:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000522:	2201      	movs	r2, #1
 8000524:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000528:	2201      	movs	r2, #1
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800052c:	4b19      	ldr	r3, [pc, #100]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000534:	2200      	movs	r2, #0
 8000536:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800053a:	2200      	movs	r2, #0
 800053c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000540:	2200      	movs	r2, #0
 8000542:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000546:	2204      	movs	r2, #4
 8000548:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000552:	2204      	movs	r2, #4
 8000554:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000558:	2200      	movs	r2, #0
 800055a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800055e:	2204      	movs	r2, #4
 8000560:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000564:	2200      	movs	r2, #0
 8000566:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000570:	2200      	movs	r2, #0
 8000572:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000576:	2200      	movs	r2, #0
 8000578:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 800057c:	2204      	movs	r2, #4
 800057e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_FDCAN1_Init+0xc0>)
 8000582:	f000 fb3d 	bl	8000c00 <HAL_FDCAN_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800058c:	f000 f84c 	bl	8000628 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2400002c 	.word	0x2400002c
 8000598:	4000a000 	.word	0x4000a000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <MX_GPIO_Init+0x84>)
 80005b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005b8:	4a19      	ldr	r2, [pc, #100]	; (8000620 <MX_GPIO_Init+0x84>)
 80005ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005be:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_GPIO_Init+0x84>)
 80005c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <MX_GPIO_Init+0x84>)
 80005d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <MX_GPIO_Init+0x84>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_GPIO_Init+0x84>)
 80005e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80005e6:	f003 0308 	and.w	r3, r3, #8
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <MX_GPIO_Init+0x88>)
 80005f6:	f001 f81b 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80005fa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80005fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0x88>)
 8000614:	f000 fe5c 	bl	80012d0 <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	58024400 	.word	0x58024400
 8000624:	58020c00 	.word	0x58020c00

08000628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
}
 800062e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000630:	e7fe      	b.n	8000630 <Error_Handler+0x8>
	...

08000634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_MspInit+0x30>)
 800063c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000640:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x30>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x30>)
 800064c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	58024400 	.word	0x58024400

08000668 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0b8      	sub	sp, #224	; 0xe0
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	22b8      	movs	r2, #184	; 0xb8
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f003 f81b 	bl	80036c4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <HAL_FDCAN_MspInit+0xc0>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d143      	bne.n	8000720 <HAL_FDCAN_MspInit+0xb8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000698:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800069c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800069e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 ff68 	bl	8002580 <HAL_RCCEx_PeriphCLKConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80006b6:	f7ff ffb7 	bl	8000628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <HAL_FDCAN_MspInit+0xc4>)
 80006bc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80006c0:	4a1a      	ldr	r2, [pc, #104]	; (800072c <HAL_FDCAN_MspInit+0xc4>)
 80006c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c6:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <HAL_FDCAN_MspInit+0xc4>)
 80006cc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80006d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_FDCAN_MspInit+0xc4>)
 80006da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <HAL_FDCAN_MspInit+0xc4>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <HAL_FDCAN_MspInit+0xc4>)
 80006ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006f6:	2303      	movs	r3, #3
 80006f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800070e:	2309      	movs	r3, #9
 8000710:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000714:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000718:	4619      	mov	r1, r3
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <HAL_FDCAN_MspInit+0xc8>)
 800071c:	f000 fdd8 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	37e0      	adds	r7, #224	; 0xe0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	4000a000 	.word	0x4000a000
 800072c:	58024400 	.word	0x58024400
 8000730:	58020c00 	.word	0x58020c00

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <NMI_Handler+0x4>

0800073a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <MemManage_Handler+0x4>

08000746 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <UsageFault_Handler+0x4>

08000752 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000780:	f000 f916 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800078c:	4b32      	ldr	r3, [pc, #200]	; (8000858 <SystemInit+0xd0>)
 800078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000792:	4a31      	ldr	r2, [pc, #196]	; (8000858 <SystemInit+0xd0>)
 8000794:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000798:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <SystemInit+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 030f 	and.w	r3, r3, #15
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d807      	bhi.n	80007b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <SystemInit+0xd4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f023 030f 	bic.w	r3, r3, #15
 80007b0:	4a2a      	ldr	r2, [pc, #168]	; (800085c <SystemInit+0xd4>)
 80007b2:	f043 0303 	orr.w	r3, r3, #3
 80007b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <SystemInit+0xd8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <SystemInit+0xd8>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SystemInit+0xd8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemInit+0xd8>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4924      	ldr	r1, [pc, #144]	; (8000860 <SystemInit+0xd8>)
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemInit+0xdc>)
 80007d2:	4013      	ands	r3, r2
 80007d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <SystemInit+0xd4>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 030c 	and.w	r3, r3, #12
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d007      	beq.n	80007f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007e2:	4b1e      	ldr	r3, [pc, #120]	; (800085c <SystemInit+0xd4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f023 030f 	bic.w	r3, r3, #15
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <SystemInit+0xd4>)
 80007ec:	f043 0303 	orr.w	r3, r3, #3
 80007f0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80007f2:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <SystemInit+0xd8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80007f8:	4b19      	ldr	r3, [pc, #100]	; (8000860 <SystemInit+0xd8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <SystemInit+0xd8>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000804:	4b16      	ldr	r3, [pc, #88]	; (8000860 <SystemInit+0xd8>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <SystemInit+0xe0>)
 8000808:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <SystemInit+0xd8>)
 800080c:	4a17      	ldr	r2, [pc, #92]	; (800086c <SystemInit+0xe4>)
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000810:	4b13      	ldr	r3, [pc, #76]	; (8000860 <SystemInit+0xd8>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <SystemInit+0xe8>)
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <SystemInit+0xd8>)
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <SystemInit+0xd8>)
 800081e:	4a14      	ldr	r2, [pc, #80]	; (8000870 <SystemInit+0xe8>)
 8000820:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <SystemInit+0xd8>)
 8000824:	2200      	movs	r2, #0
 8000826:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <SystemInit+0xd8>)
 800082a:	4a11      	ldr	r2, [pc, #68]	; (8000870 <SystemInit+0xe8>)
 800082c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <SystemInit+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <SystemInit+0xd8>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a09      	ldr	r2, [pc, #36]	; (8000860 <SystemInit+0xd8>)
 800083a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800083e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <SystemInit+0xd8>)
 8000842:	2200      	movs	r2, #0
 8000844:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <SystemInit+0xec>)
 8000848:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800084c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	52002000 	.word	0x52002000
 8000860:	58024400 	.word	0x58024400
 8000864:	eaf6ed7f 	.word	0xeaf6ed7f
 8000868:	02020200 	.word	0x02020200
 800086c:	01ff0000 	.word	0x01ff0000
 8000870:	01010280 	.word	0x01010280
 8000874:	52004000 	.word	0x52004000

08000878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f7ff ff84 	bl	8000788 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008a6:	f002 fedb 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008aa:	f7ff fd8f 	bl	80003cc <main>
  bx  lr
 80008ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80008b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008b8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80008bc:	08003750 	.word	0x08003750
  ldr r2, =_sbss
 80008c0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80008c4:	240000d0 	.word	0x240000d0

080008c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d2:	2003      	movs	r0, #3
 80008d4:	f000 f962 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80008d8:	f001 fcd8 	bl	800228c <HAL_RCC_GetSysClockFreq>
 80008dc:	4602      	mov	r2, r0
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_Init+0x68>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	0a1b      	lsrs	r3, r3, #8
 80008e4:	f003 030f 	and.w	r3, r3, #15
 80008e8:	4913      	ldr	r1, [pc, #76]	; (8000938 <HAL_Init+0x6c>)
 80008ea:	5ccb      	ldrb	r3, [r1, r3]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	fa22 f303 	lsr.w	r3, r2, r3
 80008f4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_Init+0x68>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_Init+0x6c>)
 8000900:	5cd3      	ldrb	r3, [r2, r3]
 8000902:	f003 031f 	and.w	r3, r3, #31
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	fa22 f303 	lsr.w	r3, r2, r3
 800090c:	4a0b      	ldr	r2, [pc, #44]	; (800093c <HAL_Init+0x70>)
 800090e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000910:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <HAL_Init+0x74>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f814 	bl	8000944 <HAL_InitTick>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e002      	b.n	800092c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000926:	f7ff fe85 	bl	8000634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024400 	.word	0x58024400
 8000938:	08003738 	.word	0x08003738
 800093c:	24000004 	.word	0x24000004
 8000940:	24000000 	.word	0x24000000

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_InitTick+0x60>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d101      	bne.n	8000958 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	e021      	b.n	800099c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_InitTick+0x64>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_InitTick+0x60>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f939 	bl	8000be6 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f911 	bl	8000bb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x68>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2400000c 	.word	0x2400000c
 80009a8:	24000000 	.word	0x24000000
 80009ac:	24000008 	.word	0x24000008

080009b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2400000c 	.word	0x2400000c
 80009d4:	240000cc 	.word	0x240000cc

080009d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	240000cc 	.word	0x240000cc

080009f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009f8:	f7ff ffee 	bl	80009d8 <HAL_GetTick>
 80009fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a08:	d005      	beq.n	8000a16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_Delay+0x44>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4413      	add	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a16:	bf00      	nop
 8000a18:	f7ff ffde 	bl	80009d8 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d8f7      	bhi.n	8000a18 <HAL_Delay+0x28>
  {
  }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2400000c 	.word	0x2400000c

08000a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <__NVIC_SetPriorityGrouping+0x40>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a66:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <__NVIC_SetPriorityGrouping+0x40>)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	60d3      	str	r3, [r2, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00
 8000a7c:	05fa0000 	.word	0x05fa0000

08000a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff47 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc0:	f7ff ff5e 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff ff90 	bl	8000af0 <NVIC_EncodePriority>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff5f 	bl	8000a9c <__NVIC_SetPriority>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffb2 	bl	8000b58 <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b098      	sub	sp, #96	; 0x60
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000c08:	4a84      	ldr	r2, [pc, #528]	; (8000e1c <HAL_FDCAN_Init+0x21c>)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	4611      	mov	r1, r2
 8000c10:	224c      	movs	r2, #76	; 0x4c
 8000c12:	4618      	mov	r0, r3
 8000c14:	f002 fd48 	bl	80036a8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1ca      	b.n	8000fb8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a7e      	ldr	r2, [pc, #504]	; (8000e20 <HAL_FDCAN_Init+0x220>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d106      	bne.n	8000c3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c34:	461a      	mov	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fd0a 	bl	8000668 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0210 	bic.w	r2, r2, #16
 8000c62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c64:	f7ff feb8 	bl	80009d8 <HAL_GetTick>
 8000c68:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c6a:	e014      	b.n	8000c96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c6c:	f7ff feb4 	bl	80009d8 <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d90d      	bls.n	8000c96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c80:	f043 0201 	orr.w	r2, r3, #1
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e190      	b.n	8000fb8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d0e3      	beq.n	8000c6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	699a      	ldr	r2, [r3, #24]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb4:	f7ff fe90 	bl	80009d8 <HAL_GetTick>
 8000cb8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000cba:	e014      	b.n	8000ce6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000cbc:	f7ff fe8c 	bl	80009d8 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b0a      	cmp	r3, #10
 8000cc8:	d90d      	bls.n	8000ce6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000cd0:	f043 0201 	orr.w	r2, r3, #1
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2203      	movs	r2, #3
 8000cde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e168      	b.n	8000fb8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0e3      	beq.n	8000cbc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0202 	orr.w	r2, r2, #2
 8000d02:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7c1b      	ldrb	r3, [r3, #16]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d108      	bne.n	8000d1e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	e007      	b.n	8000d2e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7c5b      	ldrb	r3, [r3, #17]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d108      	bne.n	8000d48 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	699a      	ldr	r2, [r3, #24]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d44:	619a      	str	r2, [r3, #24]
 8000d46:	e007      	b.n	8000d58 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	699a      	ldr	r2, [r3, #24]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000d56:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7c9b      	ldrb	r3, [r3, #18]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d108      	bne.n	8000d72 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	e007      	b.n	8000d82 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	699a      	ldr	r2, [r3, #24]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d80:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	699a      	ldr	r2, [r3, #24]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000da6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0210 	bic.w	r2, r2, #16
 8000db6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d108      	bne.n	8000dd2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	699a      	ldr	r2, [r3, #24]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0204 	orr.w	r2, r2, #4
 8000dce:	619a      	str	r2, [r3, #24]
 8000dd0:	e030      	b.n	8000e34 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d02c      	beq.n	8000e34 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d020      	beq.n	8000e24 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0210 	orr.w	r2, r2, #16
 8000e00:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d114      	bne.n	8000e34 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 0220 	orr.w	r2, r2, #32
 8000e18:	619a      	str	r2, [r3, #24]
 8000e1a:	e00b      	b.n	8000e34 <HAL_FDCAN_Init+0x234>
 8000e1c:	080036ec 	.word	0x080036ec
 8000e20:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0220 	orr.w	r2, r2, #32
 8000e32:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e44:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e4c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e5c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e5e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000e68:	d115      	bne.n	8000e96 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	3b01      	subs	r3, #1
 8000e76:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e78:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000e82:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000e92:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000e94:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00a      	beq.n	8000eb4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000eca:	f023 0107 	bic.w	r1, r3, #7
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000ed8:	4413      	add	r3, r2
 8000eda:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d012      	beq.n	8000f16 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000ef8:	f023 0107 	bic.w	r1, r3, #7
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f06:	4413      	add	r3, r2
 8000f08:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	430a      	orrs	r2, r1
 8000f12:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d013      	beq.n	8000f46 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000f26:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f34:	4413      	add	r3, r2
 8000f36:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f3a:	011a      	lsls	r2, r3, #4
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	430a      	orrs	r2, r1
 8000f42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d013      	beq.n	8000f76 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000f56:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000f64:	4413      	add	r3, r2
 8000f66:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000f6a:	021a      	lsls	r2, r3, #8
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_FDCAN_Init+0x3c0>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d107      	bne.n	8000f90 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f022 0203 	bic.w	r2, r2, #3
 8000f8e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f80b 	bl	8000fc4 <FDCAN_CalcultateRamBlockAddresses>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8000fb4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3760      	adds	r7, #96	; 0x60
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	4000a000 	.word	0x4000a000

08000fc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000fda:	4ba7      	ldr	r3, [pc, #668]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	0091      	lsls	r1, r2, #2
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	430b      	orrs	r3, r1
 8000fe8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ff4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800101a:	4b97      	ldr	r3, [pc, #604]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800101c:	4013      	ands	r3, r2
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	0091      	lsls	r1, r2, #2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	430b      	orrs	r3, r1
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001034:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	041a      	lsls	r2, r3, #16
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4413      	add	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800105c:	4b86      	ldr	r3, [pc, #536]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800105e:	4013      	ands	r3, r2
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	0091      	lsls	r1, r2, #2
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	430b      	orrs	r3, r1
 800106a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001076:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	041a      	lsls	r2, r3, #16
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010a4:	4b74      	ldr	r3, [pc, #464]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	0091      	lsls	r1, r2, #2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80010be:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c6:	041a      	lsls	r2, r3, #16
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	4413      	add	r3, r2
 80010e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80010ec:	4b62      	ldr	r3, [pc, #392]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80010ee:	4013      	ands	r3, r2
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	0091      	lsls	r1, r2, #2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	430b      	orrs	r3, r1
 80010fa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001118:	4b57      	ldr	r3, [pc, #348]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800111a:	4013      	ands	r3, r2
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	0091      	lsls	r1, r2, #2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	430b      	orrs	r3, r1
 8001126:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001132:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	041a      	lsls	r2, r3, #16
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	4413      	add	r3, r2
 8001150:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800115a:	4b47      	ldr	r3, [pc, #284]	; (8001278 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800115c:	4013      	ands	r3, r2
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	0091      	lsls	r1, r2, #2
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	430b      	orrs	r3, r1
 8001168:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001174:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800117c:	041a      	lsls	r2, r3, #16
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001190:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001198:	061a      	lsls	r2, r3, #24
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011a8:	4b34      	ldr	r3, [pc, #208]	; (800127c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80011aa:	4413      	add	r3, r2
 80011ac:	009a      	lsls	r2, r3, #2
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	441a      	add	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	441a      	add	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	441a      	add	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	441a      	add	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	441a      	add	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	441a      	add	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	441a      	add	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800125a:	fb01 f303 	mul.w	r3, r1, r3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	441a      	add	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d915      	bls.n	80012a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001274:	e006      	b.n	8001284 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001276:	bf00      	nop
 8001278:	ffff0003 	.word	0xffff0003
 800127c:	10002b00 	.word	0x10002b00
 8001280:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800128a:	f043 0220 	orr.w	r2, r3, #32
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e010      	b.n	80012c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e005      	b.n	80012b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3304      	adds	r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d3f3      	bcc.n	80012a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_GPIO_Init+0x234>)
 80012e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012e2:	e194      	b.n	800160e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2101      	movs	r1, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8186 	beq.w	8001608 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d005      	beq.n	8001314 <HAL_GPIO_Init+0x44>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d130      	bne.n	8001376 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2203      	movs	r2, #3
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800134a:	2201      	movs	r2, #1
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b03      	cmp	r3, #3
 8001380:	d017      	beq.n	80013b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d123      	bne.n	8001406 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	220f      	movs	r2, #15
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	08da      	lsrs	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3208      	adds	r2, #8
 8001400:	69b9      	ldr	r1, [r7, #24]
 8001402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0203 	and.w	r2, r3, #3
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80e0 	beq.w	8001608 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001448:	4b2f      	ldr	r3, [pc, #188]	; (8001508 <HAL_GPIO_Init+0x238>)
 800144a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800144e:	4a2e      	ldr	r2, [pc, #184]	; (8001508 <HAL_GPIO_Init+0x238>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <HAL_GPIO_Init+0x238>)
 800145a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a29      	ldr	r2, [pc, #164]	; (800150c <HAL_GPIO_Init+0x23c>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <HAL_GPIO_Init+0x240>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d052      	beq.n	8001538 <HAL_GPIO_Init+0x268>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <HAL_GPIO_Init+0x244>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_GPIO_Init+0x22e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1e      	ldr	r2, [pc, #120]	; (8001518 <HAL_GPIO_Init+0x248>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x22a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <HAL_GPIO_Init+0x24c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_GPIO_Init+0x250>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x222>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a1b      	ldr	r2, [pc, #108]	; (8001524 <HAL_GPIO_Init+0x254>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x21e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1a      	ldr	r2, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x258>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x21a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a19      	ldr	r2, [pc, #100]	; (800152c <HAL_GPIO_Init+0x25c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x216>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a18      	ldr	r2, [pc, #96]	; (8001530 <HAL_GPIO_Init+0x260>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x212>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_GPIO_Init+0x264>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x20e>
 80014da:	2309      	movs	r3, #9
 80014dc:	e02d      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014de:	230a      	movs	r3, #10
 80014e0:	e02b      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014e2:	2308      	movs	r3, #8
 80014e4:	e029      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e027      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e025      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e023      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e021      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e01f      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e01d      	b.n	800153a <HAL_GPIO_Init+0x26a>
 80014fe:	2301      	movs	r3, #1
 8001500:	e01b      	b.n	800153a <HAL_GPIO_Init+0x26a>
 8001502:	bf00      	nop
 8001504:	58000080 	.word	0x58000080
 8001508:	58024400 	.word	0x58024400
 800150c:	58000400 	.word	0x58000400
 8001510:	58020000 	.word	0x58020000
 8001514:	58020400 	.word	0x58020400
 8001518:	58020800 	.word	0x58020800
 800151c:	58020c00 	.word	0x58020c00
 8001520:	58021000 	.word	0x58021000
 8001524:	58021400 	.word	0x58021400
 8001528:	58021800 	.word	0x58021800
 800152c:	58021c00 	.word	0x58021c00
 8001530:	58022000 	.word	0x58022000
 8001534:	58022400 	.word	0x58022400
 8001538:	2300      	movs	r3, #0
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800154a:	4938      	ldr	r1, [pc, #224]	; (800162c <HAL_GPIO_Init+0x35c>)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800157e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	43db      	mvns	r3, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4013      	ands	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	3301      	adds	r3, #1
 800160c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa22 f303 	lsr.w	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	f47f ae63 	bne.w	80012e4 <HAL_GPIO_Init+0x14>
  }
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	3724      	adds	r7, #36	; 0x24
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	58000400 	.word	0x58000400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	2b06      	cmp	r3, #6
 8001676:	d00a      	beq.n	800168e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d001      	beq.n	800168a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e040      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e03e      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001696:	491f      	ldr	r1, [pc, #124]	; (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4313      	orrs	r3, r2
 800169c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800169e:	f7ff f99b 	bl	80009d8 <HAL_GetTick>
 80016a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016a4:	e009      	b.n	80016ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016a6:	f7ff f997 	bl	80009d8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016b4:	d901      	bls.n	80016ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e028      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80016ba:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c6:	d1ee      	bne.n	80016a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b1e      	cmp	r3, #30
 80016cc:	d008      	beq.n	80016e0 <HAL_PWREx_ConfigSupply+0x7c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b2e      	cmp	r3, #46	; 0x2e
 80016d2:	d005      	beq.n	80016e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b1d      	cmp	r3, #29
 80016d8:	d002      	beq.n	80016e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b2d      	cmp	r3, #45	; 0x2d
 80016de:	d114      	bne.n	800170a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80016e0:	f7ff f97a 	bl	80009d8 <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016e6:	e009      	b.n	80016fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016e8:	f7ff f976 	bl	80009d8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f6:	d901      	bls.n	80016fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e007      	b.n	800170c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001708:	d1ee      	bne.n	80016e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	58024800 	.word	0x58024800

08001718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e3f3      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80b3 	beq.w	800189e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001738:	4b9e      	ldr	r3, [pc, #632]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001742:	4b9c      	ldr	r3, [pc, #624]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	2b10      	cmp	r3, #16
 800174c:	d007      	beq.n	800175e <HAL_RCC_OscConfig+0x46>
 800174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001750:	2b18      	cmp	r3, #24
 8001752:	d112      	bne.n	800177a <HAL_RCC_OscConfig+0x62>
 8001754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d10d      	bne.n	800177a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b95      	ldr	r3, [pc, #596]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8098 	beq.w	800189c <HAL_RCC_OscConfig+0x184>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 8093 	bne.w	800189c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e3cb      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x7a>
 8001784:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a8a      	ldr	r2, [pc, #552]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e058      	b.n	8001844 <HAL_RCC_OscConfig+0x12c>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d112      	bne.n	80017c0 <HAL_RCC_OscConfig+0xa8>
 800179a:	4b86      	ldr	r3, [pc, #536]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a85      	ldr	r2, [pc, #532]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a82      	ldr	r2, [pc, #520]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7f      	ldr	r2, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e041      	b.n	8001844 <HAL_RCC_OscConfig+0x12c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0xd8>
 80017ca:	4b7a      	ldr	r3, [pc, #488]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a79      	ldr	r2, [pc, #484]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a76      	ldr	r2, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b74      	ldr	r3, [pc, #464]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a73      	ldr	r2, [pc, #460]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e029      	b.n	8001844 <HAL_RCC_OscConfig+0x12c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80017f8:	d112      	bne.n	8001820 <HAL_RCC_OscConfig+0x108>
 80017fa:	4b6e      	ldr	r3, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a6d      	ldr	r2, [pc, #436]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6a      	ldr	r2, [pc, #424]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800180c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a67      	ldr	r2, [pc, #412]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e011      	b.n	8001844 <HAL_RCC_OscConfig+0x12c>
 8001820:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a63      	ldr	r2, [pc, #396]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b61      	ldr	r3, [pc, #388]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a60      	ldr	r2, [pc, #384]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a5d      	ldr	r2, [pc, #372]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800183e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f8c4 	bl	80009d8 <HAL_GetTick>
 8001850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff f8c0 	bl	80009d8 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e355      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001866:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x13c>
 8001872:	e014      	b.n	800189e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f8b0 	bl	80009d8 <HAL_GetTick>
 8001878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f8ac 	bl	80009d8 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	; 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e341      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800188e:	4b49      	ldr	r3, [pc, #292]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x164>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 808c 	beq.w	80019c4 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018b6:	4b3f      	ldr	r3, [pc, #252]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1ba>
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	2b18      	cmp	r3, #24
 80018c6:	d137      	bne.n	8001938 <HAL_RCC_OscConfig+0x220>
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d132      	bne.n	8001938 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d2:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x1d2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e313      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 0219 	bic.w	r2, r3, #25
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	492f      	ldr	r1, [pc, #188]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018fc:	f7ff f86c 	bl	80009d8 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff f868 	bl	80009d8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e2fd      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	061b      	lsls	r3, r3, #24
 8001930:	4920      	ldr	r1, [pc, #128]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001932:	4313      	orrs	r3, r2
 8001934:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001936:	e045      	b.n	80019c4 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d026      	beq.n	800198e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 0219 	bic.w	r2, r3, #25
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4919      	ldr	r1, [pc, #100]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800194e:	4313      	orrs	r3, r2
 8001950:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f841 	bl	80009d8 <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff f83d 	bl	80009d8 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e2d2      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	490b      	ldr	r1, [pc, #44]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e01a      	b.n	80019c4 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_RCC_OscConfig+0x29c>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff f81d 	bl	80009d8 <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff f819 	bl	80009d8 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d903      	bls.n	80019b8 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e2ae      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
 80019b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ee      	bne.n	80019a2 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0310 	and.w	r3, r3, #16
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d06a      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d0:	4b93      	ldr	r3, [pc, #588]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019da:	4b91      	ldr	r3, [pc, #580]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d007      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2de>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b18      	cmp	r3, #24
 80019ea:	d11b      	bne.n	8001a24 <HAL_RCC_OscConfig+0x30c>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019f6:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2f6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	2b80      	cmp	r3, #128	; 0x80
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e281      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a0e:	4b84      	ldr	r3, [pc, #528]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	061b      	lsls	r3, r3, #24
 8001a1c:	4980      	ldr	r1, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a22:	e040      	b.n	8001aa6 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d023      	beq.n	8001a74 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a7b      	ldr	r2, [pc, #492]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7fe ffce 	bl	80009d8 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a40:	f7fe ffca 	bl	80009d8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e25f      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	061b      	lsls	r3, r3, #24
 8001a6c:	496c      	ldr	r1, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]
 8001a72:	e018      	b.n	8001aa6 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a74:	4b6a      	ldr	r3, [pc, #424]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a69      	ldr	r2, [pc, #420]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7fe ffaa 	bl	80009d8 <HAL_GetTick>
 8001a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a88:	f7fe ffa6 	bl	80009d8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e23b      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a9a:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d036      	beq.n	8001b20 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d019      	beq.n	8001aee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7fe ff87 	bl	80009d8 <HAL_GetTick>
 8001aca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ace:	f7fe ff83 	bl	80009d8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e218      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x3b6>
 8001aec:	e018      	b.n	8001b20 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aee:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001af2:	4a4b      	ldr	r2, [pc, #300]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7fe ff6d 	bl	80009d8 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b02:	f7fe ff69 	bl	80009d8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1fe      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d036      	beq.n	8001b9a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d019      	beq.n	8001b68 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a39      	ldr	r2, [pc, #228]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b40:	f7fe ff4a 	bl	80009d8 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b48:	f7fe ff46 	bl	80009d8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1db      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x430>
 8001b66:	e018      	b.n	8001b9a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b74:	f7fe ff30 	bl	80009d8 <HAL_GetTick>
 8001b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b7c:	f7fe ff2c 	bl	80009d8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e1c1      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b8e:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80af 	beq.w	8001d06 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x50c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <HAL_RCC_OscConfig+0x50c>)
 8001bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bb4:	f7fe ff10 	bl	80009d8 <HAL_GetTick>
 8001bb8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bbc:	f7fe ff0c 	bl	80009d8 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1a1      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x50c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d106      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4d8>
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a0e      	ldr	r2, [pc, #56]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	e05b      	b.n	8001ca8 <HAL_RCC_OscConfig+0x590>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d117      	bne.n	8001c28 <HAL_RCC_OscConfig+0x510>
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfc:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6713      	str	r3, [r2, #112]	; 0x70
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a02      	ldr	r2, [pc, #8]	; (8001c20 <HAL_RCC_OscConfig+0x508>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	e044      	b.n	8001ca8 <HAL_RCC_OscConfig+0x590>
 8001c1e:	bf00      	nop
 8001c20:	58024400 	.word	0x58024400
 8001c24:	58024800 	.word	0x58024800
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d112      	bne.n	8001c56 <HAL_RCC_OscConfig+0x53e>
 8001c30:	4b95      	ldr	r3, [pc, #596]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a94      	ldr	r2, [pc, #592]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a91      	ldr	r2, [pc, #580]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	4b8f      	ldr	r3, [pc, #572]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a8e      	ldr	r2, [pc, #568]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	e028      	b.n	8001ca8 <HAL_RCC_OscConfig+0x590>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b85      	cmp	r3, #133	; 0x85
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x56c>
 8001c5e:	4b8a      	ldr	r3, [pc, #552]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a89      	ldr	r2, [pc, #548]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	4b87      	ldr	r3, [pc, #540]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a86      	ldr	r2, [pc, #536]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a83      	ldr	r2, [pc, #524]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	e011      	b.n	8001ca8 <HAL_RCC_OscConfig+0x590>
 8001c84:	4b80      	ldr	r3, [pc, #512]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a7f      	ldr	r2, [pc, #508]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	4b7d      	ldr	r3, [pc, #500]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a7c      	ldr	r2, [pc, #496]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c96:	f023 0304 	bic.w	r3, r3, #4
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	4b7a      	ldr	r3, [pc, #488]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a79      	ldr	r2, [pc, #484]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d015      	beq.n	8001cdc <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb0:	f7fe fe92 	bl	80009d8 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb6:	e00a      	b.n	8001cce <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fe8e 	bl	80009d8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e121      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cce:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0ee      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x5a0>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe fe7c 	bl	80009d8 <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe fe78 	bl	80009d8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e10b      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ee      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 8100 	beq.w	8001f10 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d10:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d18:	2b18      	cmp	r3, #24
 8001d1a:	f000 80bb 	beq.w	8001e94 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	f040 8095 	bne.w	8001e52 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b57      	ldr	r3, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a56      	ldr	r2, [pc, #344]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7fe fe50 	bl	80009d8 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7fe fe4c 	bl	80009d8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0e1      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_OscConfig+0x774>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	4946      	ldr	r1, [pc, #280]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	628b      	str	r3, [r1, #40]	; 0x28
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	3b01      	subs	r3, #1
 8001d84:	025b      	lsls	r3, r3, #9
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	061b      	lsls	r3, r3, #24
 8001da0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001da4:	4938      	ldr	r1, [pc, #224]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	4a36      	ldr	r2, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dba:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_OscConfig+0x778>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dc2:	00d2      	lsls	r2, r2, #3
 8001dc4:	4930      	ldr	r1, [pc, #192]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	f023 020c 	bic.w	r2, r3, #12
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	492c      	ldr	r1, [pc, #176]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f023 0202 	bic.w	r2, r3, #2
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	4927      	ldr	r1, [pc, #156]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	4a25      	ldr	r2, [pc, #148]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfe:	4a22      	ldr	r2, [pc, #136]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fdd5 	bl	80009d8 <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe fdd1 	bl	80009d8 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e066      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x71a>
 8001e50:	e05e      	b.n	8001f10 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fdbb 	bl	80009d8 <HAL_GetTick>
 8001e62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fdb7 	bl	80009d8 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e04c      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_RCC_OscConfig+0x770>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x74e>
 8001e84:	e044      	b.n	8001f10 <HAL_RCC_OscConfig+0x7f8>
 8001e86:	bf00      	nop
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	fffffc0c 	.word	0xfffffc0c
 8001e90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e94:	4b21      	ldr	r3, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x804>)
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_OscConfig+0x804>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d031      	beq.n	8001f0c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d12a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d122      	bne.n	8001f0c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11a      	bne.n	8001f0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	0a5b      	lsrs	r3, r3, #9
 8001eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d111      	bne.n	8001f0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	0e1b      	lsrs	r3, r3, #24
 8001efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f06:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3730      	adds	r7, #48	; 0x30
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	58024400 	.word	0x58024400

08001f20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e19c      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b8a      	ldr	r3, [pc, #552]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b87      	ldr	r3, [pc, #540]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	4985      	ldr	r1, [pc, #532]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b83      	ldr	r3, [pc, #524]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e184      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d010      	beq.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	4b7b      	ldr	r3, [pc, #492]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d908      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f80:	4b78      	ldr	r3, [pc, #480]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	4975      	ldr	r1, [pc, #468]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	4b70      	ldr	r3, [pc, #448]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d908      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fae:	4b6d      	ldr	r3, [pc, #436]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	496a      	ldr	r1, [pc, #424]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d010      	beq.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699a      	ldr	r2, [r3, #24]
 8001fd0:	4b64      	ldr	r3, [pc, #400]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d908      	bls.n	8001fee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fdc:	4b61      	ldr	r3, [pc, #388]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	495e      	ldr	r1, [pc, #376]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	4b59      	ldr	r3, [pc, #356]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002006:	429a      	cmp	r2, r3
 8002008:	d908      	bls.n	800201c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800200a:	4b56      	ldr	r3, [pc, #344]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4953      	ldr	r1, [pc, #332]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002018:	4313      	orrs	r3, r2
 800201a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4b4d      	ldr	r3, [pc, #308]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	429a      	cmp	r2, r3
 8002036:	d908      	bls.n	800204a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b4a      	ldr	r3, [pc, #296]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f023 020f 	bic.w	r2, r3, #15
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4947      	ldr	r1, [pc, #284]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002046:	4313      	orrs	r3, r2
 8002048:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d055      	beq.n	8002102 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002056:	4b43      	ldr	r3, [pc, #268]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	4940      	ldr	r1, [pc, #256]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002064:	4313      	orrs	r3, r2
 8002066:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d107      	bne.n	8002080 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002070:	4b3c      	ldr	r3, [pc, #240]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d121      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0f6      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d107      	bne.n	8002098 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002088:	4b36      	ldr	r3, [pc, #216]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d115      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0ea      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d109      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0de      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0d6      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c0:	4b28      	ldr	r3, [pc, #160]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f023 0207 	bic.w	r2, r3, #7
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4925      	ldr	r1, [pc, #148]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fc81 	bl	80009d8 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020da:	f7fe fc7d 	bl	80009d8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0be      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	429a      	cmp	r2, r3
 8002100:	d1eb      	bne.n	80020da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b14      	ldr	r3, [pc, #80]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	429a      	cmp	r2, r3
 800211c:	d208      	bcs.n	8002130 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f023 020f 	bic.w	r2, r3, #15
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	490e      	ldr	r1, [pc, #56]	; (8002164 <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d214      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 020f 	bic.w	r2, r3, #15
 8002146:	4906      	ldr	r1, [pc, #24]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <HAL_RCC_ClockConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d005      	beq.n	8002168 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e086      	b.n	800226e <HAL_RCC_ClockConfig+0x34e>
 8002160:	52002000 	.word	0x52002000
 8002164:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002180:	429a      	cmp	r2, r3
 8002182:	d208      	bcs.n	8002196 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	4939      	ldr	r1, [pc, #228]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002192:	4313      	orrs	r3, r2
 8002194:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d208      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	492e      	ldr	r1, [pc, #184]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0310 	and.w	r3, r3, #16
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021dc:	429a      	cmp	r2, r3
 80021de:	d208      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800220a:	429a      	cmp	r2, r3
 800220c:	d208      	bcs.n	8002220 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4917      	ldr	r1, [pc, #92]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 800221c:	4313      	orrs	r3, r2
 800221e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002220:	f000 f834 	bl	800228c <HAL_RCC_GetSysClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4912      	ldr	r1, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x35c>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x358>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a0d      	ldr	r2, [pc, #52]	; (800227c <HAL_RCC_ClockConfig+0x35c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x360>)
 8002256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x364>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x368>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fb6e 	bl	8000944 <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800226c:	7bfb      	ldrb	r3, [r7, #15]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024400 	.word	0x58024400
 800227c:	08003738 	.word	0x08003738
 8002280:	24000004 	.word	0x24000004
 8002284:	24000000 	.word	0x24000000
 8002288:	24000008 	.word	0x24000008

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4bb3      	ldr	r3, [pc, #716]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800229a:	2b18      	cmp	r3, #24
 800229c:	f200 8155 	bhi.w	800254a <HAL_RCC_GetSysClockFreq+0x2be>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	0800230d 	.word	0x0800230d
 80022ac:	0800254b 	.word	0x0800254b
 80022b0:	0800254b 	.word	0x0800254b
 80022b4:	0800254b 	.word	0x0800254b
 80022b8:	0800254b 	.word	0x0800254b
 80022bc:	0800254b 	.word	0x0800254b
 80022c0:	0800254b 	.word	0x0800254b
 80022c4:	0800254b 	.word	0x0800254b
 80022c8:	08002333 	.word	0x08002333
 80022cc:	0800254b 	.word	0x0800254b
 80022d0:	0800254b 	.word	0x0800254b
 80022d4:	0800254b 	.word	0x0800254b
 80022d8:	0800254b 	.word	0x0800254b
 80022dc:	0800254b 	.word	0x0800254b
 80022e0:	0800254b 	.word	0x0800254b
 80022e4:	0800254b 	.word	0x0800254b
 80022e8:	08002339 	.word	0x08002339
 80022ec:	0800254b 	.word	0x0800254b
 80022f0:	0800254b 	.word	0x0800254b
 80022f4:	0800254b 	.word	0x0800254b
 80022f8:	0800254b 	.word	0x0800254b
 80022fc:	0800254b 	.word	0x0800254b
 8002300:	0800254b 	.word	0x0800254b
 8002304:	0800254b 	.word	0x0800254b
 8002308:	0800233f 	.word	0x0800233f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800230c:	4b94      	ldr	r3, [pc, #592]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002318:	4b91      	ldr	r3, [pc, #580]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	4a90      	ldr	r2, [pc, #576]	; (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800232a:	e111      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800232c:	4b8d      	ldr	r3, [pc, #564]	; (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800232e:	61bb      	str	r3, [r7, #24]
    break;
 8002330:	e10e      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002332:	4b8d      	ldr	r3, [pc, #564]	; (8002568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002334:	61bb      	str	r3, [r7, #24]
    break;
 8002336:	e10b      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002338:	4b8c      	ldr	r3, [pc, #560]	; (800256c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800233a:	61bb      	str	r3, [r7, #24]
    break;
 800233c:	e108      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800233e:	4b88      	ldr	r3, [pc, #544]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002348:	4b85      	ldr	r3, [pc, #532]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002352:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002354:	4b82      	ldr	r3, [pc, #520]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800235e:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002362:	08db      	lsrs	r3, r3, #3
 8002364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80e1 	beq.w	8002544 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2b02      	cmp	r3, #2
 8002386:	f000 8083 	beq.w	8002490 <HAL_RCC_GetSysClockFreq+0x204>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	f200 80a1 	bhi.w	80024d4 <HAL_RCC_GetSysClockFreq+0x248>
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x114>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d056      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x1c0>
 800239e:	e099      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023a0:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02d      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023ac:	4b6c      	ldr	r3, [pc, #432]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	08db      	lsrs	r3, r3, #3
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	4a6b      	ldr	r2, [pc, #428]	; (8002564 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d6:	4b62      	ldr	r3, [pc, #392]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002406:	e087      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002412:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002574 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241a:	4b51      	ldr	r3, [pc, #324]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800242a:	ed97 6a02 	vldr	s12, [r7, #8]
 800242e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800243a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800243e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800244a:	e065      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002578 <HAL_RCC_GetSysClockFreq+0x2ec>
 800245a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800245e:	4b40      	ldr	r3, [pc, #256]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800246e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002472:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800247a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800247e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800248e:	e043      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800249a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800257c <HAL_RCC_GetSysClockFreq+0x2f0>
 800249e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024d2:	e021      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	ee07 3a90 	vmov	s15, r3
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002578 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002570 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800250e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002516:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002518:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	0a5b      	lsrs	r3, r3, #9
 800251e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002522:	3301      	adds	r3, #1
 8002524:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002530:	edd7 6a07 	vldr	s13, [r7, #28]
 8002534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253c:	ee17 3a90 	vmov	r3, s15
 8002540:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002542:	e005      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    break;
 8002548:	e002      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800254c:	61bb      	str	r3, [r7, #24]
    break;
 800254e:	bf00      	nop
  }

  return sysclockfreq;
 8002550:	69bb      	ldr	r3, [r7, #24]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3724      	adds	r7, #36	; 0x24
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	58024400 	.word	0x58024400
 8002564:	03d09000 	.word	0x03d09000
 8002568:	003d0900 	.word	0x003d0900
 800256c:	016e3600 	.word	0x016e3600
 8002570:	46000000 	.word	0x46000000
 8002574:	4c742400 	.word	0x4c742400
 8002578:	4a742400 	.word	0x4a742400
 800257c:	4bb71b00 	.word	0x4bb71b00

08002580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002588:	2300      	movs	r3, #0
 800258a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800258c:	2300      	movs	r3, #0
 800258e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03f      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025a4:	d02a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025aa:	d824      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b0:	d018      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025b6:	d81e      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c0:	d007      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025c2:	e018      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025c4:	4ba6      	ldr	r3, [pc, #664]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	4aa5      	ldr	r2, [pc, #660]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80025ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025d0:	e015      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3304      	adds	r3, #4
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fedd 	bl	8003398 <RCCEx_PLL2_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025e2:	e00c      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3324      	adds	r3, #36	; 0x24
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ff86 	bl	80034fc <RCCEx_PLL3_Config>
 80025f0:	4603      	mov	r3, r0
 80025f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80025f4:	e003      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
      break;
 80025fa:	e000      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fe:	7dfb      	ldrb	r3, [r7, #23]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002604:	4b96      	ldr	r3, [pc, #600]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002610:	4993      	ldr	r1, [pc, #588]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	650b      	str	r3, [r1, #80]	; 0x50
 8002616:	e001      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d03d      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	2b04      	cmp	r3, #4
 800262e:	d826      	bhi.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002630:	a201      	add	r2, pc, #4	; (adr r2, 8002638 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002636:	bf00      	nop
 8002638:	0800264d 	.word	0x0800264d
 800263c:	0800265b 	.word	0x0800265b
 8002640:	0800266d 	.word	0x0800266d
 8002644:	08002685 	.word	0x08002685
 8002648:	08002685 	.word	0x08002685
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800264c:	4b84      	ldr	r3, [pc, #528]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	4a83      	ldr	r2, [pc, #524]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002658:	e015      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
 800265e:	2100      	movs	r1, #0
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fe99 	bl	8003398 <RCCEx_PLL2_Config>
 8002666:	4603      	mov	r3, r0
 8002668:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800266a:	e00c      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3324      	adds	r3, #36	; 0x24
 8002670:	2100      	movs	r1, #0
 8002672:	4618      	mov	r0, r3
 8002674:	f000 ff42 	bl	80034fc <RCCEx_PLL3_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800267c:	e003      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
      break;
 8002682:	e000      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800268c:	4b74      	ldr	r3, [pc, #464]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800268e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002690:	f023 0207 	bic.w	r2, r3, #7
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	4971      	ldr	r1, [pc, #452]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800269a:	4313      	orrs	r3, r2
 800269c:	650b      	str	r3, [r1, #80]	; 0x50
 800269e:	e001      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d04a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026b8:	d031      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80026ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80026be:	d82b      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c4:	d02d      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80026c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ca:	d825      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026cc:	2bc0      	cmp	r3, #192	; 0xc0
 80026ce:	d02a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80026d0:	2bc0      	cmp	r3, #192	; 0xc0
 80026d2:	d821      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d016      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80026d8:	2b80      	cmp	r3, #128	; 0x80
 80026da:	d81d      	bhi.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80026e0:	2b40      	cmp	r3, #64	; 0x40
 80026e2:	d007      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80026e4:	e018      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026e6:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	4a5d      	ldr	r2, [pc, #372]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80026f2:	e019      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fe4c 	bl	8003398 <RCCEx_PLL2_Config>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002704:	e010      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3324      	adds	r3, #36	; 0x24
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fef5 	bl	80034fc <RCCEx_PLL3_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002716:	e007      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	75fb      	strb	r3, [r7, #23]
      break;
 800271c:	e004      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d109      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800272e:	4b4c      	ldr	r3, [pc, #304]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4949      	ldr	r1, [pc, #292]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800273c:	4313      	orrs	r3, r2
 800273e:	650b      	str	r3, [r1, #80]	; 0x50
 8002740:	e001      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002742:	7dfb      	ldrb	r3, [r7, #23]
 8002744:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04f      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800275a:	d036      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800275c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002760:	d830      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002766:	d032      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276c:	d82a      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800276e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002772:	d02e      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002778:	d824      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	d018      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002784:	d81e      	bhi.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800278a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278e:	d007      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002790:	e018      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800279e:	e019      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3304      	adds	r3, #4
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fdf6 	bl	8003398 <RCCEx_PLL2_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027b0:	e010      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3324      	adds	r3, #36	; 0x24
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fe9f 	bl	80034fc <RCCEx_PLL3_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80027c2:	e007      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	75fb      	strb	r3, [r7, #23]
      break;
 80027c8:	e004      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027ca:	bf00      	nop
 80027cc:	e002      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 80027d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027de:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	491e      	ldr	r1, [pc, #120]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	650b      	str	r3, [r1, #80]	; 0x50
 80027ec:	e001      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
 80027f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d034      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	2b30      	cmp	r3, #48	; 0x30
 8002804:	d01c      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002806:	2b30      	cmp	r3, #48	; 0x30
 8002808:	d817      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800280a:	2b20      	cmp	r3, #32
 800280c:	d00c      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800280e:	2b20      	cmp	r3, #32
 8002810:	d813      	bhi.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d016      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002816:	2b10      	cmp	r3, #16
 8002818:	d10f      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002826:	e00e      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fdb2 	bl	8003398 <RCCEx_PLL2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002838:	e005      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	75fb      	strb	r3, [r7, #23]
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002840:	bf00      	nop
 8002842:	e000      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002844:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10b      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800284e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	4901      	ldr	r1, [pc, #4]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800285e:	e003      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002860:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d047      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287c:	d030      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800287e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002882:	d82a      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002884:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002888:	d02c      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800288a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800288e:	d824      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002894:	d018      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289a:	d81e      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	d007      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80028a6:	e018      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a8:	4bb0      	ldr	r3, [pc, #704]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	4aaf      	ldr	r2, [pc, #700]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028b4:	e017      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd6b 	bl	8003398 <RCCEx_PLL2_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028c6:	e00e      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3324      	adds	r3, #36	; 0x24
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fe14 	bl	80034fc <RCCEx_PLL3_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028d8:	e005      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	75fb      	strb	r3, [r7, #23]
      break;
 80028de:	e002      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80028e0:	bf00      	nop
 80028e2:	e000      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80028e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028ec:	4b9f      	ldr	r3, [pc, #636]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f8:	499c      	ldr	r1, [pc, #624]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	650b      	str	r3, [r1, #80]	; 0x50
 80028fe:	e001      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d049      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002918:	d02e      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800291a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291e:	d828      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002924:	d02a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002926:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800292a:	d822      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800292c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002930:	d026      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002932:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002936:	d81c      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800293c:	d010      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800293e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002942:	d816      	bhi.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01d      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d111      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fd1f 	bl	8003398 <RCCEx_PLL2_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800295e:	e012      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3324      	adds	r3, #36	; 0x24
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fdc8 	bl	80034fc <RCCEx_PLL3_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002970:	e009      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
      break;
 8002976:	e006      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002978:	bf00      	nop
 800297a:	e004      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800297c:	bf00      	nop
 800297e:	e002      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002980:	bf00      	nop
 8002982:	e000      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800298c:	4b77      	ldr	r3, [pc, #476]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800298e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002990:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002998:	4974      	ldr	r1, [pc, #464]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	650b      	str	r3, [r1, #80]	; 0x50
 800299e:	e001      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d053      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029ba:	d034      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029bc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80029c0:	d82e      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c6:	d030      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 80029c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029cc:	d828      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d02c      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d822      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029de:	d028      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80029e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029e4:	d81c      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ea:	d010      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80029ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f0:	d816      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01f      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80029f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029fa:	d111      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fcc8 	bl	8003398 <RCCEx_PLL2_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a0c:	e014      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3324      	adds	r3, #36	; 0x24
 8002a12:	2101      	movs	r1, #1
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fd71 	bl	80034fc <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002a1e:	e00b      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	75fb      	strb	r3, [r7, #23]
      break;
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a26:	bf00      	nop
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e004      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a3e:	4b4b      	ldr	r3, [pc, #300]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a4c:	4947      	ldr	r1, [pc, #284]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	658b      	str	r3, [r1, #88]	; 0x58
 8002a52:	e001      	b.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02f      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6c:	d00e      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a72:	d814      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d015      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	4a3a      	ldr	r2, [pc, #232]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a8a:	e00c      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fc80 	bl	8003398 <RCCEx_PLL2_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002a9c:	e003      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002aac:	4b2f      	ldr	r3, [pc, #188]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	492c      	ldr	r1, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	650b      	str	r3, [r1, #80]	; 0x50
 8002abe:	e001      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d032      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d81b      	bhi.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002b17 	.word	0x08002b17
 8002ae4:	08002af1 	.word	0x08002af1
 8002ae8:	08002aff 	.word	0x08002aff
 8002aec:	08002b17 	.word	0x08002b17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002afc:	e00c      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fc47 	bl	8003398 <RCCEx_PLL2_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	75fb      	strb	r3, [r7, #23]
      break;
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4910      	ldr	r1, [pc, #64]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b30:	e001      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 808a 	beq.w	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b50:	f7fd ff42 	bl	80009d8 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b56:	e00d      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fd ff3e 	bl	80009d8 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d906      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	75fb      	strb	r3, [r7, #23]
        break;
 8002b6a:	e009      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b74:	4bba      	ldr	r3, [pc, #744]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0eb      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d166      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b86:	4bb7      	ldr	r3, [pc, #732]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b90:	4053      	eors	r3, r2
 8002b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d013      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b9a:	4bb2      	ldr	r3, [pc, #712]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ba4:	4baf      	ldr	r3, [pc, #700]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4aae      	ldr	r2, [pc, #696]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4bac      	ldr	r3, [pc, #688]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4aab      	ldr	r2, [pc, #684]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bbc:	4aa9      	ldr	r2, [pc, #676]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bcc:	d115      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7fd ff03 	bl	80009d8 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bd4:	e00b      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fd feff 	bl	80009d8 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d902      	bls.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	75fb      	strb	r3, [r7, #23]
            break;
 8002bec:	e005      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bee:	4b9d      	ldr	r3, [pc, #628]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d0ed      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d126      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002c10:	4b94      	ldr	r3, [pc, #592]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c1e:	0919      	lsrs	r1, r3, #4
 8002c20:	4b91      	ldr	r3, [pc, #580]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c22:	400b      	ands	r3, r1
 8002c24:	498f      	ldr	r1, [pc, #572]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	610b      	str	r3, [r1, #16]
 8002c2a:	e005      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002c2c:	4b8d      	ldr	r3, [pc, #564]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a8c      	ldr	r2, [pc, #560]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c36:	6113      	str	r3, [r2, #16]
 8002c38:	4b8a      	ldr	r3, [pc, #552]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c46:	4987      	ldr	r1, [pc, #540]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	670b      	str	r3, [r1, #112]	; 0x70
 8002c4c:	e004      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
 8002c50:	75bb      	strb	r3, [r7, #22]
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d07f      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	2b28      	cmp	r3, #40	; 0x28
 8002c6c:	d866      	bhi.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002d43 	.word	0x08002d43
 8002c78:	08002d3d 	.word	0x08002d3d
 8002c7c:	08002d3d 	.word	0x08002d3d
 8002c80:	08002d3d 	.word	0x08002d3d
 8002c84:	08002d3d 	.word	0x08002d3d
 8002c88:	08002d3d 	.word	0x08002d3d
 8002c8c:	08002d3d 	.word	0x08002d3d
 8002c90:	08002d3d 	.word	0x08002d3d
 8002c94:	08002d19 	.word	0x08002d19
 8002c98:	08002d3d 	.word	0x08002d3d
 8002c9c:	08002d3d 	.word	0x08002d3d
 8002ca0:	08002d3d 	.word	0x08002d3d
 8002ca4:	08002d3d 	.word	0x08002d3d
 8002ca8:	08002d3d 	.word	0x08002d3d
 8002cac:	08002d3d 	.word	0x08002d3d
 8002cb0:	08002d3d 	.word	0x08002d3d
 8002cb4:	08002d2b 	.word	0x08002d2b
 8002cb8:	08002d3d 	.word	0x08002d3d
 8002cbc:	08002d3d 	.word	0x08002d3d
 8002cc0:	08002d3d 	.word	0x08002d3d
 8002cc4:	08002d3d 	.word	0x08002d3d
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d3d 	.word	0x08002d3d
 8002cd0:	08002d3d 	.word	0x08002d3d
 8002cd4:	08002d43 	.word	0x08002d43
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002d3d 	.word	0x08002d3d
 8002ce0:	08002d3d 	.word	0x08002d3d
 8002ce4:	08002d3d 	.word	0x08002d3d
 8002ce8:	08002d3d 	.word	0x08002d3d
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d3d 	.word	0x08002d3d
 8002cf4:	08002d43 	.word	0x08002d43
 8002cf8:	08002d3d 	.word	0x08002d3d
 8002cfc:	08002d3d 	.word	0x08002d3d
 8002d00:	08002d3d 	.word	0x08002d3d
 8002d04:	08002d3d 	.word	0x08002d3d
 8002d08:	08002d3d 	.word	0x08002d3d
 8002d0c:	08002d3d 	.word	0x08002d3d
 8002d10:	08002d3d 	.word	0x08002d3d
 8002d14:	08002d43 	.word	0x08002d43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fb3a 	bl	8003398 <RCCEx_PLL2_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d28:	e00c      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3324      	adds	r3, #36	; 0x24
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 fbe3 	bl	80034fc <RCCEx_PLL3_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d3a:	e003      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d40:	e000      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8002d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d58:	4942      	ldr	r1, [pc, #264]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	654b      	str	r3, [r1, #84]	; 0x54
 8002d5e:	e001      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d038      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d821      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002dc3 	.word	0x08002dc3
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002dab 	.word	0x08002dab
 8002d8c:	08002dc3 	.word	0x08002dc3
 8002d90:	08002dc3 	.word	0x08002dc3
 8002d94:	08002dc3 	.word	0x08002dc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fafa 	bl	8003398 <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002da8:	e00c      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3324      	adds	r3, #36	; 0x24
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fba3 	bl	80034fc <RCCEx_PLL3_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8002dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd6:	4923      	ldr	r1, [pc, #140]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	654b      	str	r3, [r1, #84]	; 0x54
 8002ddc:	e001      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dde:	7dfb      	ldrb	r3, [r7, #23]
 8002de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d040      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d821      	bhi.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e43 	.word	0x08002e43
 8002e04:	08002e19 	.word	0x08002e19
 8002e08:	08002e2b 	.word	0x08002e2b
 8002e0c:	08002e43 	.word	0x08002e43
 8002e10:	08002e43 	.word	0x08002e43
 8002e14:	08002e43 	.word	0x08002e43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 faba 	bl	8003398 <RCCEx_PLL2_Config>
 8002e24:	4603      	mov	r3, r0
 8002e26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e28:	e00c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3324      	adds	r3, #36	; 0x24
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fb63 	bl	80034fc <RCCEx_PLL3_Config>
 8002e36:	4603      	mov	r3, r0
 8002e38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e3a:	e003      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e40:	e000      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8002e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d110      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f023 0207 	bic.w	r2, r3, #7
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e58:	4902      	ldr	r1, [pc, #8]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e5e:	e007      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8002e60:	58024800 	.word	0x58024800
 8002e64:	58024400 	.word	0x58024400
 8002e68:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d04b      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e86:	d02e      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8002e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e8c:	d828      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e92:	d02a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d822      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e9e:	d026      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002ea0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ea4:	d81c      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eaa:	d010      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8002eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb0:	d816      	bhi.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8002eb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eba:	d111      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 fa68 	bl	8003398 <RCCEx_PLL2_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ecc:	e012      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3324      	adds	r3, #36	; 0x24
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fb11 	bl	80034fc <RCCEx_PLL3_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ede:	e009      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee4:	e006      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ee6:	bf00      	nop
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8002ef2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002efa:	4bb3      	ldr	r3, [pc, #716]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	49af      	ldr	r1, [pc, #700]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	654b      	str	r3, [r1, #84]	; 0x54
 8002f0e:	e001      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d04b      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002f26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f2a:	d02e      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8002f2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f30:	d828      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f36:	d02a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f3c:	d822      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f42:	d026      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f48:	d81c      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f4e:	d010      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8002f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f54:	d816      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01d      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d111      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 fa16 	bl	8003398 <RCCEx_PLL2_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f70:	e012      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3324      	adds	r3, #36	; 0x24
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fabf 	bl	80034fc <RCCEx_PLL3_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f82:	e009      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	e006      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e004      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e002      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f92:	bf00      	nop
 8002f94:	e000      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8002f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f9e:	4b8a      	ldr	r3, [pc, #552]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fac:	4986      	ldr	r1, [pc, #536]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	658b      	str	r3, [r1, #88]	; 0x58
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d04b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fce:	d02e      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8002fd0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fd4:	d828      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fda:	d02a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe0:	d822      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fe2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fe6:	d026      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8002fe8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002fec:	d81c      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002fee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ff2:	d010      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8002ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ff8:	d816      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d01d      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003002:	d111      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f9c4 	bl	8003398 <RCCEx_PLL2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003014:	e012      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3324      	adds	r3, #36	; 0x24
 800301a:	2102      	movs	r1, #2
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fa6d 	bl	80034fc <RCCEx_PLL3_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003026:	e009      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
      break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800303a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003042:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003050:	495d      	ldr	r1, [pc, #372]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003052:	4313      	orrs	r3, r2
 8003054:	658b      	str	r3, [r1, #88]	; 0x58
 8003056:	e001      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003072:	d10a      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	2102      	movs	r1, #2
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa3e 	bl	80034fc <RCCEx_PLL3_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800308a:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	494b      	ldr	r1, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800309a:	4313      	orrs	r3, r2
 800309c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030b4:	d10a      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3324      	adds	r3, #36	; 0x24
 80030ba:	2102      	movs	r1, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fa1d 	bl	80034fc <RCCEx_PLL3_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030cc:	4b3e      	ldr	r3, [pc, #248]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030da:	493b      	ldr	r1, [pc, #236]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d034      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80030f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f6:	d01d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80030f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030fc:	d817      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003106:	d009      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003108:	e011      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3304      	adds	r3, #4
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f941 	bl	8003398 <RCCEx_PLL2_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800311a:	e00c      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3324      	adds	r3, #36	; 0x24
 8003120:	2102      	movs	r1, #2
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f9ea 	bl	80034fc <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800312c:	e003      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	75fb      	strb	r3, [r7, #23]
      break;
 8003132:	e000      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003136:	7dfb      	ldrb	r3, [r7, #23]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800314a:	491f      	ldr	r1, [pc, #124]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800314c:	4313      	orrs	r3, r2
 800314e:	658b      	str	r3, [r1, #88]	; 0x58
 8003150:	e001      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d036      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003168:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800316c:	d01c      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800316e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003172:	d816      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003174:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003178:	d003      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800317a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800317e:	d007      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003180:	e00f      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800318e:	e00c      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3324      	adds	r3, #36	; 0x24
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f9b0 	bl	80034fc <RCCEx_PLL3_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	75fb      	strb	r3, [r7, #23]
      break;
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80031a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10d      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031be:	4902      	ldr	r1, [pc, #8]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	654b      	str	r3, [r1, #84]	; 0x54
 80031c4:	e004      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80031c6:	bf00      	nop
 80031c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d029      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80031e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e8:	d007      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 80031ea:	e00f      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ec:	4b69      	ldr	r3, [pc, #420]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a68      	ldr	r2, [pc, #416]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80031f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80031f8:	e00b      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f8c9 	bl	8003398 <RCCEx_PLL2_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
      break;
 8003210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003212:	7dfb      	ldrb	r3, [r7, #23]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003218:	4b5e      	ldr	r3, [pc, #376]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800321a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003224:	495b      	ldr	r1, [pc, #364]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003226:	4313      	orrs	r3, r2
 8003228:	64cb      	str	r3, [r1, #76]	; 0x4c
 800322a:	e001      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
 800322e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3324      	adds	r3, #36	; 0x24
 8003240:	2102      	movs	r1, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f95a 	bl	80034fc <RCCEx_PLL3_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d032      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003268:	d017      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 800326a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326e:	d811      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003274:	d013      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d80b      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8003280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003284:	d106      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	4a42      	ldr	r2, [pc, #264]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003292:	e007      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	e004      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80032a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032aa:	4b3a      	ldr	r3, [pc, #232]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b8:	4936      	ldr	r1, [pc, #216]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	654b      	str	r3, [r1, #84]	; 0x54
 80032be:	e001      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032d0:	4b30      	ldr	r3, [pc, #192]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032dc:	492d      	ldr	r1, [pc, #180]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	4926      	ldr	r1, [pc, #152]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	491e      	ldr	r1, [pc, #120]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800331a:	4313      	orrs	r3, r2
 800331c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003330:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003334:	6113      	str	r3, [r2, #16]
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003340:	4914      	ldr	r1, [pc, #80]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003342:	4313      	orrs	r3, r2
 8003344:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	da08      	bge.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800335c:	4313      	orrs	r3, r2
 800335e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	4906      	ldr	r1, [pc, #24]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800337c:	4313      	orrs	r3, r2
 800337e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003380:	7dbb      	ldrb	r3, [r7, #22]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	58024400 	.word	0x58024400

08003398 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033a6:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d101      	bne.n	80033b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e099      	b.n	80034ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a4e      	ldr	r2, [pc, #312]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80033bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c2:	f7fd fb09 	bl	80009d8 <HAL_GetTick>
 80033c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033c8:	e008      	b.n	80033dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80033ca:	f7fd fb05 	bl	80009d8 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e086      	b.n	80034ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80033dc:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	493f      	ldr	r1, [pc, #252]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	628b      	str	r3, [r1, #40]	; 0x28
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	3b01      	subs	r3, #1
 8003402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	3b01      	subs	r3, #1
 800340c:	025b      	lsls	r3, r3, #9
 800340e:	b29b      	uxth	r3, r3
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	3b01      	subs	r3, #1
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800342c:	4931      	ldr	r1, [pc, #196]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	492d      	ldr	r1, [pc, #180]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003440:	4313      	orrs	r3, r2
 8003442:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003444:	4b2b      	ldr	r3, [pc, #172]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f023 0220 	bic.w	r2, r3, #32
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4928      	ldr	r1, [pc, #160]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003452:	4313      	orrs	r3, r2
 8003454:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003456:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 800345c:	f023 0310 	bic.w	r3, r3, #16
 8003460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <RCCEx_PLL2_Config+0x160>)
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	69d2      	ldr	r2, [r2, #28]
 800346e:	00d2      	lsls	r2, r2, #3
 8003470:	4920      	ldr	r1, [pc, #128]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003472:	4313      	orrs	r3, r2
 8003474:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003476:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 8003478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003488:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a19      	ldr	r2, [pc, #100]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 800348e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003492:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003494:	e00f      	b.n	80034b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d106      	bne.n	80034aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800349c:	4b15      	ldr	r3, [pc, #84]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034a8:	e005      	b.n	80034b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ae:	4a11      	ldr	r2, [pc, #68]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80034b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80034b6:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80034bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c2:	f7fd fa89 	bl	80009d8 <HAL_GetTick>
 80034c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034c8:	e008      	b.n	80034dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80034ca:	f7fd fa85 	bl	80009d8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e006      	b.n	80034ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <RCCEx_PLL2_Config+0x15c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f0      	beq.n	80034ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	58024400 	.word	0x58024400
 80034f8:	ffff0007 	.word	0xffff0007

080034fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800350a:	4b53      	ldr	r3, [pc, #332]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b03      	cmp	r3, #3
 8003514:	d101      	bne.n	800351a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e099      	b.n	800364e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800351a:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4e      	ldr	r2, [pc, #312]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003526:	f7fd fa57 	bl	80009d8 <HAL_GetTick>
 800352a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800352c:	e008      	b.n	8003540 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800352e:	f7fd fa53 	bl	80009d8 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e086      	b.n	800364e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003540:	4b45      	ldr	r3, [pc, #276]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1f0      	bne.n	800352e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800354c:	4b42      	ldr	r3, [pc, #264]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	051b      	lsls	r3, r3, #20
 800355a:	493f      	ldr	r1, [pc, #252]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 800355c:	4313      	orrs	r3, r2
 800355e:	628b      	str	r3, [r1, #40]	; 0x28
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	3b01      	subs	r3, #1
 8003566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	3b01      	subs	r3, #1
 8003570:	025b      	lsls	r3, r3, #9
 8003572:	b29b      	uxth	r3, r3
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	3b01      	subs	r3, #1
 800357c:	041b      	lsls	r3, r3, #16
 800357e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	3b01      	subs	r3, #1
 800358a:	061b      	lsls	r3, r3, #24
 800358c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003590:	4931      	ldr	r1, [pc, #196]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003592:	4313      	orrs	r3, r2
 8003594:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	492d      	ldr	r1, [pc, #180]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80035a8:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	4928      	ldr	r1, [pc, #160]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80035ba:	4b27      	ldr	r3, [pc, #156]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	4a26      	ldr	r2, [pc, #152]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80035c6:	4b24      	ldr	r3, [pc, #144]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <RCCEx_PLL3_Config+0x160>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	69d2      	ldr	r2, [r2, #28]
 80035d2:	00d2      	lsls	r2, r2, #3
 80035d4:	4920      	ldr	r1, [pc, #128]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80035da:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a1e      	ldr	r2, [pc, #120]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d106      	bne.n	80035fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 80035f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035f8:	e00f      	b.n	800361a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d106      	bne.n	800360e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	4a14      	ldr	r2, [pc, #80]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003606:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800360a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800360c:	e005      	b.n	800361a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	4a11      	ldr	r2, [pc, #68]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003614:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003618:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd f9d7 	bl	80009d8 <HAL_GetTick>
 800362a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800362c:	e008      	b.n	8003640 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800362e:	f7fd f9d3 	bl	80009d8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e006      	b.n	800364e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <RCCEx_PLL3_Config+0x15c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	58024400 	.word	0x58024400
 800365c:	ffff0007 	.word	0xffff0007

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	4d0d      	ldr	r5, [pc, #52]	; (8003698 <__libc_init_array+0x38>)
 8003664:	4c0d      	ldr	r4, [pc, #52]	; (800369c <__libc_init_array+0x3c>)
 8003666:	1b64      	subs	r4, r4, r5
 8003668:	10a4      	asrs	r4, r4, #2
 800366a:	2600      	movs	r6, #0
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	4d0b      	ldr	r5, [pc, #44]	; (80036a0 <__libc_init_array+0x40>)
 8003672:	4c0c      	ldr	r4, [pc, #48]	; (80036a4 <__libc_init_array+0x44>)
 8003674:	f000 f82e 	bl	80036d4 <_init>
 8003678:	1b64      	subs	r4, r4, r5
 800367a:	10a4      	asrs	r4, r4, #2
 800367c:	2600      	movs	r6, #0
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	08003748 	.word	0x08003748
 800369c:	08003748 	.word	0x08003748
 80036a0:	08003748 	.word	0x08003748
 80036a4:	0800374c 	.word	0x0800374c

080036a8 <memcpy>:
 80036a8:	440a      	add	r2, r1
 80036aa:	4291      	cmp	r1, r2
 80036ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80036b0:	d100      	bne.n	80036b4 <memcpy+0xc>
 80036b2:	4770      	bx	lr
 80036b4:	b510      	push	{r4, lr}
 80036b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036be:	4291      	cmp	r1, r2
 80036c0:	d1f9      	bne.n	80036b6 <memcpy+0xe>
 80036c2:	bd10      	pop	{r4, pc}

080036c4 <memset>:
 80036c4:	4402      	add	r2, r0
 80036c6:	4603      	mov	r3, r0
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d100      	bne.n	80036ce <memset+0xa>
 80036cc:	4770      	bx	lr
 80036ce:	f803 1b01 	strb.w	r1, [r3], #1
 80036d2:	e7f9      	b.n	80036c8 <memset+0x4>

080036d4 <_init>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr

080036e0 <_fini>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	bf00      	nop
 80036e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e6:	bc08      	pop	{r3}
 80036e8:	469e      	mov	lr, r3
 80036ea:	4770      	bx	lr
