
CubeIDE_I2C_CLCD5.Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000070  08003024  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08003024  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086fd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184d  00000000  00000000  00028796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00029fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172fb  00000000  00000000  0002ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e13  00000000  00000000  00042173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082f9a  00000000  00000000  0004bf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cef20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000219c  00000000  00000000  000cef74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f1c 	.word	0x08002f1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f1c 	.word	0x08002f1c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	; (80001fc <MX_I2C1_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	; (8000200 <MX_I2C1_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e6:	f000 fe57 	bl	8000e98 <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 faa3 	bl	800073a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	40005400 	.word	0x40005400
 8000200:	000186a0 	.word	0x000186a0

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a15      	ldr	r2, [pc, #84]	; (8000274 <HAL_I2C_MspInit+0x70>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d123      	bne.n	800026c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <HAL_I2C_MspInit+0x74>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800023c:	23c0      	movs	r3, #192	; 0xc0
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000240:	2312      	movs	r3, #18
 8000242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000244:	2303      	movs	r3, #3
 8000246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	480b      	ldr	r0, [pc, #44]	; (800027c <HAL_I2C_MspInit+0x78>)
 8000250:	f000 fc9e 	bl	8000b90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_I2C_MspInit+0x74>)
 800025a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800025e:	61d3      	str	r3, [r2, #28]
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40005400 	.word	0x40005400
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <i2cLcd_SendByte>:

#include "main.h"
#include "i2c_lcd.h"

// Send byte or nibble to LCD module via PCF8574
uint8_t i2cLcd_SendByte(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t data, uint8_t opts){
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af02      	add	r7, sp, #8
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	460b      	mov	r3, r1
 800028a:	70fb      	strb	r3, [r7, #3]
 800028c:	4613      	mov	r3, r2
 800028e:	70bb      	strb	r3, [r7, #2]
	uint8_t i2c_frame_size;
	uint8_t n;
	uint8_t lcd_opts;

	// Select between command/data frame
	cmd = opts & I2CLCD_OPTS_RS;
 8000290:	78bb      	ldrb	r3, [r7, #2]
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	753b      	strb	r3, [r7, #20]

	// Toggle between waiting 1ms or poll Busy Flag
	wait_bf = opts & I2CLCD_OPTS_WAIT_BF;
 8000298:	78bb      	ldrb	r3, [r7, #2]
 800029a:	f003 0308 	and.w	r3, r3, #8
 800029e:	74fb      	strb	r3, [r7, #19]

	// Frame size for I2C communication.
	if (opts & I2CLCD_OPTS_4B) {
 80002a0:	78bb      	ldrb	r3, [r7, #2]
 80002a2:	f003 0302 	and.w	r3, r3, #2
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d002      	beq.n	80002b0 <i2cLcd_SendByte+0x30>
		i2c_frame_size = 2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	75bb      	strb	r3, [r7, #22]
 80002ae:	e001      	b.n	80002b4 <i2cLcd_SendByte+0x34>
	}
	else {
		i2c_frame_size = 4;
 80002b0:	2304      	movs	r3, #4
 80002b2:	75bb      	strb	r3, [r7, #22]
	}

	// Add final all 1s on the 4 data bits to be able to read BusyFlag after a transaction
	i2c_frame_size += wait_bf;
 80002b4:	7dba      	ldrb	r2, [r7, #22]
 80002b6:	7cfb      	ldrb	r3, [r7, #19]
 80002b8:	4413      	add	r3, r2
 80002ba:	75bb      	strb	r3, [r7, #22]

	lcd_opts = (I2CLCD_RS & cmd) | (I2CLCD_BL & h_i2cLcd->blacklight) | (I2CLCD_E);
 80002bc:	7d3b      	ldrb	r3, [r7, #20]
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	7adb      	ldrb	r3, [r3, #11]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	4313      	orrs	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	74bb      	strb	r3, [r7, #18]

	i2c_frame_data[0] = (data & 0xF0) | lcd_opts;
 80002d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80002dc:	f023 030f 	bic.w	r3, r3, #15
 80002e0:	b25a      	sxtb	r2, r3
 80002e2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	b25b      	sxtb	r3, r3
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	733b      	strb	r3, [r7, #12]
	i2c_frame_data[1] = i2c_frame_data[0] & (~I2CLCD_E);
 80002ee:	7b3b      	ldrb	r3, [r7, #12]
 80002f0:	f023 0304 	bic.w	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	737b      	strb	r3, [r7, #13]

	i2c_frame_data[2] = ((data << 4) & 0xF0) | lcd_opts;
 80002f8:	78fb      	ldrb	r3, [r7, #3]
 80002fa:	011b      	lsls	r3, r3, #4
 80002fc:	b25a      	sxtb	r2, r3
 80002fe:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000302:	4313      	orrs	r3, r2
 8000304:	b25b      	sxtb	r3, r3
 8000306:	b2db      	uxtb	r3, r3
 8000308:	73bb      	strb	r3, [r7, #14]
	i2c_frame_data[3] = i2c_frame_data[2] & (~I2CLCD_E);
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	f023 0304 	bic.w	r3, r3, #4
 8000310:	b2db      	uxtb	r3, r3
 8000312:	73fb      	strb	r3, [r7, #15]

	// Preferably remove this
	if(wait_bf)
 8000314:	7cfb      	ldrb	r3, [r7, #19]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d010      	beq.n	800033c <i2cLcd_SendByte+0xbc>
		i2c_frame_data[i2c_frame_size-1] = i2c_frame_data[i2c_frame_size-2] | 0x80;
 800031a:	7dbb      	ldrb	r3, [r7, #22]
 800031c:	3b02      	subs	r3, #2
 800031e:	f107 0218 	add.w	r2, r7, #24
 8000322:	4413      	add	r3, r2
 8000324:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000328:	7dbb      	ldrb	r3, [r7, #22]
 800032a:	3b01      	subs	r3, #1
 800032c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	f107 0118 	add.w	r1, r7, #24
 8000336:	440b      	add	r3, r1
 8000338:	f803 2c0c 	strb.w	r2, [r3, #-12]

	// HAL transmits i2c_frame_data[0],[1], ... , i2c_frame_data[i2c_frame_size-1]
	hal_stat = i2cLcd_I2cWrite(h_i2cLcd, i2c_frame_data, i2c_frame_size);
 800033c:	7dba      	ldrb	r2, [r7, #22]
 800033e:	f107 030c 	add.w	r3, r7, #12
 8000342:	4619      	mov	r1, r3
 8000344:	6878      	ldr	r0, [r7, #4]
 8000346:	f000 f915 	bl	8000574 <i2cLcd_I2cWrite>
 800034a:	4603      	mov	r3, r0
 800034c:	75fb      	strb	r3, [r7, #23]

	//i2cLcd_WaitBusyFlag();
	if (wait_bf) {
 800034e:	7cfb      	ldrb	r3, [r7, #19]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d01d      	beq.n	8000390 <i2cLcd_SendByte+0x110>
		n = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	757b      	strb	r3, [r7, #21]
		do {
			hal_stat |= HAL_I2C_Master_Receive(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, i2c_frame_data,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	b299      	uxth	r1, r3
 8000362:	f107 020c 	add.w	r2, r7, #12
 8000366:	230a      	movs	r3, #10
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2301      	movs	r3, #1
 800036c:	f000 ffd6 	bl	800131c <HAL_I2C_Master_Receive>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	7dfb      	ldrb	r3, [r7, #23]
 8000376:	4313      	orrs	r3, r2
 8000378:	75fb      	strb	r3, [r7, #23]
										1, 10);
			n++;
 800037a:	7d7b      	ldrb	r3, [r7, #21]
 800037c:	3301      	adds	r3, #1
 800037e:	757b      	strb	r3, [r7, #21]
		} while ( (n < I2CLCD_MAX_BF_POLLS) && (i2c_frame_data[0] & 0x80) );
 8000380:	7d7b      	ldrb	r3, [r7, #21]
 8000382:	2b7e      	cmp	r3, #126	; 0x7e
 8000384:	d807      	bhi.n	8000396 <i2cLcd_SendByte+0x116>
 8000386:	7b3b      	ldrb	r3, [r7, #12]
 8000388:	b25b      	sxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	dbe4      	blt.n	8000358 <i2cLcd_SendByte+0xd8>
 800038e:	e002      	b.n	8000396 <i2cLcd_SendByte+0x116>
	}
	else {
		i2cLcd_Delay_ms(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f000 f907 	bl	80005a4 <i2cLcd_Delay_ms>
	}

	return (uint8_t) hal_stat;
 8000396:	7dfb      	ldrb	r3, [r7, #23]

}
 8000398:	4618      	mov	r0, r3
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <i2cLcd_SendChar>:
	return (uint8_t) hal_stat;
}



uint8_t i2cLcd_SendChar(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t chr){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, chr, I2CLCD_OPTS_DATA);
 80003ac:	78fb      	ldrb	r3, [r7, #3]
 80003ae:	2201      	movs	r2, #1
 80003b0:	4619      	mov	r1, r3
 80003b2:	6878      	ldr	r0, [r7, #4]
 80003b4:	f7ff ff64 	bl	8000280 <i2cLcd_SendByte>
 80003b8:	4603      	mov	r3, r0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <i2cLcd_SendCmd>:

uint8_t i2cLcd_SendCmd(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t args){
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	460b      	mov	r3, r1
 80003cc:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, args, I2CLCD_OPTS_COMMAND | I2CLCD_OPTS_NOINIT );
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff53 	bl	8000280 <i2cLcd_SendByte>
 80003da:	4603      	mov	r3, r0
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <i2cLcd_SendCmd_4b>:

uint8_t i2cLcd_SendCmd_4b(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t args){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	460b      	mov	r3, r1
 80003ee:	70fb      	strb	r3, [r7, #3]

	return i2cLcd_SendByte(h_i2cLcd, args, I2CLCD_OPTS_INIT );
 80003f0:	78fb      	ldrb	r3, [r7, #3]
 80003f2:	2202      	movs	r2, #2
 80003f4:	4619      	mov	r1, r3
 80003f6:	6878      	ldr	r0, [r7, #4]
 80003f8:	f7ff ff42 	bl	8000280 <i2cLcd_SendByte>
 80003fc:	4603      	mov	r3, r0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <i2cLcd_Init>:
	return i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->diplay_ctrl );
}



uint8_t i2cLcd_Init(i2cLcd_HandleTypeDef * h_i2cLcd){
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
	uint8_t ret;
	ret = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_8B;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2230      	movs	r2, #48	; 0x30
 8000416:	721a      	strb	r2, [r3, #8]
	h_i2cLcd->blacklight = I2CLCD_BL;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2208      	movs	r2, #8
 800041c:	72da      	strb	r2, [r3, #11]
	h_i2cLcd->entry_mode_set = MODE_SET ;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2204      	movs	r2, #4
 8000422:	715a      	strb	r2, [r3, #5]
	h_i2cLcd->cursor_display_shift = CD_SHIFT;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2210      	movs	r2, #16
 8000428:	71da      	strb	r2, [r3, #7]

	// As per HD44780, if reset timing cannot be generated, initilization should be a sequence
	// of 0x3 writes with specific delays afterwards

	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7a1b      	ldrb	r3, [r3, #8]
 800042e:	4619      	mov	r1, r3
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f7ff ffd7 	bl	80003e4 <i2cLcd_SendCmd_4b>
 8000436:	4603      	mov	r3, r0
 8000438:	461a      	mov	r2, r3
 800043a:	7bfb      	ldrb	r3, [r7, #15]
 800043c:	4313      	orrs	r3, r2
 800043e:	73fb      	strb	r3, [r7, #15]
	i2cLcd_Delay_ms(4);
 8000440:	2004      	movs	r0, #4
 8000442:	f000 f8af 	bl	80005a4 <i2cLcd_Delay_ms>
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	7a1b      	ldrb	r3, [r3, #8]
 800044a:	4619      	mov	r1, r3
 800044c:	6878      	ldr	r0, [r7, #4]
 800044e:	f7ff ffc9 	bl	80003e4 <i2cLcd_SendCmd_4b>
 8000452:	4603      	mov	r3, r0
 8000454:	461a      	mov	r2, r3
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	4313      	orrs	r3, r2
 800045a:	73fb      	strb	r3, [r7, #15]
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	7a1b      	ldrb	r3, [r3, #8]
 8000460:	4619      	mov	r1, r3
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ffbe 	bl	80003e4 <i2cLcd_SendCmd_4b>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	4313      	orrs	r3, r2
 8000470:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_4B;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	2220      	movs	r2, #32
 8000476:	721a      	strb	r2, [r3, #8]
	ret |= i2cLcd_SendCmd_4b(h_i2cLcd, h_i2cLcd->function_set);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a1b      	ldrb	r3, [r3, #8]
 800047c:	4619      	mov	r1, r3
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff ffb0 	bl	80003e4 <i2cLcd_SendCmd_4b>
 8000484:	4603      	mov	r3, r0
 8000486:	461a      	mov	r2, r3
 8000488:	7bfb      	ldrb	r3, [r7, #15]
 800048a:	4313      	orrs	r3, r2
 800048c:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->function_set = FUNC_SET | FUNC_SET_DLEN_4B | FUNC_SET_LINES_2 | FUNC_SET_FO_5X8;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2228      	movs	r2, #40	; 0x28
 8000492:	721a      	strb	r2, [r3, #8]
	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->function_set);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	7a1b      	ldrb	r3, [r3, #8]
 8000498:	4619      	mov	r1, r3
 800049a:	6878      	ldr	r0, [r7, #4]
 800049c:	f7ff ff91 	bl	80003c2 <i2cLcd_SendCmd>
 80004a0:	4603      	mov	r3, r0
 80004a2:	461a      	mov	r2, r3
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	73fb      	strb	r3, [r7, #15]

	h_i2cLcd->diplay_ctrl = DISP_CTRL | DISP_CTRL_CURSOR_ON | DISP_CTRL_BLINK_ON | DISP_CTRL_DISPLAY_ON;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	220f      	movs	r2, #15
 80004ae:	719a      	strb	r2, [r3, #6]
	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->diplay_ctrl);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	799b      	ldrb	r3, [r3, #6]
 80004b4:	4619      	mov	r1, r3
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff ff83 	bl	80003c2 <i2cLcd_SendCmd>
 80004bc:	4603      	mov	r3, r0
 80004be:	461a      	mov	r2, r3
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	73fb      	strb	r3, [r7, #15]

	ret |= i2cLcd_SendCmd(h_i2cLcd, h_i2cLcd->entry_mode_set);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	4619      	mov	r1, r3
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff78 	bl	80003c2 <i2cLcd_SendCmd>
 80004d2:	4603      	mov	r3, r0
 80004d4:	461a      	mov	r2, r3
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	4313      	orrs	r3, r2
 80004da:	73fb      	strb	r3, [r7, #15]

	i2cLcd_ClearDisplay(h_i2cLcd);
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f808 	bl	80004f2 <i2cLcd_ClearDisplay>

	i2cLcd_Delay_ms(5);
 80004e2:	2005      	movs	r0, #5
 80004e4:	f000 f85e 	bl	80005a4 <i2cLcd_Delay_ms>
	return ret;
 80004e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3710      	adds	r7, #16
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <i2cLcd_ClearDisplay>:



uint8_t i2cLcd_ClearDisplay(i2cLcd_HandleTypeDef * h_i2cLcd){
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b082      	sub	sp, #8
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	6078      	str	r0, [r7, #4]

	//return i2cLcd_SendByte(h_i2cLcd, CLR_DISPLAY, 0);
	return i2cLcd_SendCmd(h_i2cLcd, CLR_DISPLAY);
 80004fa:	2101      	movs	r1, #1
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff60 	bl	80003c2 <i2cLcd_SendCmd>
 8000502:	4603      	mov	r3, r0
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <i2cLcd_SetCursorPosition>:
uint8_t i2cLcd_ReturnHome(i2cLcd_HandleTypeDef * h_i2cLcd){
	return i2cLcd_SendCmd(h_i2cLcd, RET_HOME );
}


uint8_t i2cLcd_SetCursorPosition(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t pos){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
	return i2cLcd_SendByte(h_i2cLcd, DDRAM_ADDR | pos, I2CLCD_OPTS_NOINIT);
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800051e:	b2db      	uxtb	r3, r3
 8000520:	2200      	movs	r2, #0
 8000522:	4619      	mov	r1, r3
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff feab 	bl	8000280 <i2cLcd_SendByte>
 800052a:	4603      	mov	r3, r0
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <i2cLcd_CreateHandle>:
	hal_stat = i2cLcd_ReadByte(h_i2cLcd, pos );
	*pos = *pos & 0x7F;
	return hal_stat;
}

uint8_t i2cLcd_CreateHandle(i2cLcd_HandleTypeDef *h_i2cLcd, I2C_HandleTypeDef *h_i2c, uint8_t i2c_slave_addr){
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	4613      	mov	r3, r2
 8000540:	71fb      	strb	r3, [r7, #7]

	uint8_t init_state;
	init_state = 0x00; // all inputs of PCF
 8000542:	2300      	movs	r3, #0
 8000544:	75fb      	strb	r3, [r7, #23]
	// Bind I2C HAL handler
	if (h_i2c == NULL)
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <i2cLcd_CreateHandle+0x1c>
		return -1;
 800054c:	23ff      	movs	r3, #255	; 0xff
 800054e:	e00d      	b.n	800056c <i2cLcd_CreateHandle+0x38>

	h_i2cLcd->hi2c = h_i2c;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	601a      	str	r2, [r3, #0]

	// Set slave address
	h_i2cLcd->i2c_addr = i2c_slave_addr;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	79fa      	ldrb	r2, [r7, #7]
 800055a:	711a      	strb	r2, [r3, #4]

	//return HAL_I2C_Master_Transmit(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, &init_state, 1, 10);
	return i2cLcd_I2cWrite(h_i2cLcd, &init_state, 1);
 800055c:	f107 0317 	add.w	r3, r7, #23
 8000560:	2201      	movs	r2, #1
 8000562:	4619      	mov	r1, r3
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f000 f805 	bl	8000574 <i2cLcd_I2cWrite>
 800056a:	4603      	mov	r3, r0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <i2cLcd_I2cWrite>:


// Low level function wrappers
// Can be

uint8_t i2cLcd_I2cWrite(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data, uint8_t len){
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af02      	add	r7, sp, #8
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	4613      	mov	r3, r2
 8000580:	71fb      	strb	r3, [r7, #7]

	return HAL_I2C_Master_Transmit(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, data, len, 10);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	791b      	ldrb	r3, [r3, #4]
 800058a:	b299      	uxth	r1, r3
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	b29b      	uxth	r3, r3
 8000590:	220a      	movs	r2, #10
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	68ba      	ldr	r2, [r7, #8]
 8000596:	f000 fdc3 	bl	8001120 <HAL_I2C_Master_Transmit>
 800059a:	4603      	mov	r3, r0
}
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <i2cLcd_Delay_ms>:
uint8_t i2cLcd_I2cRead(i2cLcd_HandleTypeDef * h_i2cLcd, uint8_t * data, uint8_t len){

	return HAL_I2C_Master_Receive(h_i2cLcd->hi2c, h_i2cLcd->i2c_addr, data, len, 10);
}

uint8_t i2cLcd_Delay_ms(uint32_t delay_ms){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	// Change the delay function call if HAL_ is not available
	HAL_Delay(delay_ms);
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f9e7 	bl	8000980 <HAL_Delay>
	return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i2c_lcd_addr = (I2C_LCD_ADDRESS<<1);
 80005c2:	237e      	movs	r3, #126	; 0x7e
 80005c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 f978 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f870 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f7ff fdbc 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005d4:	f7ff fde8 	bl	80001a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  i2cLcd_CreateHandle(&h_lcd, &hi2c1, i2c_lcd_addr);
 80005d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005dc:	461a      	mov	r2, r3
 80005de:	4930      	ldr	r1, [pc, #192]	; (80006a0 <main+0xe4>)
 80005e0:	4830      	ldr	r0, [pc, #192]	; (80006a4 <main+0xe8>)
 80005e2:	f7ff ffa7 	bl	8000534 <i2cLcd_CreateHandle>
  i2cLcd_Init(&h_lcd);
 80005e6:	482f      	ldr	r0, [pc, #188]	; (80006a4 <main+0xe8>)
 80005e8:	f7ff ff0d 	bl	8000406 <i2cLcd_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  i=0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  i2cLcd_ClearDisplay(&h_lcd);
 80005f2:	482c      	ldr	r0, [pc, #176]	; (80006a4 <main+0xe8>)
 80005f4:	f7ff ff7d 	bl	80004f2 <i2cLcd_ClearDisplay>
	  HAL_Delay(20);
 80005f8:	2014      	movs	r0, #20
 80005fa:	f000 f9c1 	bl	8000980 <HAL_Delay>
	  sprintf(strData,"STM32F103");
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	4929      	ldr	r1, [pc, #164]	; (80006a8 <main+0xec>)
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f850 	bl	80026a8 <siprintf>
	  while(strData[i])
 8000608:	e012      	b.n	8000630 <main+0x74>
	  {
	  i2cLcd_SendChar(&h_lcd, strData[i]);
 800060a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800060e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000612:	4413      	add	r3, r2
 8000614:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000618:	4619      	mov	r1, r3
 800061a:	4822      	ldr	r0, [pc, #136]	; (80006a4 <main+0xe8>)
 800061c:	f7ff fec0 	bl	80003a0 <i2cLcd_SendChar>
	  HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f000 f9ad 	bl	8000980 <HAL_Delay>
	  i++;
 8000626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800062a:	3301      	adds	r3, #1
 800062c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  while(strData[i])
 8000630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000634:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000638:	4413      	add	r3, r2
 800063a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1e3      	bne.n	800060a <main+0x4e>
	  }
	  i2cLcd_SetCursorPosition(&h_lcd, 0x40);
 8000642:	2140      	movs	r1, #64	; 0x40
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <main+0xe8>)
 8000646:	f7ff ff61 	bl	800050c <i2cLcd_SetCursorPosition>
	  i=0;
 800064a:	2300      	movs	r3, #0
 800064c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  sprintf(strData,"I2C LCD Test. ");
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4916      	ldr	r1, [pc, #88]	; (80006ac <main+0xf0>)
 8000654:	4618      	mov	r0, r3
 8000656:	f002 f827 	bl	80026a8 <siprintf>
	  while(strData[i])
 800065a:	e012      	b.n	8000682 <main+0xc6>
	  {
	  i2cLcd_SendChar(&h_lcd, strData[i]);
 800065c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000660:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000664:	4413      	add	r3, r2
 8000666:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800066a:	4619      	mov	r1, r3
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <main+0xe8>)
 800066e:	f7ff fe97 	bl	80003a0 <i2cLcd_SendChar>
	  HAL_Delay(100);
 8000672:	2064      	movs	r0, #100	; 0x64
 8000674:	f000 f984 	bl	8000980 <HAL_Delay>
	  i++;
 8000678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800067c:	3301      	adds	r3, #1
 800067e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  while(strData[i])
 8000682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000686:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800068a:	4413      	add	r3, r2
 800068c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1e3      	bne.n	800065c <main+0xa0>
	  }

	  HAL_Delay(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f000 f972 	bl	8000980 <HAL_Delay>
	  i=0;
 800069c:	e7a6      	b.n	80005ec <main+0x30>
 800069e:	bf00      	nop
 80006a0:	20000098 	.word	0x20000098
 80006a4:	200000ec 	.word	0x200000ec
 80006a8:	08002f34 	.word	0x08002f34
 80006ac:	08002f40 	.word	0x08002f40

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b090      	sub	sp, #64	; 0x40
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0318 	add.w	r3, r7, #24
 80006ba:	2228      	movs	r2, #40	; 0x28
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ffea 	bl	8002698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fb9b 	bl	8001e34 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000704:	f000 f819 	bl	800073a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070c:	2302      	movs	r3, #2
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2102      	movs	r1, #2
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fe06 	bl	8002334 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800072e:	f000 f804 	bl	800073a <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3740      	adds	r7, #64	; 0x40
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073e:	b672      	cpsid	i
}
 8000740:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000742:	e7fe      	b.n	8000742 <Error_Handler+0x8>

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <HAL_MspInit+0x5c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6193      	str	r3, [r2, #24]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x5c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x60>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x60>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 f8ab 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f001 ff0c 	bl	8002644 <__errno>
 800082c:	4603      	mov	r3, r0
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20005000 	.word	0x20005000
 8000858:	00000400 	.word	0x00000400
 800085c:	2000008c 	.word	0x2000008c
 8000860:	20000110 	.word	0x20000110

08000864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	; (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000896:	f7ff ffe5 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f001 fed9 	bl	8002650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff fe8d 	bl	80005bc <main>
  bx lr
 80008a2:	4770      	bx	lr
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008ac:	08002fb4 	.word	0x08002fb4
  ldr r2, =_sbss
 80008b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008b4:	2000010c 	.word	0x2000010c

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f92b 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff ff34 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f935 	bl	8000b76 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f90b 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000008 	.word	0x20000008
 8000968:	200000f8 	.word	0x200000f8

0800096c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	200000f8 	.word	0x200000f8

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff49 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e169      	b.n	8000e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8158 	bne.w	8000e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a9a      	ldr	r2, [pc, #616]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d05e      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d875      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bd2:	4a98      	ldr	r2, [pc, #608]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d058      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bd8:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d86f      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bde:	4a96      	ldr	r2, [pc, #600]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d052      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000be4:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d869      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bea:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d04c      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d863      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bf6:	4a92      	ldr	r2, [pc, #584]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d046      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d85d      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d82a      	bhi.n	8000c5c <HAL_GPIO_Init+0xcc>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d859      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_Init+0x80>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cbf 	.word	0x08000cbf
 8000c24:	08000cbf 	.word	0x08000cbf
 8000c28:	08000cbf 	.word	0x08000cbf
 8000c2c:	08000cbf 	.word	0x08000cbf
 8000c30:	08000cbf 	.word	0x08000cbf
 8000c34:	08000cbf 	.word	0x08000cbf
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000cbf 	.word	0x08000cbf
 8000c40:	08000cbf 	.word	0x08000cbf
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000cbf 	.word	0x08000cbf
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	4a79      	ldr	r2, [pc, #484]	; (8000e44 <HAL_GPIO_Init+0x2b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e02c      	b.n	8000cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e029      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e024      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e01f      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e01a      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e013      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	611a      	str	r2, [r3, #16]
          break;
 8000caa:	e009      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	615a      	str	r2, [r3, #20]
          break;
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          break;
 8000cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d801      	bhi.n	8000cca <HAL_GPIO_Init+0x13a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e001      	b.n	8000cce <HAL_GPIO_Init+0x13e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d802      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	210f      	movs	r1, #15
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	6a39      	ldr	r1, [r7, #32]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_GPIO_Init+0x2c0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_GPIO_Init+0x2c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e004      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491e      	ldr	r1, [pc, #120]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d021      	beq.n	8000e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	490e      	ldr	r1, [pc, #56]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x2e2>
 8000e2e:	bf00      	nop
 8000e30:	10320000 	.word	0x10320000
 8000e34:	10310000 	.word	0x10310000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae8e 	bne.w	8000ba4 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	372c      	adds	r7, #44	; 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e12b      	b.n	8001102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff f9a0 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2224      	movs	r2, #36	; 0x24
 8000ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000efc:	f001 fb70 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8000f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4a81      	ldr	r2, [pc, #516]	; (800110c <HAL_I2C_Init+0x274>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d807      	bhi.n	8000f1c <HAL_I2C_Init+0x84>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4a80      	ldr	r2, [pc, #512]	; (8001110 <HAL_I2C_Init+0x278>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	bf94      	ite	ls
 8000f14:	2301      	movls	r3, #1
 8000f16:	2300      	movhi	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	e006      	b.n	8000f2a <HAL_I2C_Init+0x92>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4a7d      	ldr	r2, [pc, #500]	; (8001114 <HAL_I2C_Init+0x27c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bf94      	ite	ls
 8000f24:	2301      	movls	r3, #1
 8000f26:	2300      	movhi	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e0e7      	b.n	8001102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4a78      	ldr	r2, [pc, #480]	; (8001118 <HAL_I2C_Init+0x280>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0c9b      	lsrs	r3, r3, #18
 8000f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a6a      	ldr	r2, [pc, #424]	; (800110c <HAL_I2C_Init+0x274>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d802      	bhi.n	8000f6c <HAL_I2C_Init+0xd4>
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	e009      	b.n	8000f80 <HAL_I2C_Init+0xe8>
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a69      	ldr	r2, [pc, #420]	; (800111c <HAL_I2C_Init+0x284>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	099b      	lsrs	r3, r3, #6
 8000f7e:	3301      	adds	r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	495c      	ldr	r1, [pc, #368]	; (800110c <HAL_I2C_Init+0x274>)
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d819      	bhi.n	8000fd4 <HAL_I2C_Init+0x13c>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	1e59      	subs	r1, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fae:	1c59      	adds	r1, r3, #1
 8000fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00a      	beq.n	8000fd0 <HAL_I2C_Init+0x138>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1e59      	subs	r1, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fce:	e051      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e04f      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d111      	bne.n	8001000 <HAL_I2C_Init+0x168>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1e58      	subs	r0, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	440b      	add	r3, r1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	e012      	b.n	8001026 <HAL_I2C_Init+0x18e>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	1e58      	subs	r0, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6859      	ldr	r1, [r3, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	0099      	lsls	r1, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	fbb0 f3f3 	udiv	r3, r0, r3
 8001016:	3301      	adds	r3, #1
 8001018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_I2C_Init+0x196>
 800102a:	2301      	movs	r3, #1
 800102c:	e022      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10e      	bne.n	8001054 <HAL_I2C_Init+0x1bc>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1e58      	subs	r0, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6859      	ldr	r1, [r3, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	440b      	add	r3, r1
 8001044:	fbb0 f3f3 	udiv	r3, r0, r3
 8001048:	3301      	adds	r3, #1
 800104a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001052:	e00f      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1e58      	subs	r0, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	0099      	lsls	r1, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	fbb0 f3f3 	udiv	r3, r0, r3
 800106a:	3301      	adds	r3, #1
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	6809      	ldr	r1, [r1, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6911      	ldr	r1, [r2, #16]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68d2      	ldr	r2, [r2, #12]
 80010ae:	4311      	orrs	r1, r2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2220      	movs	r2, #32
 80010ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	000186a0 	.word	0x000186a0
 8001110:	001e847f 	.word	0x001e847f
 8001114:	003d08ff 	.word	0x003d08ff
 8001118:	431bde83 	.word	0x431bde83
 800111c:	10624dd3 	.word	0x10624dd3

08001120 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	461a      	mov	r2, r3
 800112c:	460b      	mov	r3, r1
 800112e:	817b      	strh	r3, [r7, #10]
 8001130:	4613      	mov	r3, r2
 8001132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fc1a 	bl	800096c <HAL_GetTick>
 8001138:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b20      	cmp	r3, #32
 8001144:	f040 80e0 	bne.w	8001308 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2319      	movs	r3, #25
 800114e:	2201      	movs	r2, #1
 8001150:	4970      	ldr	r1, [pc, #448]	; (8001314 <HAL_I2C_Master_Transmit+0x1f4>)
 8001152:	68f8      	ldr	r0, [r7, #12]
 8001154:	f000 fc92 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800115e:	2302      	movs	r3, #2
 8001160:	e0d3      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x50>
 800116c:	2302      	movs	r3, #2
 800116e:	e0cc      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b01      	cmp	r3, #1
 8001184:	d007      	beq.n	8001196 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2221      	movs	r2, #33	; 0x21
 80011aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2210      	movs	r2, #16
 80011b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	893a      	ldrh	r2, [r7, #8]
 80011c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4a50      	ldr	r2, [pc, #320]	; (8001318 <HAL_I2C_Master_Transmit+0x1f8>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011d8:	8979      	ldrh	r1, [r7, #10]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	f000 fafc 	bl	80017dc <I2C_MasterRequestWrite>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e08d      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001204:	e066      	b.n	80012d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	6a39      	ldr	r1, [r7, #32]
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 fd0c 	bl	8001c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00d      	beq.n	8001232 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	2b04      	cmp	r3, #4
 800121c:	d107      	bne.n	800122e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800122c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e06b      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	b29a      	uxth	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125a:	3b01      	subs	r3, #1
 800125c:	b29a      	uxth	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b04      	cmp	r3, #4
 800126e:	d11b      	bne.n	80012a8 <HAL_I2C_Master_Transmit+0x188>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001274:	2b00      	cmp	r3, #0
 8001276:	d017      	beq.n	80012a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001292:	b29b      	uxth	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	b29a      	uxth	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6a39      	ldr	r1, [r7, #32]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fcfc 	bl	8001caa <I2C_WaitOnBTFFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00d      	beq.n	80012d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d107      	bne.n	80012d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e01a      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d194      	bne.n	8001206 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2220      	movs	r2, #32
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	e000      	b.n	800130a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001308:	2302      	movs	r3, #2
  }
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	00100002 	.word	0x00100002
 8001318:	ffff0000 	.word	0xffff0000

0800131c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	461a      	mov	r2, r3
 8001328:	460b      	mov	r3, r1
 800132a:	817b      	strh	r3, [r7, #10]
 800132c:	4613      	mov	r3, r2
 800132e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fb1a 	bl	800096c <HAL_GetTick>
 8001338:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b20      	cmp	r3, #32
 8001344:	f040 823f 	bne.w	80017c6 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2319      	movs	r3, #25
 800134e:	2201      	movs	r2, #1
 8001350:	497f      	ldr	r1, [pc, #508]	; (8001550 <HAL_I2C_Master_Receive+0x234>)
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 fb92 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
 8001360:	e232      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_I2C_Master_Receive+0x54>
 800136c:	2302      	movs	r3, #2
 800136e:	e22b      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b01      	cmp	r3, #1
 8001384:	d007      	beq.n	8001396 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0201 	orr.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2222      	movs	r2, #34	; 0x22
 80013aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2210      	movs	r2, #16
 80013b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	893a      	ldrh	r2, [r7, #8]
 80013c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a5f      	ldr	r2, [pc, #380]	; (8001554 <HAL_I2C_Master_Receive+0x238>)
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013d8:	8979      	ldrh	r1, [r7, #10]
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 fa7e 	bl	80018e0 <I2C_MasterRequestRead>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e1ec      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d113      	bne.n	800141e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	e1c0      	b.n	80017a0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001422:	2b01      	cmp	r3, #1
 8001424:	d11e      	bne.n	8001464 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001436:	b672      	cpsid	i
}
 8001438:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800145e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001460:	b662      	cpsie	i
}
 8001462:	e035      	b.n	80014d0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	2b02      	cmp	r3, #2
 800146a:	d11e      	bne.n	80014aa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800147a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014a6:	b662      	cpsie	i
}
 80014a8:	e012      	b.n	80014d0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80014d0:	e166      	b.n	80017a0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	f200 811f 	bhi.w	800171a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d123      	bne.n	800152c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fc1f 	bl	8001d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e167      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	3b01      	subs	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001520:	b29b      	uxth	r3, r3
 8001522:	3b01      	subs	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800152a:	e139      	b.n	80017a0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001530:	2b02      	cmp	r3, #2
 8001532:	d152      	bne.n	80015da <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153a:	2200      	movs	r2, #0
 800153c:	4906      	ldr	r1, [pc, #24]	; (8001558 <HAL_I2C_Master_Receive+0x23c>)
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fa9c 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e13c      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
 800154e:	bf00      	nop
 8001550:	00100002 	.word	0x00100002
 8001554:	ffff0000 	.word	0xffff0000
 8001558:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015a2:	b662      	cpsie	i
}
 80015a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015d8:	e0e2      	b.n	80017a0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e0:	2200      	movs	r2, #0
 80015e2:	497b      	ldr	r1, [pc, #492]	; (80017d0 <HAL_I2C_Master_Receive+0x4b4>)
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 fa49 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0e9      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001602:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	1c5a      	adds	r2, r3, #1
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	b29a      	uxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800163a:	4b66      	ldr	r3, [pc, #408]	; (80017d4 <HAL_I2C_Master_Receive+0x4b8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	4a65      	ldr	r2, [pc, #404]	; (80017d8 <HAL_I2C_Master_Receive+0x4bc>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	0a1a      	lsrs	r2, r3, #8
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00da      	lsls	r2, r3, #3
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	3b01      	subs	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d118      	bne.n	8001692 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f043 0220 	orr.w	r2, r3, #32
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001682:	b662      	cpsie	i
}
 8001684:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e09a      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b04      	cmp	r3, #4
 800169e:	d1d9      	bne.n	8001654 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016e2:	b662      	cpsie	i
}
 80016e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	3b01      	subs	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170e:	b29b      	uxth	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b29a      	uxth	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001718:	e042      	b.n	80017a0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 fb04 	bl	8001d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e04c      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b04      	cmp	r3, #4
 800176c:	d118      	bne.n	80017a0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	3b01      	subs	r3, #1
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001796:	b29b      	uxth	r3, r3
 8001798:	3b01      	subs	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f47f ae94 	bne.w	80014d2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	00010004 	.word	0x00010004
 80017d4:	20000000 	.word	0x20000000
 80017d8:	14f8b589 	.word	0x14f8b589

080017dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	460b      	mov	r3, r1
 80017ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d006      	beq.n	8001806 <I2C_MasterRequestWrite+0x2a>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <I2C_MasterRequestWrite+0x2a>
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001804:	d108      	bne.n	8001818 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e00b      	b.n	8001830 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	2b12      	cmp	r3, #18
 800181e:	d107      	bne.n	8001830 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800182e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f91d 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00d      	beq.n	8001864 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001856:	d103      	bne.n	8001860 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e035      	b.n	80018d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800186c:	d108      	bne.n	8001880 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800186e:	897b      	ldrh	r3, [r7, #10]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800187c:	611a      	str	r2, [r3, #16]
 800187e:	e01b      	b.n	80018b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001880:	897b      	ldrh	r3, [r7, #10]
 8001882:	11db      	asrs	r3, r3, #7
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0306 	and.w	r3, r3, #6
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f063 030f 	orn	r3, r3, #15
 8001890:	b2da      	uxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	490e      	ldr	r1, [pc, #56]	; (80018d8 <I2C_MasterRequestWrite+0xfc>)
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f943 	bl	8001b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e010      	b.n	80018d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80018ae:	897b      	ldrh	r3, [r7, #10]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <I2C_MasterRequestWrite+0x100>)
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 f933 	bl	8001b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	00010008 	.word	0x00010008
 80018dc:	00010002 	.word	0x00010002

080018e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	460b      	mov	r3, r1
 80018ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001904:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d006      	beq.n	800191a <I2C_MasterRequestRead+0x3a>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d003      	beq.n	800191a <I2C_MasterRequestRead+0x3a>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001918:	d108      	bne.n	800192c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e00b      	b.n	8001944 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	2b11      	cmp	r3, #17
 8001932:	d107      	bne.n	8001944 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001942:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f000 f893 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00d      	beq.n	8001978 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800196a:	d103      	bne.n	8001974 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e079      	b.n	8001a6c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001980:	d108      	bne.n	8001994 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001982:	897b      	ldrh	r3, [r7, #10]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	b2da      	uxtb	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	611a      	str	r2, [r3, #16]
 8001992:	e05f      	b.n	8001a54 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001994:	897b      	ldrh	r3, [r7, #10]
 8001996:	11db      	asrs	r3, r3, #7
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0306 	and.w	r3, r3, #6
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f063 030f 	orn	r3, r3, #15
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4930      	ldr	r1, [pc, #192]	; (8001a74 <I2C_MasterRequestRead+0x194>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f8b9 	bl	8001b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e054      	b.n	8001a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4929      	ldr	r1, [pc, #164]	; (8001a78 <I2C_MasterRequestRead+0x198>)
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f8a9 	bl	8001b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e044      	b.n	8001a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a06:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f831 	bl	8001a7c <I2C_WaitOnFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2e:	d103      	bne.n	8001a38 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a36:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e017      	b.n	8001a6c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001a3c:	897b      	ldrh	r3, [r7, #10]
 8001a3e:	11db      	asrs	r3, r3, #7
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 0306 	and.w	r3, r3, #6
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f063 030e 	orn	r3, r3, #14
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	4907      	ldr	r1, [pc, #28]	; (8001a78 <I2C_MasterRequestRead+0x198>)
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 f865 	bl	8001b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	00010008 	.word	0x00010008
 8001a78:	00010002 	.word	0x00010002

08001a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	603b      	str	r3, [r7, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a8c:	e025      	b.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a94:	d021      	beq.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a96:	f7fe ff69 	bl	800096c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d302      	bcc.n	8001aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d116      	bne.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e023      	b.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10d      	bne.n	8001b00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4013      	ands	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	e00c      	b.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d0b6      	beq.n	8001a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b084      	sub	sp, #16
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b38:	e051      	b.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d123      	bne.n	8001b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f043 0204 	orr.w	r2, r3, #4
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e046      	b.n	8001c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d021      	beq.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9a:	f7fe fee7 	bl	800096c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d302      	bcc.n	8001bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d116      	bne.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e020      	b.n	8001c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d10c      	bne.n	8001c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf14      	ite	ne
 8001bfa:	2301      	movne	r3, #1
 8001bfc:	2300      	moveq	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e00b      	b.n	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d18d      	bne.n	8001b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c34:	e02d      	b.n	8001c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 f8ce 	bl	8001dd8 <I2C_IsAcknowledgeFailed>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e02d      	b.n	8001ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4c:	d021      	beq.n	8001c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7fe fe8d 	bl	800096c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d116      	bne.n	8001c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f043 0220 	orr.w	r2, r3, #32
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e007      	b.n	8001ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b80      	cmp	r3, #128	; 0x80
 8001c9e:	d1ca      	bne.n	8001c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cb6:	e02d      	b.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f88d 	bl	8001dd8 <I2C_IsAcknowledgeFailed>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e02d      	b.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d021      	beq.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd0:	f7fe fe4c 	bl	800096c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d302      	bcc.n	8001ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d116      	bne.n	8001d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2220      	movs	r2, #32
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e007      	b.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d1ca      	bne.n	8001cb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d38:	e042      	b.n	8001dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d119      	bne.n	8001d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0210 	mvn.w	r2, #16
 8001d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e029      	b.n	8001dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7fe fdf6 	bl	800096c <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d302      	bcc.n	8001d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d116      	bne.n	8001dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e007      	b.n	8001dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b40      	cmp	r3, #64	; 0x40
 8001dcc:	d1b5      	bne.n	8001d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dee:	d11b      	bne.n	8001e28 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001df8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0204 	orr.w	r2, r3, #4
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e26c      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e54:	4b92      	ldr	r3, [pc, #584]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d00c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e60:	4b8f      	ldr	r3, [pc, #572]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d112      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
 8001e6c:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e78:	d10b      	bne.n	8001e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7a:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d06c      	beq.n	8001f60 <HAL_RCC_OscConfig+0x12c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d168      	bne.n	8001f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e246      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	d106      	bne.n	8001eaa <HAL_RCC_OscConfig+0x76>
 8001e9c:	4b80      	ldr	r3, [pc, #512]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a7f      	ldr	r2, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e02e      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x98>
 8001eb2:	4b7b      	ldr	r3, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7a      	ldr	r2, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b78      	ldr	r3, [pc, #480]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a77      	ldr	r2, [pc, #476]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e01d      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0xbc>
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b6f      	ldr	r3, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a6e      	ldr	r2, [pc, #440]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_OscConfig+0xd4>
 8001ef0:	4b6b      	ldr	r3, [pc, #428]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	4b68      	ldr	r3, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fd2c 	bl	800096c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f18:	f7fe fd28 	bl	800096c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e1fa      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe4>
 8001f36:	e014      	b.n	8001f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fd18 	bl	800096c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7fe fd14 	bl	800096c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1e6      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f52:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x10c>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d063      	beq.n	8002036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00b      	beq.n	8001f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f7a:	4b49      	ldr	r3, [pc, #292]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b08      	cmp	r3, #8
 8001f84:	d11c      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
 8001f86:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d116      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e1ba      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4939      	ldr	r1, [pc, #228]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	e03a      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d020      	beq.n	800200a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_RCC_OscConfig+0x270>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fccd 	bl	800096c <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7fe fcc9 	bl	800096c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e19b      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4927      	ldr	r1, [pc, #156]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <HAL_RCC_OscConfig+0x270>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe fcac 	bl	800096c <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe fca8 	bl	800096c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e17a      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03a      	beq.n	80020b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d019      	beq.n	800207e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <HAL_RCC_OscConfig+0x274>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe fc8c 	bl	800096c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7fe fc88 	bl	800096c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e15a      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 fac6 	bl	8002608 <RCC_Delay>
 800207c:	e01c      	b.n	80020b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_RCC_OscConfig+0x274>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7fe fc72 	bl	800096c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208a:	e00f      	b.n	80020ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe fc6e 	bl	800096c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d908      	bls.n	80020ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e140      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
 800209e:	bf00      	nop
 80020a0:	40021000 	.word	0x40021000
 80020a4:	42420000 	.word	0x42420000
 80020a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	4b9e      	ldr	r3, [pc, #632]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e9      	bne.n	800208c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80a6 	beq.w	8002212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b97      	ldr	r3, [pc, #604]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10d      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b94      	ldr	r3, [pc, #592]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a93      	ldr	r2, [pc, #588]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b91      	ldr	r3, [pc, #580]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b8e      	ldr	r3, [pc, #568]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a8a      	ldr	r2, [pc, #552]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fc2f 	bl	800096c <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe fc2b 	bl	800096c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b64      	cmp	r3, #100	; 0x64
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0fd      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x4f8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x312>
 8002138:	4b7b      	ldr	r3, [pc, #492]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a7a      	ldr	r2, [pc, #488]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	e02d      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x334>
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a75      	ldr	r2, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b73      	ldr	r3, [pc, #460]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a72      	ldr	r2, [pc, #456]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	e01c      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d10c      	bne.n	800218a <HAL_RCC_OscConfig+0x356>
 8002170:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4a6c      	ldr	r2, [pc, #432]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	6213      	str	r3, [r2, #32]
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a69      	ldr	r2, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	e00b      	b.n	80021a2 <HAL_RCC_OscConfig+0x36e>
 800218a:	4b67      	ldr	r3, [pc, #412]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4a66      	ldr	r2, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6213      	str	r3, [r2, #32]
 8002196:	4b64      	ldr	r3, [pc, #400]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a63      	ldr	r2, [pc, #396]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f023 0304 	bic.w	r3, r3, #4
 80021a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe fbdf 	bl	800096c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fbdb 	bl	800096c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0ab      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b57      	ldr	r3, [pc, #348]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCC_OscConfig+0x37e>
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d6:	f7fe fbc9 	bl	800096c <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021dc:	e00a      	b.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021de:	f7fe fbc5 	bl	800096c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e095      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	4b4c      	ldr	r3, [pc, #304]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1ee      	bne.n	80021de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d105      	bne.n	8002212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002206:	4b48      	ldr	r3, [pc, #288]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	4a47      	ldr	r2, [pc, #284]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8081 	beq.w	800231e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221c:	4b42      	ldr	r3, [pc, #264]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d061      	beq.n	80022ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d146      	bne.n	80022be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002230:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_OscConfig+0x4fc>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fb99 	bl	800096c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe fb95 	bl	800096c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e067      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d108      	bne.n	8002278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	492d      	ldr	r1, [pc, #180]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a19      	ldr	r1, [r3, #32]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	430b      	orrs	r3, r1
 800228a:	4927      	ldr	r1, [pc, #156]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002290:	4b27      	ldr	r3, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x4fc>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7fe fb69 	bl	800096c <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7fe fb65 	bl	800096c <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e037      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x46a>
 80022bc:	e02f      	b.n	800231e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCC_OscConfig+0x4fc>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fb52 	bl	800096c <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fb4e 	bl	800096c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e020      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x498>
 80022ea:	e018      	b.n	800231e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e013      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	429a      	cmp	r2, r3
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	40007000 	.word	0x40007000
 8002330:	42420060 	.word	0x42420060

08002334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0d0      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d910      	bls.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4965      	ldr	r1, [pc, #404]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002366:	4b63      	ldr	r3, [pc, #396]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	683a      	ldr	r2, [r7, #0]
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b8      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002390:	4b59      	ldr	r3, [pc, #356]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4a58      	ldr	r2, [pc, #352]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800239a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b4:	4b50      	ldr	r3, [pc, #320]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	494d      	ldr	r1, [pc, #308]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d040      	beq.n	8002454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e07f      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e073      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06b      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4b39      	ldr	r3, [pc, #228]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f023 0203 	bic.w	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4936      	ldr	r1, [pc, #216]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002424:	f7fe faa2 	bl	800096c <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242a:	e00a      	b.n	8002442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242c:	f7fe fa9e 	bl	800096c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e053      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	4b2d      	ldr	r3, [pc, #180]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 020c 	and.w	r2, r3, #12
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	429a      	cmp	r2, r3
 8002452:	d1eb      	bne.n	800242c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002454:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d210      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 0207 	bic.w	r2, r3, #7
 800246a:	4922      	ldr	r1, [pc, #136]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b20      	ldr	r3, [pc, #128]	; (80024f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e032      	b.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4916      	ldr	r1, [pc, #88]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0308 	and.w	r3, r3, #8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d009      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	490e      	ldr	r1, [pc, #56]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c2:	f000 f821 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	490a      	ldr	r1, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	fa22 f303 	lsr.w	r3, r2, r3
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fa00 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	08002f60 	.word	0x08002f60
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b490      	push	{r4, r7}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800250e:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002510:	1d3c      	adds	r4, r7, #4
 8002512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002518:	f240 2301 	movw	r3, #513	; 0x201
 800251c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x40>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x46>
 8002546:	e02d      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254a:	623b      	str	r3, [r7, #32]
      break;
 800254c:	e02d      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800255a:	4413      	add	r3, r2
 800255c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002560:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	0c5b      	lsrs	r3, r3, #17
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800257a:	4413      	add	r3, r2
 800257c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002580:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002586:	fb02 f203 	mul.w	r2, r2, r3
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	e004      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	623b      	str	r3, [r7, #32]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025a6:	623b      	str	r3, [r7, #32]
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	6a3b      	ldr	r3, [r7, #32]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc90      	pop	{r4, r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	08002f50 	.word	0x08002f50
 80025bc:	40021000 	.word	0x40021000
 80025c0:	00b71b00 	.word	0x00b71b00
 80025c4:	003d0900 	.word	0x003d0900
 80025c8:	007a1200 	.word	0x007a1200

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b02      	ldr	r3, [pc, #8]	; (80025dc <HAL_RCC_GetHCLKFreq+0x10>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e4:	f7ff fff2 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	08002f70 	.word	0x08002f70

08002608 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002610:	4b0a      	ldr	r3, [pc, #40]	; (800263c <RCC_Delay+0x34>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <RCC_Delay+0x38>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002624:	bf00      	nop
  }
  while (Delay --);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	60fa      	str	r2, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f9      	bne.n	8002624 <RCC_Delay+0x1c>
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000000 	.word	0x20000000
 8002640:	10624dd3 	.word	0x10624dd3

08002644 <__errno>:
 8002644:	4b01      	ldr	r3, [pc, #4]	; (800264c <__errno+0x8>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	2000000c 	.word	0x2000000c

08002650 <__libc_init_array>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	2600      	movs	r6, #0
 8002654:	4d0c      	ldr	r5, [pc, #48]	; (8002688 <__libc_init_array+0x38>)
 8002656:	4c0d      	ldr	r4, [pc, #52]	; (800268c <__libc_init_array+0x3c>)
 8002658:	1b64      	subs	r4, r4, r5
 800265a:	10a4      	asrs	r4, r4, #2
 800265c:	42a6      	cmp	r6, r4
 800265e:	d109      	bne.n	8002674 <__libc_init_array+0x24>
 8002660:	f000 fc5c 	bl	8002f1c <_init>
 8002664:	2600      	movs	r6, #0
 8002666:	4d0a      	ldr	r5, [pc, #40]	; (8002690 <__libc_init_array+0x40>)
 8002668:	4c0a      	ldr	r4, [pc, #40]	; (8002694 <__libc_init_array+0x44>)
 800266a:	1b64      	subs	r4, r4, r5
 800266c:	10a4      	asrs	r4, r4, #2
 800266e:	42a6      	cmp	r6, r4
 8002670:	d105      	bne.n	800267e <__libc_init_array+0x2e>
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	f855 3b04 	ldr.w	r3, [r5], #4
 8002678:	4798      	blx	r3
 800267a:	3601      	adds	r6, #1
 800267c:	e7ee      	b.n	800265c <__libc_init_array+0xc>
 800267e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002682:	4798      	blx	r3
 8002684:	3601      	adds	r6, #1
 8002686:	e7f2      	b.n	800266e <__libc_init_array+0x1e>
 8002688:	08002fac 	.word	0x08002fac
 800268c:	08002fac 	.word	0x08002fac
 8002690:	08002fac 	.word	0x08002fac
 8002694:	08002fb0 	.word	0x08002fb0

08002698 <memset>:
 8002698:	4603      	mov	r3, r0
 800269a:	4402      	add	r2, r0
 800269c:	4293      	cmp	r3, r2
 800269e:	d100      	bne.n	80026a2 <memset+0xa>
 80026a0:	4770      	bx	lr
 80026a2:	f803 1b01 	strb.w	r1, [r3], #1
 80026a6:	e7f9      	b.n	800269c <memset+0x4>

080026a8 <siprintf>:
 80026a8:	b40e      	push	{r1, r2, r3}
 80026aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026ae:	b500      	push	{lr}
 80026b0:	b09c      	sub	sp, #112	; 0x70
 80026b2:	ab1d      	add	r3, sp, #116	; 0x74
 80026b4:	9002      	str	r0, [sp, #8]
 80026b6:	9006      	str	r0, [sp, #24]
 80026b8:	9107      	str	r1, [sp, #28]
 80026ba:	9104      	str	r1, [sp, #16]
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <siprintf+0x38>)
 80026be:	4909      	ldr	r1, [pc, #36]	; (80026e4 <siprintf+0x3c>)
 80026c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80026c4:	9105      	str	r1, [sp, #20]
 80026c6:	6800      	ldr	r0, [r0, #0]
 80026c8:	a902      	add	r1, sp, #8
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	f000 f868 	bl	80027a0 <_svfiprintf_r>
 80026d0:	2200      	movs	r2, #0
 80026d2:	9b02      	ldr	r3, [sp, #8]
 80026d4:	701a      	strb	r2, [r3, #0]
 80026d6:	b01c      	add	sp, #112	; 0x70
 80026d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80026dc:	b003      	add	sp, #12
 80026de:	4770      	bx	lr
 80026e0:	2000000c 	.word	0x2000000c
 80026e4:	ffff0208 	.word	0xffff0208

080026e8 <__ssputs_r>:
 80026e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ec:	688e      	ldr	r6, [r1, #8]
 80026ee:	4682      	mov	sl, r0
 80026f0:	429e      	cmp	r6, r3
 80026f2:	460c      	mov	r4, r1
 80026f4:	4690      	mov	r8, r2
 80026f6:	461f      	mov	r7, r3
 80026f8:	d838      	bhi.n	800276c <__ssputs_r+0x84>
 80026fa:	898a      	ldrh	r2, [r1, #12]
 80026fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002700:	d032      	beq.n	8002768 <__ssputs_r+0x80>
 8002702:	6825      	ldr	r5, [r4, #0]
 8002704:	6909      	ldr	r1, [r1, #16]
 8002706:	3301      	adds	r3, #1
 8002708:	eba5 0901 	sub.w	r9, r5, r1
 800270c:	6965      	ldr	r5, [r4, #20]
 800270e:	444b      	add	r3, r9
 8002710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002718:	106d      	asrs	r5, r5, #1
 800271a:	429d      	cmp	r5, r3
 800271c:	bf38      	it	cc
 800271e:	461d      	movcc	r5, r3
 8002720:	0553      	lsls	r3, r2, #21
 8002722:	d531      	bpl.n	8002788 <__ssputs_r+0xa0>
 8002724:	4629      	mov	r1, r5
 8002726:	f000 fb53 	bl	8002dd0 <_malloc_r>
 800272a:	4606      	mov	r6, r0
 800272c:	b950      	cbnz	r0, 8002744 <__ssputs_r+0x5c>
 800272e:	230c      	movs	r3, #12
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	f8ca 3000 	str.w	r3, [sl]
 8002738:	89a3      	ldrh	r3, [r4, #12]
 800273a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800273e:	81a3      	strh	r3, [r4, #12]
 8002740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002744:	464a      	mov	r2, r9
 8002746:	6921      	ldr	r1, [r4, #16]
 8002748:	f000 face 	bl	8002ce8 <memcpy>
 800274c:	89a3      	ldrh	r3, [r4, #12]
 800274e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002756:	81a3      	strh	r3, [r4, #12]
 8002758:	6126      	str	r6, [r4, #16]
 800275a:	444e      	add	r6, r9
 800275c:	6026      	str	r6, [r4, #0]
 800275e:	463e      	mov	r6, r7
 8002760:	6165      	str	r5, [r4, #20]
 8002762:	eba5 0509 	sub.w	r5, r5, r9
 8002766:	60a5      	str	r5, [r4, #8]
 8002768:	42be      	cmp	r6, r7
 800276a:	d900      	bls.n	800276e <__ssputs_r+0x86>
 800276c:	463e      	mov	r6, r7
 800276e:	4632      	mov	r2, r6
 8002770:	4641      	mov	r1, r8
 8002772:	6820      	ldr	r0, [r4, #0]
 8002774:	f000 fac6 	bl	8002d04 <memmove>
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	1b9b      	subs	r3, r3, r6
 800277e:	4432      	add	r2, r6
 8002780:	2000      	movs	r0, #0
 8002782:	60a3      	str	r3, [r4, #8]
 8002784:	6022      	str	r2, [r4, #0]
 8002786:	e7db      	b.n	8002740 <__ssputs_r+0x58>
 8002788:	462a      	mov	r2, r5
 800278a:	f000 fb7b 	bl	8002e84 <_realloc_r>
 800278e:	4606      	mov	r6, r0
 8002790:	2800      	cmp	r0, #0
 8002792:	d1e1      	bne.n	8002758 <__ssputs_r+0x70>
 8002794:	4650      	mov	r0, sl
 8002796:	6921      	ldr	r1, [r4, #16]
 8002798:	f000 face 	bl	8002d38 <_free_r>
 800279c:	e7c7      	b.n	800272e <__ssputs_r+0x46>
	...

080027a0 <_svfiprintf_r>:
 80027a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027a4:	4698      	mov	r8, r3
 80027a6:	898b      	ldrh	r3, [r1, #12]
 80027a8:	4607      	mov	r7, r0
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	460d      	mov	r5, r1
 80027ae:	4614      	mov	r4, r2
 80027b0:	b09d      	sub	sp, #116	; 0x74
 80027b2:	d50e      	bpl.n	80027d2 <_svfiprintf_r+0x32>
 80027b4:	690b      	ldr	r3, [r1, #16]
 80027b6:	b963      	cbnz	r3, 80027d2 <_svfiprintf_r+0x32>
 80027b8:	2140      	movs	r1, #64	; 0x40
 80027ba:	f000 fb09 	bl	8002dd0 <_malloc_r>
 80027be:	6028      	str	r0, [r5, #0]
 80027c0:	6128      	str	r0, [r5, #16]
 80027c2:	b920      	cbnz	r0, 80027ce <_svfiprintf_r+0x2e>
 80027c4:	230c      	movs	r3, #12
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	e0d1      	b.n	8002972 <_svfiprintf_r+0x1d2>
 80027ce:	2340      	movs	r3, #64	; 0x40
 80027d0:	616b      	str	r3, [r5, #20]
 80027d2:	2300      	movs	r3, #0
 80027d4:	9309      	str	r3, [sp, #36]	; 0x24
 80027d6:	2320      	movs	r3, #32
 80027d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027dc:	2330      	movs	r3, #48	; 0x30
 80027de:	f04f 0901 	mov.w	r9, #1
 80027e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80027e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800298c <_svfiprintf_r+0x1ec>
 80027ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027ee:	4623      	mov	r3, r4
 80027f0:	469a      	mov	sl, r3
 80027f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027f6:	b10a      	cbz	r2, 80027fc <_svfiprintf_r+0x5c>
 80027f8:	2a25      	cmp	r2, #37	; 0x25
 80027fa:	d1f9      	bne.n	80027f0 <_svfiprintf_r+0x50>
 80027fc:	ebba 0b04 	subs.w	fp, sl, r4
 8002800:	d00b      	beq.n	800281a <_svfiprintf_r+0x7a>
 8002802:	465b      	mov	r3, fp
 8002804:	4622      	mov	r2, r4
 8002806:	4629      	mov	r1, r5
 8002808:	4638      	mov	r0, r7
 800280a:	f7ff ff6d 	bl	80026e8 <__ssputs_r>
 800280e:	3001      	adds	r0, #1
 8002810:	f000 80aa 	beq.w	8002968 <_svfiprintf_r+0x1c8>
 8002814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002816:	445a      	add	r2, fp
 8002818:	9209      	str	r2, [sp, #36]	; 0x24
 800281a:	f89a 3000 	ldrb.w	r3, [sl]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80a2 	beq.w	8002968 <_svfiprintf_r+0x1c8>
 8002824:	2300      	movs	r3, #0
 8002826:	f04f 32ff 	mov.w	r2, #4294967295
 800282a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800282e:	f10a 0a01 	add.w	sl, sl, #1
 8002832:	9304      	str	r3, [sp, #16]
 8002834:	9307      	str	r3, [sp, #28]
 8002836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800283a:	931a      	str	r3, [sp, #104]	; 0x68
 800283c:	4654      	mov	r4, sl
 800283e:	2205      	movs	r2, #5
 8002840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002844:	4851      	ldr	r0, [pc, #324]	; (800298c <_svfiprintf_r+0x1ec>)
 8002846:	f000 fa41 	bl	8002ccc <memchr>
 800284a:	9a04      	ldr	r2, [sp, #16]
 800284c:	b9d8      	cbnz	r0, 8002886 <_svfiprintf_r+0xe6>
 800284e:	06d0      	lsls	r0, r2, #27
 8002850:	bf44      	itt	mi
 8002852:	2320      	movmi	r3, #32
 8002854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002858:	0711      	lsls	r1, r2, #28
 800285a:	bf44      	itt	mi
 800285c:	232b      	movmi	r3, #43	; 0x2b
 800285e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002862:	f89a 3000 	ldrb.w	r3, [sl]
 8002866:	2b2a      	cmp	r3, #42	; 0x2a
 8002868:	d015      	beq.n	8002896 <_svfiprintf_r+0xf6>
 800286a:	4654      	mov	r4, sl
 800286c:	2000      	movs	r0, #0
 800286e:	f04f 0c0a 	mov.w	ip, #10
 8002872:	9a07      	ldr	r2, [sp, #28]
 8002874:	4621      	mov	r1, r4
 8002876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800287a:	3b30      	subs	r3, #48	; 0x30
 800287c:	2b09      	cmp	r3, #9
 800287e:	d94e      	bls.n	800291e <_svfiprintf_r+0x17e>
 8002880:	b1b0      	cbz	r0, 80028b0 <_svfiprintf_r+0x110>
 8002882:	9207      	str	r2, [sp, #28]
 8002884:	e014      	b.n	80028b0 <_svfiprintf_r+0x110>
 8002886:	eba0 0308 	sub.w	r3, r0, r8
 800288a:	fa09 f303 	lsl.w	r3, r9, r3
 800288e:	4313      	orrs	r3, r2
 8002890:	46a2      	mov	sl, r4
 8002892:	9304      	str	r3, [sp, #16]
 8002894:	e7d2      	b.n	800283c <_svfiprintf_r+0x9c>
 8002896:	9b03      	ldr	r3, [sp, #12]
 8002898:	1d19      	adds	r1, r3, #4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	9103      	str	r1, [sp, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bfbb      	ittet	lt
 80028a2:	425b      	neglt	r3, r3
 80028a4:	f042 0202 	orrlt.w	r2, r2, #2
 80028a8:	9307      	strge	r3, [sp, #28]
 80028aa:	9307      	strlt	r3, [sp, #28]
 80028ac:	bfb8      	it	lt
 80028ae:	9204      	strlt	r2, [sp, #16]
 80028b0:	7823      	ldrb	r3, [r4, #0]
 80028b2:	2b2e      	cmp	r3, #46	; 0x2e
 80028b4:	d10c      	bne.n	80028d0 <_svfiprintf_r+0x130>
 80028b6:	7863      	ldrb	r3, [r4, #1]
 80028b8:	2b2a      	cmp	r3, #42	; 0x2a
 80028ba:	d135      	bne.n	8002928 <_svfiprintf_r+0x188>
 80028bc:	9b03      	ldr	r3, [sp, #12]
 80028be:	3402      	adds	r4, #2
 80028c0:	1d1a      	adds	r2, r3, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	9203      	str	r2, [sp, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bfb8      	it	lt
 80028ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ce:	9305      	str	r3, [sp, #20]
 80028d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800299c <_svfiprintf_r+0x1fc>
 80028d4:	2203      	movs	r2, #3
 80028d6:	4650      	mov	r0, sl
 80028d8:	7821      	ldrb	r1, [r4, #0]
 80028da:	f000 f9f7 	bl	8002ccc <memchr>
 80028de:	b140      	cbz	r0, 80028f2 <_svfiprintf_r+0x152>
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	eba0 000a 	sub.w	r0, r0, sl
 80028e6:	fa03 f000 	lsl.w	r0, r3, r0
 80028ea:	9b04      	ldr	r3, [sp, #16]
 80028ec:	3401      	adds	r4, #1
 80028ee:	4303      	orrs	r3, r0
 80028f0:	9304      	str	r3, [sp, #16]
 80028f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f6:	2206      	movs	r2, #6
 80028f8:	4825      	ldr	r0, [pc, #148]	; (8002990 <_svfiprintf_r+0x1f0>)
 80028fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028fe:	f000 f9e5 	bl	8002ccc <memchr>
 8002902:	2800      	cmp	r0, #0
 8002904:	d038      	beq.n	8002978 <_svfiprintf_r+0x1d8>
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <_svfiprintf_r+0x1f4>)
 8002908:	bb1b      	cbnz	r3, 8002952 <_svfiprintf_r+0x1b2>
 800290a:	9b03      	ldr	r3, [sp, #12]
 800290c:	3307      	adds	r3, #7
 800290e:	f023 0307 	bic.w	r3, r3, #7
 8002912:	3308      	adds	r3, #8
 8002914:	9303      	str	r3, [sp, #12]
 8002916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002918:	4433      	add	r3, r6
 800291a:	9309      	str	r3, [sp, #36]	; 0x24
 800291c:	e767      	b.n	80027ee <_svfiprintf_r+0x4e>
 800291e:	460c      	mov	r4, r1
 8002920:	2001      	movs	r0, #1
 8002922:	fb0c 3202 	mla	r2, ip, r2, r3
 8002926:	e7a5      	b.n	8002874 <_svfiprintf_r+0xd4>
 8002928:	2300      	movs	r3, #0
 800292a:	f04f 0c0a 	mov.w	ip, #10
 800292e:	4619      	mov	r1, r3
 8002930:	3401      	adds	r4, #1
 8002932:	9305      	str	r3, [sp, #20]
 8002934:	4620      	mov	r0, r4
 8002936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800293a:	3a30      	subs	r2, #48	; 0x30
 800293c:	2a09      	cmp	r2, #9
 800293e:	d903      	bls.n	8002948 <_svfiprintf_r+0x1a8>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0c5      	beq.n	80028d0 <_svfiprintf_r+0x130>
 8002944:	9105      	str	r1, [sp, #20]
 8002946:	e7c3      	b.n	80028d0 <_svfiprintf_r+0x130>
 8002948:	4604      	mov	r4, r0
 800294a:	2301      	movs	r3, #1
 800294c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002950:	e7f0      	b.n	8002934 <_svfiprintf_r+0x194>
 8002952:	ab03      	add	r3, sp, #12
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	462a      	mov	r2, r5
 8002958:	4638      	mov	r0, r7
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <_svfiprintf_r+0x1f8>)
 800295c:	a904      	add	r1, sp, #16
 800295e:	f3af 8000 	nop.w
 8002962:	1c42      	adds	r2, r0, #1
 8002964:	4606      	mov	r6, r0
 8002966:	d1d6      	bne.n	8002916 <_svfiprintf_r+0x176>
 8002968:	89ab      	ldrh	r3, [r5, #12]
 800296a:	065b      	lsls	r3, r3, #25
 800296c:	f53f af2c 	bmi.w	80027c8 <_svfiprintf_r+0x28>
 8002970:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002972:	b01d      	add	sp, #116	; 0x74
 8002974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002978:	ab03      	add	r3, sp, #12
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	462a      	mov	r2, r5
 800297e:	4638      	mov	r0, r7
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <_svfiprintf_r+0x1f8>)
 8002982:	a904      	add	r1, sp, #16
 8002984:	f000 f87c 	bl	8002a80 <_printf_i>
 8002988:	e7eb      	b.n	8002962 <_svfiprintf_r+0x1c2>
 800298a:	bf00      	nop
 800298c:	08002f78 	.word	0x08002f78
 8002990:	08002f82 	.word	0x08002f82
 8002994:	00000000 	.word	0x00000000
 8002998:	080026e9 	.word	0x080026e9
 800299c:	08002f7e 	.word	0x08002f7e

080029a0 <_printf_common>:
 80029a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a4:	4616      	mov	r6, r2
 80029a6:	4699      	mov	r9, r3
 80029a8:	688a      	ldr	r2, [r1, #8]
 80029aa:	690b      	ldr	r3, [r1, #16]
 80029ac:	4607      	mov	r7, r0
 80029ae:	4293      	cmp	r3, r2
 80029b0:	bfb8      	it	lt
 80029b2:	4613      	movlt	r3, r2
 80029b4:	6033      	str	r3, [r6, #0]
 80029b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029ba:	460c      	mov	r4, r1
 80029bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029c0:	b10a      	cbz	r2, 80029c6 <_printf_common+0x26>
 80029c2:	3301      	adds	r3, #1
 80029c4:	6033      	str	r3, [r6, #0]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	0699      	lsls	r1, r3, #26
 80029ca:	bf42      	ittt	mi
 80029cc:	6833      	ldrmi	r3, [r6, #0]
 80029ce:	3302      	addmi	r3, #2
 80029d0:	6033      	strmi	r3, [r6, #0]
 80029d2:	6825      	ldr	r5, [r4, #0]
 80029d4:	f015 0506 	ands.w	r5, r5, #6
 80029d8:	d106      	bne.n	80029e8 <_printf_common+0x48>
 80029da:	f104 0a19 	add.w	sl, r4, #25
 80029de:	68e3      	ldr	r3, [r4, #12]
 80029e0:	6832      	ldr	r2, [r6, #0]
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	42ab      	cmp	r3, r5
 80029e6:	dc28      	bgt.n	8002a3a <_printf_common+0x9a>
 80029e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80029ec:	1e13      	subs	r3, r2, #0
 80029ee:	6822      	ldr	r2, [r4, #0]
 80029f0:	bf18      	it	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	0692      	lsls	r2, r2, #26
 80029f6:	d42d      	bmi.n	8002a54 <_printf_common+0xb4>
 80029f8:	4649      	mov	r1, r9
 80029fa:	4638      	mov	r0, r7
 80029fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a00:	47c0      	blx	r8
 8002a02:	3001      	adds	r0, #1
 8002a04:	d020      	beq.n	8002a48 <_printf_common+0xa8>
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	68e5      	ldr	r5, [r4, #12]
 8002a0a:	f003 0306 	and.w	r3, r3, #6
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf18      	it	ne
 8002a12:	2500      	movne	r5, #0
 8002a14:	6832      	ldr	r2, [r6, #0]
 8002a16:	f04f 0600 	mov.w	r6, #0
 8002a1a:	68a3      	ldr	r3, [r4, #8]
 8002a1c:	bf08      	it	eq
 8002a1e:	1aad      	subeq	r5, r5, r2
 8002a20:	6922      	ldr	r2, [r4, #16]
 8002a22:	bf08      	it	eq
 8002a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bfc4      	itt	gt
 8002a2c:	1a9b      	subgt	r3, r3, r2
 8002a2e:	18ed      	addgt	r5, r5, r3
 8002a30:	341a      	adds	r4, #26
 8002a32:	42b5      	cmp	r5, r6
 8002a34:	d11a      	bne.n	8002a6c <_printf_common+0xcc>
 8002a36:	2000      	movs	r0, #0
 8002a38:	e008      	b.n	8002a4c <_printf_common+0xac>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	4652      	mov	r2, sl
 8002a3e:	4649      	mov	r1, r9
 8002a40:	4638      	mov	r0, r7
 8002a42:	47c0      	blx	r8
 8002a44:	3001      	adds	r0, #1
 8002a46:	d103      	bne.n	8002a50 <_printf_common+0xb0>
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a50:	3501      	adds	r5, #1
 8002a52:	e7c4      	b.n	80029de <_printf_common+0x3e>
 8002a54:	2030      	movs	r0, #48	; 0x30
 8002a56:	18e1      	adds	r1, r4, r3
 8002a58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a62:	4422      	add	r2, r4
 8002a64:	3302      	adds	r3, #2
 8002a66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a6a:	e7c5      	b.n	80029f8 <_printf_common+0x58>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	4622      	mov	r2, r4
 8002a70:	4649      	mov	r1, r9
 8002a72:	4638      	mov	r0, r7
 8002a74:	47c0      	blx	r8
 8002a76:	3001      	adds	r0, #1
 8002a78:	d0e6      	beq.n	8002a48 <_printf_common+0xa8>
 8002a7a:	3601      	adds	r6, #1
 8002a7c:	e7d9      	b.n	8002a32 <_printf_common+0x92>
	...

08002a80 <_printf_i>:
 8002a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a84:	460c      	mov	r4, r1
 8002a86:	7e27      	ldrb	r7, [r4, #24]
 8002a88:	4691      	mov	r9, r2
 8002a8a:	2f78      	cmp	r7, #120	; 0x78
 8002a8c:	4680      	mov	r8, r0
 8002a8e:	469a      	mov	sl, r3
 8002a90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002a92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a96:	d807      	bhi.n	8002aa8 <_printf_i+0x28>
 8002a98:	2f62      	cmp	r7, #98	; 0x62
 8002a9a:	d80a      	bhi.n	8002ab2 <_printf_i+0x32>
 8002a9c:	2f00      	cmp	r7, #0
 8002a9e:	f000 80d9 	beq.w	8002c54 <_printf_i+0x1d4>
 8002aa2:	2f58      	cmp	r7, #88	; 0x58
 8002aa4:	f000 80a4 	beq.w	8002bf0 <_printf_i+0x170>
 8002aa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ab0:	e03a      	b.n	8002b28 <_printf_i+0xa8>
 8002ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ab6:	2b15      	cmp	r3, #21
 8002ab8:	d8f6      	bhi.n	8002aa8 <_printf_i+0x28>
 8002aba:	a001      	add	r0, pc, #4	; (adr r0, 8002ac0 <_printf_i+0x40>)
 8002abc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b2d 	.word	0x08002b2d
 8002ac8:	08002aa9 	.word	0x08002aa9
 8002acc:	08002aa9 	.word	0x08002aa9
 8002ad0:	08002aa9 	.word	0x08002aa9
 8002ad4:	08002aa9 	.word	0x08002aa9
 8002ad8:	08002b2d 	.word	0x08002b2d
 8002adc:	08002aa9 	.word	0x08002aa9
 8002ae0:	08002aa9 	.word	0x08002aa9
 8002ae4:	08002aa9 	.word	0x08002aa9
 8002ae8:	08002aa9 	.word	0x08002aa9
 8002aec:	08002c3b 	.word	0x08002c3b
 8002af0:	08002b5d 	.word	0x08002b5d
 8002af4:	08002c1d 	.word	0x08002c1d
 8002af8:	08002aa9 	.word	0x08002aa9
 8002afc:	08002aa9 	.word	0x08002aa9
 8002b00:	08002c5d 	.word	0x08002c5d
 8002b04:	08002aa9 	.word	0x08002aa9
 8002b08:	08002b5d 	.word	0x08002b5d
 8002b0c:	08002aa9 	.word	0x08002aa9
 8002b10:	08002aa9 	.word	0x08002aa9
 8002b14:	08002c25 	.word	0x08002c25
 8002b18:	680b      	ldr	r3, [r1, #0]
 8002b1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b1e:	1d1a      	adds	r2, r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	600a      	str	r2, [r1, #0]
 8002b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0a4      	b.n	8002c76 <_printf_i+0x1f6>
 8002b2c:	6825      	ldr	r5, [r4, #0]
 8002b2e:	6808      	ldr	r0, [r1, #0]
 8002b30:	062e      	lsls	r6, r5, #24
 8002b32:	f100 0304 	add.w	r3, r0, #4
 8002b36:	d50a      	bpl.n	8002b4e <_printf_i+0xce>
 8002b38:	6805      	ldr	r5, [r0, #0]
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	2d00      	cmp	r5, #0
 8002b3e:	da03      	bge.n	8002b48 <_printf_i+0xc8>
 8002b40:	232d      	movs	r3, #45	; 0x2d
 8002b42:	426d      	negs	r5, r5
 8002b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b48:	230a      	movs	r3, #10
 8002b4a:	485e      	ldr	r0, [pc, #376]	; (8002cc4 <_printf_i+0x244>)
 8002b4c:	e019      	b.n	8002b82 <_printf_i+0x102>
 8002b4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002b52:	6805      	ldr	r5, [r0, #0]
 8002b54:	600b      	str	r3, [r1, #0]
 8002b56:	bf18      	it	ne
 8002b58:	b22d      	sxthne	r5, r5
 8002b5a:	e7ef      	b.n	8002b3c <_printf_i+0xbc>
 8002b5c:	680b      	ldr	r3, [r1, #0]
 8002b5e:	6825      	ldr	r5, [r4, #0]
 8002b60:	1d18      	adds	r0, r3, #4
 8002b62:	6008      	str	r0, [r1, #0]
 8002b64:	0628      	lsls	r0, r5, #24
 8002b66:	d501      	bpl.n	8002b6c <_printf_i+0xec>
 8002b68:	681d      	ldr	r5, [r3, #0]
 8002b6a:	e002      	b.n	8002b72 <_printf_i+0xf2>
 8002b6c:	0669      	lsls	r1, r5, #25
 8002b6e:	d5fb      	bpl.n	8002b68 <_printf_i+0xe8>
 8002b70:	881d      	ldrh	r5, [r3, #0]
 8002b72:	2f6f      	cmp	r7, #111	; 0x6f
 8002b74:	bf0c      	ite	eq
 8002b76:	2308      	moveq	r3, #8
 8002b78:	230a      	movne	r3, #10
 8002b7a:	4852      	ldr	r0, [pc, #328]	; (8002cc4 <_printf_i+0x244>)
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b82:	6866      	ldr	r6, [r4, #4]
 8002b84:	2e00      	cmp	r6, #0
 8002b86:	bfa8      	it	ge
 8002b88:	6821      	ldrge	r1, [r4, #0]
 8002b8a:	60a6      	str	r6, [r4, #8]
 8002b8c:	bfa4      	itt	ge
 8002b8e:	f021 0104 	bicge.w	r1, r1, #4
 8002b92:	6021      	strge	r1, [r4, #0]
 8002b94:	b90d      	cbnz	r5, 8002b9a <_printf_i+0x11a>
 8002b96:	2e00      	cmp	r6, #0
 8002b98:	d04d      	beq.n	8002c36 <_printf_i+0x1b6>
 8002b9a:	4616      	mov	r6, r2
 8002b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8002ba4:	5dc7      	ldrb	r7, [r0, r7]
 8002ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002baa:	462f      	mov	r7, r5
 8002bac:	42bb      	cmp	r3, r7
 8002bae:	460d      	mov	r5, r1
 8002bb0:	d9f4      	bls.n	8002b9c <_printf_i+0x11c>
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d10b      	bne.n	8002bce <_printf_i+0x14e>
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	07df      	lsls	r7, r3, #31
 8002bba:	d508      	bpl.n	8002bce <_printf_i+0x14e>
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	6861      	ldr	r1, [r4, #4]
 8002bc0:	4299      	cmp	r1, r3
 8002bc2:	bfde      	ittt	le
 8002bc4:	2330      	movle	r3, #48	; 0x30
 8002bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bce:	1b92      	subs	r2, r2, r6
 8002bd0:	6122      	str	r2, [r4, #16]
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	f8cd a000 	str.w	sl, [sp]
 8002bdc:	aa03      	add	r2, sp, #12
 8002bde:	f7ff fedf 	bl	80029a0 <_printf_common>
 8002be2:	3001      	adds	r0, #1
 8002be4:	d14c      	bne.n	8002c80 <_printf_i+0x200>
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	b004      	add	sp, #16
 8002bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf0:	4834      	ldr	r0, [pc, #208]	; (8002cc4 <_printf_i+0x244>)
 8002bf2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002bf6:	680e      	ldr	r6, [r1, #0]
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8002bfe:	061f      	lsls	r7, r3, #24
 8002c00:	600e      	str	r6, [r1, #0]
 8002c02:	d514      	bpl.n	8002c2e <_printf_i+0x1ae>
 8002c04:	07d9      	lsls	r1, r3, #31
 8002c06:	bf44      	itt	mi
 8002c08:	f043 0320 	orrmi.w	r3, r3, #32
 8002c0c:	6023      	strmi	r3, [r4, #0]
 8002c0e:	b91d      	cbnz	r5, 8002c18 <_printf_i+0x198>
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	f023 0320 	bic.w	r3, r3, #32
 8002c16:	6023      	str	r3, [r4, #0]
 8002c18:	2310      	movs	r3, #16
 8002c1a:	e7af      	b.n	8002b7c <_printf_i+0xfc>
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	f043 0320 	orr.w	r3, r3, #32
 8002c22:	6023      	str	r3, [r4, #0]
 8002c24:	2378      	movs	r3, #120	; 0x78
 8002c26:	4828      	ldr	r0, [pc, #160]	; (8002cc8 <_printf_i+0x248>)
 8002c28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c2c:	e7e3      	b.n	8002bf6 <_printf_i+0x176>
 8002c2e:	065e      	lsls	r6, r3, #25
 8002c30:	bf48      	it	mi
 8002c32:	b2ad      	uxthmi	r5, r5
 8002c34:	e7e6      	b.n	8002c04 <_printf_i+0x184>
 8002c36:	4616      	mov	r6, r2
 8002c38:	e7bb      	b.n	8002bb2 <_printf_i+0x132>
 8002c3a:	680b      	ldr	r3, [r1, #0]
 8002c3c:	6826      	ldr	r6, [r4, #0]
 8002c3e:	1d1d      	adds	r5, r3, #4
 8002c40:	6960      	ldr	r0, [r4, #20]
 8002c42:	600d      	str	r5, [r1, #0]
 8002c44:	0635      	lsls	r5, r6, #24
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	d501      	bpl.n	8002c4e <_printf_i+0x1ce>
 8002c4a:	6018      	str	r0, [r3, #0]
 8002c4c:	e002      	b.n	8002c54 <_printf_i+0x1d4>
 8002c4e:	0671      	lsls	r1, r6, #25
 8002c50:	d5fb      	bpl.n	8002c4a <_printf_i+0x1ca>
 8002c52:	8018      	strh	r0, [r3, #0]
 8002c54:	2300      	movs	r3, #0
 8002c56:	4616      	mov	r6, r2
 8002c58:	6123      	str	r3, [r4, #16]
 8002c5a:	e7ba      	b.n	8002bd2 <_printf_i+0x152>
 8002c5c:	680b      	ldr	r3, [r1, #0]
 8002c5e:	1d1a      	adds	r2, r3, #4
 8002c60:	600a      	str	r2, [r1, #0]
 8002c62:	681e      	ldr	r6, [r3, #0]
 8002c64:	2100      	movs	r1, #0
 8002c66:	4630      	mov	r0, r6
 8002c68:	6862      	ldr	r2, [r4, #4]
 8002c6a:	f000 f82f 	bl	8002ccc <memchr>
 8002c6e:	b108      	cbz	r0, 8002c74 <_printf_i+0x1f4>
 8002c70:	1b80      	subs	r0, r0, r6
 8002c72:	6060      	str	r0, [r4, #4]
 8002c74:	6863      	ldr	r3, [r4, #4]
 8002c76:	6123      	str	r3, [r4, #16]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c7e:	e7a8      	b.n	8002bd2 <_printf_i+0x152>
 8002c80:	4632      	mov	r2, r6
 8002c82:	4649      	mov	r1, r9
 8002c84:	4640      	mov	r0, r8
 8002c86:	6923      	ldr	r3, [r4, #16]
 8002c88:	47d0      	blx	sl
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d0ab      	beq.n	8002be6 <_printf_i+0x166>
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	079b      	lsls	r3, r3, #30
 8002c92:	d413      	bmi.n	8002cbc <_printf_i+0x23c>
 8002c94:	68e0      	ldr	r0, [r4, #12]
 8002c96:	9b03      	ldr	r3, [sp, #12]
 8002c98:	4298      	cmp	r0, r3
 8002c9a:	bfb8      	it	lt
 8002c9c:	4618      	movlt	r0, r3
 8002c9e:	e7a4      	b.n	8002bea <_printf_i+0x16a>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	4632      	mov	r2, r6
 8002ca4:	4649      	mov	r1, r9
 8002ca6:	4640      	mov	r0, r8
 8002ca8:	47d0      	blx	sl
 8002caa:	3001      	adds	r0, #1
 8002cac:	d09b      	beq.n	8002be6 <_printf_i+0x166>
 8002cae:	3501      	adds	r5, #1
 8002cb0:	68e3      	ldr	r3, [r4, #12]
 8002cb2:	9903      	ldr	r1, [sp, #12]
 8002cb4:	1a5b      	subs	r3, r3, r1
 8002cb6:	42ab      	cmp	r3, r5
 8002cb8:	dcf2      	bgt.n	8002ca0 <_printf_i+0x220>
 8002cba:	e7eb      	b.n	8002c94 <_printf_i+0x214>
 8002cbc:	2500      	movs	r5, #0
 8002cbe:	f104 0619 	add.w	r6, r4, #25
 8002cc2:	e7f5      	b.n	8002cb0 <_printf_i+0x230>
 8002cc4:	08002f89 	.word	0x08002f89
 8002cc8:	08002f9a 	.word	0x08002f9a

08002ccc <memchr>:
 8002ccc:	4603      	mov	r3, r0
 8002cce:	b510      	push	{r4, lr}
 8002cd0:	b2c9      	uxtb	r1, r1
 8002cd2:	4402      	add	r2, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	d101      	bne.n	8002cde <memchr+0x12>
 8002cda:	2000      	movs	r0, #0
 8002cdc:	e003      	b.n	8002ce6 <memchr+0x1a>
 8002cde:	7804      	ldrb	r4, [r0, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	428c      	cmp	r4, r1
 8002ce4:	d1f6      	bne.n	8002cd4 <memchr+0x8>
 8002ce6:	bd10      	pop	{r4, pc}

08002ce8 <memcpy>:
 8002ce8:	440a      	add	r2, r1
 8002cea:	4291      	cmp	r1, r2
 8002cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cf0:	d100      	bne.n	8002cf4 <memcpy+0xc>
 8002cf2:	4770      	bx	lr
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cfa:	4291      	cmp	r1, r2
 8002cfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d00:	d1f9      	bne.n	8002cf6 <memcpy+0xe>
 8002d02:	bd10      	pop	{r4, pc}

08002d04 <memmove>:
 8002d04:	4288      	cmp	r0, r1
 8002d06:	b510      	push	{r4, lr}
 8002d08:	eb01 0402 	add.w	r4, r1, r2
 8002d0c:	d902      	bls.n	8002d14 <memmove+0x10>
 8002d0e:	4284      	cmp	r4, r0
 8002d10:	4623      	mov	r3, r4
 8002d12:	d807      	bhi.n	8002d24 <memmove+0x20>
 8002d14:	1e43      	subs	r3, r0, #1
 8002d16:	42a1      	cmp	r1, r4
 8002d18:	d008      	beq.n	8002d2c <memmove+0x28>
 8002d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d22:	e7f8      	b.n	8002d16 <memmove+0x12>
 8002d24:	4601      	mov	r1, r0
 8002d26:	4402      	add	r2, r0
 8002d28:	428a      	cmp	r2, r1
 8002d2a:	d100      	bne.n	8002d2e <memmove+0x2a>
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d36:	e7f7      	b.n	8002d28 <memmove+0x24>

08002d38 <_free_r>:
 8002d38:	b538      	push	{r3, r4, r5, lr}
 8002d3a:	4605      	mov	r5, r0
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d043      	beq.n	8002dc8 <_free_r+0x90>
 8002d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d44:	1f0c      	subs	r4, r1, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	bfb8      	it	lt
 8002d4a:	18e4      	addlt	r4, r4, r3
 8002d4c:	f000 f8d0 	bl	8002ef0 <__malloc_lock>
 8002d50:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <_free_r+0x94>)
 8002d52:	6813      	ldr	r3, [r2, #0]
 8002d54:	4610      	mov	r0, r2
 8002d56:	b933      	cbnz	r3, 8002d66 <_free_r+0x2e>
 8002d58:	6063      	str	r3, [r4, #4]
 8002d5a:	6014      	str	r4, [r2, #0]
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d62:	f000 b8cb 	b.w	8002efc <__malloc_unlock>
 8002d66:	42a3      	cmp	r3, r4
 8002d68:	d90a      	bls.n	8002d80 <_free_r+0x48>
 8002d6a:	6821      	ldr	r1, [r4, #0]
 8002d6c:	1862      	adds	r2, r4, r1
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf01      	itttt	eq
 8002d72:	681a      	ldreq	r2, [r3, #0]
 8002d74:	685b      	ldreq	r3, [r3, #4]
 8002d76:	1852      	addeq	r2, r2, r1
 8002d78:	6022      	streq	r2, [r4, #0]
 8002d7a:	6063      	str	r3, [r4, #4]
 8002d7c:	6004      	str	r4, [r0, #0]
 8002d7e:	e7ed      	b.n	8002d5c <_free_r+0x24>
 8002d80:	461a      	mov	r2, r3
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	b10b      	cbz	r3, 8002d8a <_free_r+0x52>
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	d9fa      	bls.n	8002d80 <_free_r+0x48>
 8002d8a:	6811      	ldr	r1, [r2, #0]
 8002d8c:	1850      	adds	r0, r2, r1
 8002d8e:	42a0      	cmp	r0, r4
 8002d90:	d10b      	bne.n	8002daa <_free_r+0x72>
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	4401      	add	r1, r0
 8002d96:	1850      	adds	r0, r2, r1
 8002d98:	4283      	cmp	r3, r0
 8002d9a:	6011      	str	r1, [r2, #0]
 8002d9c:	d1de      	bne.n	8002d5c <_free_r+0x24>
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4401      	add	r1, r0
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	6053      	str	r3, [r2, #4]
 8002da8:	e7d8      	b.n	8002d5c <_free_r+0x24>
 8002daa:	d902      	bls.n	8002db2 <_free_r+0x7a>
 8002dac:	230c      	movs	r3, #12
 8002dae:	602b      	str	r3, [r5, #0]
 8002db0:	e7d4      	b.n	8002d5c <_free_r+0x24>
 8002db2:	6820      	ldr	r0, [r4, #0]
 8002db4:	1821      	adds	r1, r4, r0
 8002db6:	428b      	cmp	r3, r1
 8002db8:	bf01      	itttt	eq
 8002dba:	6819      	ldreq	r1, [r3, #0]
 8002dbc:	685b      	ldreq	r3, [r3, #4]
 8002dbe:	1809      	addeq	r1, r1, r0
 8002dc0:	6021      	streq	r1, [r4, #0]
 8002dc2:	6063      	str	r3, [r4, #4]
 8002dc4:	6054      	str	r4, [r2, #4]
 8002dc6:	e7c9      	b.n	8002d5c <_free_r+0x24>
 8002dc8:	bd38      	pop	{r3, r4, r5, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000090 	.word	0x20000090

08002dd0 <_malloc_r>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	1ccd      	adds	r5, r1, #3
 8002dd4:	f025 0503 	bic.w	r5, r5, #3
 8002dd8:	3508      	adds	r5, #8
 8002dda:	2d0c      	cmp	r5, #12
 8002ddc:	bf38      	it	cc
 8002dde:	250c      	movcc	r5, #12
 8002de0:	2d00      	cmp	r5, #0
 8002de2:	4606      	mov	r6, r0
 8002de4:	db01      	blt.n	8002dea <_malloc_r+0x1a>
 8002de6:	42a9      	cmp	r1, r5
 8002de8:	d903      	bls.n	8002df2 <_malloc_r+0x22>
 8002dea:	230c      	movs	r3, #12
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	2000      	movs	r0, #0
 8002df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002df2:	f000 f87d 	bl	8002ef0 <__malloc_lock>
 8002df6:	4921      	ldr	r1, [pc, #132]	; (8002e7c <_malloc_r+0xac>)
 8002df8:	680a      	ldr	r2, [r1, #0]
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	b99c      	cbnz	r4, 8002e26 <_malloc_r+0x56>
 8002dfe:	4f20      	ldr	r7, [pc, #128]	; (8002e80 <_malloc_r+0xb0>)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b923      	cbnz	r3, 8002e0e <_malloc_r+0x3e>
 8002e04:	4621      	mov	r1, r4
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 f862 	bl	8002ed0 <_sbrk_r>
 8002e0c:	6038      	str	r0, [r7, #0]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	4630      	mov	r0, r6
 8002e12:	f000 f85d 	bl	8002ed0 <_sbrk_r>
 8002e16:	1c43      	adds	r3, r0, #1
 8002e18:	d123      	bne.n	8002e62 <_malloc_r+0x92>
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	6033      	str	r3, [r6, #0]
 8002e20:	f000 f86c 	bl	8002efc <__malloc_unlock>
 8002e24:	e7e3      	b.n	8002dee <_malloc_r+0x1e>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	1b5b      	subs	r3, r3, r5
 8002e2a:	d417      	bmi.n	8002e5c <_malloc_r+0x8c>
 8002e2c:	2b0b      	cmp	r3, #11
 8002e2e:	d903      	bls.n	8002e38 <_malloc_r+0x68>
 8002e30:	6023      	str	r3, [r4, #0]
 8002e32:	441c      	add	r4, r3
 8002e34:	6025      	str	r5, [r4, #0]
 8002e36:	e004      	b.n	8002e42 <_malloc_r+0x72>
 8002e38:	6863      	ldr	r3, [r4, #4]
 8002e3a:	42a2      	cmp	r2, r4
 8002e3c:	bf0c      	ite	eq
 8002e3e:	600b      	streq	r3, [r1, #0]
 8002e40:	6053      	strne	r3, [r2, #4]
 8002e42:	4630      	mov	r0, r6
 8002e44:	f000 f85a 	bl	8002efc <__malloc_unlock>
 8002e48:	f104 000b 	add.w	r0, r4, #11
 8002e4c:	1d23      	adds	r3, r4, #4
 8002e4e:	f020 0007 	bic.w	r0, r0, #7
 8002e52:	1ac2      	subs	r2, r0, r3
 8002e54:	d0cc      	beq.n	8002df0 <_malloc_r+0x20>
 8002e56:	1a1b      	subs	r3, r3, r0
 8002e58:	50a3      	str	r3, [r4, r2]
 8002e5a:	e7c9      	b.n	8002df0 <_malloc_r+0x20>
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	6864      	ldr	r4, [r4, #4]
 8002e60:	e7cc      	b.n	8002dfc <_malloc_r+0x2c>
 8002e62:	1cc4      	adds	r4, r0, #3
 8002e64:	f024 0403 	bic.w	r4, r4, #3
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d0e3      	beq.n	8002e34 <_malloc_r+0x64>
 8002e6c:	1a21      	subs	r1, r4, r0
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f000 f82e 	bl	8002ed0 <_sbrk_r>
 8002e74:	3001      	adds	r0, #1
 8002e76:	d1dd      	bne.n	8002e34 <_malloc_r+0x64>
 8002e78:	e7cf      	b.n	8002e1a <_malloc_r+0x4a>
 8002e7a:	bf00      	nop
 8002e7c:	20000090 	.word	0x20000090
 8002e80:	20000094 	.word	0x20000094

08002e84 <_realloc_r>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	4607      	mov	r7, r0
 8002e88:	4614      	mov	r4, r2
 8002e8a:	460e      	mov	r6, r1
 8002e8c:	b921      	cbnz	r1, 8002e98 <_realloc_r+0x14>
 8002e8e:	4611      	mov	r1, r2
 8002e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e94:	f7ff bf9c 	b.w	8002dd0 <_malloc_r>
 8002e98:	b922      	cbnz	r2, 8002ea4 <_realloc_r+0x20>
 8002e9a:	f7ff ff4d 	bl	8002d38 <_free_r>
 8002e9e:	4625      	mov	r5, r4
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea4:	f000 f830 	bl	8002f08 <_malloc_usable_size_r>
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d20f      	bcs.n	8002ecc <_realloc_r+0x48>
 8002eac:	4621      	mov	r1, r4
 8002eae:	4638      	mov	r0, r7
 8002eb0:	f7ff ff8e 	bl	8002dd0 <_malloc_r>
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d0f2      	beq.n	8002ea0 <_realloc_r+0x1c>
 8002eba:	4631      	mov	r1, r6
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	f7ff ff13 	bl	8002ce8 <memcpy>
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	f7ff ff37 	bl	8002d38 <_free_r>
 8002eca:	e7e9      	b.n	8002ea0 <_realloc_r+0x1c>
 8002ecc:	4635      	mov	r5, r6
 8002ece:	e7e7      	b.n	8002ea0 <_realloc_r+0x1c>

08002ed0 <_sbrk_r>:
 8002ed0:	b538      	push	{r3, r4, r5, lr}
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	4d05      	ldr	r5, [pc, #20]	; (8002eec <_sbrk_r+0x1c>)
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	4608      	mov	r0, r1
 8002eda:	602b      	str	r3, [r5, #0]
 8002edc:	f7fd fc8c 	bl	80007f8 <_sbrk>
 8002ee0:	1c43      	adds	r3, r0, #1
 8002ee2:	d102      	bne.n	8002eea <_sbrk_r+0x1a>
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	b103      	cbz	r3, 8002eea <_sbrk_r+0x1a>
 8002ee8:	6023      	str	r3, [r4, #0]
 8002eea:	bd38      	pop	{r3, r4, r5, pc}
 8002eec:	200000fc 	.word	0x200000fc

08002ef0 <__malloc_lock>:
 8002ef0:	4801      	ldr	r0, [pc, #4]	; (8002ef8 <__malloc_lock+0x8>)
 8002ef2:	f000 b811 	b.w	8002f18 <__retarget_lock_acquire_recursive>
 8002ef6:	bf00      	nop
 8002ef8:	20000104 	.word	0x20000104

08002efc <__malloc_unlock>:
 8002efc:	4801      	ldr	r0, [pc, #4]	; (8002f04 <__malloc_unlock+0x8>)
 8002efe:	f000 b80c 	b.w	8002f1a <__retarget_lock_release_recursive>
 8002f02:	bf00      	nop
 8002f04:	20000104 	.word	0x20000104

08002f08 <_malloc_usable_size_r>:
 8002f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f0c:	1f18      	subs	r0, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bfbc      	itt	lt
 8002f12:	580b      	ldrlt	r3, [r1, r0]
 8002f14:	18c0      	addlt	r0, r0, r3
 8002f16:	4770      	bx	lr

08002f18 <__retarget_lock_acquire_recursive>:
 8002f18:	4770      	bx	lr

08002f1a <__retarget_lock_release_recursive>:
 8002f1a:	4770      	bx	lr

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
