
STM32CubeIDE_FDCAN1_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b08  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08004e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000168  24000078  08004edc  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240001e0  08004edc  000201e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016332  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002682  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ad0  00000000  00000000  00038a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009e8  00000000  00000000  00039530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002fa57  00000000  00000000  00039f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c5ff  00000000  00000000  0006996f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00136427  00000000  00000000  00075f6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001ac395  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fd8  00000000  00000000  001ac3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000078 	.word	0x24000078
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08004da0 	.word	0x08004da0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	08004da0 	.word	0x08004da0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000394:	4b3e      	ldr	r3, [pc, #248]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000396:	4a3f      	ldr	r2, [pc, #252]	; (8000494 <MX_FDCAN1_Init+0x104>)
 8000398:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800039a:	4b3d      	ldr	r3, [pc, #244]	; (8000490 <MX_FDCAN1_Init+0x100>)
 800039c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003a2:	4b3b      	ldr	r3, [pc, #236]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80003a8:	4b39      	ldr	r3, [pc, #228]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003ae:	4b38      	ldr	r3, [pc, #224]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003b4:	4b36      	ldr	r3, [pc, #216]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003ba:	4b35      	ldr	r3, [pc, #212]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003bc:	2201      	movs	r2, #1
 80003be:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80003c0:	4b33      	ldr	r3, [pc, #204]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 5;
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003c8:	2205      	movs	r2, #5
 80003ca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80003cc:	4b30      	ldr	r3, [pc, #192]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003d2:	4b2f      	ldr	r3, [pc, #188]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003da:	2204      	movs	r2, #4
 80003dc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80003de:	4b2c      	ldr	r3, [pc, #176]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003e0:	2205      	movs	r2, #5
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80003e4:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003e6:	2204      	movs	r2, #4
 80003e8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <MX_FDCAN1_Init+0x100>)
 80003fe:	2201      	movs	r2, #1
 8000400:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_16;
 8000402:	4b23      	ldr	r3, [pc, #140]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000404:	2206      	movs	r2, #6
 8000406:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <MX_FDCAN1_Init+0x100>)
 800040a:	2200      	movs	r2, #0
 800040c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_16;
 800040e:	4b20      	ldr	r3, [pc, #128]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000410:	2206      	movs	r2, #6
 8000412:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000416:	2201      	movs	r2, #1
 8000418:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_16;
 800041a:	4b1d      	ldr	r3, [pc, #116]	; (8000490 <MX_FDCAN1_Init+0x100>)
 800041c:	2206      	movs	r2, #6
 800041e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000422:	2200      	movs	r2, #0
 8000424:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000426:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000428:	2200      	movs	r2, #0
 800042a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <MX_FDCAN1_Init+0x100>)
 800042e:	2201      	movs	r2, #1
 8000430:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000434:	2200      	movs	r2, #0
 8000436:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_16;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <MX_FDCAN1_Init+0x100>)
 800043a:	2206      	movs	r2, #6
 800043c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800043e:	4814      	ldr	r0, [pc, #80]	; (8000490 <MX_FDCAN1_Init+0x100>)
 8000440:	f000 fc9e 	bl	8000d80 <HAL_FDCAN_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800044a:	f000 f9a7 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID; //IdType ?? ?���????? ID ?��?�� ?��?�� ID�????? ?��?��?��?���????? ?���?????�????? ?��?��?��?��?�� .
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_FDCAN1_Init+0x108>)
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
       sFilterConfig.FilterIndex = 0; //Filterindex ?�� ?��?�� 개의 ?��?���????? 구성?��?�� 경우?�� ?��?��?��?��?��. 1개의 ?��?���????? ?��?��?���????? ?���????? ?��문에 0?���????? ?��?��?��?��?��.
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <MX_FDCAN1_Init+0x108>)
 8000456:	2200      	movs	r2, #0
 8000458:	605a      	str	r2, [r3, #4]
       sFilterConfig.FilterType = FDCAN_FILTER_MASK; //FilterType ?? ?��리�? ?��?��?��?�� ?��?�� ?��?��?��?��?��. ?��기서?�� MASK ?��?���????? ?��?��?���????? ?��?��?��?��
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_FDCAN1_Init+0x108>)
 800045c:	2202      	movs	r2, #2
 800045e:	609a      	str	r2, [r3, #8]
       sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0; //FilterConfig ?�� ?��?���????? ?��과하?�� 메시�??????�� ?��?��?��?�� ?��?�� ?��?��?�� 결정?��?��?��. RX FIFO 0?���????? 보내?���????? ?��?��?��?�� ?��?��?��?��.
 8000460:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <MX_FDCAN1_Init+0x108>)
 8000462:	2201      	movs	r2, #1
 8000464:	60da      	str	r2, [r3, #12]

       sFilterConfig.FilterID1 = 0x33;// ID Node2  //?�� MASK ?��?��?�� 경우 ID1( 0x22 )?�� ID�????? ?��?��?���????? ID2( 0x22 )�????? 마스?�� 비트�????? ?��?��?��?��?��.
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_FDCAN1_Init+0x108>)
 8000468:	2233      	movs	r2, #51	; 0x33
 800046a:	611a      	str	r2, [r3, #16]
       sFilterConfig.FilterID2 = 0x7ff; // Ignore because FDCAN_FILTER_TO_RXBUFFER
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <MX_FDCAN1_Init+0x108>)
 800046e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000472:	615a      	str	r2, [r3, #20]
       sFilterConfig.RxBufferIndex = 0; //RxBufferIndex ?�� FIFO ???�� RX Buffer�????? ?��?��?�� 경우 ?��?��?���?????�????? 0?���????? ?��?��?��?��.
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_FDCAN1_Init+0x108>)
 8000476:	2200      	movs	r2, #0
 8000478:	619a      	str	r2, [r3, #24]
         if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800047a:	4907      	ldr	r1, [pc, #28]	; (8000498 <MX_FDCAN1_Init+0x108>)
 800047c:	4804      	ldr	r0, [pc, #16]	; (8000490 <MX_FDCAN1_Init+0x100>)
 800047e:	f000 fe61 	bl	8001144 <HAL_FDCAN_ConfigFilter>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_FDCAN1_Init+0xfc>
         {
           Error_Handler();
 8000488:	f000 f988 	bl	800079c <Error_Handler>
         //                      /* Notification Error */
         //                     Error_Handler();
         //                    }
  /* USER CODE END FDCAN1_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	240000c0 	.word	0x240000c0
 8000494:	4000a000 	.word	0x4000a000
 8000498:	240000a0 	.word	0x240000a0

0800049c <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b0b8      	sub	sp, #224	; 0xe0
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	22b8      	movs	r2, #184	; 0xb8
 80004ba:	2100      	movs	r1, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f004 f847 	bl	8004550 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a29      	ldr	r2, [pc, #164]	; (800056c <HAL_FDCAN_MspInit+0xd0>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d14b      	bne.n	8000564 <HAL_FDCAN_MspInit+0xc8>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80004cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80004d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 ff8e 	bl	8003400 <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 80004ea:	f000 f957 	bl	800079c <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <HAL_FDCAN_MspInit+0xd4>)
 80004f0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80004f4:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <HAL_FDCAN_MspInit+0xd4>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c
 80004fe:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <HAL_FDCAN_MspInit+0xd4>)
 8000500:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8000504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <HAL_FDCAN_MspInit+0xd4>)
 800050e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000512:	4a17      	ldr	r2, [pc, #92]	; (8000570 <HAL_FDCAN_MspInit+0xd4>)
 8000514:	f043 0308 	orr.w	r3, r3, #8
 8000518:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <HAL_FDCAN_MspInit+0xd4>)
 800051e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000522:	f003 0308 	and.w	r3, r3, #8
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800052a:	2303      	movs	r3, #3
 800052c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2300      	movs	r3, #0
 800053e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000542:	2309      	movs	r3, #9
 8000544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000548:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800054c:	4619      	mov	r1, r3
 800054e:	4809      	ldr	r0, [pc, #36]	; (8000574 <HAL_FDCAN_MspInit+0xd8>)
 8000550:	f001 fe18 	bl	8002184 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2013      	movs	r0, #19
 800055a:	f000 fbdc 	bl	8000d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800055e:	2013      	movs	r0, #19
 8000560:	f000 fbf3 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000564:	bf00      	nop
 8000566:	37e0      	adds	r7, #224	; 0xe0
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	4000a000 	.word	0x4000a000
 8000570:	58024400 	.word	0x58024400
 8000574:	58020c00 	.word	0x58020c00

08000578 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MX_GPIO_Init+0x30>)
 8000580:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000584:	4a08      	ldr	r2, [pc, #32]	; (80005a8 <MX_GPIO_Init+0x30>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <MX_GPIO_Init+0x30>)
 8000590:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	58024400 	.word	0x58024400

080005ac <HAL_FDCAN_RxFifo0Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int indx = 1234;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d014      	beq.n	80005ea <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
     //?  기서?   �? ? RX FIFO0?   ?  ?   ?  �? ?? RxHeader ?????????? 복사?   ?????????? ?  ?  ?   ?????????? RxData 배열 ?????????? 복사?  ?  ?  .
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData_From_Node3) != HAL_OK)
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80005c2:	4a0d      	ldr	r2, [pc, #52]	; (80005f8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80005c4:	2140      	movs	r1, #64	; 0x40
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 fee6 	bl	8001398 <HAL_FDCAN_GetRxMessage>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80005d2:	f000 f8e3 	bl	800079c <Error_Handler>
    }
    //그런 ?  ?   ?   메시 ???????????   ???   ?  림을 ?  ?   ?  ?  ?  ?  ?  ?  .
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80005d6:	2200      	movs	r2, #0
 80005d8:	2101      	movs	r1, #1
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f001 f84a 	bl	8001674 <HAL_FDCAN_ActivateNotification>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 80005e6:	f000 f8d9 	bl	800079c <Error_Handler>
    }
    //FDCAN2 콜백 ?????????? ?   ?????????? ?  기서?   ?  ?  ?   ?????????? ?  ?  ?   ?????????? ?  ?  ?  ?  . while 루프?  ?   FDCAN1?   ?  ?   매초 ?  ?  ?   ?????????? ?  ?  ?   ?????????? ?  문입?  ?  .
  }
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	24000170 	.word	0x24000170
 80005f8:	240001a4 	.word	0x240001a4

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 f9f7 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f85b 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f7ff ffb5 	bl	8000578 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800060e:	f7ff febf 	bl	8000390 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure Tx buffer message */
       // Ignore because FDCAN_NO_TX_EVENTS

  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, 3,3,0,1);
 8000612:	2301      	movs	r3, #1
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2300      	movs	r3, #0
 8000618:	2203      	movs	r2, #3
 800061a:	2103      	movs	r1, #3
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <main+0xb0>)
 800061e:	f000 fe07 	bl	8001230 <HAL_FDCAN_ConfigGlobalFilter>

      if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000622:	4822      	ldr	r0, [pc, #136]	; (80006ac <main+0xb0>)
 8000624:	f000 fe31 	bl	800128a <HAL_FDCAN_Start>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <main+0x36>
        {
          Error_Handler();
 800062e:	f000 f8b5 	bl	800079c <Error_Handler>
        }

      if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000632:	2200      	movs	r2, #0
 8000634:	2101      	movs	r1, #1
 8000636:	481d      	ldr	r0, [pc, #116]	; (80006ac <main+0xb0>)
 8000638:	f001 f81c 	bl	8001674 <HAL_FDCAN_ActivateNotification>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <main+0x4a>
        {
          /* Notification Error */
          Error_Handler();
 8000642:	f000 f8ab 	bl	800079c <Error_Handler>
        }
      TxHeader.Identifier = 0x11;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0xb4>)
 8000648:	2211      	movs	r2, #17
 800064a:	601a      	str	r2, [r3, #0]
      TxHeader.IdType = FDCAN_STANDARD_ID;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <main+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
      TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <main+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
      TxHeader.DataLength = FDCAN_DLC_BYTES_16;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <main+0xb4>)
 800065a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800065e:	60da      	str	r2, [r3, #12]
      TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <main+0xb4>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
      TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <main+0xb4>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
      TxHeader.FDFormat = FDCAN_FD_CAN;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0xb4>)
 800066e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000672:	619a      	str	r2, [r3, #24]
      TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <main+0xb4>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
      TxHeader.MessageMarker = 0x0;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <main+0xb4>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sprintf ((char *)TxData_Node1_To_Node3, "%d",indx );
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <main+0xb8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	490c      	ldr	r1, [pc, #48]	; (80006b8 <main+0xbc>)
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <main+0xc0>)
 800068a:	f003 ff69 	bl	8004560 <siprintf>

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData_Node1_To_Node3)!= HAL_OK)
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <main+0xc0>)
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <main+0xb4>)
 8000692:	4806      	ldr	r0, [pc, #24]	; (80006ac <main+0xb0>)
 8000694:	f000 fe24 	bl	80012e0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <main+0xa6>
	              {
	                 Error_Handler();
 800069e:	f000 f87d 	bl	800079c <Error_Handler>
	                }
	     HAL_Delay (100);
 80006a2:	2064      	movs	r0, #100	; 0x64
 80006a4:	f000 fa38 	bl	8000b18 <HAL_Delay>
	  sprintf ((char *)TxData_Node1_To_Node3, "%d",indx );
 80006a8:	e7ea      	b.n	8000680 <main+0x84>
 80006aa:	bf00      	nop
 80006ac:	240000c0 	.word	0x240000c0
 80006b0:	24000180 	.word	0x24000180
 80006b4:	24000000 	.word	0x24000000
 80006b8:	08004db8 	.word	0x08004db8
 80006bc:	24000160 	.word	0x24000160

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b09c      	sub	sp, #112	; 0x70
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	224c      	movs	r2, #76	; 0x4c
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 ff3e 	bl	8004550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2220      	movs	r2, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 ff38 	bl	8004550 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f001 feff 	bl	80024e4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <SystemClock_Config+0xd8>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a2a      	ldr	r2, [pc, #168]	; (8000798 <SystemClock_Config+0xd8>)
 80006f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <SystemClock_Config+0xd8>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000702:	bf00      	nop
 8000704:	4b24      	ldr	r3, [pc, #144]	; (8000798 <SystemClock_Config+0xd8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000710:	d1f8      	bne.n	8000704 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	2302      	movs	r3, #2
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000716:	2301      	movs	r3, #1
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000722:	2300      	movs	r3, #0
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000726:	2304      	movs	r3, #4
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 800072a:	2308      	movs	r3, #8
 800072c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 32;
 8000732:	2320      	movs	r3, #32
 8000734:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073a:	230c      	movs	r3, #12
 800073c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073e:	2300      	movs	r3, #0
 8000740:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074a:	4618      	mov	r0, r3
 800074c:	f001 ff24 	bl	8002598 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000756:	f000 f821 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	233f      	movs	r3, #63	; 0x3f
 800075c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2102      	movs	r1, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f002 fb0d 	bl	8002da0 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800078c:	f000 f806 	bl	800079c <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3770      	adds	r7, #112	; 0x70
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	58024800 	.word	0x58024800

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_MspInit+0x30>)
 80007b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <HAL_MspInit+0x30>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <HAL_MspInit+0x30>)
 80007c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	58024400 	.word	0x58024400

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <NMI_Handler+0x4>

080007e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <MemManage_Handler+0x4>

080007ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0x4>

080007f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <UsageFault_Handler+0x4>

080007fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 f956 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <FDCAN1_IT0_IRQHandler+0x10>)
 8000836:	f000 ff97 	bl	8001768 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	240000c0 	.word	0x240000c0

08000844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <_sbrk+0x5c>)
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <_sbrk+0x60>)
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <_sbrk+0x64>)
 8000862:	4a12      	ldr	r2, [pc, #72]	; (80008ac <_sbrk+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	d207      	bcs.n	8000884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000874:	f003 fe34 	bl	80044e0 <__errno>
 8000878:	4603      	mov	r3, r0
 800087a:	220c      	movs	r2, #12
 800087c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
 8000882:	e009      	b.n	8000898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <_sbrk+0x64>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a05      	ldr	r2, [pc, #20]	; (80008a8 <_sbrk+0x64>)
 8000894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000896:	68fb      	ldr	r3, [r7, #12]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24100000 	.word	0x24100000
 80008a4:	00000400 	.word	0x00000400
 80008a8:	24000094 	.word	0x24000094
 80008ac:	240001e0 	.word	0x240001e0

080008b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <SystemInit+0xd0>)
 80008b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <SystemInit+0xd0>)
 80008bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008c4:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <SystemInit+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d807      	bhi.n	80008e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <SystemInit+0xd4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f023 030f 	bic.w	r3, r3, #15
 80008d8:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <SystemInit+0xd4>)
 80008da:	f043 0303 	orr.w	r3, r3, #3
 80008de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <SystemInit+0xd8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <SystemInit+0xd8>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <SystemInit+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <SystemInit+0xd8>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4924      	ldr	r1, [pc, #144]	; (8000988 <SystemInit+0xd8>)
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <SystemInit+0xdc>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <SystemInit+0xd4>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f003 030c 	and.w	r3, r3, #12
 8000906:	2b00      	cmp	r3, #0
 8000908:	d007      	beq.n	800091a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800090a:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <SystemInit+0xd4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f023 030f 	bic.w	r3, r3, #15
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <SystemInit+0xd4>)
 8000914:	f043 0303 	orr.w	r3, r3, #3
 8000918:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <SystemInit+0xd8>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <SystemInit+0xd8>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <SystemInit+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <SystemInit+0xd8>)
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <SystemInit+0xe0>)
 8000930:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <SystemInit+0xd8>)
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <SystemInit+0xe4>)
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <SystemInit+0xd8>)
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <SystemInit+0xe8>)
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0xd8>)
 8000940:	2200      	movs	r2, #0
 8000942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <SystemInit+0xd8>)
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <SystemInit+0xe8>)
 8000948:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800094a:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <SystemInit+0xd8>)
 800094c:	2200      	movs	r2, #0
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <SystemInit+0xd8>)
 8000952:	4a11      	ldr	r2, [pc, #68]	; (8000998 <SystemInit+0xe8>)
 8000954:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <SystemInit+0xd8>)
 8000958:	2200      	movs	r2, #0
 800095a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <SystemInit+0xd8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <SystemInit+0xd8>)
 8000962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000966:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <SystemInit+0xd8>)
 800096a:	2200      	movs	r2, #0
 800096c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <SystemInit+0xec>)
 8000970:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000974:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00
 8000984:	52002000 	.word	0x52002000
 8000988:	58024400 	.word	0x58024400
 800098c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000990:	02020200 	.word	0x02020200
 8000994:	01ff0000 	.word	0x01ff0000
 8000998:	01010280 	.word	0x01010280
 800099c:	52004000 	.word	0x52004000

080009a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a4:	f7ff ff84 	bl	80008b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f003 fd8d 	bl	80044ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009d2:	f7ff fe13 	bl	80005fc <main>
  bx  lr
 80009d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80009dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009e0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80009e4:	08004e64 	.word	0x08004e64
  ldr r2, =_sbss
 80009e8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80009ec:	240001e0 	.word	0x240001e0

080009f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f000 f980 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000a00:	f002 fb84 	bl	800310c <HAL_RCC_GetSysClockFreq>
 8000a04:	4602      	mov	r2, r0
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_Init+0x68>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	f003 030f 	and.w	r3, r3, #15
 8000a10:	4913      	ldr	r1, [pc, #76]	; (8000a60 <HAL_Init+0x6c>)
 8000a12:	5ccb      	ldrb	r3, [r1, r3]
 8000a14:	f003 031f 	and.w	r3, r3, #31
 8000a18:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_Init+0x68>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 030f 	and.w	r3, r3, #15
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_Init+0x6c>)
 8000a28:	5cd3      	ldrb	r3, [r2, r3]
 8000a2a:	f003 031f 	and.w	r3, r3, #31
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	fa22 f303 	lsr.w	r3, r2, r3
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <HAL_Init+0x70>)
 8000a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_Init+0x74>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f814 	bl	8000a6c <HAL_InitTick>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e002      	b.n	8000a54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4e:	f7ff feab 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	08004e08 	.word	0x08004e08
 8000a64:	24000008 	.word	0x24000008
 8000a68:	24000004 	.word	0x24000004

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_InitTick+0x60>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e021      	b.n	8000ac4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_InitTick+0x64>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f965 	bl	8000d66 <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f92f 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HAL_InitTick+0x68>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000010 	.word	0x24000010
 8000ad0:	24000004 	.word	0x24000004
 8000ad4:	2400000c 	.word	0x2400000c

08000ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x20>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <HAL_IncTick+0x24>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	24000010 	.word	0x24000010
 8000afc:	240001cc 	.word	0x240001cc

08000b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <HAL_GetTick+0x14>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	240001cc 	.word	0x240001cc

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff ffee 	bl	8000b00 <HAL_GetTick>
 8000b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3e:	bf00      	nop
 8000b40:	f7ff ffde 	bl	8000b00 <HAL_GetTick>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24000010 	.word	0x24000010

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x40>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00
 8000ba4:	05fa0000 	.word	0x05fa0000

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	; (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	88fb      	ldrh	r3, [r7, #6]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff40 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff33 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa4 	bl	8000cbc <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b098      	sub	sp, #96	; 0x60
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d88:	4a84      	ldr	r2, [pc, #528]	; (8000f9c <HAL_FDCAN_Init+0x21c>)
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4611      	mov	r1, r2
 8000d90:	224c      	movs	r2, #76	; 0x4c
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 fbce 	bl	8004534 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e1ca      	b.n	8001138 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a7e      	ldr	r2, [pc, #504]	; (8000fa0 <HAL_FDCAN_Init+0x220>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d106      	bne.n	8000dba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000db4:	461a      	mov	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d106      	bne.n	8000dd4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff fb64 	bl	800049c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	699a      	ldr	r2, [r3, #24]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0210 	bic.w	r2, r2, #16
 8000de2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de4:	f7ff fe8c 	bl	8000b00 <HAL_GetTick>
 8000de8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dea:	e014      	b.n	8000e16 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dec:	f7ff fe88 	bl	8000b00 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	2b0a      	cmp	r3, #10
 8000df8:	d90d      	bls.n	8000e16 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e190      	b.n	8001138 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	d0e3      	beq.n	8000dec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0201 	orr.w	r2, r2, #1
 8000e32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e34:	f7ff fe64 	bl	8000b00 <HAL_GetTick>
 8000e38:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e3a:	e014      	b.n	8000e66 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e3c:	f7ff fe60 	bl	8000b00 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d90d      	bls.n	8000e66 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e168      	b.n	8001138 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0e3      	beq.n	8000e3c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0202 	orr.w	r2, r2, #2
 8000e82:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7c1b      	ldrb	r3, [r3, #16]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e9a:	619a      	str	r2, [r3, #24]
 8000e9c:	e007      	b.n	8000eae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7c5b      	ldrb	r3, [r3, #17]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ec4:	619a      	str	r2, [r3, #24]
 8000ec6:	e007      	b.n	8000ed8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ed6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7c9b      	ldrb	r3, [r3, #18]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	e007      	b.n	8000f02 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f00:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f26:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	691a      	ldr	r2, [r3, #16]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0210 	bic.w	r2, r2, #16
 8000f36:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d108      	bne.n	8000f52 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	699a      	ldr	r2, [r3, #24]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0204 	orr.w	r2, r2, #4
 8000f4e:	619a      	str	r2, [r3, #24]
 8000f50:	e030      	b.n	8000fb4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d02c      	beq.n	8000fb4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d020      	beq.n	8000fa4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	699a      	ldr	r2, [r3, #24]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f70:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0210 	orr.w	r2, r2, #16
 8000f80:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d114      	bne.n	8000fb4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0220 	orr.w	r2, r2, #32
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	e00b      	b.n	8000fb4 <HAL_FDCAN_Init+0x234>
 8000f9c:	08004dbc 	.word	0x08004dbc
 8000fa0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	699a      	ldr	r2, [r3, #24]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0220 	orr.w	r2, r2, #32
 8000fb2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fc4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fcc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fdc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fde:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fe8:	d115      	bne.n	8001016 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000ff8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	3b01      	subs	r3, #1
 8001000:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001002:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	3b01      	subs	r3, #1
 800100c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001012:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001014:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00a      	beq.n	8001034 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103c:	4413      	add	r3, r2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d012      	beq.n	8001068 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800104a:	f023 0107 	bic.w	r1, r3, #7
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001058:	4413      	add	r3, r2
 800105a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	2b00      	cmp	r3, #0
 800106e:	d012      	beq.n	8001096 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001078:	f023 0107 	bic.w	r1, r3, #7
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001086:	4413      	add	r3, r2
 8001088:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	430a      	orrs	r2, r1
 8001092:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109a:	2b00      	cmp	r3, #0
 800109c:	d013      	beq.n	80010c6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010a6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010b4:	4413      	add	r3, r2
 80010b6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010ba:	011a      	lsls	r2, r3, #4
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d013      	beq.n	80010f6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010d6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80010e4:	4413      	add	r3, r2
 80010e6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010ea:	021a      	lsls	r2, r3, #8
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a11      	ldr	r2, [pc, #68]	; (8001140 <HAL_FDCAN_Init+0x3c0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d107      	bne.n	8001110 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f022 0203 	bic.w	r2, r2, #3
 800110e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 fe27 	bl	8001d7c <FDCAN_CalcultateRamBlockAddresses>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001134:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001138:	4618      	mov	r0, r3
 800113a:	3760      	adds	r7, #96	; 0x60
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	4000a000 	.word	0x4000a000

08001144 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001154:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d002      	beq.n	8001162 <HAL_FDCAN_ConfigFilter+0x1e>
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d157      	bne.n	8001212 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d12b      	bne.n	80011c2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	2b07      	cmp	r3, #7
 8001170:	d10d      	bne.n	800118e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800117e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001184:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001186:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e00e      	b.n	80011ac <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800119a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80011a2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e025      	b.n	800120e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	075a      	lsls	r2, r3, #29
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d103      	bne.n	80011e0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	e006      	b.n	80011ee <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	079a      	lsls	r2, r3, #30
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3304      	adds	r3, #4
 8001206:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e008      	b.n	8001224 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001218:	f043 0202 	orr.w	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
  }
}
 8001224:	4618      	mov	r0, r3
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d110      	bne.n	800126c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001252:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001258:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	e008      	b.n	800127e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001272:	f043 0204 	orr.w	r2, r3, #4
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
  }
}
 800127e:	4618      	mov	r0, r3
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d111      	bne.n	80012c2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2202      	movs	r2, #2
 80012a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	699a      	ldr	r2, [r3, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2200      	movs	r2, #0
 80012ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e008      	b.n	80012d4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012c8:	f043 0204 	orr.w	r2, r3, #4
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d141      	bne.n	800137c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001300:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800130e:	f043 0220 	orr.w	r2, r3, #32
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e038      	b.n	800138e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d009      	beq.n	8001340 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001332:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e026      	b.n	800138e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fe96 	bl	8002088 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800136c:	2201      	movs	r2, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	409a      	lsls	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	e008      	b.n	800138e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001382:	f043 0208 	orr.w	r2, r3, #8
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
  }
}
 800138e:	4618      	mov	r0, r3
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	; 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013b0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80013b2:	7efb      	ldrb	r3, [r7, #27]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	f040 814b 	bne.w	8001650 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b40      	cmp	r3, #64	; 0x40
 80013be:	d14d      	bne.n	800145c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80013c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013d6:	f043 0220 	orr.w	r2, r3, #32
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e13e      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e12c      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001410:	0e1b      	lsrs	r3, r3, #24
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d10b      	bne.n	8001432 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001422:	0fdb      	lsrs	r3, r3, #31
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800142c:	d101      	bne.n	8001432 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	4413      	add	r3, r2
 8001444:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	69f9      	ldr	r1, [r7, #28]
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
 800145a:	e069      	b.n	8001530 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b41      	cmp	r3, #65	; 0x41
 8001460:	d14d      	bne.n	80014fe <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800146a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001478:	f043 0220 	orr.w	r2, r3, #32
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0ed      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800148e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800149c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0db      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80014b2:	0e1b      	lsrs	r3, r3, #24
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d10b      	bne.n	80014d4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80014c4:	0fdb      	lsrs	r3, r3, #31
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ce:	d101      	bne.n	80014d4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	4413      	add	r3, r2
 80014e6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f0:	69f9      	ldr	r1, [r7, #28]
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
 80014fc:	e018      	b.n	8001530 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	429a      	cmp	r2, r3
 8001506:	d309      	bcc.n	800151c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800150e:	f043 0220 	orr.w	r2, r3, #32
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0a2      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d107      	bne.n	8001554 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0c9b      	lsrs	r3, r3, #18
 800154a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	e005      	b.n	8001560 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	3304      	adds	r3, #4
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b29a      	uxth	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0e1b      	lsrs	r3, r3, #24
 80015b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0fda      	lsrs	r2, r3, #31
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3304      	adds	r3, #4
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
 80015d2:	e00a      	b.n	80015ea <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	441a      	add	r2, r3
 80015da:	6839      	ldr	r1, [r7, #0]
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	440b      	add	r3, r1
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	3301      	adds	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	4a1f      	ldr	r2, [pc, #124]	; (8001670 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	461a      	mov	r2, r3
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d3eb      	bcc.n	80015d4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b40      	cmp	r3, #64	; 0x40
 8001600:	d105      	bne.n	800160e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 800160c:	e01e      	b.n	800164c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b41      	cmp	r3, #65	; 0x41
 8001612:	d105      	bne.n	8001620 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800161e:	e015      	b.n	800164c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b1f      	cmp	r3, #31
 8001624:	d808      	bhi.n	8001638 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001636:	e009      	b.n	800164c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	f003 021f 	and.w	r2, r3, #31
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	e008      	b.n	8001662 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001656:	f043 0208 	orr.w	r2, r3, #8
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
  }
}
 8001662:	4618      	mov	r0, r3
 8001664:	372c      	adds	r7, #44	; 0x2c
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	08004e18 	.word	0x08004e18

08001674 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001686:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d002      	beq.n	8001694 <HAL_FDCAN_ActivateNotification+0x20>
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d155      	bne.n	8001740 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d108      	bne.n	80016b4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 0201 	orr.w	r2, r2, #1
 80016b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016b2:	e014      	b.n	80016de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4013      	ands	r3, r2
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d108      	bne.n	80016d6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0202 	orr.w	r2, r2, #2
 80016d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80016d4:	e003      	b.n	80016de <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2203      	movs	r2, #3
 80016dc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d009      	beq.n	80016fc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d009      	beq.n	800171a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	430a      	orrs	r2, r1
 8001716:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_FDCAN_ActivateNotification+0xec>)
 8001724:	4013      	ands	r3, r2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	430b      	orrs	r3, r1
 800172c:	6553      	str	r3, [r2, #84]	; 0x54
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	0f9b      	lsrs	r3, r3, #30
 8001736:	490b      	ldr	r1, [pc, #44]	; (8001764 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001738:	4313      	orrs	r3, r2
 800173a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e008      	b.n	8001752 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001746:	f043 0202 	orr.w	r2, r3, #2
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
  }
}
 8001752:	4618      	mov	r0, r3
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	3fcfffff 	.word	0x3fcfffff
 8001764:	4000a800 	.word	0x4000a800

08001768 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b092      	sub	sp, #72	; 0x48
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001770:	4b90      	ldr	r3, [pc, #576]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	079b      	lsls	r3, r3, #30
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001778:	4b8e      	ldr	r3, [pc, #568]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	079b      	lsls	r3, r3, #30
 800177e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001780:	4013      	ands	r3, r2
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800178e:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001798:	4013      	ands	r3, r2
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b0:	4013      	ands	r3, r2
 80017b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80017c8:	4013      	ands	r3, r2
 80017ca:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017d2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017e0:	4013      	ands	r3, r2
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ea:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017f8:	4013      	ands	r3, r2
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d011      	beq.n	800182e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00a      	beq.n	800182e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001820:	651a      	str	r2, [r3, #80]	; 0x50
 8001822:	4b64      	ldr	r3, [pc, #400]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fa5a 	bl	8001ce2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d01e      	beq.n	800187a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d017      	beq.n	800187a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800185c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185e:	4013      	ands	r3, r2
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800186a:	651a      	str	r2, [r3, #80]	; 0x50
 800186c:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 fa0b 	bl	8001c90 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800187a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00d      	beq.n	800189c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001886:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_FDCAN_IRQHandler+0x250>)
 8001888:	400b      	ands	r3, r1
 800188a:	6513      	str	r3, [r2, #80]	; 0x50
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800188e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001890:	0f9b      	lsrs	r3, r3, #30
 8001892:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001894:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f9c4 	bl	8001c24 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800189c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00d      	beq.n	80018be <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <HAL_FDCAN_IRQHandler+0x250>)
 80018aa:	400b      	ands	r3, r1
 80018ac:	6513      	str	r3, [r2, #80]	; 0x50
 80018ae:	4a41      	ldr	r2, [pc, #260]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80018b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018b2:	0f9b      	lsrs	r3, r3, #30
 80018b4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80018b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f9be 	bl	8001c3a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80018be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00d      	beq.n	80018e0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018ca:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <HAL_FDCAN_IRQHandler+0x250>)
 80018cc:	400b      	ands	r3, r1
 80018ce:	6513      	str	r3, [r2, #80]	; 0x50
 80018d0:	4a38      	ldr	r2, [pc, #224]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80018d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d4:	0f9b      	lsrs	r3, r3, #30
 80018d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80018d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe fe66 	bl	80005ac <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80018e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_FDCAN_IRQHandler+0x250>)
 80018ee:	400b      	ands	r3, r1
 80018f0:	6513      	str	r3, [r2, #80]	; 0x50
 80018f2:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80018f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f6:	0f9b      	lsrs	r3, r3, #30
 80018f8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80018fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f9a7 	bl	8001c50 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190c:	2b00      	cmp	r3, #0
 800190e:	d011      	beq.n	8001934 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001926:	651a      	str	r2, [r3, #80]	; 0x50
 8001928:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f999 	bl	8001c66 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193e:	2b00      	cmp	r3, #0
 8001940:	d01e      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194c:	2b00      	cmp	r3, #0
 800194e:	d017      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001964:	4013      	ands	r3, r2
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001970:	651a      	str	r2, [r3, #80]	; 0x50
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f97d 	bl	8001c7a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d016      	beq.n	80019bc <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00f      	beq.n	80019bc <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019a4:	651a      	str	r2, [r3, #80]	; 0x50
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_FDCAN_IRQHandler+0x24c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 f97a 	bl	8001ca6 <HAL_FDCAN_RxBufferNewMessageCallback>
 80019b2:	e003      	b.n	80019bc <HAL_FDCAN_IRQHandler+0x254>
 80019b4:	4000a800 	.word	0x4000a800
 80019b8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d011      	beq.n	80019ee <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e0:	651a      	str	r2, [r3, #80]	; 0x50
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f966 	bl	8001cba <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d011      	beq.n	8001a20 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00a      	beq.n	8001a20 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a12:	651a      	str	r2, [r3, #80]	; 0x50
 8001a14:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f957 	bl	8001cce <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d016      	beq.n	8001a5c <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00f      	beq.n	8001a5c <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a44:	651a      	str	r2, [r3, #80]	; 0x50
 8001a46:	4b74      	ldr	r3, [pc, #464]	; (8001c18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00d      	beq.n	8001a7e <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a68:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	6513      	str	r3, [r2, #80]	; 0x50
 8001a6e:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	0f9b      	lsrs	r3, r3, #30
 8001a74:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f946 	bl	8001d0a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d011      	beq.n	8001aa8 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a8a:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <HAL_FDCAN_IRQHandler+0x4b4>)
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	6513      	str	r3, [r2, #80]	; 0x50
 8001a90:	4a61      	ldr	r2, [pc, #388]	; (8001c18 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a94:	0f9b      	lsrs	r3, r3, #30
 8001a96:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 80a6 	bne.w	8001c00 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 809e 	beq.w	8001c00 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ad8:	4013      	ands	r3, r2
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ae6:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	6a3a      	ldr	r2, [r7, #32]
 8001af0:	4013      	ands	r3, r2
 8001af2:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001afe:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001b16:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001b2e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001b4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f8e7 	bl	8001d20 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	6a3a      	ldr	r2, [r7, #32]
 8001b5e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001b60:	6a39      	ldr	r1, [r7, #32]
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8e7 	bl	8001d36 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01b      	beq.n	8001bae <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d014      	beq.n	8001bae <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b9a:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2240      	movs	r2, #64	; 0x40
 8001ba2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	6939      	ldr	r1, [r7, #16]
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f8cf 	bl	8001d4c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001bbc:	69f9      	ldr	r1, [r7, #28]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8d0 	bl	8001d64 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00b      	beq.n	8001c00 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f873 	bl	8001cf6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c10:	bf00      	nop
 8001c12:	3748      	adds	r7, #72	; 0x48
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	4000a800 	.word	0x4000a800
 8001c1c:	3fcfffff 	.word	0x3fcfffff
 8001c20:	4000a000 	.word	0x4000a000

08001c24 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d92:	4ba7      	ldr	r3, [pc, #668]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	0091      	lsls	r1, r2, #2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6812      	ldr	r2, [r2, #0]
 8001d9e:	430b      	orrs	r3, r1
 8001da0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dac:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001dd2:	4b97      	ldr	r3, [pc, #604]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	0091      	lsls	r1, r2, #2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	430b      	orrs	r3, r1
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dec:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	4413      	add	r3, r2
 8001e0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001e14:	4b86      	ldr	r3, [pc, #536]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	0091      	lsls	r1, r2, #2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	430b      	orrs	r3, r1
 8001e22:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001e2e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4413      	add	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e5c:	4b74      	ldr	r3, [pc, #464]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	0091      	lsls	r1, r2, #2
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	430b      	orrs	r3, r1
 8001e6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	4413      	add	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001ea4:	4b62      	ldr	r3, [pc, #392]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	0091      	lsls	r1, r2, #2
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ed0:	4b57      	ldr	r3, [pc, #348]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	0091      	lsls	r1, r2, #2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eea:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	041a      	lsls	r2, r3, #16
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	4413      	add	r3, r2
 8001f08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	0091      	lsls	r1, r2, #2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f2c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	041a      	lsls	r2, r3, #16
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f48:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	061a      	lsls	r2, r3, #24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f60:	4b34      	ldr	r3, [pc, #208]	; (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f62:	4413      	add	r3, r2
 8001f64:	009a      	lsls	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f96:	fb01 f303 	mul.w	r3, r1, r3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	441a      	add	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	441a      	add	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	441a      	add	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	441a      	add	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002026:	4a04      	ldr	r2, [pc, #16]	; (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d915      	bls.n	8002058 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800202c:	e006      	b.n	800203c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800202e:	bf00      	nop
 8002030:	ffff0003 	.word	0xffff0003
 8002034:	10002b00 	.word	0x10002b00
 8002038:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2203      	movs	r2, #3
 8002050:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e010      	b.n	800207a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e005      	b.n	800206c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3304      	adds	r3, #4
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d3f3      	bcc.n	8002060 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
 8002094:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10a      	bne.n	80020b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80020a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e00a      	b.n	80020ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80020bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80020c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020e0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f4:	6839      	ldr	r1, [r7, #0]
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3304      	adds	r3, #4
 800210a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	3304      	adds	r3, #4
 8002116:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e020      	b.n	8002160 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3303      	adds	r3, #3
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	3302      	adds	r3, #2
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	440b      	add	r3, r1
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002136:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	440b      	add	r3, r1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002144:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	440a      	add	r2, r1
 800214c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800214e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	3304      	adds	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <FDCAN_CopyMessageToRAM+0xf8>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	461a      	mov	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	4293      	cmp	r3, r2
 8002170:	d3d5      	bcc.n	800211e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	3724      	adds	r7, #36	; 0x24
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	08004e18 	.word	0x08004e18

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002192:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_GPIO_Init+0x234>)
 8002194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002196:	e194      	b.n	80024c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2101      	movs	r1, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8186 	beq.w	80024bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d005      	beq.n	80021c8 <HAL_GPIO_Init+0x44>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d130      	bne.n	800222a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fe:	2201      	movs	r2, #1
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	091b      	lsrs	r3, r3, #4
 8002214:	f003 0201 	and.w	r2, r3, #1
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b03      	cmp	r3, #3
 8002234:	d017      	beq.n	8002266 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d123      	bne.n	80022ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	08da      	lsrs	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3208      	adds	r2, #8
 800227a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	220f      	movs	r2, #15
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	69b9      	ldr	r1, [r7, #24]
 80022b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0203 	and.w	r2, r3, #3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80e0 	beq.w	80024bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <HAL_GPIO_Init+0x238>)
 80022fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002302:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <HAL_GPIO_Init+0x238>)
 8002304:	f043 0302 	orr.w	r3, r3, #2
 8002308:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_GPIO_Init+0x238>)
 800230e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a29      	ldr	r2, [pc, #164]	; (80023c0 <HAL_GPIO_Init+0x23c>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_GPIO_Init+0x240>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d052      	beq.n	80023ec <HAL_GPIO_Init+0x268>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a1f      	ldr	r2, [pc, #124]	; (80023c8 <HAL_GPIO_Init+0x244>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d031      	beq.n	80023b2 <HAL_GPIO_Init+0x22e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_GPIO_Init+0x248>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d02b      	beq.n	80023ae <HAL_GPIO_Init+0x22a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_GPIO_Init+0x24c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d025      	beq.n	80023aa <HAL_GPIO_Init+0x226>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <HAL_GPIO_Init+0x250>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01f      	beq.n	80023a6 <HAL_GPIO_Init+0x222>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a1b      	ldr	r2, [pc, #108]	; (80023d8 <HAL_GPIO_Init+0x254>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d019      	beq.n	80023a2 <HAL_GPIO_Init+0x21e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_GPIO_Init+0x258>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d013      	beq.n	800239e <HAL_GPIO_Init+0x21a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x25c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d00d      	beq.n	800239a <HAL_GPIO_Init+0x216>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <HAL_GPIO_Init+0x260>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d007      	beq.n	8002396 <HAL_GPIO_Init+0x212>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_GPIO_Init+0x264>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_GPIO_Init+0x20e>
 800238e:	2309      	movs	r3, #9
 8002390:	e02d      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 8002392:	230a      	movs	r3, #10
 8002394:	e02b      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 8002396:	2308      	movs	r3, #8
 8002398:	e029      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 800239a:	2307      	movs	r3, #7
 800239c:	e027      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 800239e:	2306      	movs	r3, #6
 80023a0:	e025      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023a2:	2305      	movs	r3, #5
 80023a4:	e023      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023a6:	2304      	movs	r3, #4
 80023a8:	e021      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e01f      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e01d      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01b      	b.n	80023ee <HAL_GPIO_Init+0x26a>
 80023b6:	bf00      	nop
 80023b8:	58000080 	.word	0x58000080
 80023bc:	58024400 	.word	0x58024400
 80023c0:	58000400 	.word	0x58000400
 80023c4:	58020000 	.word	0x58020000
 80023c8:	58020400 	.word	0x58020400
 80023cc:	58020800 	.word	0x58020800
 80023d0:	58020c00 	.word	0x58020c00
 80023d4:	58021000 	.word	0x58021000
 80023d8:	58021400 	.word	0x58021400
 80023dc:	58021800 	.word	0x58021800
 80023e0:	58021c00 	.word	0x58021c00
 80023e4:	58022000 	.word	0x58022000
 80023e8:	58022400 	.word	0x58022400
 80023ec:	2300      	movs	r3, #0
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f002 0203 	and.w	r2, r2, #3
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	4093      	lsls	r3, r2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023fe:	4938      	ldr	r1, [pc, #224]	; (80024e0 <HAL_GPIO_Init+0x35c>)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800240c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	3301      	adds	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f47f ae63 	bne.w	8002198 <HAL_GPIO_Init+0x14>
  }
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	3724      	adds	r7, #36	; 0x24
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	58000400 	.word	0x58000400

080024e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	2b06      	cmp	r3, #6
 80024f6:	d00a      	beq.n	800250e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e040      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e03e      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002516:	491f      	ldr	r1, [pc, #124]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4313      	orrs	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800251e:	f7fe faef 	bl	8000b00 <HAL_GetTick>
 8002522:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002524:	e009      	b.n	800253a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002526:	f7fe faeb 	bl	8000b00 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002534:	d901      	bls.n	800253a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e028      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d1ee      	bne.n	8002526 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b1e      	cmp	r3, #30
 800254c:	d008      	beq.n	8002560 <HAL_PWREx_ConfigSupply+0x7c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b2e      	cmp	r3, #46	; 0x2e
 8002552:	d005      	beq.n	8002560 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b1d      	cmp	r3, #29
 8002558:	d002      	beq.n	8002560 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b2d      	cmp	r3, #45	; 0x2d
 800255e:	d114      	bne.n	800258a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002560:	f7fe face 	bl	8000b00 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002566:	e009      	b.n	800257c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002568:	f7fe faca 	bl	8000b00 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002576:	d901      	bls.n	800257c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e007      	b.n	800258c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_PWREx_ConfigSupply+0xb0>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d1ee      	bne.n	8002568 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024800 	.word	0x58024800

08002598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	; 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e3f3      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 80b3 	beq.w	800271e <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b8:	4b9e      	ldr	r3, [pc, #632]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025c2:	4b9c      	ldr	r3, [pc, #624]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d007      	beq.n	80025de <HAL_RCC_OscConfig+0x46>
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b18      	cmp	r3, #24
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x62>
 80025d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d10d      	bne.n	80025fa <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025de:	4b95      	ldr	r3, [pc, #596]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8098 	beq.w	800271c <HAL_RCC_OscConfig+0x184>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f040 8093 	bne.w	800271c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e3cb      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x7a>
 8002604:	4b8b      	ldr	r3, [pc, #556]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a8a      	ldr	r2, [pc, #552]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e058      	b.n	80026c4 <HAL_RCC_OscConfig+0x12c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <HAL_RCC_OscConfig+0xa8>
 800261a:	4b86      	ldr	r3, [pc, #536]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a85      	ldr	r2, [pc, #532]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b83      	ldr	r3, [pc, #524]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a82      	ldr	r2, [pc, #520]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800262c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b80      	ldr	r3, [pc, #512]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a7f      	ldr	r2, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e041      	b.n	80026c4 <HAL_RCC_OscConfig+0x12c>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d112      	bne.n	8002670 <HAL_RCC_OscConfig+0xd8>
 800264a:	4b7a      	ldr	r3, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a79      	ldr	r2, [pc, #484]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b77      	ldr	r3, [pc, #476]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a76      	ldr	r2, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800265c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b74      	ldr	r3, [pc, #464]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a73      	ldr	r2, [pc, #460]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e029      	b.n	80026c4 <HAL_RCC_OscConfig+0x12c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002678:	d112      	bne.n	80026a0 <HAL_RCC_OscConfig+0x108>
 800267a:	4b6e      	ldr	r3, [pc, #440]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6d      	ldr	r2, [pc, #436]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b6b      	ldr	r3, [pc, #428]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a6a      	ldr	r2, [pc, #424]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800268c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b68      	ldr	r3, [pc, #416]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a67      	ldr	r2, [pc, #412]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e011      	b.n	80026c4 <HAL_RCC_OscConfig+0x12c>
 80026a0:	4b64      	ldr	r3, [pc, #400]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b61      	ldr	r3, [pc, #388]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a60      	ldr	r2, [pc, #384]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5d      	ldr	r2, [pc, #372]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fa18 	bl	8000b00 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d4:	f7fe fa14 	bl	8000b00 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	; 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e355      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e6:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x13c>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fa04 	bl	8000b00 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7fe fa00 	bl	8000b00 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e341      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x164>
 800271a:	e000      	b.n	800271e <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 808c 	beq.w	8002844 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002734:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002736:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_RCC_OscConfig+0x1ba>
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b18      	cmp	r3, #24
 8002746:	d137      	bne.n	80027b8 <HAL_RCC_OscConfig+0x220>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d132      	bne.n	80027b8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x1d2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e313      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0219 	bic.w	r2, r3, #25
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	492f      	ldr	r1, [pc, #188]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800277c:	f7fe f9c0 	bl	8000b00 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002784:	f7fe f9bc 	bl	8000b00 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e2fd      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	4920      	ldr	r1, [pc, #128]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b6:	e045      	b.n	8002844 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d026      	beq.n	800280e <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 0219 	bic.w	r2, r3, #25
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4919      	ldr	r1, [pc, #100]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe f995 	bl	8000b00 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027da:	f7fe f991 	bl	8000b00 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e2d2      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	061b      	lsls	r3, r3, #24
 8002806:	490b      	ldr	r1, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e01a      	b.n	8002844 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a08      	ldr	r2, [pc, #32]	; (8002834 <HAL_RCC_OscConfig+0x29c>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fe f971 	bl	8000b00 <HAL_GetTick>
 800281e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002820:	e00a      	b.n	8002838 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002822:	f7fe f96d 	bl	8000b00 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d903      	bls.n	8002838 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e2ae      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
 8002834:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d06a      	beq.n	8002926 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002850:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002858:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800285a:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d007      	beq.n	8002876 <HAL_RCC_OscConfig+0x2de>
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b18      	cmp	r3, #24
 800286a:	d11b      	bne.n	80028a4 <HAL_RCC_OscConfig+0x30c>
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d116      	bne.n	80028a4 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002876:	4b8a      	ldr	r3, [pc, #552]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_RCC_OscConfig+0x2f6>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d001      	beq.n	800288e <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e281      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800288e:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	4980      	ldr	r1, [pc, #512]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028a2:	e040      	b.n	8002926 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028ac:	4b7c      	ldr	r3, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a7b      	ldr	r2, [pc, #492]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe f922 	bl	8000b00 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028c0:	f7fe f91e 	bl	8000b00 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e25f      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028d2:	4b73      	ldr	r3, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028de:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	496c      	ldr	r1, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
 80028f2:	e018      	b.n	8002926 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80028fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe f8fe 	bl	8000b00 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002908:	f7fe f8fa 	bl	8000b00 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e23b      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d036      	beq.n	80029a0 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d019      	beq.n	800296e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293a:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 800293c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe f8db 	bl	8000b00 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294e:	f7fe f8d7 	bl	8000b00 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e218      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002960:	4b4f      	ldr	r3, [pc, #316]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x3b6>
 800296c:	e018      	b.n	80029a0 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800296e:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002972:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe f8c1 	bl	8000b00 <HAL_GetTick>
 800297e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe f8bd 	bl	8000b00 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1fe      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002994:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d036      	beq.n	8002a1a <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d019      	beq.n	80029e8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a39      	ldr	r2, [pc, #228]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80029ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029c0:	f7fe f89e 	bl	8000b00 <HAL_GetTick>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029c8:	f7fe f89a 	bl	8000b00 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1db      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029da:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x430>
 80029e6:	e018      	b.n	8002a1a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029e8:	4b2d      	ldr	r3, [pc, #180]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 80029ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029f4:	f7fe f884 	bl	8000b00 <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80029fc:	f7fe f880 	bl	8000b00 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1c1      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80af 	beq.w	8002b86 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a28:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <HAL_RCC_OscConfig+0x50c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_RCC_OscConfig+0x50c>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a34:	f7fe f864 	bl	8000b00 <HAL_GetTick>
 8002a38:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a3c:	f7fe f860 	bl	8000b00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	; 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e1a1      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a4e:	4b15      	ldr	r3, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x50c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d106      	bne.n	8002a70 <HAL_RCC_OscConfig+0x4d8>
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e05b      	b.n	8002b28 <HAL_RCC_OscConfig+0x590>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d117      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x510>
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a08      	ldr	r2, [pc, #32]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a02      	ldr	r2, [pc, #8]	; (8002aa0 <HAL_RCC_OscConfig+0x508>)
 8002a96:	f023 0304 	bic.w	r3, r3, #4
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e044      	b.n	8002b28 <HAL_RCC_OscConfig+0x590>
 8002a9e:	bf00      	nop
 8002aa0:	58024400 	.word	0x58024400
 8002aa4:	58024800 	.word	0x58024800
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b05      	cmp	r3, #5
 8002aae:	d112      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x53e>
 8002ab0:	4b95      	ldr	r3, [pc, #596]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a94      	ldr	r2, [pc, #592]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	4b92      	ldr	r3, [pc, #584]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4a91      	ldr	r2, [pc, #580]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac8:	4b8f      	ldr	r3, [pc, #572]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a8e      	ldr	r2, [pc, #568]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e028      	b.n	8002b28 <HAL_RCC_OscConfig+0x590>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b85      	cmp	r3, #133	; 0x85
 8002adc:	d112      	bne.n	8002b04 <HAL_RCC_OscConfig+0x56c>
 8002ade:	4b8a      	ldr	r3, [pc, #552]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a89      	ldr	r2, [pc, #548]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	4b87      	ldr	r3, [pc, #540]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a86      	ldr	r2, [pc, #536]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b84      	ldr	r3, [pc, #528]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a83      	ldr	r2, [pc, #524]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
 8002b02:	e011      	b.n	8002b28 <HAL_RCC_OscConfig+0x590>
 8002b04:	4b80      	ldr	r3, [pc, #512]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a7f      	ldr	r2, [pc, #508]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	4a79      	ldr	r2, [pc, #484]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fd ffe6 	bl	8000b00 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fd ffe2 	bl	8000b00 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e121      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b4e:	4b6e      	ldr	r3, [pc, #440]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0ee      	beq.n	8002b38 <HAL_RCC_OscConfig+0x5a0>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fd ffd0 	bl	8000b00 <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fd ffcc 	bl	8000b00 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e10b      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ee      	bne.n	8002b64 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8100 	beq.w	8002d90 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b90:	4b5d      	ldr	r3, [pc, #372]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b98:	2b18      	cmp	r3, #24
 8002b9a:	f000 80bb 	beq.w	8002d14 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	f040 8095 	bne.w	8002cd2 <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	4b57      	ldr	r3, [pc, #348]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a56      	ldr	r2, [pc, #344]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7fd ffa4 	bl	8000b00 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fd ffa0 	bl	8000b00 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e0e1      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bce:	4b4e      	ldr	r3, [pc, #312]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bda:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bde:	4b4b      	ldr	r3, [pc, #300]	; (8002d0c <HAL_RCC_OscConfig+0x774>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	430a      	orrs	r2, r1
 8002bee:	4946      	ldr	r1, [pc, #280]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	628b      	str	r3, [r1, #40]	; 0x28
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c02:	3b01      	subs	r3, #1
 8002c04:	025b      	lsls	r3, r3, #9
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c24:	4938      	ldr	r1, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c2a:	4b37      	ldr	r3, [pc, #220]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	4a36      	ldr	r2, [pc, #216]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3a:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCC_OscConfig+0x778>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c42:	00d2      	lsls	r2, r2, #3
 8002c44:	4930      	ldr	r1, [pc, #192]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	f023 020c 	bic.w	r2, r3, #12
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	492c      	ldr	r1, [pc, #176]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c5c:	4b2a      	ldr	r3, [pc, #168]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	f023 0202 	bic.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	4927      	ldr	r1, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	4a25      	ldr	r2, [pc, #148]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c7a:	4b23      	ldr	r3, [pc, #140]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4a1f      	ldr	r2, [pc, #124]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002caa:	f7fd ff29 	bl	8000b00 <HAL_GetTick>
 8002cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb2:	f7fd ff25 	bl	8000b00 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e066      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x71a>
 8002cd0:	e05e      	b.n	8002d90 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a0c      	ldr	r2, [pc, #48]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fd ff0f 	bl	8000b00 <HAL_GetTick>
 8002ce2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fd ff0b 	bl	8000b00 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e04c      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_RCC_OscConfig+0x770>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x74e>
 8002d04:	e044      	b.n	8002d90 <HAL_RCC_OscConfig+0x7f8>
 8002d06:	bf00      	nop
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	fffffc0c 	.word	0xfffffc0c
 8002d10:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x804>)
 8002d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d1a:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x804>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d031      	beq.n	8002d8c <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0203 	and.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d12a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d122      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d111      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	0c1b      	lsrs	r3, r3, #16
 8002d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d108      	bne.n	8002d8c <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	0e1b      	lsrs	r3, r3, #24
 8002d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3730      	adds	r7, #48	; 0x30
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	58024400 	.word	0x58024400

08002da0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e19c      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db4:	4b8a      	ldr	r3, [pc, #552]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d910      	bls.n	8002de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b87      	ldr	r3, [pc, #540]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 020f 	bic.w	r2, r3, #15
 8002dca:	4985      	ldr	r1, [pc, #532]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd2:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e184      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0304 	and.w	r3, r3, #4
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	4b7b      	ldr	r3, [pc, #492]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d908      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e00:	4b78      	ldr	r3, [pc, #480]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	4975      	ldr	r1, [pc, #468]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d908      	bls.n	8002e40 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	496a      	ldr	r1, [pc, #424]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699a      	ldr	r2, [r3, #24]
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d908      	bls.n	8002e6e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e5c:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	495e      	ldr	r1, [pc, #376]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d908      	bls.n	8002e9c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e8a:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	4953      	ldr	r1, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	4b4d      	ldr	r3, [pc, #308]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d908      	bls.n	8002eca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb8:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f023 020f 	bic.w	r2, r3, #15
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4947      	ldr	r1, [pc, #284]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d055      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ed6:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4940      	ldr	r1, [pc, #256]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d121      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0f6      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f08:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d115      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0ea      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d107      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f20:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0de      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f30:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0d6      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f023 0207 	bic.w	r2, r3, #7
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4925      	ldr	r1, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7fd fdd5 	bl	8000b00 <HAL_GetTick>
 8002f56:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f5a:	f7fd fdd1 	bl	8000b00 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0be      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d1eb      	bne.n	8002f5a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d208      	bcs.n	8002fb0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f023 020f 	bic.w	r2, r3, #15
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d214      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 020f 	bic.w	r2, r3, #15
 8002fc6:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b04      	ldr	r3, [pc, #16]	; (8002fe0 <HAL_RCC_ClockConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d005      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e086      	b.n	80030ee <HAL_RCC_ClockConfig+0x34e>
 8002fe0:	52002000 	.word	0x52002000
 8002fe4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d010      	beq.n	8003016 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	4b3f      	ldr	r3, [pc, #252]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003000:	429a      	cmp	r2, r3
 8003002:	d208      	bcs.n	8003016 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003004:	4b3c      	ldr	r3, [pc, #240]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	4939      	ldr	r1, [pc, #228]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003012:	4313      	orrs	r3, r2
 8003014:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302e:	429a      	cmp	r2, r3
 8003030:	d208      	bcs.n	8003044 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	492e      	ldr	r1, [pc, #184]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003040:	4313      	orrs	r3, r2
 8003042:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699a      	ldr	r2, [r3, #24]
 8003054:	4b28      	ldr	r3, [pc, #160]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800305c:	429a      	cmp	r2, r3
 800305e:	d208      	bcs.n	8003072 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	4922      	ldr	r1, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 800306e:	4313      	orrs	r3, r2
 8003070:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0320 	and.w	r3, r3, #32
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69da      	ldr	r2, [r3, #28]
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800308a:	429a      	cmp	r2, r3
 800308c:	d208      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	4917      	ldr	r1, [pc, #92]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 800309c:	4313      	orrs	r3, r2
 800309e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80030a0:	f000 f834 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	4912      	ldr	r1, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x35c>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030be:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <HAL_RCC_ClockConfig+0x358>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <HAL_RCC_ClockConfig+0x35c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x360>)
 80030d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d8:	4a0a      	ldr	r2, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x364>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x368>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fcc2 	bl	8000a6c <HAL_InitTick>
 80030e8:	4603      	mov	r3, r0
 80030ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	58024400 	.word	0x58024400
 80030fc:	08004e08 	.word	0x08004e08
 8003100:	24000008 	.word	0x24000008
 8003104:	24000004 	.word	0x24000004
 8003108:	2400000c 	.word	0x2400000c

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003112:	4bb3      	ldr	r3, [pc, #716]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311a:	2b18      	cmp	r3, #24
 800311c:	f200 8155 	bhi.w	80033ca <HAL_RCC_GetSysClockFreq+0x2be>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800318d 	.word	0x0800318d
 800312c:	080033cb 	.word	0x080033cb
 8003130:	080033cb 	.word	0x080033cb
 8003134:	080033cb 	.word	0x080033cb
 8003138:	080033cb 	.word	0x080033cb
 800313c:	080033cb 	.word	0x080033cb
 8003140:	080033cb 	.word	0x080033cb
 8003144:	080033cb 	.word	0x080033cb
 8003148:	080031b3 	.word	0x080031b3
 800314c:	080033cb 	.word	0x080033cb
 8003150:	080033cb 	.word	0x080033cb
 8003154:	080033cb 	.word	0x080033cb
 8003158:	080033cb 	.word	0x080033cb
 800315c:	080033cb 	.word	0x080033cb
 8003160:	080033cb 	.word	0x080033cb
 8003164:	080033cb 	.word	0x080033cb
 8003168:	080031b9 	.word	0x080031b9
 800316c:	080033cb 	.word	0x080033cb
 8003170:	080033cb 	.word	0x080033cb
 8003174:	080033cb 	.word	0x080033cb
 8003178:	080033cb 	.word	0x080033cb
 800317c:	080033cb 	.word	0x080033cb
 8003180:	080033cb 	.word	0x080033cb
 8003184:	080033cb 	.word	0x080033cb
 8003188:	080031bf 	.word	0x080031bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800318c:	4b94      	ldr	r3, [pc, #592]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	2b00      	cmp	r3, #0
 8003196:	d009      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003198:	4b91      	ldr	r3, [pc, #580]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	4a90      	ldr	r2, [pc, #576]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a4:	fa22 f303 	lsr.w	r3, r2, r3
 80031a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031aa:	e111      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031ac:	4b8d      	ldr	r3, [pc, #564]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031ae:	61bb      	str	r3, [r7, #24]
    break;
 80031b0:	e10e      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031b2:	4b8d      	ldr	r3, [pc, #564]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031b4:	61bb      	str	r3, [r7, #24]
    break;
 80031b6:	e10b      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031b8:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031ba:	61bb      	str	r3, [r7, #24]
    break;
 80031bc:	e108      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031be:	4b88      	ldr	r3, [pc, #544]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031c8:	4b85      	ldr	r3, [pc, #532]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031d4:	4b82      	ldr	r3, [pc, #520]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031de:	4b80      	ldr	r3, [pc, #512]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	08db      	lsrs	r3, r3, #3
 80031e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80e1 	beq.w	80033c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b02      	cmp	r3, #2
 8003206:	f000 8083 	beq.w	8003310 <HAL_RCC_GetSysClockFreq+0x204>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b02      	cmp	r3, #2
 800320e:	f200 80a1 	bhi.w	8003354 <HAL_RCC_GetSysClockFreq+0x248>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x114>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d056      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800321e:	e099      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003220:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02d      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800322c:	4b6c      	ldr	r3, [pc, #432]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	4a6b      	ldr	r2, [pc, #428]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003256:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003266:	ed97 6a02 	vldr	s12, [r7, #8]
 800326a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800326e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800327a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003286:	e087      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003292:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329a:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ca:	e065      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800330e:	e043      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800331e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003322:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003332:	ed97 6a02 	vldr	s12, [r7, #8]
 8003336:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800333a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003352:	e021      	b.n	8003398 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003376:	ed97 6a02 	vldr	s12, [r7, #8]
 800337a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800338a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003396:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	0a5b      	lsrs	r3, r3, #9
 800339e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033a2:	3301      	adds	r3, #1
 80033a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	ee07 3a90 	vmov	s15, r3
 80033ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80033b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033bc:	ee17 3a90 	vmov	r3, s15
 80033c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033c2:	e005      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
    break;
 80033c8:	e002      	b.n	80033d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033ca:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033cc:	61bb      	str	r3, [r7, #24]
    break;
 80033ce:	bf00      	nop
  }

  return sysclockfreq;
 80033d0:	69bb      	ldr	r3, [r7, #24]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	58024400 	.word	0x58024400
 80033e4:	03d09000 	.word	0x03d09000
 80033e8:	003d0900 	.word	0x003d0900
 80033ec:	016e3600 	.word	0x016e3600
 80033f0:	46000000 	.word	0x46000000
 80033f4:	4c742400 	.word	0x4c742400
 80033f8:	4a742400 	.word	0x4a742400
 80033fc:	4bb71b00 	.word	0x4bb71b00

08003400 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003408:	2300      	movs	r3, #0
 800340a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800340c:	2300      	movs	r3, #0
 800340e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03f      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003424:	d02a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342a:	d824      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800342c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003430:	d018      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003436:	d81e      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800343c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003440:	d007      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003444:	4ba6      	ldr	r3, [pc, #664]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4aa5      	ldr	r2, [pc, #660]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800344a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003450:	e015      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2102      	movs	r1, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fedd 	bl	8004218 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003462:	e00c      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3324      	adds	r3, #36	; 0x24
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f000 ff86 	bl	800437c <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800347c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347e:	7dfb      	ldrb	r3, [r7, #23]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003484:	4b96      	ldr	r3, [pc, #600]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003488:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003490:	4993      	ldr	r1, [pc, #588]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	650b      	str	r3, [r1, #80]	; 0x50
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d03d      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d826      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034cd 	.word	0x080034cd
 80034bc:	080034db 	.word	0x080034db
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	08003505 	.word	0x08003505
 80034c8:	08003505 	.word	0x08003505
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034cc:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d0:	4a83      	ldr	r2, [pc, #524]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80034d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d8:	e015      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fe99 	bl	8004218 <RCCEx_PLL2_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034ea:	e00c      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3324      	adds	r3, #36	; 0x24
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 ff42 	bl	800437c <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
      break;
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800350c:	4b74      	ldr	r3, [pc, #464]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	4971      	ldr	r1, [pc, #452]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	650b      	str	r3, [r1, #80]	; 0x50
 800351e:	e001      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
 8003522:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352c:	2b00      	cmp	r3, #0
 800352e:	d04a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003538:	d031      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800353a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800353e:	d82b      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003544:	d02d      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d825      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800354c:	2bc0      	cmp	r3, #192	; 0xc0
 800354e:	d02a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003550:	2bc0      	cmp	r3, #192	; 0xc0
 8003552:	d821      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d016      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d81d      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d007      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003564:	e018      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003566:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800356c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003572:	e019      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3304      	adds	r3, #4
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fe4c 	bl	8004218 <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003584:	e010      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3324      	adds	r3, #36	; 0x24
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fef5 	bl	800437c <RCCEx_PLL3_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003596:	e007      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	75fb      	strb	r3, [r7, #23]
      break;
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80035a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80035ae:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	4949      	ldr	r1, [pc, #292]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	650b      	str	r3, [r1, #80]	; 0x50
 80035c0:	e001      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d04f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035da:	d036      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80035dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80035e0:	d830      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d032      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80035e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ec:	d82a      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80035ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035f2:	d02e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80035f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035f8:	d824      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80035fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fe:	d018      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d81e      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800360a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360e:	d007      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003610:	e018      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003612:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4a32      	ldr	r2, [pc, #200]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800361e:	e019      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fdf6 	bl	8004218 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003630:	e010      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3324      	adds	r3, #36	; 0x24
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fe9f 	bl	800437c <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003642:	e007      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	75fb      	strb	r3, [r7, #23]
      break;
 8003648:	e004      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800364a:	bf00      	nop
 800364c:	e002      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800364e:	bf00      	nop
 8003650:	e000      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003654:	7dfb      	ldrb	r3, [r7, #23]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800365c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	491e      	ldr	r1, [pc, #120]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003668:	4313      	orrs	r3, r2
 800366a:	650b      	str	r3, [r1, #80]	; 0x50
 800366c:	e001      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d034      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003682:	2b30      	cmp	r3, #48	; 0x30
 8003684:	d01c      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003686:	2b30      	cmp	r3, #48	; 0x30
 8003688:	d817      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800368a:	2b20      	cmp	r3, #32
 800368c:	d00c      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800368e:	2b20      	cmp	r3, #32
 8003690:	d813      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8003696:	2b10      	cmp	r3, #16
 8003698:	d10f      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369a:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036a6:	e00e      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fdb2 	bl	8004218 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80036b8:	e005      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	75fb      	strb	r3, [r7, #23]
      break;
 80036be:	e002      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 80036c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80036cc:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	4901      	ldr	r1, [pc, #4]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80036e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d047      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036fc:	d030      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003702:	d82a      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003704:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003708:	d02c      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800370a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800370e:	d824      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003714:	d018      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371a:	d81e      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d007      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003726:	e018      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003728:	4bb0      	ldr	r3, [pc, #704]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	4aaf      	ldr	r2, [pc, #700]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800372e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003734:	e017      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3304      	adds	r3, #4
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f000 fd6b 	bl	8004218 <RCCEx_PLL2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003746:	e00e      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3324      	adds	r3, #36	; 0x24
 800374c:	2100      	movs	r1, #0
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fe14 	bl	800437c <RCCEx_PLL3_Config>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003758:	e005      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800376c:	4b9f      	ldr	r3, [pc, #636]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003778:	499c      	ldr	r1, [pc, #624]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800377a:	4313      	orrs	r3, r2
 800377c:	650b      	str	r3, [r1, #80]	; 0x50
 800377e:	e001      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d049      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003798:	d02e      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800379a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800379e:	d828      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037a4:	d02a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80037a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037aa:	d822      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037b0:	d026      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80037b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037b6:	d81c      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037bc:	d010      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c2:	d816      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01d      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d111      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fd1f 	bl	8004218 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037de:	e012      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2101      	movs	r1, #1
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fdc8 	bl	800437c <RCCEx_PLL3_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80037f0:	e009      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	75fb      	strb	r3, [r7, #23]
      break;
 80037f6:	e006      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80037f8:	bf00      	nop
 80037fa:	e004      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80037fc:	bf00      	nop
 80037fe:	e002      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800380c:	4b77      	ldr	r3, [pc, #476]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003818:	4974      	ldr	r1, [pc, #464]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800381a:	4313      	orrs	r3, r2
 800381c:	650b      	str	r3, [r1, #80]	; 0x50
 800381e:	e001      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d053      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003836:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800383a:	d034      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800383c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003840:	d82e      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003842:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003846:	d030      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800384c:	d828      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003852:	d02c      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003858:	d822      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800385a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800385e:	d028      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003860:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003864:	d81c      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800386a:	d010      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003870:	d816      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01f      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003876:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800387a:	d111      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fcc8 	bl	8004218 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800388c:	e014      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3324      	adds	r3, #36	; 0x24
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fd71 	bl	800437c <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800389e:	e00b      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
      break;
 80038a4:	e008      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038a6:	bf00      	nop
 80038a8:	e006      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038aa:	bf00      	nop
 80038ac:	e004      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038ae:	bf00      	nop
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80038b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b8:	7dfb      	ldrb	r3, [r7, #23]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038be:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038cc:	4947      	ldr	r1, [pc, #284]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	658b      	str	r3, [r1, #88]	; 0x58
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02f      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ec:	d00e      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80038ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f2:	d814      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80038f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fc:	d10f      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4a3a      	ldr	r2, [pc, #232]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800390a:	e00c      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fc80 	bl	8004218 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
      break;
 8003922:	e000      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003926:	7dfb      	ldrb	r3, [r7, #23]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800392c:	4b2f      	ldr	r3, [pc, #188]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	492c      	ldr	r1, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800393a:	4313      	orrs	r3, r2
 800393c:	650b      	str	r3, [r1, #80]	; 0x50
 800393e:	e001      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
 8003942:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d032      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	2b03      	cmp	r3, #3
 8003956:	d81b      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003958:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800395a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395e:	bf00      	nop
 8003960:	08003997 	.word	0x08003997
 8003964:	08003971 	.word	0x08003971
 8003968:	0800397f 	.word	0x0800397f
 800396c:	08003997 	.word	0x08003997
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b1e      	ldr	r3, [pc, #120]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a1d      	ldr	r2, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800397c:	e00c      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fc47 	bl	8004218 <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8003996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039aa:	4910      	ldr	r1, [pc, #64]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039b0:	e001      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 808a 	beq.w	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80039ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039d0:	f7fd f896 	bl	8000b00 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039d6:	e00d      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7fd f892 	bl	8000b00 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d906      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	75fb      	strb	r3, [r7, #23]
        break;
 80039ea:	e009      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80039ec:	58024400 	.word	0x58024400
 80039f0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f4:	4bba      	ldr	r3, [pc, #744]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0eb      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d166      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a06:	4bb7      	ldr	r3, [pc, #732]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a10:	4053      	eors	r3, r2
 8003a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d013      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a1a:	4bb2      	ldr	r3, [pc, #712]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a24:	4baf      	ldr	r3, [pc, #700]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4aae      	ldr	r2, [pc, #696]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a30:	4bac      	ldr	r3, [pc, #688]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a34:	4aab      	ldr	r2, [pc, #684]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a3c:	4aa9      	ldr	r2, [pc, #676]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a4c:	d115      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd f857 	bl	8000b00 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a54:	e00b      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fd f853 	bl	8000b00 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d902      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	75fb      	strb	r3, [r7, #23]
            break;
 8003a6c:	e005      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a6e:	4b9d      	ldr	r3, [pc, #628]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0ed      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d126      	bne.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003a90:	4b94      	ldr	r3, [pc, #592]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a9e:	0919      	lsrs	r1, r3, #4
 8003aa0:	4b91      	ldr	r3, [pc, #580]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	498f      	ldr	r1, [pc, #572]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	610b      	str	r3, [r1, #16]
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003aac:	4b8d      	ldr	r3, [pc, #564]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	4a8c      	ldr	r2, [pc, #560]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ab2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ab6:	6113      	str	r3, [r2, #16]
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003aba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac6:	4987      	ldr	r1, [pc, #540]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	670b      	str	r3, [r1, #112]	; 0x70
 8003acc:	e004      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ace:	7dfb      	ldrb	r3, [r7, #23]
 8003ad0:	75bb      	strb	r3, [r7, #22]
 8003ad2:	e001      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d07f      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aea:	2b28      	cmp	r3, #40	; 0x28
 8003aec:	d866      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8003aee:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003bc3 	.word	0x08003bc3
 8003af8:	08003bbd 	.word	0x08003bbd
 8003afc:	08003bbd 	.word	0x08003bbd
 8003b00:	08003bbd 	.word	0x08003bbd
 8003b04:	08003bbd 	.word	0x08003bbd
 8003b08:	08003bbd 	.word	0x08003bbd
 8003b0c:	08003bbd 	.word	0x08003bbd
 8003b10:	08003bbd 	.word	0x08003bbd
 8003b14:	08003b99 	.word	0x08003b99
 8003b18:	08003bbd 	.word	0x08003bbd
 8003b1c:	08003bbd 	.word	0x08003bbd
 8003b20:	08003bbd 	.word	0x08003bbd
 8003b24:	08003bbd 	.word	0x08003bbd
 8003b28:	08003bbd 	.word	0x08003bbd
 8003b2c:	08003bbd 	.word	0x08003bbd
 8003b30:	08003bbd 	.word	0x08003bbd
 8003b34:	08003bab 	.word	0x08003bab
 8003b38:	08003bbd 	.word	0x08003bbd
 8003b3c:	08003bbd 	.word	0x08003bbd
 8003b40:	08003bbd 	.word	0x08003bbd
 8003b44:	08003bbd 	.word	0x08003bbd
 8003b48:	08003bbd 	.word	0x08003bbd
 8003b4c:	08003bbd 	.word	0x08003bbd
 8003b50:	08003bbd 	.word	0x08003bbd
 8003b54:	08003bc3 	.word	0x08003bc3
 8003b58:	08003bbd 	.word	0x08003bbd
 8003b5c:	08003bbd 	.word	0x08003bbd
 8003b60:	08003bbd 	.word	0x08003bbd
 8003b64:	08003bbd 	.word	0x08003bbd
 8003b68:	08003bbd 	.word	0x08003bbd
 8003b6c:	08003bbd 	.word	0x08003bbd
 8003b70:	08003bbd 	.word	0x08003bbd
 8003b74:	08003bc3 	.word	0x08003bc3
 8003b78:	08003bbd 	.word	0x08003bbd
 8003b7c:	08003bbd 	.word	0x08003bbd
 8003b80:	08003bbd 	.word	0x08003bbd
 8003b84:	08003bbd 	.word	0x08003bbd
 8003b88:	08003bbd 	.word	0x08003bbd
 8003b8c:	08003bbd 	.word	0x08003bbd
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bc3 	.word	0x08003bc3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fb3a 	bl	8004218 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e00c      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fbe3 	bl	800437c <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e000      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8003bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd8:	4942      	ldr	r1, [pc, #264]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	654b      	str	r3, [r1, #84]	; 0x54
 8003bde:	e001      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d038      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d821      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c43 	.word	0x08003c43
 8003c04:	08003c19 	.word	0x08003c19
 8003c08:	08003c2b 	.word	0x08003c2b
 8003c0c:	08003c43 	.word	0x08003c43
 8003c10:	08003c43 	.word	0x08003c43
 8003c14:	08003c43 	.word	0x08003c43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fafa 	bl	8004218 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c28:	e00c      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3324      	adds	r3, #36	; 0x24
 8003c2e:	2101      	movs	r1, #1
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fba3 	bl	800437c <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c4a:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c56:	4923      	ldr	r1, [pc, #140]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	654b      	str	r3, [r1, #84]	; 0x54
 8003c5c:	e001      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d040      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d821      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003cc3 	.word	0x08003cc3
 8003c84:	08003c99 	.word	0x08003c99
 8003c88:	08003cab 	.word	0x08003cab
 8003c8c:	08003cc3 	.word	0x08003cc3
 8003c90:	08003cc3 	.word	0x08003cc3
 8003c94:	08003cc3 	.word	0x08003cc3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 faba 	bl	8004218 <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	3324      	adds	r3, #36	; 0x24
 8003cae:	2101      	movs	r1, #1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fb63 	bl	800437c <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8003cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d110      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	f023 0207 	bic.w	r2, r3, #7
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cd8:	4902      	ldr	r1, [pc, #8]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	658b      	str	r3, [r1, #88]	; 0x58
 8003cde:	e007      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8003ce0:	58024800 	.word	0x58024800
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d04b      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d06:	d02e      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0c:	d828      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d02a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d822      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d1e:	d026      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003d20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d24:	d81c      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2a:	d010      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d30:	d816      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01d      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8003d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3a:	d111      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fa68 	bl	8004218 <RCCEx_PLL2_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d4c:	e012      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3324      	adds	r3, #36	; 0x24
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fb11 	bl	800437c <RCCEx_PLL3_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003d5e:	e009      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
      break;
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d66:	bf00      	nop
 8003d68:	e004      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e002      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d7a:	4bb3      	ldr	r3, [pc, #716]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d88:	49af      	ldr	r1, [pc, #700]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	654b      	str	r3, [r1, #84]	; 0x54
 8003d8e:	e001      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d04b      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003da6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003daa:	d02e      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003dac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003db0:	d828      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db6:	d02a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbc:	d822      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc2:	d026      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003dc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc8:	d81c      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d010      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d816      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01d      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d111      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fa16 	bl	8004218 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003df0:	e012      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3324      	adds	r3, #36	; 0x24
 8003df6:	2102      	movs	r1, #2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fabf 	bl	800437c <RCCEx_PLL3_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
      break;
 8003e08:	e006      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e0a:	bf00      	nop
 8003e0c:	e004      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e0e:	bf00      	nop
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e12:	bf00      	nop
 8003e14:	e000      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8003e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e1e:	4b8a      	ldr	r3, [pc, #552]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e2c:	4986      	ldr	r1, [pc, #536]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	658b      	str	r3, [r1, #88]	; 0x58
 8003e32:	e001      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d04b      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e4e:	d02e      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003e50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e54:	d828      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5a:	d02a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	d822      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e66:	d026      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003e68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e6c:	d81c      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e72:	d010      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e78:	d816      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01d      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3304      	adds	r3, #4
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f9c4 	bl	8004218 <RCCEx_PLL2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003e94:	e012      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3324      	adds	r3, #36	; 0x24
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fa6d 	bl	800437c <RCCEx_PLL3_Config>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ea6:	e009      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	e006      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ec2:	4b61      	ldr	r3, [pc, #388]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ed0:	495d      	ldr	r1, [pc, #372]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01a      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef2:	d10a      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3324      	adds	r3, #36	; 0x24
 8003ef8:	2102      	movs	r1, #2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fa3e 	bl	800437c <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f18:	494b      	ldr	r1, [pc, #300]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f34:	d10a      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3324      	adds	r3, #36	; 0x24
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fa1d 	bl	800437c <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f4c:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5a:	493b      	ldr	r1, [pc, #236]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d034      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f76:	d01d      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003f78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f7c:	d817      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d009      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003f88:	e011      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	2100      	movs	r1, #0
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f941 	bl	8004218 <RCCEx_PLL2_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003f9a:	e00c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3324      	adds	r3, #36	; 0x24
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f9ea 	bl	800437c <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003fac:	e003      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003fb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fbc:	4b22      	ldr	r3, [pc, #136]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fca:	491f      	ldr	r1, [pc, #124]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	658b      	str	r3, [r1, #88]	; 0x58
 8003fd0:	e001      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d036      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fec:	d01c      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ff2:	d816      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff8:	d003      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ffe:	d007      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004000:	e00f      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4a10      	ldr	r2, [pc, #64]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800400e:	e00c      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3324      	adds	r3, #36	; 0x24
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f9b0 	bl	800437c <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004020:	e003      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
      break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403e:	4902      	ldr	r1, [pc, #8]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8004040:	4313      	orrs	r3, r2
 8004042:	654b      	str	r3, [r1, #84]	; 0x54
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004046:	bf00      	nop
 8004048:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	7dfb      	ldrb	r3, [r7, #23]
 800404e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d029      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800406a:	e00f      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b69      	ldr	r3, [pc, #420]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a68      	ldr	r2, [pc, #416]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004078:	e00b      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f8c9 	bl	8004218 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
      break;
 8004090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004092:	7dfb      	ldrb	r3, [r7, #23]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d109      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004098:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	495b      	ldr	r1, [pc, #364]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040aa:	e001      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3324      	adds	r3, #36	; 0x24
 80040c0:	2102      	movs	r1, #2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f95a 	bl	800437c <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d032      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e8:	d017      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ee:	d811      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f4:	d013      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80040f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fa:	d80b      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 8004100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004104:	d106      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004106:	4b43      	ldr	r3, [pc, #268]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	4a42      	ldr	r2, [pc, #264]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800410c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004110:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004112:	e007      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	75fb      	strb	r3, [r7, #23]
      break;
 8004118:	e004      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800411a:	bf00      	nop
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8004122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800412a:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	4936      	ldr	r1, [pc, #216]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800413a:	4313      	orrs	r3, r2
 800413c:	654b      	str	r3, [r1, #84]	; 0x54
 800413e:	e001      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004150:	4b30      	ldr	r3, [pc, #192]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800415c:	492d      	ldr	r1, [pc, #180]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800415e:	4313      	orrs	r3, r2
 8004160:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800416e:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	4926      	ldr	r1, [pc, #152]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800417c:	4313      	orrs	r3, r2
 800417e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800418c:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	491e      	ldr	r1, [pc, #120]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800419a:	4313      	orrs	r3, r2
 800419c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041aa:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041b4:	6113      	str	r3, [r2, #16]
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041c0:	4914      	ldr	r1, [pc, #80]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	da08      	bge.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	490e      	ldr	r1, [pc, #56]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004200:	7dbb      	ldrb	r3, [r7, #22]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400

08004218 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004226:	4b53      	ldr	r3, [pc, #332]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b03      	cmp	r3, #3
 8004230:	d101      	bne.n	8004236 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e099      	b.n	800436a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004236:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4e      	ldr	r2, [pc, #312]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800423c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fc fc5d 	bl	8000b00 <HAL_GetTick>
 8004246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004248:	e008      	b.n	800425c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800424a:	f7fc fc59 	bl	8000b00 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e086      	b.n	800436a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	031b      	lsls	r3, r3, #12
 8004276:	493f      	ldr	r1, [pc, #252]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	628b      	str	r3, [r1, #40]	; 0x28
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	3b01      	subs	r3, #1
 800428c:	025b      	lsls	r3, r3, #9
 800428e:	b29b      	uxth	r3, r3
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042ac:	4931      	ldr	r1, [pc, #196]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	492d      	ldr	r1, [pc, #180]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	f023 0220 	bic.w	r2, r3, #32
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	4928      	ldr	r1, [pc, #160]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	4a26      	ldr	r2, [pc, #152]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	f023 0310 	bic.w	r3, r3, #16
 80042e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80042e2:	4b24      	ldr	r3, [pc, #144]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <RCCEx_PLL2_Config+0x160>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	69d2      	ldr	r2, [r2, #28]
 80042ee:	00d2      	lsls	r2, r2, #3
 80042f0:	4920      	ldr	r1, [pc, #128]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 80042fc:	f043 0310 	orr.w	r3, r3, #16
 8004300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800430e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004314:	e00f      	b.n	8004336 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d106      	bne.n	800432a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004328:	e005      	b.n	8004336 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	4a11      	ldr	r2, [pc, #68]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 8004330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800433c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004342:	f7fc fbdd 	bl	8000b00 <HAL_GetTick>
 8004346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004348:	e008      	b.n	800435c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800434a:	f7fc fbd9 	bl	8000b00 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e006      	b.n	800436a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <RCCEx_PLL2_Config+0x15c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	58024400 	.word	0x58024400
 8004378:	ffff0007 	.word	0xffff0007

0800437c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800438a:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b03      	cmp	r3, #3
 8004394:	d101      	bne.n	800439a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e099      	b.n	80044ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800439a:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a4e      	ldr	r2, [pc, #312]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a6:	f7fc fbab 	bl	8000b00 <HAL_GetTick>
 80043aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043ac:	e008      	b.n	80043c0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80043ae:	f7fc fba7 	bl	8000b00 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e086      	b.n	80044ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043c0:	4b45      	ldr	r3, [pc, #276]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80043cc:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	051b      	lsls	r3, r3, #20
 80043da:	493f      	ldr	r1, [pc, #252]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	628b      	str	r3, [r1, #40]	; 0x28
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	025b      	lsls	r3, r3, #9
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	3b01      	subs	r3, #1
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004410:	4931      	ldr	r1, [pc, #196]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004412:	4313      	orrs	r3, r2
 8004414:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004416:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	492d      	ldr	r1, [pc, #180]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004424:	4313      	orrs	r3, r2
 8004426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4928      	ldr	r1, [pc, #160]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004436:	4313      	orrs	r3, r2
 8004438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004446:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <RCCEx_PLL3_Config+0x160>)
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	69d2      	ldr	r2, [r2, #28]
 8004452:	00d2      	lsls	r2, r2, #3
 8004454:	4920      	ldr	r1, [pc, #128]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800445a:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004478:	e00f      	b.n	800449a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d106      	bne.n	800448e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004480:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	4a14      	ldr	r2, [pc, #80]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800448a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800448c:	e005      	b.n	800449a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 8004494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 80044a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a6:	f7fc fb2b 	bl	8000b00 <HAL_GetTick>
 80044aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044ac:	e008      	b.n	80044c0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044ae:	f7fc fb27 	bl	8000b00 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e006      	b.n	80044ce <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <RCCEx_PLL3_Config+0x15c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	58024400 	.word	0x58024400
 80044dc:	ffff0007 	.word	0xffff0007

080044e0 <__errno>:
 80044e0:	4b01      	ldr	r3, [pc, #4]	; (80044e8 <__errno+0x8>)
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	24000014 	.word	0x24000014

080044ec <__libc_init_array>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4d0d      	ldr	r5, [pc, #52]	; (8004524 <__libc_init_array+0x38>)
 80044f0:	4c0d      	ldr	r4, [pc, #52]	; (8004528 <__libc_init_array+0x3c>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	2600      	movs	r6, #0
 80044f8:	42a6      	cmp	r6, r4
 80044fa:	d109      	bne.n	8004510 <__libc_init_array+0x24>
 80044fc:	4d0b      	ldr	r5, [pc, #44]	; (800452c <__libc_init_array+0x40>)
 80044fe:	4c0c      	ldr	r4, [pc, #48]	; (8004530 <__libc_init_array+0x44>)
 8004500:	f000 fc4e 	bl	8004da0 <_init>
 8004504:	1b64      	subs	r4, r4, r5
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	2600      	movs	r6, #0
 800450a:	42a6      	cmp	r6, r4
 800450c:	d105      	bne.n	800451a <__libc_init_array+0x2e>
 800450e:	bd70      	pop	{r4, r5, r6, pc}
 8004510:	f855 3b04 	ldr.w	r3, [r5], #4
 8004514:	4798      	blx	r3
 8004516:	3601      	adds	r6, #1
 8004518:	e7ee      	b.n	80044f8 <__libc_init_array+0xc>
 800451a:	f855 3b04 	ldr.w	r3, [r5], #4
 800451e:	4798      	blx	r3
 8004520:	3601      	adds	r6, #1
 8004522:	e7f2      	b.n	800450a <__libc_init_array+0x1e>
 8004524:	08004e5c 	.word	0x08004e5c
 8004528:	08004e5c 	.word	0x08004e5c
 800452c:	08004e5c 	.word	0x08004e5c
 8004530:	08004e60 	.word	0x08004e60

08004534 <memcpy>:
 8004534:	440a      	add	r2, r1
 8004536:	4291      	cmp	r1, r2
 8004538:	f100 33ff 	add.w	r3, r0, #4294967295
 800453c:	d100      	bne.n	8004540 <memcpy+0xc>
 800453e:	4770      	bx	lr
 8004540:	b510      	push	{r4, lr}
 8004542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004546:	f803 4f01 	strb.w	r4, [r3, #1]!
 800454a:	4291      	cmp	r1, r2
 800454c:	d1f9      	bne.n	8004542 <memcpy+0xe>
 800454e:	bd10      	pop	{r4, pc}

08004550 <memset>:
 8004550:	4402      	add	r2, r0
 8004552:	4603      	mov	r3, r0
 8004554:	4293      	cmp	r3, r2
 8004556:	d100      	bne.n	800455a <memset+0xa>
 8004558:	4770      	bx	lr
 800455a:	f803 1b01 	strb.w	r1, [r3], #1
 800455e:	e7f9      	b.n	8004554 <memset+0x4>

08004560 <siprintf>:
 8004560:	b40e      	push	{r1, r2, r3}
 8004562:	b500      	push	{lr}
 8004564:	b09c      	sub	sp, #112	; 0x70
 8004566:	ab1d      	add	r3, sp, #116	; 0x74
 8004568:	9002      	str	r0, [sp, #8]
 800456a:	9006      	str	r0, [sp, #24]
 800456c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004570:	4809      	ldr	r0, [pc, #36]	; (8004598 <siprintf+0x38>)
 8004572:	9107      	str	r1, [sp, #28]
 8004574:	9104      	str	r1, [sp, #16]
 8004576:	4909      	ldr	r1, [pc, #36]	; (800459c <siprintf+0x3c>)
 8004578:	f853 2b04 	ldr.w	r2, [r3], #4
 800457c:	9105      	str	r1, [sp, #20]
 800457e:	6800      	ldr	r0, [r0, #0]
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	a902      	add	r1, sp, #8
 8004584:	f000 f868 	bl	8004658 <_svfiprintf_r>
 8004588:	9b02      	ldr	r3, [sp, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	b01c      	add	sp, #112	; 0x70
 8004590:	f85d eb04 	ldr.w	lr, [sp], #4
 8004594:	b003      	add	sp, #12
 8004596:	4770      	bx	lr
 8004598:	24000014 	.word	0x24000014
 800459c:	ffff0208 	.word	0xffff0208

080045a0 <__ssputs_r>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	688e      	ldr	r6, [r1, #8]
 80045a6:	429e      	cmp	r6, r3
 80045a8:	4682      	mov	sl, r0
 80045aa:	460c      	mov	r4, r1
 80045ac:	4690      	mov	r8, r2
 80045ae:	461f      	mov	r7, r3
 80045b0:	d838      	bhi.n	8004624 <__ssputs_r+0x84>
 80045b2:	898a      	ldrh	r2, [r1, #12]
 80045b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045b8:	d032      	beq.n	8004620 <__ssputs_r+0x80>
 80045ba:	6825      	ldr	r5, [r4, #0]
 80045bc:	6909      	ldr	r1, [r1, #16]
 80045be:	eba5 0901 	sub.w	r9, r5, r1
 80045c2:	6965      	ldr	r5, [r4, #20]
 80045c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045cc:	3301      	adds	r3, #1
 80045ce:	444b      	add	r3, r9
 80045d0:	106d      	asrs	r5, r5, #1
 80045d2:	429d      	cmp	r5, r3
 80045d4:	bf38      	it	cc
 80045d6:	461d      	movcc	r5, r3
 80045d8:	0553      	lsls	r3, r2, #21
 80045da:	d531      	bpl.n	8004640 <__ssputs_r+0xa0>
 80045dc:	4629      	mov	r1, r5
 80045de:	f000 fb39 	bl	8004c54 <_malloc_r>
 80045e2:	4606      	mov	r6, r0
 80045e4:	b950      	cbnz	r0, 80045fc <__ssputs_r+0x5c>
 80045e6:	230c      	movs	r3, #12
 80045e8:	f8ca 3000 	str.w	r3, [sl]
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	464a      	mov	r2, r9
 8004600:	f7ff ff98 	bl	8004534 <memcpy>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800460a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460e:	81a3      	strh	r3, [r4, #12]
 8004610:	6126      	str	r6, [r4, #16]
 8004612:	6165      	str	r5, [r4, #20]
 8004614:	444e      	add	r6, r9
 8004616:	eba5 0509 	sub.w	r5, r5, r9
 800461a:	6026      	str	r6, [r4, #0]
 800461c:	60a5      	str	r5, [r4, #8]
 800461e:	463e      	mov	r6, r7
 8004620:	42be      	cmp	r6, r7
 8004622:	d900      	bls.n	8004626 <__ssputs_r+0x86>
 8004624:	463e      	mov	r6, r7
 8004626:	4632      	mov	r2, r6
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	4641      	mov	r1, r8
 800462c:	f000 faa8 	bl	8004b80 <memmove>
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	1b9b      	subs	r3, r3, r6
 8004636:	4432      	add	r2, r6
 8004638:	60a3      	str	r3, [r4, #8]
 800463a:	6022      	str	r2, [r4, #0]
 800463c:	2000      	movs	r0, #0
 800463e:	e7db      	b.n	80045f8 <__ssputs_r+0x58>
 8004640:	462a      	mov	r2, r5
 8004642:	f000 fb61 	bl	8004d08 <_realloc_r>
 8004646:	4606      	mov	r6, r0
 8004648:	2800      	cmp	r0, #0
 800464a:	d1e1      	bne.n	8004610 <__ssputs_r+0x70>
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	4650      	mov	r0, sl
 8004650:	f000 fab0 	bl	8004bb4 <_free_r>
 8004654:	e7c7      	b.n	80045e6 <__ssputs_r+0x46>
	...

08004658 <_svfiprintf_r>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	4698      	mov	r8, r3
 800465e:	898b      	ldrh	r3, [r1, #12]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	b09d      	sub	sp, #116	; 0x74
 8004664:	4607      	mov	r7, r0
 8004666:	460d      	mov	r5, r1
 8004668:	4614      	mov	r4, r2
 800466a:	d50e      	bpl.n	800468a <_svfiprintf_r+0x32>
 800466c:	690b      	ldr	r3, [r1, #16]
 800466e:	b963      	cbnz	r3, 800468a <_svfiprintf_r+0x32>
 8004670:	2140      	movs	r1, #64	; 0x40
 8004672:	f000 faef 	bl	8004c54 <_malloc_r>
 8004676:	6028      	str	r0, [r5, #0]
 8004678:	6128      	str	r0, [r5, #16]
 800467a:	b920      	cbnz	r0, 8004686 <_svfiprintf_r+0x2e>
 800467c:	230c      	movs	r3, #12
 800467e:	603b      	str	r3, [r7, #0]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	e0d1      	b.n	800482a <_svfiprintf_r+0x1d2>
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	616b      	str	r3, [r5, #20]
 800468a:	2300      	movs	r3, #0
 800468c:	9309      	str	r3, [sp, #36]	; 0x24
 800468e:	2320      	movs	r3, #32
 8004690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004694:	f8cd 800c 	str.w	r8, [sp, #12]
 8004698:	2330      	movs	r3, #48	; 0x30
 800469a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004844 <_svfiprintf_r+0x1ec>
 800469e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046a2:	f04f 0901 	mov.w	r9, #1
 80046a6:	4623      	mov	r3, r4
 80046a8:	469a      	mov	sl, r3
 80046aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ae:	b10a      	cbz	r2, 80046b4 <_svfiprintf_r+0x5c>
 80046b0:	2a25      	cmp	r2, #37	; 0x25
 80046b2:	d1f9      	bne.n	80046a8 <_svfiprintf_r+0x50>
 80046b4:	ebba 0b04 	subs.w	fp, sl, r4
 80046b8:	d00b      	beq.n	80046d2 <_svfiprintf_r+0x7a>
 80046ba:	465b      	mov	r3, fp
 80046bc:	4622      	mov	r2, r4
 80046be:	4629      	mov	r1, r5
 80046c0:	4638      	mov	r0, r7
 80046c2:	f7ff ff6d 	bl	80045a0 <__ssputs_r>
 80046c6:	3001      	adds	r0, #1
 80046c8:	f000 80aa 	beq.w	8004820 <_svfiprintf_r+0x1c8>
 80046cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ce:	445a      	add	r2, fp
 80046d0:	9209      	str	r2, [sp, #36]	; 0x24
 80046d2:	f89a 3000 	ldrb.w	r3, [sl]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80a2 	beq.w	8004820 <_svfiprintf_r+0x1c8>
 80046dc:	2300      	movs	r3, #0
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046e6:	f10a 0a01 	add.w	sl, sl, #1
 80046ea:	9304      	str	r3, [sp, #16]
 80046ec:	9307      	str	r3, [sp, #28]
 80046ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046f2:	931a      	str	r3, [sp, #104]	; 0x68
 80046f4:	4654      	mov	r4, sl
 80046f6:	2205      	movs	r2, #5
 80046f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046fc:	4851      	ldr	r0, [pc, #324]	; (8004844 <_svfiprintf_r+0x1ec>)
 80046fe:	f7fb fdf7 	bl	80002f0 <memchr>
 8004702:	9a04      	ldr	r2, [sp, #16]
 8004704:	b9d8      	cbnz	r0, 800473e <_svfiprintf_r+0xe6>
 8004706:	06d0      	lsls	r0, r2, #27
 8004708:	bf44      	itt	mi
 800470a:	2320      	movmi	r3, #32
 800470c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004710:	0711      	lsls	r1, r2, #28
 8004712:	bf44      	itt	mi
 8004714:	232b      	movmi	r3, #43	; 0x2b
 8004716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800471a:	f89a 3000 	ldrb.w	r3, [sl]
 800471e:	2b2a      	cmp	r3, #42	; 0x2a
 8004720:	d015      	beq.n	800474e <_svfiprintf_r+0xf6>
 8004722:	9a07      	ldr	r2, [sp, #28]
 8004724:	4654      	mov	r4, sl
 8004726:	2000      	movs	r0, #0
 8004728:	f04f 0c0a 	mov.w	ip, #10
 800472c:	4621      	mov	r1, r4
 800472e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004732:	3b30      	subs	r3, #48	; 0x30
 8004734:	2b09      	cmp	r3, #9
 8004736:	d94e      	bls.n	80047d6 <_svfiprintf_r+0x17e>
 8004738:	b1b0      	cbz	r0, 8004768 <_svfiprintf_r+0x110>
 800473a:	9207      	str	r2, [sp, #28]
 800473c:	e014      	b.n	8004768 <_svfiprintf_r+0x110>
 800473e:	eba0 0308 	sub.w	r3, r0, r8
 8004742:	fa09 f303 	lsl.w	r3, r9, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	9304      	str	r3, [sp, #16]
 800474a:	46a2      	mov	sl, r4
 800474c:	e7d2      	b.n	80046f4 <_svfiprintf_r+0x9c>
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	1d19      	adds	r1, r3, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	9103      	str	r1, [sp, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfbb      	ittet	lt
 800475a:	425b      	neglt	r3, r3
 800475c:	f042 0202 	orrlt.w	r2, r2, #2
 8004760:	9307      	strge	r3, [sp, #28]
 8004762:	9307      	strlt	r3, [sp, #28]
 8004764:	bfb8      	it	lt
 8004766:	9204      	strlt	r2, [sp, #16]
 8004768:	7823      	ldrb	r3, [r4, #0]
 800476a:	2b2e      	cmp	r3, #46	; 0x2e
 800476c:	d10c      	bne.n	8004788 <_svfiprintf_r+0x130>
 800476e:	7863      	ldrb	r3, [r4, #1]
 8004770:	2b2a      	cmp	r3, #42	; 0x2a
 8004772:	d135      	bne.n	80047e0 <_svfiprintf_r+0x188>
 8004774:	9b03      	ldr	r3, [sp, #12]
 8004776:	1d1a      	adds	r2, r3, #4
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	9203      	str	r2, [sp, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	bfb8      	it	lt
 8004780:	f04f 33ff 	movlt.w	r3, #4294967295
 8004784:	3402      	adds	r4, #2
 8004786:	9305      	str	r3, [sp, #20]
 8004788:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004854 <_svfiprintf_r+0x1fc>
 800478c:	7821      	ldrb	r1, [r4, #0]
 800478e:	2203      	movs	r2, #3
 8004790:	4650      	mov	r0, sl
 8004792:	f7fb fdad 	bl	80002f0 <memchr>
 8004796:	b140      	cbz	r0, 80047aa <_svfiprintf_r+0x152>
 8004798:	2340      	movs	r3, #64	; 0x40
 800479a:	eba0 000a 	sub.w	r0, r0, sl
 800479e:	fa03 f000 	lsl.w	r0, r3, r0
 80047a2:	9b04      	ldr	r3, [sp, #16]
 80047a4:	4303      	orrs	r3, r0
 80047a6:	3401      	adds	r4, #1
 80047a8:	9304      	str	r3, [sp, #16]
 80047aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ae:	4826      	ldr	r0, [pc, #152]	; (8004848 <_svfiprintf_r+0x1f0>)
 80047b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047b4:	2206      	movs	r2, #6
 80047b6:	f7fb fd9b 	bl	80002f0 <memchr>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d038      	beq.n	8004830 <_svfiprintf_r+0x1d8>
 80047be:	4b23      	ldr	r3, [pc, #140]	; (800484c <_svfiprintf_r+0x1f4>)
 80047c0:	bb1b      	cbnz	r3, 800480a <_svfiprintf_r+0x1b2>
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	3307      	adds	r3, #7
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	3308      	adds	r3, #8
 80047cc:	9303      	str	r3, [sp, #12]
 80047ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047d0:	4433      	add	r3, r6
 80047d2:	9309      	str	r3, [sp, #36]	; 0x24
 80047d4:	e767      	b.n	80046a6 <_svfiprintf_r+0x4e>
 80047d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80047da:	460c      	mov	r4, r1
 80047dc:	2001      	movs	r0, #1
 80047de:	e7a5      	b.n	800472c <_svfiprintf_r+0xd4>
 80047e0:	2300      	movs	r3, #0
 80047e2:	3401      	adds	r4, #1
 80047e4:	9305      	str	r3, [sp, #20]
 80047e6:	4619      	mov	r1, r3
 80047e8:	f04f 0c0a 	mov.w	ip, #10
 80047ec:	4620      	mov	r0, r4
 80047ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047f2:	3a30      	subs	r2, #48	; 0x30
 80047f4:	2a09      	cmp	r2, #9
 80047f6:	d903      	bls.n	8004800 <_svfiprintf_r+0x1a8>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0c5      	beq.n	8004788 <_svfiprintf_r+0x130>
 80047fc:	9105      	str	r1, [sp, #20]
 80047fe:	e7c3      	b.n	8004788 <_svfiprintf_r+0x130>
 8004800:	fb0c 2101 	mla	r1, ip, r1, r2
 8004804:	4604      	mov	r4, r0
 8004806:	2301      	movs	r3, #1
 8004808:	e7f0      	b.n	80047ec <_svfiprintf_r+0x194>
 800480a:	ab03      	add	r3, sp, #12
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	462a      	mov	r2, r5
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <_svfiprintf_r+0x1f8>)
 8004812:	a904      	add	r1, sp, #16
 8004814:	4638      	mov	r0, r7
 8004816:	f3af 8000 	nop.w
 800481a:	1c42      	adds	r2, r0, #1
 800481c:	4606      	mov	r6, r0
 800481e:	d1d6      	bne.n	80047ce <_svfiprintf_r+0x176>
 8004820:	89ab      	ldrh	r3, [r5, #12]
 8004822:	065b      	lsls	r3, r3, #25
 8004824:	f53f af2c 	bmi.w	8004680 <_svfiprintf_r+0x28>
 8004828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800482a:	b01d      	add	sp, #116	; 0x74
 800482c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004830:	ab03      	add	r3, sp, #12
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	462a      	mov	r2, r5
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <_svfiprintf_r+0x1f8>)
 8004838:	a904      	add	r1, sp, #16
 800483a:	4638      	mov	r0, r7
 800483c:	f000 f87a 	bl	8004934 <_printf_i>
 8004840:	e7eb      	b.n	800481a <_svfiprintf_r+0x1c2>
 8004842:	bf00      	nop
 8004844:	08004e28 	.word	0x08004e28
 8004848:	08004e32 	.word	0x08004e32
 800484c:	00000000 	.word	0x00000000
 8004850:	080045a1 	.word	0x080045a1
 8004854:	08004e2e 	.word	0x08004e2e

08004858 <_printf_common>:
 8004858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800485c:	4616      	mov	r6, r2
 800485e:	4699      	mov	r9, r3
 8004860:	688a      	ldr	r2, [r1, #8]
 8004862:	690b      	ldr	r3, [r1, #16]
 8004864:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004868:	4293      	cmp	r3, r2
 800486a:	bfb8      	it	lt
 800486c:	4613      	movlt	r3, r2
 800486e:	6033      	str	r3, [r6, #0]
 8004870:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004874:	4607      	mov	r7, r0
 8004876:	460c      	mov	r4, r1
 8004878:	b10a      	cbz	r2, 800487e <_printf_common+0x26>
 800487a:	3301      	adds	r3, #1
 800487c:	6033      	str	r3, [r6, #0]
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	0699      	lsls	r1, r3, #26
 8004882:	bf42      	ittt	mi
 8004884:	6833      	ldrmi	r3, [r6, #0]
 8004886:	3302      	addmi	r3, #2
 8004888:	6033      	strmi	r3, [r6, #0]
 800488a:	6825      	ldr	r5, [r4, #0]
 800488c:	f015 0506 	ands.w	r5, r5, #6
 8004890:	d106      	bne.n	80048a0 <_printf_common+0x48>
 8004892:	f104 0a19 	add.w	sl, r4, #25
 8004896:	68e3      	ldr	r3, [r4, #12]
 8004898:	6832      	ldr	r2, [r6, #0]
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	42ab      	cmp	r3, r5
 800489e:	dc26      	bgt.n	80048ee <_printf_common+0x96>
 80048a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048a4:	1e13      	subs	r3, r2, #0
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	bf18      	it	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	0692      	lsls	r2, r2, #26
 80048ae:	d42b      	bmi.n	8004908 <_printf_common+0xb0>
 80048b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048b4:	4649      	mov	r1, r9
 80048b6:	4638      	mov	r0, r7
 80048b8:	47c0      	blx	r8
 80048ba:	3001      	adds	r0, #1
 80048bc:	d01e      	beq.n	80048fc <_printf_common+0xa4>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	68e5      	ldr	r5, [r4, #12]
 80048c2:	6832      	ldr	r2, [r6, #0]
 80048c4:	f003 0306 	and.w	r3, r3, #6
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	bf08      	it	eq
 80048cc:	1aad      	subeq	r5, r5, r2
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	6922      	ldr	r2, [r4, #16]
 80048d2:	bf0c      	ite	eq
 80048d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d8:	2500      	movne	r5, #0
 80048da:	4293      	cmp	r3, r2
 80048dc:	bfc4      	itt	gt
 80048de:	1a9b      	subgt	r3, r3, r2
 80048e0:	18ed      	addgt	r5, r5, r3
 80048e2:	2600      	movs	r6, #0
 80048e4:	341a      	adds	r4, #26
 80048e6:	42b5      	cmp	r5, r6
 80048e8:	d11a      	bne.n	8004920 <_printf_common+0xc8>
 80048ea:	2000      	movs	r0, #0
 80048ec:	e008      	b.n	8004900 <_printf_common+0xa8>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4652      	mov	r2, sl
 80048f2:	4649      	mov	r1, r9
 80048f4:	4638      	mov	r0, r7
 80048f6:	47c0      	blx	r8
 80048f8:	3001      	adds	r0, #1
 80048fa:	d103      	bne.n	8004904 <_printf_common+0xac>
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004904:	3501      	adds	r5, #1
 8004906:	e7c6      	b.n	8004896 <_printf_common+0x3e>
 8004908:	18e1      	adds	r1, r4, r3
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	2030      	movs	r0, #48	; 0x30
 800490e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004912:	4422      	add	r2, r4
 8004914:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004918:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800491c:	3302      	adds	r3, #2
 800491e:	e7c7      	b.n	80048b0 <_printf_common+0x58>
 8004920:	2301      	movs	r3, #1
 8004922:	4622      	mov	r2, r4
 8004924:	4649      	mov	r1, r9
 8004926:	4638      	mov	r0, r7
 8004928:	47c0      	blx	r8
 800492a:	3001      	adds	r0, #1
 800492c:	d0e6      	beq.n	80048fc <_printf_common+0xa4>
 800492e:	3601      	adds	r6, #1
 8004930:	e7d9      	b.n	80048e6 <_printf_common+0x8e>
	...

08004934 <_printf_i>:
 8004934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	460c      	mov	r4, r1
 800493a:	4691      	mov	r9, r2
 800493c:	7e27      	ldrb	r7, [r4, #24]
 800493e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004940:	2f78      	cmp	r7, #120	; 0x78
 8004942:	4680      	mov	r8, r0
 8004944:	469a      	mov	sl, r3
 8004946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800494a:	d807      	bhi.n	800495c <_printf_i+0x28>
 800494c:	2f62      	cmp	r7, #98	; 0x62
 800494e:	d80a      	bhi.n	8004966 <_printf_i+0x32>
 8004950:	2f00      	cmp	r7, #0
 8004952:	f000 80d8 	beq.w	8004b06 <_printf_i+0x1d2>
 8004956:	2f58      	cmp	r7, #88	; 0x58
 8004958:	f000 80a3 	beq.w	8004aa2 <_printf_i+0x16e>
 800495c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004960:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004964:	e03a      	b.n	80049dc <_printf_i+0xa8>
 8004966:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800496a:	2b15      	cmp	r3, #21
 800496c:	d8f6      	bhi.n	800495c <_printf_i+0x28>
 800496e:	a001      	add	r0, pc, #4	; (adr r0, 8004974 <_printf_i+0x40>)
 8004970:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049e1 	.word	0x080049e1
 800497c:	0800495d 	.word	0x0800495d
 8004980:	0800495d 	.word	0x0800495d
 8004984:	0800495d 	.word	0x0800495d
 8004988:	0800495d 	.word	0x0800495d
 800498c:	080049e1 	.word	0x080049e1
 8004990:	0800495d 	.word	0x0800495d
 8004994:	0800495d 	.word	0x0800495d
 8004998:	0800495d 	.word	0x0800495d
 800499c:	0800495d 	.word	0x0800495d
 80049a0:	08004aed 	.word	0x08004aed
 80049a4:	08004a11 	.word	0x08004a11
 80049a8:	08004acf 	.word	0x08004acf
 80049ac:	0800495d 	.word	0x0800495d
 80049b0:	0800495d 	.word	0x0800495d
 80049b4:	08004b0f 	.word	0x08004b0f
 80049b8:	0800495d 	.word	0x0800495d
 80049bc:	08004a11 	.word	0x08004a11
 80049c0:	0800495d 	.word	0x0800495d
 80049c4:	0800495d 	.word	0x0800495d
 80049c8:	08004ad7 	.word	0x08004ad7
 80049cc:	680b      	ldr	r3, [r1, #0]
 80049ce:	1d1a      	adds	r2, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	600a      	str	r2, [r1, #0]
 80049d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049dc:	2301      	movs	r3, #1
 80049de:	e0a3      	b.n	8004b28 <_printf_i+0x1f4>
 80049e0:	6825      	ldr	r5, [r4, #0]
 80049e2:	6808      	ldr	r0, [r1, #0]
 80049e4:	062e      	lsls	r6, r5, #24
 80049e6:	f100 0304 	add.w	r3, r0, #4
 80049ea:	d50a      	bpl.n	8004a02 <_printf_i+0xce>
 80049ec:	6805      	ldr	r5, [r0, #0]
 80049ee:	600b      	str	r3, [r1, #0]
 80049f0:	2d00      	cmp	r5, #0
 80049f2:	da03      	bge.n	80049fc <_printf_i+0xc8>
 80049f4:	232d      	movs	r3, #45	; 0x2d
 80049f6:	426d      	negs	r5, r5
 80049f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fc:	485e      	ldr	r0, [pc, #376]	; (8004b78 <_printf_i+0x244>)
 80049fe:	230a      	movs	r3, #10
 8004a00:	e019      	b.n	8004a36 <_printf_i+0x102>
 8004a02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a06:	6805      	ldr	r5, [r0, #0]
 8004a08:	600b      	str	r3, [r1, #0]
 8004a0a:	bf18      	it	ne
 8004a0c:	b22d      	sxthne	r5, r5
 8004a0e:	e7ef      	b.n	80049f0 <_printf_i+0xbc>
 8004a10:	680b      	ldr	r3, [r1, #0]
 8004a12:	6825      	ldr	r5, [r4, #0]
 8004a14:	1d18      	adds	r0, r3, #4
 8004a16:	6008      	str	r0, [r1, #0]
 8004a18:	0628      	lsls	r0, r5, #24
 8004a1a:	d501      	bpl.n	8004a20 <_printf_i+0xec>
 8004a1c:	681d      	ldr	r5, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <_printf_i+0xf2>
 8004a20:	0669      	lsls	r1, r5, #25
 8004a22:	d5fb      	bpl.n	8004a1c <_printf_i+0xe8>
 8004a24:	881d      	ldrh	r5, [r3, #0]
 8004a26:	4854      	ldr	r0, [pc, #336]	; (8004b78 <_printf_i+0x244>)
 8004a28:	2f6f      	cmp	r7, #111	; 0x6f
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2308      	moveq	r3, #8
 8004a2e:	230a      	movne	r3, #10
 8004a30:	2100      	movs	r1, #0
 8004a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a36:	6866      	ldr	r6, [r4, #4]
 8004a38:	60a6      	str	r6, [r4, #8]
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	bfa2      	ittt	ge
 8004a3e:	6821      	ldrge	r1, [r4, #0]
 8004a40:	f021 0104 	bicge.w	r1, r1, #4
 8004a44:	6021      	strge	r1, [r4, #0]
 8004a46:	b90d      	cbnz	r5, 8004a4c <_printf_i+0x118>
 8004a48:	2e00      	cmp	r6, #0
 8004a4a:	d04d      	beq.n	8004ae8 <_printf_i+0x1b4>
 8004a4c:	4616      	mov	r6, r2
 8004a4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a52:	fb03 5711 	mls	r7, r3, r1, r5
 8004a56:	5dc7      	ldrb	r7, [r0, r7]
 8004a58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a5c:	462f      	mov	r7, r5
 8004a5e:	42bb      	cmp	r3, r7
 8004a60:	460d      	mov	r5, r1
 8004a62:	d9f4      	bls.n	8004a4e <_printf_i+0x11a>
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d10b      	bne.n	8004a80 <_printf_i+0x14c>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	07df      	lsls	r7, r3, #31
 8004a6c:	d508      	bpl.n	8004a80 <_printf_i+0x14c>
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	6861      	ldr	r1, [r4, #4]
 8004a72:	4299      	cmp	r1, r3
 8004a74:	bfde      	ittt	le
 8004a76:	2330      	movle	r3, #48	; 0x30
 8004a78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a80:	1b92      	subs	r2, r2, r6
 8004a82:	6122      	str	r2, [r4, #16]
 8004a84:	f8cd a000 	str.w	sl, [sp]
 8004a88:	464b      	mov	r3, r9
 8004a8a:	aa03      	add	r2, sp, #12
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4640      	mov	r0, r8
 8004a90:	f7ff fee2 	bl	8004858 <_printf_common>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d14c      	bne.n	8004b32 <_printf_i+0x1fe>
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	b004      	add	sp, #16
 8004a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aa2:	4835      	ldr	r0, [pc, #212]	; (8004b78 <_printf_i+0x244>)
 8004aa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	680e      	ldr	r6, [r1, #0]
 8004aac:	061f      	lsls	r7, r3, #24
 8004aae:	f856 5b04 	ldr.w	r5, [r6], #4
 8004ab2:	600e      	str	r6, [r1, #0]
 8004ab4:	d514      	bpl.n	8004ae0 <_printf_i+0x1ac>
 8004ab6:	07d9      	lsls	r1, r3, #31
 8004ab8:	bf44      	itt	mi
 8004aba:	f043 0320 	orrmi.w	r3, r3, #32
 8004abe:	6023      	strmi	r3, [r4, #0]
 8004ac0:	b91d      	cbnz	r5, 8004aca <_printf_i+0x196>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f023 0320 	bic.w	r3, r3, #32
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	2310      	movs	r3, #16
 8004acc:	e7b0      	b.n	8004a30 <_printf_i+0xfc>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	f043 0320 	orr.w	r3, r3, #32
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	2378      	movs	r3, #120	; 0x78
 8004ad8:	4828      	ldr	r0, [pc, #160]	; (8004b7c <_printf_i+0x248>)
 8004ada:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ade:	e7e3      	b.n	8004aa8 <_printf_i+0x174>
 8004ae0:	065e      	lsls	r6, r3, #25
 8004ae2:	bf48      	it	mi
 8004ae4:	b2ad      	uxthmi	r5, r5
 8004ae6:	e7e6      	b.n	8004ab6 <_printf_i+0x182>
 8004ae8:	4616      	mov	r6, r2
 8004aea:	e7bb      	b.n	8004a64 <_printf_i+0x130>
 8004aec:	680b      	ldr	r3, [r1, #0]
 8004aee:	6826      	ldr	r6, [r4, #0]
 8004af0:	6960      	ldr	r0, [r4, #20]
 8004af2:	1d1d      	adds	r5, r3, #4
 8004af4:	600d      	str	r5, [r1, #0]
 8004af6:	0635      	lsls	r5, r6, #24
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0x1cc>
 8004afc:	6018      	str	r0, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0x1d2>
 8004b00:	0671      	lsls	r1, r6, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0x1c8>
 8004b04:	8018      	strh	r0, [r3, #0]
 8004b06:	2300      	movs	r3, #0
 8004b08:	6123      	str	r3, [r4, #16]
 8004b0a:	4616      	mov	r6, r2
 8004b0c:	e7ba      	b.n	8004a84 <_printf_i+0x150>
 8004b0e:	680b      	ldr	r3, [r1, #0]
 8004b10:	1d1a      	adds	r2, r3, #4
 8004b12:	600a      	str	r2, [r1, #0]
 8004b14:	681e      	ldr	r6, [r3, #0]
 8004b16:	6862      	ldr	r2, [r4, #4]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f7fb fbe8 	bl	80002f0 <memchr>
 8004b20:	b108      	cbz	r0, 8004b26 <_printf_i+0x1f2>
 8004b22:	1b80      	subs	r0, r0, r6
 8004b24:	6060      	str	r0, [r4, #4]
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	6123      	str	r3, [r4, #16]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b30:	e7a8      	b.n	8004a84 <_printf_i+0x150>
 8004b32:	6923      	ldr	r3, [r4, #16]
 8004b34:	4632      	mov	r2, r6
 8004b36:	4649      	mov	r1, r9
 8004b38:	4640      	mov	r0, r8
 8004b3a:	47d0      	blx	sl
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d0ab      	beq.n	8004a98 <_printf_i+0x164>
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	079b      	lsls	r3, r3, #30
 8004b44:	d413      	bmi.n	8004b6e <_printf_i+0x23a>
 8004b46:	68e0      	ldr	r0, [r4, #12]
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	4298      	cmp	r0, r3
 8004b4c:	bfb8      	it	lt
 8004b4e:	4618      	movlt	r0, r3
 8004b50:	e7a4      	b.n	8004a9c <_printf_i+0x168>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4632      	mov	r2, r6
 8004b56:	4649      	mov	r1, r9
 8004b58:	4640      	mov	r0, r8
 8004b5a:	47d0      	blx	sl
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	d09b      	beq.n	8004a98 <_printf_i+0x164>
 8004b60:	3501      	adds	r5, #1
 8004b62:	68e3      	ldr	r3, [r4, #12]
 8004b64:	9903      	ldr	r1, [sp, #12]
 8004b66:	1a5b      	subs	r3, r3, r1
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dcf2      	bgt.n	8004b52 <_printf_i+0x21e>
 8004b6c:	e7eb      	b.n	8004b46 <_printf_i+0x212>
 8004b6e:	2500      	movs	r5, #0
 8004b70:	f104 0619 	add.w	r6, r4, #25
 8004b74:	e7f5      	b.n	8004b62 <_printf_i+0x22e>
 8004b76:	bf00      	nop
 8004b78:	08004e39 	.word	0x08004e39
 8004b7c:	08004e4a 	.word	0x08004e4a

08004b80 <memmove>:
 8004b80:	4288      	cmp	r0, r1
 8004b82:	b510      	push	{r4, lr}
 8004b84:	eb01 0402 	add.w	r4, r1, r2
 8004b88:	d902      	bls.n	8004b90 <memmove+0x10>
 8004b8a:	4284      	cmp	r4, r0
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	d807      	bhi.n	8004ba0 <memmove+0x20>
 8004b90:	1e43      	subs	r3, r0, #1
 8004b92:	42a1      	cmp	r1, r4
 8004b94:	d008      	beq.n	8004ba8 <memmove+0x28>
 8004b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b9e:	e7f8      	b.n	8004b92 <memmove+0x12>
 8004ba0:	4402      	add	r2, r0
 8004ba2:	4601      	mov	r1, r0
 8004ba4:	428a      	cmp	r2, r1
 8004ba6:	d100      	bne.n	8004baa <memmove+0x2a>
 8004ba8:	bd10      	pop	{r4, pc}
 8004baa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bb2:	e7f7      	b.n	8004ba4 <memmove+0x24>

08004bb4 <_free_r>:
 8004bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb6:	2900      	cmp	r1, #0
 8004bb8:	d048      	beq.n	8004c4c <_free_r+0x98>
 8004bba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bbe:	9001      	str	r0, [sp, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bc6:	bfb8      	it	lt
 8004bc8:	18e4      	addlt	r4, r4, r3
 8004bca:	f000 f8d3 	bl	8004d74 <__malloc_lock>
 8004bce:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <_free_r+0x9c>)
 8004bd0:	9801      	ldr	r0, [sp, #4]
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	4615      	mov	r5, r2
 8004bd6:	b933      	cbnz	r3, 8004be6 <_free_r+0x32>
 8004bd8:	6063      	str	r3, [r4, #4]
 8004bda:	6014      	str	r4, [r2, #0]
 8004bdc:	b003      	add	sp, #12
 8004bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004be2:	f000 b8cd 	b.w	8004d80 <__malloc_unlock>
 8004be6:	42a3      	cmp	r3, r4
 8004be8:	d90b      	bls.n	8004c02 <_free_r+0x4e>
 8004bea:	6821      	ldr	r1, [r4, #0]
 8004bec:	1862      	adds	r2, r4, r1
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	bf04      	itt	eq
 8004bf2:	681a      	ldreq	r2, [r3, #0]
 8004bf4:	685b      	ldreq	r3, [r3, #4]
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	bf04      	itt	eq
 8004bfa:	1852      	addeq	r2, r2, r1
 8004bfc:	6022      	streq	r2, [r4, #0]
 8004bfe:	602c      	str	r4, [r5, #0]
 8004c00:	e7ec      	b.n	8004bdc <_free_r+0x28>
 8004c02:	461a      	mov	r2, r3
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b10b      	cbz	r3, 8004c0c <_free_r+0x58>
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	d9fa      	bls.n	8004c02 <_free_r+0x4e>
 8004c0c:	6811      	ldr	r1, [r2, #0]
 8004c0e:	1855      	adds	r5, r2, r1
 8004c10:	42a5      	cmp	r5, r4
 8004c12:	d10b      	bne.n	8004c2c <_free_r+0x78>
 8004c14:	6824      	ldr	r4, [r4, #0]
 8004c16:	4421      	add	r1, r4
 8004c18:	1854      	adds	r4, r2, r1
 8004c1a:	42a3      	cmp	r3, r4
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	d1dd      	bne.n	8004bdc <_free_r+0x28>
 8004c20:	681c      	ldr	r4, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	6053      	str	r3, [r2, #4]
 8004c26:	4421      	add	r1, r4
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	e7d7      	b.n	8004bdc <_free_r+0x28>
 8004c2c:	d902      	bls.n	8004c34 <_free_r+0x80>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	6003      	str	r3, [r0, #0]
 8004c32:	e7d3      	b.n	8004bdc <_free_r+0x28>
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	1961      	adds	r1, r4, r5
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	bf04      	itt	eq
 8004c3c:	6819      	ldreq	r1, [r3, #0]
 8004c3e:	685b      	ldreq	r3, [r3, #4]
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	bf04      	itt	eq
 8004c44:	1949      	addeq	r1, r1, r5
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	6054      	str	r4, [r2, #4]
 8004c4a:	e7c7      	b.n	8004bdc <_free_r+0x28>
 8004c4c:	b003      	add	sp, #12
 8004c4e:	bd30      	pop	{r4, r5, pc}
 8004c50:	24000098 	.word	0x24000098

08004c54 <_malloc_r>:
 8004c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c56:	1ccd      	adds	r5, r1, #3
 8004c58:	f025 0503 	bic.w	r5, r5, #3
 8004c5c:	3508      	adds	r5, #8
 8004c5e:	2d0c      	cmp	r5, #12
 8004c60:	bf38      	it	cc
 8004c62:	250c      	movcc	r5, #12
 8004c64:	2d00      	cmp	r5, #0
 8004c66:	4606      	mov	r6, r0
 8004c68:	db01      	blt.n	8004c6e <_malloc_r+0x1a>
 8004c6a:	42a9      	cmp	r1, r5
 8004c6c:	d903      	bls.n	8004c76 <_malloc_r+0x22>
 8004c6e:	230c      	movs	r3, #12
 8004c70:	6033      	str	r3, [r6, #0]
 8004c72:	2000      	movs	r0, #0
 8004c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c76:	f000 f87d 	bl	8004d74 <__malloc_lock>
 8004c7a:	4921      	ldr	r1, [pc, #132]	; (8004d00 <_malloc_r+0xac>)
 8004c7c:	680a      	ldr	r2, [r1, #0]
 8004c7e:	4614      	mov	r4, r2
 8004c80:	b99c      	cbnz	r4, 8004caa <_malloc_r+0x56>
 8004c82:	4f20      	ldr	r7, [pc, #128]	; (8004d04 <_malloc_r+0xb0>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	b923      	cbnz	r3, 8004c92 <_malloc_r+0x3e>
 8004c88:	4621      	mov	r1, r4
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 f862 	bl	8004d54 <_sbrk_r>
 8004c90:	6038      	str	r0, [r7, #0]
 8004c92:	4629      	mov	r1, r5
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f85d 	bl	8004d54 <_sbrk_r>
 8004c9a:	1c43      	adds	r3, r0, #1
 8004c9c:	d123      	bne.n	8004ce6 <_malloc_r+0x92>
 8004c9e:	230c      	movs	r3, #12
 8004ca0:	6033      	str	r3, [r6, #0]
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f000 f86c 	bl	8004d80 <__malloc_unlock>
 8004ca8:	e7e3      	b.n	8004c72 <_malloc_r+0x1e>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	1b5b      	subs	r3, r3, r5
 8004cae:	d417      	bmi.n	8004ce0 <_malloc_r+0x8c>
 8004cb0:	2b0b      	cmp	r3, #11
 8004cb2:	d903      	bls.n	8004cbc <_malloc_r+0x68>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	441c      	add	r4, r3
 8004cb8:	6025      	str	r5, [r4, #0]
 8004cba:	e004      	b.n	8004cc6 <_malloc_r+0x72>
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	42a2      	cmp	r2, r4
 8004cc0:	bf0c      	ite	eq
 8004cc2:	600b      	streq	r3, [r1, #0]
 8004cc4:	6053      	strne	r3, [r2, #4]
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f000 f85a 	bl	8004d80 <__malloc_unlock>
 8004ccc:	f104 000b 	add.w	r0, r4, #11
 8004cd0:	1d23      	adds	r3, r4, #4
 8004cd2:	f020 0007 	bic.w	r0, r0, #7
 8004cd6:	1ac2      	subs	r2, r0, r3
 8004cd8:	d0cc      	beq.n	8004c74 <_malloc_r+0x20>
 8004cda:	1a1b      	subs	r3, r3, r0
 8004cdc:	50a3      	str	r3, [r4, r2]
 8004cde:	e7c9      	b.n	8004c74 <_malloc_r+0x20>
 8004ce0:	4622      	mov	r2, r4
 8004ce2:	6864      	ldr	r4, [r4, #4]
 8004ce4:	e7cc      	b.n	8004c80 <_malloc_r+0x2c>
 8004ce6:	1cc4      	adds	r4, r0, #3
 8004ce8:	f024 0403 	bic.w	r4, r4, #3
 8004cec:	42a0      	cmp	r0, r4
 8004cee:	d0e3      	beq.n	8004cb8 <_malloc_r+0x64>
 8004cf0:	1a21      	subs	r1, r4, r0
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 f82e 	bl	8004d54 <_sbrk_r>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d1dd      	bne.n	8004cb8 <_malloc_r+0x64>
 8004cfc:	e7cf      	b.n	8004c9e <_malloc_r+0x4a>
 8004cfe:	bf00      	nop
 8004d00:	24000098 	.word	0x24000098
 8004d04:	2400009c 	.word	0x2400009c

08004d08 <_realloc_r>:
 8004d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0a:	4607      	mov	r7, r0
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	460e      	mov	r6, r1
 8004d10:	b921      	cbnz	r1, 8004d1c <_realloc_r+0x14>
 8004d12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004d16:	4611      	mov	r1, r2
 8004d18:	f7ff bf9c 	b.w	8004c54 <_malloc_r>
 8004d1c:	b922      	cbnz	r2, 8004d28 <_realloc_r+0x20>
 8004d1e:	f7ff ff49 	bl	8004bb4 <_free_r>
 8004d22:	4625      	mov	r5, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d28:	f000 f830 	bl	8004d8c <_malloc_usable_size_r>
 8004d2c:	42a0      	cmp	r0, r4
 8004d2e:	d20f      	bcs.n	8004d50 <_realloc_r+0x48>
 8004d30:	4621      	mov	r1, r4
 8004d32:	4638      	mov	r0, r7
 8004d34:	f7ff ff8e 	bl	8004c54 <_malloc_r>
 8004d38:	4605      	mov	r5, r0
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d0f2      	beq.n	8004d24 <_realloc_r+0x1c>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4622      	mov	r2, r4
 8004d42:	f7ff fbf7 	bl	8004534 <memcpy>
 8004d46:	4631      	mov	r1, r6
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f7ff ff33 	bl	8004bb4 <_free_r>
 8004d4e:	e7e9      	b.n	8004d24 <_realloc_r+0x1c>
 8004d50:	4635      	mov	r5, r6
 8004d52:	e7e7      	b.n	8004d24 <_realloc_r+0x1c>

08004d54 <_sbrk_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4d06      	ldr	r5, [pc, #24]	; (8004d70 <_sbrk_r+0x1c>)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	4608      	mov	r0, r1
 8004d5e:	602b      	str	r3, [r5, #0]
 8004d60:	f7fb fd70 	bl	8000844 <_sbrk>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	d102      	bne.n	8004d6e <_sbrk_r+0x1a>
 8004d68:	682b      	ldr	r3, [r5, #0]
 8004d6a:	b103      	cbz	r3, 8004d6e <_sbrk_r+0x1a>
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	bd38      	pop	{r3, r4, r5, pc}
 8004d70:	240001d0 	.word	0x240001d0

08004d74 <__malloc_lock>:
 8004d74:	4801      	ldr	r0, [pc, #4]	; (8004d7c <__malloc_lock+0x8>)
 8004d76:	f000 b811 	b.w	8004d9c <__retarget_lock_acquire_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	240001d8 	.word	0x240001d8

08004d80 <__malloc_unlock>:
 8004d80:	4801      	ldr	r0, [pc, #4]	; (8004d88 <__malloc_unlock+0x8>)
 8004d82:	f000 b80c 	b.w	8004d9e <__retarget_lock_release_recursive>
 8004d86:	bf00      	nop
 8004d88:	240001d8 	.word	0x240001d8

08004d8c <_malloc_usable_size_r>:
 8004d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d90:	1f18      	subs	r0, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfbc      	itt	lt
 8004d96:	580b      	ldrlt	r3, [r1, r0]
 8004d98:	18c0      	addlt	r0, r0, r3
 8004d9a:	4770      	bx	lr

08004d9c <__retarget_lock_acquire_recursive>:
 8004d9c:	4770      	bx	lr

08004d9e <__retarget_lock_release_recursive>:
 8004d9e:	4770      	bx	lr

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
